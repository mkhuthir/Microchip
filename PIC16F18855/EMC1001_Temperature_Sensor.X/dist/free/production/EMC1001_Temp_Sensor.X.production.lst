

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Apr 29 03:11:47 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	swtext1,local,class=CONST,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 1.41
    69                           ; Generated 25/01/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC16F18855 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  001C                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  008C                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  008E                     	;# 
   135  008F                     	;# 
   136  0090                     	;# 
   137  0090                     	;# 
   138  0091                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0097                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009A                     	;# 
   147  009B                     	;# 
   148  009C                     	;# 
   149  009D                     	;# 
   150  009E                     	;# 
   151  010C                     	;# 
   152  010D                     	;# 
   153  010E                     	;# 
   154  010E                     	;# 
   155  010F                     	;# 
   156  0110                     	;# 
   157  0110                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0114                     	;# 
   164  0115                     	;# 
   165  0116                     	;# 
   166  0116                     	;# 
   167  0117                     	;# 
   168  0119                     	;# 
   169  0119                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011A                     	;# 
   173  011A                     	;# 
   174  011B                     	;# 
   175  011B                     	;# 
   176  011B                     	;# 
   177  011B                     	;# 
   178  011B                     	;# 
   179  011C                     	;# 
   180  011C                     	;# 
   181  011C                     	;# 
   182  011D                     	;# 
   183  011D                     	;# 
   184  011D                     	;# 
   185  011E                     	;# 
   186  011E                     	;# 
   187  011E                     	;# 
   188  011F                     	;# 
   189  011F                     	;# 
   190  011F                     	;# 
   191  011F                     	;# 
   192  011F                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195  018E                     	;# 
   196  018F                     	;# 
   197  0190                     	;# 
   198  0191                     	;# 
   199  0192                     	;# 
   200  0196                     	;# 
   201  0197                     	;# 
   202  0198                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019B                     	;# 
   206  019C                     	;# 
   207  020C                     	;# 
   208  020C                     	;# 
   209  020D                     	;# 
   210  020E                     	;# 
   211  020F                     	;# 
   212  020F                     	;# 
   213  0210                     	;# 
   214  0210                     	;# 
   215  0211                     	;# 
   216  0211                     	;# 
   217  0212                     	;# 
   218  0212                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0218                     	;# 
   228  0218                     	;# 
   229  0219                     	;# 
   230  021A                     	;# 
   231  021B                     	;# 
   232  021B                     	;# 
   233  021C                     	;# 
   234  021C                     	;# 
   235  021D                     	;# 
   236  021D                     	;# 
   237  021E                     	;# 
   238  021F                     	;# 
   239  028C                     	;# 
   240  028C                     	;# 
   241  028D                     	;# 
   242  028D                     	;# 
   243  028E                     	;# 
   244  028F                     	;# 
   245  0290                     	;# 
   246  0290                     	;# 
   247  0291                     	;# 
   248  0292                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0293                     	;# 
   252  0294                     	;# 
   253  0295                     	;# 
   254  0296                     	;# 
   255  0296                     	;# 
   256  0297                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  029B                     	;# 
   263  029C                     	;# 
   264  029C                     	;# 
   265  029D                     	;# 
   266  030C                     	;# 
   267  030C                     	;# 
   268  030D                     	;# 
   269  030E                     	;# 
   270  030F                     	;# 
   271  0310                     	;# 
   272  0310                     	;# 
   273  0311                     	;# 
   274  0312                     	;# 
   275  0313                     	;# 
   276  0314                     	;# 
   277  0314                     	;# 
   278  0315                     	;# 
   279  0316                     	;# 
   280  0317                     	;# 
   281  0318                     	;# 
   282  0318                     	;# 
   283  0319                     	;# 
   284  031A                     	;# 
   285  031B                     	;# 
   286  031C                     	;# 
   287  031C                     	;# 
   288  031D                     	;# 
   289  031E                     	;# 
   290  031F                     	;# 
   291  038C                     	;# 
   292  038D                     	;# 
   293  038E                     	;# 
   294  0390                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  040C                     	;# 
   298  040D                     	;# 
   299  040E                     	;# 
   300  040F                     	;# 
   301  0410                     	;# 
   302  0411                     	;# 
   303  0416                     	;# 
   304  0416                     	;# 
   305  0417                     	;# 
   306  0418                     	;# 
   307  0418                     	;# 
   308  0419                     	;# 
   309  041A                     	;# 
   310  041A                     	;# 
   311  041B                     	;# 
   312  041C                     	;# 
   313  041C                     	;# 
   314  041D                     	;# 
   315  041E                     	;# 
   316  041F                     	;# 
   317  048C                     	;# 
   318  048C                     	;# 
   319  048D                     	;# 
   320  048E                     	;# 
   321  048F                     	;# 
   322  048F                     	;# 
   323  0490                     	;# 
   324  0491                     	;# 
   325  0492                     	;# 
   326  0492                     	;# 
   327  0493                     	;# 
   328  0494                     	;# 
   329  0495                     	;# 
   330  0495                     	;# 
   331  0496                     	;# 
   332  0497                     	;# 
   333  0498                     	;# 
   334  0499                     	;# 
   335  049A                     	;# 
   336  049B                     	;# 
   337  049C                     	;# 
   338  049D                     	;# 
   339  050C                     	;# 
   340  050C                     	;# 
   341  050D                     	;# 
   342  050E                     	;# 
   343  050F                     	;# 
   344  050F                     	;# 
   345  0510                     	;# 
   346  0511                     	;# 
   347  0512                     	;# 
   348  0512                     	;# 
   349  0513                     	;# 
   350  0514                     	;# 
   351  0515                     	;# 
   352  0515                     	;# 
   353  0516                     	;# 
   354  0517                     	;# 
   355  0518                     	;# 
   356  0519                     	;# 
   357  051A                     	;# 
   358  051B                     	;# 
   359  051C                     	;# 
   360  051D                     	;# 
   361  058C                     	;# 
   362  058C                     	;# 
   363  058D                     	;# 
   364  058E                     	;# 
   365  058F                     	;# 
   366  058F                     	;# 
   367  0590                     	;# 
   368  0591                     	;# 
   369  0592                     	;# 
   370  0593                     	;# 
   371  060C                     	;# 
   372  060D                     	;# 
   373  060E                     	;# 
   374  060F                     	;# 
   375  0610                     	;# 
   376  0611                     	;# 
   377  0612                     	;# 
   378  0613                     	;# 
   379  0614                     	;# 
   380  0616                     	;# 
   381  0617                     	;# 
   382  0618                     	;# 
   383  0619                     	;# 
   384  061A                     	;# 
   385  061B                     	;# 
   386  061C                     	;# 
   387  061D                     	;# 
   388  061E                     	;# 
   389  068C                     	;# 
   390  068D                     	;# 
   391  068E                     	;# 
   392  068F                     	;# 
   393  0690                     	;# 
   394  0691                     	;# 
   395  0692                     	;# 
   396  0693                     	;# 
   397  0694                     	;# 
   398  070C                     	;# 
   399  070D                     	;# 
   400  070E                     	;# 
   401  070F                     	;# 
   402  0710                     	;# 
   403  0711                     	;# 
   404  0712                     	;# 
   405  0713                     	;# 
   406  0714                     	;# 
   407  0716                     	;# 
   408  0717                     	;# 
   409  0718                     	;# 
   410  0719                     	;# 
   411  071A                     	;# 
   412  071B                     	;# 
   413  071C                     	;# 
   414  071D                     	;# 
   415  071E                     	;# 
   416  0796                     	;# 
   417  0797                     	;# 
   418  0798                     	;# 
   419  0799                     	;# 
   420  079A                     	;# 
   421  079B                     	;# 
   422  080C                     	;# 
   423  080D                     	;# 
   424  080E                     	;# 
   425  080F                     	;# 
   426  0810                     	;# 
   427  0811                     	;# 
   428  0812                     	;# 
   429  0813                     	;# 
   430  0814                     	;# 
   431  081A                     	;# 
   432  081B                     	;# 
   433  081C                     	;# 
   434  081D                     	;# 
   435  081E                     	;# 
   436  081F                     	;# 
   437  088C                     	;# 
   438  088D                     	;# 
   439  088E                     	;# 
   440  088F                     	;# 
   441  0890                     	;# 
   442  0891                     	;# 
   443  0892                     	;# 
   444  0893                     	;# 
   445  0895                     	;# 
   446  0896                     	;# 
   447  0897                     	;# 
   448  0898                     	;# 
   449  0899                     	;# 
   450  089A                     	;# 
   451  089B                     	;# 
   452  090C                     	;# 
   453  090E                     	;# 
   454  090F                     	;# 
   455  091F                     	;# 
   456  091F                     	;# 
   457  098F                     	;# 
   458  098F                     	;# 
   459  0990                     	;# 
   460  0991                     	;# 
   461  0992                     	;# 
   462  0993                     	;# 
   463  0994                     	;# 
   464  0995                     	;# 
   465  0996                     	;# 
   466  0997                     	;# 
   467  0E0F                     	;# 
   468  0E10                     	;# 
   469  0E11                     	;# 
   470  0E12                     	;# 
   471  0E13                     	;# 
   472  0E14                     	;# 
   473  0E15                     	;# 
   474  0E16                     	;# 
   475  0E17                     	;# 
   476  0E18                     	;# 
   477  0E19                     	;# 
   478  0E1A                     	;# 
   479  0E1B                     	;# 
   480  0E1C                     	;# 
   481  0E1D                     	;# 
   482  0E1E                     	;# 
   483  0E1F                     	;# 
   484  0E20                     	;# 
   485  0E21                     	;# 
   486  0E22                     	;# 
   487  0E23                     	;# 
   488  0E24                     	;# 
   489  0E25                     	;# 
   490  0E26                     	;# 
   491  0E27                     	;# 
   492  0E28                     	;# 
   493  0E29                     	;# 
   494  0E2A                     	;# 
   495  0E2B                     	;# 
   496  0E2C                     	;# 
   497  0E2D                     	;# 
   498  0E2E                     	;# 
   499  0E2F                     	;# 
   500  0E30                     	;# 
   501  0E31                     	;# 
   502  0E32                     	;# 
   503  0E33                     	;# 
   504  0E34                     	;# 
   505  0E35                     	;# 
   506  0E36                     	;# 
   507  0E37                     	;# 
   508  0E8F                     	;# 
   509  0E90                     	;# 
   510  0E91                     	;# 
   511  0E92                     	;# 
   512  0E93                     	;# 
   513  0E94                     	;# 
   514  0E95                     	;# 
   515  0E96                     	;# 
   516  0E97                     	;# 
   517  0E9C                     	;# 
   518  0E9D                     	;# 
   519  0E9E                     	;# 
   520  0EA1                     	;# 
   521  0EA2                     	;# 
   522  0EA3                     	;# 
   523  0EA4                     	;# 
   524  0EA5                     	;# 
   525  0EA9                     	;# 
   526  0EAA                     	;# 
   527  0EAB                     	;# 
   528  0EAC                     	;# 
   529  0EB1                     	;# 
   530  0EB2                     	;# 
   531  0EB3                     	;# 
   532  0EB8                     	;# 
   533  0EB9                     	;# 
   534  0EBA                     	;# 
   535  0EBB                     	;# 
   536  0EBC                     	;# 
   537  0EBD                     	;# 
   538  0EBE                     	;# 
   539  0EC3                     	;# 
   540  0EC5                     	;# 
   541  0EC6                     	;# 
   542  0EC7                     	;# 
   543  0EC8                     	;# 
   544  0EC9                     	;# 
   545  0ECA                     	;# 
   546  0ECB                     	;# 
   547  0ECC                     	;# 
   548  0F10                     	;# 
   549  0F11                     	;# 
   550  0F12                     	;# 
   551  0F13                     	;# 
   552  0F14                     	;# 
   553  0F15                     	;# 
   554  0F16                     	;# 
   555  0F17                     	;# 
   556  0F18                     	;# 
   557  0F19                     	;# 
   558  0F1A                     	;# 
   559  0F1B                     	;# 
   560  0F1C                     	;# 
   561  0F1D                     	;# 
   562  0F1E                     	;# 
   563  0F1F                     	;# 
   564  0F20                     	;# 
   565  0F21                     	;# 
   566  0F22                     	;# 
   567  0F23                     	;# 
   568  0F24                     	;# 
   569  0F25                     	;# 
   570  0F26                     	;# 
   571  0F27                     	;# 
   572  0F38                     	;# 
   573  0F39                     	;# 
   574  0F3A                     	;# 
   575  0F3B                     	;# 
   576  0F3C                     	;# 
   577  0F3D                     	;# 
   578  0F3E                     	;# 
   579  0F3F                     	;# 
   580  0F40                     	;# 
   581  0F41                     	;# 
   582  0F43                     	;# 
   583  0F44                     	;# 
   584  0F45                     	;# 
   585  0F46                     	;# 
   586  0F47                     	;# 
   587  0F48                     	;# 
   588  0F49                     	;# 
   589  0F4A                     	;# 
   590  0F4B                     	;# 
   591  0F4C                     	;# 
   592  0F4E                     	;# 
   593  0F4F                     	;# 
   594  0F50                     	;# 
   595  0F51                     	;# 
   596  0F52                     	;# 
   597  0F53                     	;# 
   598  0F54                     	;# 
   599  0F55                     	;# 
   600  0F56                     	;# 
   601  0F57                     	;# 
   602  0F65                     	;# 
   603  0F68                     	;# 
   604  0F69                     	;# 
   605  0F6A                     	;# 
   606  0F6B                     	;# 
   607  0FE4                     	;# 
   608  0FE5                     	;# 
   609  0FE6                     	;# 
   610  0FE7                     	;# 
   611  0FE8                     	;# 
   612  0FE9                     	;# 
   613  0FEA                     	;# 
   614  0FEB                     	;# 
   615  0FED                     	;# 
   616  0FEE                     	;# 
   617  0FEF                     	;# 
   618  0000                     	;# 
   619  0001                     	;# 
   620  0002                     	;# 
   621  0003                     	;# 
   622  0004                     	;# 
   623  0005                     	;# 
   624  0006                     	;# 
   625  0007                     	;# 
   626  0008                     	;# 
   627  0009                     	;# 
   628  000A                     	;# 
   629  000B                     	;# 
   630  000C                     	;# 
   631  000D                     	;# 
   632  000E                     	;# 
   633  0010                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0013                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  001C                     	;# 
   641  001C                     	;# 
   642  001D                     	;# 
   643  001D                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008C                     	;# 
   648  008D                     	;# 
   649  008E                     	;# 
   650  008E                     	;# 
   651  008F                     	;# 
   652  0090                     	;# 
   653  0090                     	;# 
   654  0091                     	;# 
   655  0093                     	;# 
   656  0094                     	;# 
   657  0095                     	;# 
   658  0096                     	;# 
   659  0097                     	;# 
   660  0098                     	;# 
   661  0099                     	;# 
   662  009A                     	;# 
   663  009B                     	;# 
   664  009C                     	;# 
   665  009D                     	;# 
   666  009E                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  010E                     	;# 
   671  010F                     	;# 
   672  0110                     	;# 
   673  0110                     	;# 
   674  0111                     	;# 
   675  0112                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0114                     	;# 
   680  0115                     	;# 
   681  0116                     	;# 
   682  0116                     	;# 
   683  0117                     	;# 
   684  0119                     	;# 
   685  0119                     	;# 
   686  0119                     	;# 
   687  011A                     	;# 
   688  011A                     	;# 
   689  011A                     	;# 
   690  011B                     	;# 
   691  011B                     	;# 
   692  011B                     	;# 
   693  011B                     	;# 
   694  011B                     	;# 
   695  011C                     	;# 
   696  011C                     	;# 
   697  011C                     	;# 
   698  011D                     	;# 
   699  011D                     	;# 
   700  011D                     	;# 
   701  011E                     	;# 
   702  011E                     	;# 
   703  011E                     	;# 
   704  011F                     	;# 
   705  011F                     	;# 
   706  011F                     	;# 
   707  011F                     	;# 
   708  011F                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  018E                     	;# 
   712  018F                     	;# 
   713  0190                     	;# 
   714  0191                     	;# 
   715  0192                     	;# 
   716  0196                     	;# 
   717  0197                     	;# 
   718  0198                     	;# 
   719  0199                     	;# 
   720  019A                     	;# 
   721  019B                     	;# 
   722  019C                     	;# 
   723  020C                     	;# 
   724  020C                     	;# 
   725  020D                     	;# 
   726  020E                     	;# 
   727  020F                     	;# 
   728  020F                     	;# 
   729  0210                     	;# 
   730  0210                     	;# 
   731  0211                     	;# 
   732  0211                     	;# 
   733  0212                     	;# 
   734  0212                     	;# 
   735  0213                     	;# 
   736  0214                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0216                     	;# 
   741  0217                     	;# 
   742  0217                     	;# 
   743  0218                     	;# 
   744  0218                     	;# 
   745  0219                     	;# 
   746  021A                     	;# 
   747  021B                     	;# 
   748  021B                     	;# 
   749  021C                     	;# 
   750  021C                     	;# 
   751  021D                     	;# 
   752  021D                     	;# 
   753  021E                     	;# 
   754  021F                     	;# 
   755  028C                     	;# 
   756  028C                     	;# 
   757  028D                     	;# 
   758  028D                     	;# 
   759  028E                     	;# 
   760  028F                     	;# 
   761  0290                     	;# 
   762  0290                     	;# 
   763  0291                     	;# 
   764  0292                     	;# 
   765  0292                     	;# 
   766  0293                     	;# 
   767  0293                     	;# 
   768  0294                     	;# 
   769  0295                     	;# 
   770  0296                     	;# 
   771  0296                     	;# 
   772  0297                     	;# 
   773  0298                     	;# 
   774  0298                     	;# 
   775  0299                     	;# 
   776  0299                     	;# 
   777  029A                     	;# 
   778  029B                     	;# 
   779  029C                     	;# 
   780  029C                     	;# 
   781  029D                     	;# 
   782  030C                     	;# 
   783  030C                     	;# 
   784  030D                     	;# 
   785  030E                     	;# 
   786  030F                     	;# 
   787  0310                     	;# 
   788  0310                     	;# 
   789  0311                     	;# 
   790  0312                     	;# 
   791  0313                     	;# 
   792  0314                     	;# 
   793  0314                     	;# 
   794  0315                     	;# 
   795  0316                     	;# 
   796  0317                     	;# 
   797  0318                     	;# 
   798  0318                     	;# 
   799  0319                     	;# 
   800  031A                     	;# 
   801  031B                     	;# 
   802  031C                     	;# 
   803  031C                     	;# 
   804  031D                     	;# 
   805  031E                     	;# 
   806  031F                     	;# 
   807  038C                     	;# 
   808  038D                     	;# 
   809  038E                     	;# 
   810  0390                     	;# 
   811  0391                     	;# 
   812  0392                     	;# 
   813  040C                     	;# 
   814  040D                     	;# 
   815  040E                     	;# 
   816  040F                     	;# 
   817  0410                     	;# 
   818  0411                     	;# 
   819  0416                     	;# 
   820  0416                     	;# 
   821  0417                     	;# 
   822  0418                     	;# 
   823  0418                     	;# 
   824  0419                     	;# 
   825  041A                     	;# 
   826  041A                     	;# 
   827  041B                     	;# 
   828  041C                     	;# 
   829  041C                     	;# 
   830  041D                     	;# 
   831  041E                     	;# 
   832  041F                     	;# 
   833  048C                     	;# 
   834  048C                     	;# 
   835  048D                     	;# 
   836  048E                     	;# 
   837  048F                     	;# 
   838  048F                     	;# 
   839  0490                     	;# 
   840  0491                     	;# 
   841  0492                     	;# 
   842  0492                     	;# 
   843  0493                     	;# 
   844  0494                     	;# 
   845  0495                     	;# 
   846  0495                     	;# 
   847  0496                     	;# 
   848  0497                     	;# 
   849  0498                     	;# 
   850  0499                     	;# 
   851  049A                     	;# 
   852  049B                     	;# 
   853  049C                     	;# 
   854  049D                     	;# 
   855  050C                     	;# 
   856  050C                     	;# 
   857  050D                     	;# 
   858  050E                     	;# 
   859  050F                     	;# 
   860  050F                     	;# 
   861  0510                     	;# 
   862  0511                     	;# 
   863  0512                     	;# 
   864  0512                     	;# 
   865  0513                     	;# 
   866  0514                     	;# 
   867  0515                     	;# 
   868  0515                     	;# 
   869  0516                     	;# 
   870  0517                     	;# 
   871  0518                     	;# 
   872  0519                     	;# 
   873  051A                     	;# 
   874  051B                     	;# 
   875  051C                     	;# 
   876  051D                     	;# 
   877  058C                     	;# 
   878  058C                     	;# 
   879  058D                     	;# 
   880  058E                     	;# 
   881  058F                     	;# 
   882  058F                     	;# 
   883  0590                     	;# 
   884  0591                     	;# 
   885  0592                     	;# 
   886  0593                     	;# 
   887  060C                     	;# 
   888  060D                     	;# 
   889  060E                     	;# 
   890  060F                     	;# 
   891  0610                     	;# 
   892  0611                     	;# 
   893  0612                     	;# 
   894  0613                     	;# 
   895  0614                     	;# 
   896  0616                     	;# 
   897  0617                     	;# 
   898  0618                     	;# 
   899  0619                     	;# 
   900  061A                     	;# 
   901  061B                     	;# 
   902  061C                     	;# 
   903  061D                     	;# 
   904  061E                     	;# 
   905  068C                     	;# 
   906  068D                     	;# 
   907  068E                     	;# 
   908  068F                     	;# 
   909  0690                     	;# 
   910  0691                     	;# 
   911  0692                     	;# 
   912  0693                     	;# 
   913  0694                     	;# 
   914  070C                     	;# 
   915  070D                     	;# 
   916  070E                     	;# 
   917  070F                     	;# 
   918  0710                     	;# 
   919  0711                     	;# 
   920  0712                     	;# 
   921  0713                     	;# 
   922  0714                     	;# 
   923  0716                     	;# 
   924  0717                     	;# 
   925  0718                     	;# 
   926  0719                     	;# 
   927  071A                     	;# 
   928  071B                     	;# 
   929  071C                     	;# 
   930  071D                     	;# 
   931  071E                     	;# 
   932  0796                     	;# 
   933  0797                     	;# 
   934  0798                     	;# 
   935  0799                     	;# 
   936  079A                     	;# 
   937  079B                     	;# 
   938  080C                     	;# 
   939  080D                     	;# 
   940  080E                     	;# 
   941  080F                     	;# 
   942  0810                     	;# 
   943  0811                     	;# 
   944  0812                     	;# 
   945  0813                     	;# 
   946  0814                     	;# 
   947  081A                     	;# 
   948  081B                     	;# 
   949  081C                     	;# 
   950  081D                     	;# 
   951  081E                     	;# 
   952  081F                     	;# 
   953  088C                     	;# 
   954  088D                     	;# 
   955  088E                     	;# 
   956  088F                     	;# 
   957  0890                     	;# 
   958  0891                     	;# 
   959  0892                     	;# 
   960  0893                     	;# 
   961  0895                     	;# 
   962  0896                     	;# 
   963  0897                     	;# 
   964  0898                     	;# 
   965  0899                     	;# 
   966  089A                     	;# 
   967  089B                     	;# 
   968  090C                     	;# 
   969  090E                     	;# 
   970  090F                     	;# 
   971  091F                     	;# 
   972  091F                     	;# 
   973  098F                     	;# 
   974  098F                     	;# 
   975  0990                     	;# 
   976  0991                     	;# 
   977  0992                     	;# 
   978  0993                     	;# 
   979  0994                     	;# 
   980  0995                     	;# 
   981  0996                     	;# 
   982  0997                     	;# 
   983  0E0F                     	;# 
   984  0E10                     	;# 
   985  0E11                     	;# 
   986  0E12                     	;# 
   987  0E13                     	;# 
   988  0E14                     	;# 
   989  0E15                     	;# 
   990  0E16                     	;# 
   991  0E17                     	;# 
   992  0E18                     	;# 
   993  0E19                     	;# 
   994  0E1A                     	;# 
   995  0E1B                     	;# 
   996  0E1C                     	;# 
   997  0E1D                     	;# 
   998  0E1E                     	;# 
   999  0E1F                     	;# 
  1000  0E20                     	;# 
  1001  0E21                     	;# 
  1002  0E22                     	;# 
  1003  0E23                     	;# 
  1004  0E24                     	;# 
  1005  0E25                     	;# 
  1006  0E26                     	;# 
  1007  0E27                     	;# 
  1008  0E28                     	;# 
  1009  0E29                     	;# 
  1010  0E2A                     	;# 
  1011  0E2B                     	;# 
  1012  0E2C                     	;# 
  1013  0E2D                     	;# 
  1014  0E2E                     	;# 
  1015  0E2F                     	;# 
  1016  0E30                     	;# 
  1017  0E31                     	;# 
  1018  0E32                     	;# 
  1019  0E33                     	;# 
  1020  0E34                     	;# 
  1021  0E35                     	;# 
  1022  0E36                     	;# 
  1023  0E37                     	;# 
  1024  0E8F                     	;# 
  1025  0E90                     	;# 
  1026  0E91                     	;# 
  1027  0E92                     	;# 
  1028  0E93                     	;# 
  1029  0E94                     	;# 
  1030  0E95                     	;# 
  1031  0E96                     	;# 
  1032  0E97                     	;# 
  1033  0E9C                     	;# 
  1034  0E9D                     	;# 
  1035  0E9E                     	;# 
  1036  0EA1                     	;# 
  1037  0EA2                     	;# 
  1038  0EA3                     	;# 
  1039  0EA4                     	;# 
  1040  0EA5                     	;# 
  1041  0EA9                     	;# 
  1042  0EAA                     	;# 
  1043  0EAB                     	;# 
  1044  0EAC                     	;# 
  1045  0EB1                     	;# 
  1046  0EB2                     	;# 
  1047  0EB3                     	;# 
  1048  0EB8                     	;# 
  1049  0EB9                     	;# 
  1050  0EBA                     	;# 
  1051  0EBB                     	;# 
  1052  0EBC                     	;# 
  1053  0EBD                     	;# 
  1054  0EBE                     	;# 
  1055  0EC3                     	;# 
  1056  0EC5                     	;# 
  1057  0EC6                     	;# 
  1058  0EC7                     	;# 
  1059  0EC8                     	;# 
  1060  0EC9                     	;# 
  1061  0ECA                     	;# 
  1062  0ECB                     	;# 
  1063  0ECC                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F38                     	;# 
  1089  0F39                     	;# 
  1090  0F3A                     	;# 
  1091  0F3B                     	;# 
  1092  0F3C                     	;# 
  1093  0F3D                     	;# 
  1094  0F3E                     	;# 
  1095  0F3F                     	;# 
  1096  0F40                     	;# 
  1097  0F41                     	;# 
  1098  0F43                     	;# 
  1099  0F44                     	;# 
  1100  0F45                     	;# 
  1101  0F46                     	;# 
  1102  0F47                     	;# 
  1103  0F48                     	;# 
  1104  0F49                     	;# 
  1105  0F4A                     	;# 
  1106  0F4B                     	;# 
  1107  0F4C                     	;# 
  1108  0F4E                     	;# 
  1109  0F4F                     	;# 
  1110  0F50                     	;# 
  1111  0F51                     	;# 
  1112  0F52                     	;# 
  1113  0F53                     	;# 
  1114  0F54                     	;# 
  1115  0F55                     	;# 
  1116  0F56                     	;# 
  1117  0F57                     	;# 
  1118  0F65                     	;# 
  1119  0F68                     	;# 
  1120  0F69                     	;# 
  1121  0F6A                     	;# 
  1122  0F6B                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE9                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEF                     	;# 
  1134  0000                     	;# 
  1135  0001                     	;# 
  1136  0002                     	;# 
  1137  0003                     	;# 
  1138  0004                     	;# 
  1139  0005                     	;# 
  1140  0006                     	;# 
  1141  0007                     	;# 
  1142  0008                     	;# 
  1143  0009                     	;# 
  1144  000A                     	;# 
  1145  000B                     	;# 
  1146  000C                     	;# 
  1147  000D                     	;# 
  1148  000E                     	;# 
  1149  0010                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0016                     	;# 
  1154  0017                     	;# 
  1155  0018                     	;# 
  1156  001C                     	;# 
  1157  001C                     	;# 
  1158  001D                     	;# 
  1159  001D                     	;# 
  1160  001E                     	;# 
  1161  001F                     	;# 
  1162  008C                     	;# 
  1163  008C                     	;# 
  1164  008D                     	;# 
  1165  008E                     	;# 
  1166  008E                     	;# 
  1167  008F                     	;# 
  1168  0090                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0093                     	;# 
  1172  0094                     	;# 
  1173  0095                     	;# 
  1174  0096                     	;# 
  1175  0097                     	;# 
  1176  0098                     	;# 
  1177  0099                     	;# 
  1178  009A                     	;# 
  1179  009B                     	;# 
  1180  009C                     	;# 
  1181  009D                     	;# 
  1182  009E                     	;# 
  1183  010C                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  010E                     	;# 
  1187  010F                     	;# 
  1188  0110                     	;# 
  1189  0110                     	;# 
  1190  0111                     	;# 
  1191  0112                     	;# 
  1192  0112                     	;# 
  1193  0113                     	;# 
  1194  0114                     	;# 
  1195  0114                     	;# 
  1196  0115                     	;# 
  1197  0116                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  0119                     	;# 
  1201  0119                     	;# 
  1202  0119                     	;# 
  1203  011A                     	;# 
  1204  011A                     	;# 
  1205  011A                     	;# 
  1206  011B                     	;# 
  1207  011B                     	;# 
  1208  011B                     	;# 
  1209  011B                     	;# 
  1210  011B                     	;# 
  1211  011C                     	;# 
  1212  011C                     	;# 
  1213  011C                     	;# 
  1214  011D                     	;# 
  1215  011D                     	;# 
  1216  011D                     	;# 
  1217  011E                     	;# 
  1218  011E                     	;# 
  1219  011E                     	;# 
  1220  011F                     	;# 
  1221  011F                     	;# 
  1222  011F                     	;# 
  1223  011F                     	;# 
  1224  011F                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  018F                     	;# 
  1229  0190                     	;# 
  1230  0191                     	;# 
  1231  0192                     	;# 
  1232  0196                     	;# 
  1233  0197                     	;# 
  1234  0198                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019C                     	;# 
  1239  020C                     	;# 
  1240  020C                     	;# 
  1241  020D                     	;# 
  1242  020E                     	;# 
  1243  020F                     	;# 
  1244  020F                     	;# 
  1245  0210                     	;# 
  1246  0210                     	;# 
  1247  0211                     	;# 
  1248  0211                     	;# 
  1249  0212                     	;# 
  1250  0212                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0215                     	;# 
  1254  0215                     	;# 
  1255  0216                     	;# 
  1256  0216                     	;# 
  1257  0217                     	;# 
  1258  0217                     	;# 
  1259  0218                     	;# 
  1260  0218                     	;# 
  1261  0219                     	;# 
  1262  021A                     	;# 
  1263  021B                     	;# 
  1264  021B                     	;# 
  1265  021C                     	;# 
  1266  021C                     	;# 
  1267  021D                     	;# 
  1268  021D                     	;# 
  1269  021E                     	;# 
  1270  021F                     	;# 
  1271  028C                     	;# 
  1272  028C                     	;# 
  1273  028D                     	;# 
  1274  028D                     	;# 
  1275  028E                     	;# 
  1276  028F                     	;# 
  1277  0290                     	;# 
  1278  0290                     	;# 
  1279  0291                     	;# 
  1280  0292                     	;# 
  1281  0292                     	;# 
  1282  0293                     	;# 
  1283  0293                     	;# 
  1284  0294                     	;# 
  1285  0295                     	;# 
  1286  0296                     	;# 
  1287  0296                     	;# 
  1288  0297                     	;# 
  1289  0298                     	;# 
  1290  0298                     	;# 
  1291  0299                     	;# 
  1292  0299                     	;# 
  1293  029A                     	;# 
  1294  029B                     	;# 
  1295  029C                     	;# 
  1296  029C                     	;# 
  1297  029D                     	;# 
  1298  030C                     	;# 
  1299  030C                     	;# 
  1300  030D                     	;# 
  1301  030E                     	;# 
  1302  030F                     	;# 
  1303  0310                     	;# 
  1304  0310                     	;# 
  1305  0311                     	;# 
  1306  0312                     	;# 
  1307  0313                     	;# 
  1308  0314                     	;# 
  1309  0314                     	;# 
  1310  0315                     	;# 
  1311  0316                     	;# 
  1312  0317                     	;# 
  1313  0318                     	;# 
  1314  0318                     	;# 
  1315  0319                     	;# 
  1316  031A                     	;# 
  1317  031B                     	;# 
  1318  031C                     	;# 
  1319  031C                     	;# 
  1320  031D                     	;# 
  1321  031E                     	;# 
  1322  031F                     	;# 
  1323  038C                     	;# 
  1324  038D                     	;# 
  1325  038E                     	;# 
  1326  0390                     	;# 
  1327  0391                     	;# 
  1328  0392                     	;# 
  1329  040C                     	;# 
  1330  040D                     	;# 
  1331  040E                     	;# 
  1332  040F                     	;# 
  1333  0410                     	;# 
  1334  0411                     	;# 
  1335  0416                     	;# 
  1336  0416                     	;# 
  1337  0417                     	;# 
  1338  0418                     	;# 
  1339  0418                     	;# 
  1340  0419                     	;# 
  1341  041A                     	;# 
  1342  041A                     	;# 
  1343  041B                     	;# 
  1344  041C                     	;# 
  1345  041C                     	;# 
  1346  041D                     	;# 
  1347  041E                     	;# 
  1348  041F                     	;# 
  1349  048C                     	;# 
  1350  048C                     	;# 
  1351  048D                     	;# 
  1352  048E                     	;# 
  1353  048F                     	;# 
  1354  048F                     	;# 
  1355  0490                     	;# 
  1356  0491                     	;# 
  1357  0492                     	;# 
  1358  0492                     	;# 
  1359  0493                     	;# 
  1360  0494                     	;# 
  1361  0495                     	;# 
  1362  0495                     	;# 
  1363  0496                     	;# 
  1364  0497                     	;# 
  1365  0498                     	;# 
  1366  0499                     	;# 
  1367  049A                     	;# 
  1368  049B                     	;# 
  1369  049C                     	;# 
  1370  049D                     	;# 
  1371  050C                     	;# 
  1372  050C                     	;# 
  1373  050D                     	;# 
  1374  050E                     	;# 
  1375  050F                     	;# 
  1376  050F                     	;# 
  1377  0510                     	;# 
  1378  0511                     	;# 
  1379  0512                     	;# 
  1380  0512                     	;# 
  1381  0513                     	;# 
  1382  0514                     	;# 
  1383  0515                     	;# 
  1384  0515                     	;# 
  1385  0516                     	;# 
  1386  0517                     	;# 
  1387  0518                     	;# 
  1388  0519                     	;# 
  1389  051A                     	;# 
  1390  051B                     	;# 
  1391  051C                     	;# 
  1392  051D                     	;# 
  1393  058C                     	;# 
  1394  058C                     	;# 
  1395  058D                     	;# 
  1396  058E                     	;# 
  1397  058F                     	;# 
  1398  058F                     	;# 
  1399  0590                     	;# 
  1400  0591                     	;# 
  1401  0592                     	;# 
  1402  0593                     	;# 
  1403  060C                     	;# 
  1404  060D                     	;# 
  1405  060E                     	;# 
  1406  060F                     	;# 
  1407  0610                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0614                     	;# 
  1412  0616                     	;# 
  1413  0617                     	;# 
  1414  0618                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061D                     	;# 
  1420  061E                     	;# 
  1421  068C                     	;# 
  1422  068D                     	;# 
  1423  068E                     	;# 
  1424  068F                     	;# 
  1425  0690                     	;# 
  1426  0691                     	;# 
  1427  0692                     	;# 
  1428  0693                     	;# 
  1429  0694                     	;# 
  1430  070C                     	;# 
  1431  070D                     	;# 
  1432  070E                     	;# 
  1433  070F                     	;# 
  1434  0710                     	;# 
  1435  0711                     	;# 
  1436  0712                     	;# 
  1437  0713                     	;# 
  1438  0714                     	;# 
  1439  0716                     	;# 
  1440  0717                     	;# 
  1441  0718                     	;# 
  1442  0719                     	;# 
  1443  071A                     	;# 
  1444  071B                     	;# 
  1445  071C                     	;# 
  1446  071D                     	;# 
  1447  071E                     	;# 
  1448  0796                     	;# 
  1449  0797                     	;# 
  1450  0798                     	;# 
  1451  0799                     	;# 
  1452  079A                     	;# 
  1453  079B                     	;# 
  1454  080C                     	;# 
  1455  080D                     	;# 
  1456  080E                     	;# 
  1457  080F                     	;# 
  1458  0810                     	;# 
  1459  0811                     	;# 
  1460  0812                     	;# 
  1461  0813                     	;# 
  1462  0814                     	;# 
  1463  081A                     	;# 
  1464  081B                     	;# 
  1465  081C                     	;# 
  1466  081D                     	;# 
  1467  081E                     	;# 
  1468  081F                     	;# 
  1469  088C                     	;# 
  1470  088D                     	;# 
  1471  088E                     	;# 
  1472  088F                     	;# 
  1473  0890                     	;# 
  1474  0891                     	;# 
  1475  0892                     	;# 
  1476  0893                     	;# 
  1477  0895                     	;# 
  1478  0896                     	;# 
  1479  0897                     	;# 
  1480  0898                     	;# 
  1481  0899                     	;# 
  1482  089A                     	;# 
  1483  089B                     	;# 
  1484  090C                     	;# 
  1485  090E                     	;# 
  1486  090F                     	;# 
  1487  091F                     	;# 
  1488  091F                     	;# 
  1489  098F                     	;# 
  1490  098F                     	;# 
  1491  0990                     	;# 
  1492  0991                     	;# 
  1493  0992                     	;# 
  1494  0993                     	;# 
  1495  0994                     	;# 
  1496  0995                     	;# 
  1497  0996                     	;# 
  1498  0997                     	;# 
  1499  0E0F                     	;# 
  1500  0E10                     	;# 
  1501  0E11                     	;# 
  1502  0E12                     	;# 
  1503  0E13                     	;# 
  1504  0E14                     	;# 
  1505  0E15                     	;# 
  1506  0E16                     	;# 
  1507  0E17                     	;# 
  1508  0E18                     	;# 
  1509  0E19                     	;# 
  1510  0E1A                     	;# 
  1511  0E1B                     	;# 
  1512  0E1C                     	;# 
  1513  0E1D                     	;# 
  1514  0E1E                     	;# 
  1515  0E1F                     	;# 
  1516  0E20                     	;# 
  1517  0E21                     	;# 
  1518  0E22                     	;# 
  1519  0E23                     	;# 
  1520  0E24                     	;# 
  1521  0E25                     	;# 
  1522  0E26                     	;# 
  1523  0E27                     	;# 
  1524  0E28                     	;# 
  1525  0E29                     	;# 
  1526  0E2A                     	;# 
  1527  0E2B                     	;# 
  1528  0E2C                     	;# 
  1529  0E2D                     	;# 
  1530  0E2E                     	;# 
  1531  0E2F                     	;# 
  1532  0E30                     	;# 
  1533  0E31                     	;# 
  1534  0E32                     	;# 
  1535  0E33                     	;# 
  1536  0E34                     	;# 
  1537  0E35                     	;# 
  1538  0E36                     	;# 
  1539  0E37                     	;# 
  1540  0E8F                     	;# 
  1541  0E90                     	;# 
  1542  0E91                     	;# 
  1543  0E92                     	;# 
  1544  0E93                     	;# 
  1545  0E94                     	;# 
  1546  0E95                     	;# 
  1547  0E96                     	;# 
  1548  0E97                     	;# 
  1549  0E9C                     	;# 
  1550  0E9D                     	;# 
  1551  0E9E                     	;# 
  1552  0EA1                     	;# 
  1553  0EA2                     	;# 
  1554  0EA3                     	;# 
  1555  0EA4                     	;# 
  1556  0EA5                     	;# 
  1557  0EA9                     	;# 
  1558  0EAA                     	;# 
  1559  0EAB                     	;# 
  1560  0EAC                     	;# 
  1561  0EB1                     	;# 
  1562  0EB2                     	;# 
  1563  0EB3                     	;# 
  1564  0EB8                     	;# 
  1565  0EB9                     	;# 
  1566  0EBA                     	;# 
  1567  0EBB                     	;# 
  1568  0EBC                     	;# 
  1569  0EBD                     	;# 
  1570  0EBE                     	;# 
  1571  0EC3                     	;# 
  1572  0EC5                     	;# 
  1573  0EC6                     	;# 
  1574  0EC7                     	;# 
  1575  0EC8                     	;# 
  1576  0EC9                     	;# 
  1577  0ECA                     	;# 
  1578  0ECB                     	;# 
  1579  0ECC                     	;# 
  1580  0F10                     	;# 
  1581  0F11                     	;# 
  1582  0F12                     	;# 
  1583  0F13                     	;# 
  1584  0F14                     	;# 
  1585  0F15                     	;# 
  1586  0F16                     	;# 
  1587  0F17                     	;# 
  1588  0F18                     	;# 
  1589  0F19                     	;# 
  1590  0F1A                     	;# 
  1591  0F1B                     	;# 
  1592  0F1C                     	;# 
  1593  0F1D                     	;# 
  1594  0F1E                     	;# 
  1595  0F1F                     	;# 
  1596  0F20                     	;# 
  1597  0F21                     	;# 
  1598  0F22                     	;# 
  1599  0F23                     	;# 
  1600  0F24                     	;# 
  1601  0F25                     	;# 
  1602  0F26                     	;# 
  1603  0F27                     	;# 
  1604  0F38                     	;# 
  1605  0F39                     	;# 
  1606  0F3A                     	;# 
  1607  0F3B                     	;# 
  1608  0F3C                     	;# 
  1609  0F3D                     	;# 
  1610  0F3E                     	;# 
  1611  0F3F                     	;# 
  1612  0F40                     	;# 
  1613  0F41                     	;# 
  1614  0F43                     	;# 
  1615  0F44                     	;# 
  1616  0F45                     	;# 
  1617  0F46                     	;# 
  1618  0F47                     	;# 
  1619  0F48                     	;# 
  1620  0F49                     	;# 
  1621  0F4A                     	;# 
  1622  0F4B                     	;# 
  1623  0F4C                     	;# 
  1624  0F4E                     	;# 
  1625  0F4F                     	;# 
  1626  0F50                     	;# 
  1627  0F51                     	;# 
  1628  0F52                     	;# 
  1629  0F53                     	;# 
  1630  0F54                     	;# 
  1631  0F55                     	;# 
  1632  0F56                     	;# 
  1633  0F57                     	;# 
  1634  0F65                     	;# 
  1635  0F68                     	;# 
  1636  0F69                     	;# 
  1637  0F6A                     	;# 
  1638  0F6B                     	;# 
  1639  0FE4                     	;# 
  1640  0FE5                     	;# 
  1641  0FE6                     	;# 
  1642  0FE7                     	;# 
  1643  0FE8                     	;# 
  1644  0FE9                     	;# 
  1645  0FEA                     	;# 
  1646  0FEB                     	;# 
  1647  0FED                     	;# 
  1648  0FEE                     	;# 
  1649  0FEF                     	;# 
  1650  0000                     	;# 
  1651  0001                     	;# 
  1652  0002                     	;# 
  1653  0003                     	;# 
  1654  0004                     	;# 
  1655  0005                     	;# 
  1656  0006                     	;# 
  1657  0007                     	;# 
  1658  0008                     	;# 
  1659  0009                     	;# 
  1660  000A                     	;# 
  1661  000B                     	;# 
  1662  000C                     	;# 
  1663  000D                     	;# 
  1664  000E                     	;# 
  1665  0010                     	;# 
  1666  0011                     	;# 
  1667  0012                     	;# 
  1668  0013                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  001C                     	;# 
  1673  001C                     	;# 
  1674  001D                     	;# 
  1675  001D                     	;# 
  1676  001E                     	;# 
  1677  001F                     	;# 
  1678  008C                     	;# 
  1679  008C                     	;# 
  1680  008D                     	;# 
  1681  008E                     	;# 
  1682  008E                     	;# 
  1683  008F                     	;# 
  1684  0090                     	;# 
  1685  0090                     	;# 
  1686  0091                     	;# 
  1687  0093                     	;# 
  1688  0094                     	;# 
  1689  0095                     	;# 
  1690  0096                     	;# 
  1691  0097                     	;# 
  1692  0098                     	;# 
  1693  0099                     	;# 
  1694  009A                     	;# 
  1695  009B                     	;# 
  1696  009C                     	;# 
  1697  009D                     	;# 
  1698  009E                     	;# 
  1699  010C                     	;# 
  1700  010D                     	;# 
  1701  010E                     	;# 
  1702  010E                     	;# 
  1703  010F                     	;# 
  1704  0110                     	;# 
  1705  0110                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0112                     	;# 
  1709  0113                     	;# 
  1710  0114                     	;# 
  1711  0114                     	;# 
  1712  0115                     	;# 
  1713  0116                     	;# 
  1714  0116                     	;# 
  1715  0117                     	;# 
  1716  0119                     	;# 
  1717  0119                     	;# 
  1718  0119                     	;# 
  1719  011A                     	;# 
  1720  011A                     	;# 
  1721  011A                     	;# 
  1722  011B                     	;# 
  1723  011B                     	;# 
  1724  011B                     	;# 
  1725  011B                     	;# 
  1726  011B                     	;# 
  1727  011C                     	;# 
  1728  011C                     	;# 
  1729  011C                     	;# 
  1730  011D                     	;# 
  1731  011D                     	;# 
  1732  011D                     	;# 
  1733  011E                     	;# 
  1734  011E                     	;# 
  1735  011E                     	;# 
  1736  011F                     	;# 
  1737  011F                     	;# 
  1738  011F                     	;# 
  1739  011F                     	;# 
  1740  011F                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  018F                     	;# 
  1745  0190                     	;# 
  1746  0191                     	;# 
  1747  0192                     	;# 
  1748  0196                     	;# 
  1749  0197                     	;# 
  1750  0198                     	;# 
  1751  0199                     	;# 
  1752  019A                     	;# 
  1753  019B                     	;# 
  1754  019C                     	;# 
  1755  020C                     	;# 
  1756  020C                     	;# 
  1757  020D                     	;# 
  1758  020E                     	;# 
  1759  020F                     	;# 
  1760  020F                     	;# 
  1761  0210                     	;# 
  1762  0210                     	;# 
  1763  0211                     	;# 
  1764  0211                     	;# 
  1765  0212                     	;# 
  1766  0212                     	;# 
  1767  0213                     	;# 
  1768  0214                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0216                     	;# 
  1772  0216                     	;# 
  1773  0217                     	;# 
  1774  0217                     	;# 
  1775  0218                     	;# 
  1776  0218                     	;# 
  1777  0219                     	;# 
  1778  021A                     	;# 
  1779  021B                     	;# 
  1780  021B                     	;# 
  1781  021C                     	;# 
  1782  021C                     	;# 
  1783  021D                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  028C                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  028D                     	;# 
  1791  028E                     	;# 
  1792  028F                     	;# 
  1793  0290                     	;# 
  1794  0290                     	;# 
  1795  0291                     	;# 
  1796  0292                     	;# 
  1797  0292                     	;# 
  1798  0293                     	;# 
  1799  0293                     	;# 
  1800  0294                     	;# 
  1801  0295                     	;# 
  1802  0296                     	;# 
  1803  0296                     	;# 
  1804  0297                     	;# 
  1805  0298                     	;# 
  1806  0298                     	;# 
  1807  0299                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  029B                     	;# 
  1811  029C                     	;# 
  1812  029C                     	;# 
  1813  029D                     	;# 
  1814  030C                     	;# 
  1815  030C                     	;# 
  1816  030D                     	;# 
  1817  030E                     	;# 
  1818  030F                     	;# 
  1819  0310                     	;# 
  1820  0310                     	;# 
  1821  0311                     	;# 
  1822  0312                     	;# 
  1823  0313                     	;# 
  1824  0314                     	;# 
  1825  0314                     	;# 
  1826  0315                     	;# 
  1827  0316                     	;# 
  1828  0317                     	;# 
  1829  0318                     	;# 
  1830  0318                     	;# 
  1831  0319                     	;# 
  1832  031A                     	;# 
  1833  031B                     	;# 
  1834  031C                     	;# 
  1835  031C                     	;# 
  1836  031D                     	;# 
  1837  031E                     	;# 
  1838  031F                     	;# 
  1839  038C                     	;# 
  1840  038D                     	;# 
  1841  038E                     	;# 
  1842  0390                     	;# 
  1843  0391                     	;# 
  1844  0392                     	;# 
  1845  040C                     	;# 
  1846  040D                     	;# 
  1847  040E                     	;# 
  1848  040F                     	;# 
  1849  0410                     	;# 
  1850  0411                     	;# 
  1851  0416                     	;# 
  1852  0416                     	;# 
  1853  0417                     	;# 
  1854  0418                     	;# 
  1855  0418                     	;# 
  1856  0419                     	;# 
  1857  041A                     	;# 
  1858  041A                     	;# 
  1859  041B                     	;# 
  1860  041C                     	;# 
  1861  041C                     	;# 
  1862  041D                     	;# 
  1863  041E                     	;# 
  1864  041F                     	;# 
  1865  048C                     	;# 
  1866  048C                     	;# 
  1867  048D                     	;# 
  1868  048E                     	;# 
  1869  048F                     	;# 
  1870  048F                     	;# 
  1871  0490                     	;# 
  1872  0491                     	;# 
  1873  0492                     	;# 
  1874  0492                     	;# 
  1875  0493                     	;# 
  1876  0494                     	;# 
  1877  0495                     	;# 
  1878  0495                     	;# 
  1879  0496                     	;# 
  1880  0497                     	;# 
  1881  0498                     	;# 
  1882  0499                     	;# 
  1883  049A                     	;# 
  1884  049B                     	;# 
  1885  049C                     	;# 
  1886  049D                     	;# 
  1887  050C                     	;# 
  1888  050C                     	;# 
  1889  050D                     	;# 
  1890  050E                     	;# 
  1891  050F                     	;# 
  1892  050F                     	;# 
  1893  0510                     	;# 
  1894  0511                     	;# 
  1895  0512                     	;# 
  1896  0512                     	;# 
  1897  0513                     	;# 
  1898  0514                     	;# 
  1899  0515                     	;# 
  1900  0515                     	;# 
  1901  0516                     	;# 
  1902  0517                     	;# 
  1903  0518                     	;# 
  1904  0519                     	;# 
  1905  051A                     	;# 
  1906  051B                     	;# 
  1907  051C                     	;# 
  1908  051D                     	;# 
  1909  058C                     	;# 
  1910  058C                     	;# 
  1911  058D                     	;# 
  1912  058E                     	;# 
  1913  058F                     	;# 
  1914  058F                     	;# 
  1915  0590                     	;# 
  1916  0591                     	;# 
  1917  0592                     	;# 
  1918  0593                     	;# 
  1919  060C                     	;# 
  1920  060D                     	;# 
  1921  060E                     	;# 
  1922  060F                     	;# 
  1923  0610                     	;# 
  1924  0611                     	;# 
  1925  0612                     	;# 
  1926  0613                     	;# 
  1927  0614                     	;# 
  1928  0616                     	;# 
  1929  0617                     	;# 
  1930  0618                     	;# 
  1931  0619                     	;# 
  1932  061A                     	;# 
  1933  061B                     	;# 
  1934  061C                     	;# 
  1935  061D                     	;# 
  1936  061E                     	;# 
  1937  068C                     	;# 
  1938  068D                     	;# 
  1939  068E                     	;# 
  1940  068F                     	;# 
  1941  0690                     	;# 
  1942  0691                     	;# 
  1943  0692                     	;# 
  1944  0693                     	;# 
  1945  0694                     	;# 
  1946  070C                     	;# 
  1947  070D                     	;# 
  1948  070E                     	;# 
  1949  070F                     	;# 
  1950  0710                     	;# 
  1951  0711                     	;# 
  1952  0712                     	;# 
  1953  0713                     	;# 
  1954  0714                     	;# 
  1955  0716                     	;# 
  1956  0717                     	;# 
  1957  0718                     	;# 
  1958  0719                     	;# 
  1959  071A                     	;# 
  1960  071B                     	;# 
  1961  071C                     	;# 
  1962  071D                     	;# 
  1963  071E                     	;# 
  1964  0796                     	;# 
  1965  0797                     	;# 
  1966  0798                     	;# 
  1967  0799                     	;# 
  1968  079A                     	;# 
  1969  079B                     	;# 
  1970  080C                     	;# 
  1971  080D                     	;# 
  1972  080E                     	;# 
  1973  080F                     	;# 
  1974  0810                     	;# 
  1975  0811                     	;# 
  1976  0812                     	;# 
  1977  0813                     	;# 
  1978  0814                     	;# 
  1979  081A                     	;# 
  1980  081B                     	;# 
  1981  081C                     	;# 
  1982  081D                     	;# 
  1983  081E                     	;# 
  1984  081F                     	;# 
  1985  088C                     	;# 
  1986  088D                     	;# 
  1987  088E                     	;# 
  1988  088F                     	;# 
  1989  0890                     	;# 
  1990  0891                     	;# 
  1991  0892                     	;# 
  1992  0893                     	;# 
  1993  0895                     	;# 
  1994  0896                     	;# 
  1995  0897                     	;# 
  1996  0898                     	;# 
  1997  0899                     	;# 
  1998  089A                     	;# 
  1999  089B                     	;# 
  2000  090C                     	;# 
  2001  090E                     	;# 
  2002  090F                     	;# 
  2003  091F                     	;# 
  2004  091F                     	;# 
  2005  098F                     	;# 
  2006  098F                     	;# 
  2007  0990                     	;# 
  2008  0991                     	;# 
  2009  0992                     	;# 
  2010  0993                     	;# 
  2011  0994                     	;# 
  2012  0995                     	;# 
  2013  0996                     	;# 
  2014  0997                     	;# 
  2015  0E0F                     	;# 
  2016  0E10                     	;# 
  2017  0E11                     	;# 
  2018  0E12                     	;# 
  2019  0E13                     	;# 
  2020  0E14                     	;# 
  2021  0E15                     	;# 
  2022  0E16                     	;# 
  2023  0E17                     	;# 
  2024  0E18                     	;# 
  2025  0E19                     	;# 
  2026  0E1A                     	;# 
  2027  0E1B                     	;# 
  2028  0E1C                     	;# 
  2029  0E1D                     	;# 
  2030  0E1E                     	;# 
  2031  0E1F                     	;# 
  2032  0E20                     	;# 
  2033  0E21                     	;# 
  2034  0E22                     	;# 
  2035  0E23                     	;# 
  2036  0E24                     	;# 
  2037  0E25                     	;# 
  2038  0E26                     	;# 
  2039  0E27                     	;# 
  2040  0E28                     	;# 
  2041  0E29                     	;# 
  2042  0E2A                     	;# 
  2043  0E2B                     	;# 
  2044  0E2C                     	;# 
  2045  0E2D                     	;# 
  2046  0E2E                     	;# 
  2047  0E2F                     	;# 
  2048  0E30                     	;# 
  2049  0E31                     	;# 
  2050  0E32                     	;# 
  2051  0E33                     	;# 
  2052  0E34                     	;# 
  2053  0E35                     	;# 
  2054  0E36                     	;# 
  2055  0E37                     	;# 
  2056  0E8F                     	;# 
  2057  0E90                     	;# 
  2058  0E91                     	;# 
  2059  0E92                     	;# 
  2060  0E93                     	;# 
  2061  0E94                     	;# 
  2062  0E95                     	;# 
  2063  0E96                     	;# 
  2064  0E97                     	;# 
  2065  0E9C                     	;# 
  2066  0E9D                     	;# 
  2067  0E9E                     	;# 
  2068  0EA1                     	;# 
  2069  0EA2                     	;# 
  2070  0EA3                     	;# 
  2071  0EA4                     	;# 
  2072  0EA5                     	;# 
  2073  0EA9                     	;# 
  2074  0EAA                     	;# 
  2075  0EAB                     	;# 
  2076  0EAC                     	;# 
  2077  0EB1                     	;# 
  2078  0EB2                     	;# 
  2079  0EB3                     	;# 
  2080  0EB8                     	;# 
  2081  0EB9                     	;# 
  2082  0EBA                     	;# 
  2083  0EBB                     	;# 
  2084  0EBC                     	;# 
  2085  0EBD                     	;# 
  2086  0EBE                     	;# 
  2087  0EC3                     	;# 
  2088  0EC5                     	;# 
  2089  0EC6                     	;# 
  2090  0EC7                     	;# 
  2091  0EC8                     	;# 
  2092  0EC9                     	;# 
  2093  0ECA                     	;# 
  2094  0ECB                     	;# 
  2095  0ECC                     	;# 
  2096  0F10                     	;# 
  2097  0F11                     	;# 
  2098  0F12                     	;# 
  2099  0F13                     	;# 
  2100  0F14                     	;# 
  2101  0F15                     	;# 
  2102  0F16                     	;# 
  2103  0F17                     	;# 
  2104  0F18                     	;# 
  2105  0F19                     	;# 
  2106  0F1A                     	;# 
  2107  0F1B                     	;# 
  2108  0F1C                     	;# 
  2109  0F1D                     	;# 
  2110  0F1E                     	;# 
  2111  0F1F                     	;# 
  2112  0F20                     	;# 
  2113  0F21                     	;# 
  2114  0F22                     	;# 
  2115  0F23                     	;# 
  2116  0F24                     	;# 
  2117  0F25                     	;# 
  2118  0F26                     	;# 
  2119  0F27                     	;# 
  2120  0F38                     	;# 
  2121  0F39                     	;# 
  2122  0F3A                     	;# 
  2123  0F3B                     	;# 
  2124  0F3C                     	;# 
  2125  0F3D                     	;# 
  2126  0F3E                     	;# 
  2127  0F3F                     	;# 
  2128  0F40                     	;# 
  2129  0F41                     	;# 
  2130  0F43                     	;# 
  2131  0F44                     	;# 
  2132  0F45                     	;# 
  2133  0F46                     	;# 
  2134  0F47                     	;# 
  2135  0F48                     	;# 
  2136  0F49                     	;# 
  2137  0F4A                     	;# 
  2138  0F4B                     	;# 
  2139  0F4C                     	;# 
  2140  0F4E                     	;# 
  2141  0F4F                     	;# 
  2142  0F50                     	;# 
  2143  0F51                     	;# 
  2144  0F52                     	;# 
  2145  0F53                     	;# 
  2146  0F54                     	;# 
  2147  0F55                     	;# 
  2148  0F56                     	;# 
  2149  0F57                     	;# 
  2150  0F65                     	;# 
  2151  0F68                     	;# 
  2152  0F69                     	;# 
  2153  0F6A                     	;# 
  2154  0F6B                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166  0000                     	;# 
  2167  0001                     	;# 
  2168  0002                     	;# 
  2169  0003                     	;# 
  2170  0004                     	;# 
  2171  0005                     	;# 
  2172  0006                     	;# 
  2173  0007                     	;# 
  2174  0008                     	;# 
  2175  0009                     	;# 
  2176  000A                     	;# 
  2177  000B                     	;# 
  2178  000C                     	;# 
  2179  000D                     	;# 
  2180  000E                     	;# 
  2181  0010                     	;# 
  2182  0011                     	;# 
  2183  0012                     	;# 
  2184  0013                     	;# 
  2185  0016                     	;# 
  2186  0017                     	;# 
  2187  0018                     	;# 
  2188  001C                     	;# 
  2189  001C                     	;# 
  2190  001D                     	;# 
  2191  001D                     	;# 
  2192  001E                     	;# 
  2193  001F                     	;# 
  2194  008C                     	;# 
  2195  008C                     	;# 
  2196  008D                     	;# 
  2197  008E                     	;# 
  2198  008E                     	;# 
  2199  008F                     	;# 
  2200  0090                     	;# 
  2201  0090                     	;# 
  2202  0091                     	;# 
  2203  0093                     	;# 
  2204  0094                     	;# 
  2205  0095                     	;# 
  2206  0096                     	;# 
  2207  0097                     	;# 
  2208  0098                     	;# 
  2209  0099                     	;# 
  2210  009A                     	;# 
  2211  009B                     	;# 
  2212  009C                     	;# 
  2213  009D                     	;# 
  2214  009E                     	;# 
  2215  010C                     	;# 
  2216  010D                     	;# 
  2217  010E                     	;# 
  2218  010E                     	;# 
  2219  010F                     	;# 
  2220  0110                     	;# 
  2221  0110                     	;# 
  2222  0111                     	;# 
  2223  0112                     	;# 
  2224  0112                     	;# 
  2225  0113                     	;# 
  2226  0114                     	;# 
  2227  0114                     	;# 
  2228  0115                     	;# 
  2229  0116                     	;# 
  2230  0116                     	;# 
  2231  0117                     	;# 
  2232  0119                     	;# 
  2233  0119                     	;# 
  2234  0119                     	;# 
  2235  011A                     	;# 
  2236  011A                     	;# 
  2237  011A                     	;# 
  2238  011B                     	;# 
  2239  011B                     	;# 
  2240  011B                     	;# 
  2241  011B                     	;# 
  2242  011B                     	;# 
  2243  011C                     	;# 
  2244  011C                     	;# 
  2245  011C                     	;# 
  2246  011D                     	;# 
  2247  011D                     	;# 
  2248  011D                     	;# 
  2249  011E                     	;# 
  2250  011E                     	;# 
  2251  011E                     	;# 
  2252  011F                     	;# 
  2253  011F                     	;# 
  2254  011F                     	;# 
  2255  011F                     	;# 
  2256  011F                     	;# 
  2257  018C                     	;# 
  2258  018D                     	;# 
  2259  018E                     	;# 
  2260  018F                     	;# 
  2261  0190                     	;# 
  2262  0191                     	;# 
  2263  0192                     	;# 
  2264  0196                     	;# 
  2265  0197                     	;# 
  2266  0198                     	;# 
  2267  0199                     	;# 
  2268  019A                     	;# 
  2269  019B                     	;# 
  2270  019C                     	;# 
  2271  020C                     	;# 
  2272  020C                     	;# 
  2273  020D                     	;# 
  2274  020E                     	;# 
  2275  020F                     	;# 
  2276  020F                     	;# 
  2277  0210                     	;# 
  2278  0210                     	;# 
  2279  0211                     	;# 
  2280  0211                     	;# 
  2281  0212                     	;# 
  2282  0212                     	;# 
  2283  0213                     	;# 
  2284  0214                     	;# 
  2285  0215                     	;# 
  2286  0215                     	;# 
  2287  0216                     	;# 
  2288  0216                     	;# 
  2289  0217                     	;# 
  2290  0217                     	;# 
  2291  0218                     	;# 
  2292  0218                     	;# 
  2293  0219                     	;# 
  2294  021A                     	;# 
  2295  021B                     	;# 
  2296  021B                     	;# 
  2297  021C                     	;# 
  2298  021C                     	;# 
  2299  021D                     	;# 
  2300  021D                     	;# 
  2301  021E                     	;# 
  2302  021F                     	;# 
  2303  028C                     	;# 
  2304  028C                     	;# 
  2305  028D                     	;# 
  2306  028D                     	;# 
  2307  028E                     	;# 
  2308  028F                     	;# 
  2309  0290                     	;# 
  2310  0290                     	;# 
  2311  0291                     	;# 
  2312  0292                     	;# 
  2313  0292                     	;# 
  2314  0293                     	;# 
  2315  0293                     	;# 
  2316  0294                     	;# 
  2317  0295                     	;# 
  2318  0296                     	;# 
  2319  0296                     	;# 
  2320  0297                     	;# 
  2321  0298                     	;# 
  2322  0298                     	;# 
  2323  0299                     	;# 
  2324  0299                     	;# 
  2325  029A                     	;# 
  2326  029B                     	;# 
  2327  029C                     	;# 
  2328  029C                     	;# 
  2329  029D                     	;# 
  2330  030C                     	;# 
  2331  030C                     	;# 
  2332  030D                     	;# 
  2333  030E                     	;# 
  2334  030F                     	;# 
  2335  0310                     	;# 
  2336  0310                     	;# 
  2337  0311                     	;# 
  2338  0312                     	;# 
  2339  0313                     	;# 
  2340  0314                     	;# 
  2341  0314                     	;# 
  2342  0315                     	;# 
  2343  0316                     	;# 
  2344  0317                     	;# 
  2345  0318                     	;# 
  2346  0318                     	;# 
  2347  0319                     	;# 
  2348  031A                     	;# 
  2349  031B                     	;# 
  2350  031C                     	;# 
  2351  031C                     	;# 
  2352  031D                     	;# 
  2353  031E                     	;# 
  2354  031F                     	;# 
  2355  038C                     	;# 
  2356  038D                     	;# 
  2357  038E                     	;# 
  2358  0390                     	;# 
  2359  0391                     	;# 
  2360  0392                     	;# 
  2361  040C                     	;# 
  2362  040D                     	;# 
  2363  040E                     	;# 
  2364  040F                     	;# 
  2365  0410                     	;# 
  2366  0411                     	;# 
  2367  0416                     	;# 
  2368  0416                     	;# 
  2369  0417                     	;# 
  2370  0418                     	;# 
  2371  0418                     	;# 
  2372  0419                     	;# 
  2373  041A                     	;# 
  2374  041A                     	;# 
  2375  041B                     	;# 
  2376  041C                     	;# 
  2377  041C                     	;# 
  2378  041D                     	;# 
  2379  041E                     	;# 
  2380  041F                     	;# 
  2381  048C                     	;# 
  2382  048C                     	;# 
  2383  048D                     	;# 
  2384  048E                     	;# 
  2385  048F                     	;# 
  2386  048F                     	;# 
  2387  0490                     	;# 
  2388  0491                     	;# 
  2389  0492                     	;# 
  2390  0492                     	;# 
  2391  0493                     	;# 
  2392  0494                     	;# 
  2393  0495                     	;# 
  2394  0495                     	;# 
  2395  0496                     	;# 
  2396  0497                     	;# 
  2397  0498                     	;# 
  2398  0499                     	;# 
  2399  049A                     	;# 
  2400  049B                     	;# 
  2401  049C                     	;# 
  2402  049D                     	;# 
  2403  050C                     	;# 
  2404  050C                     	;# 
  2405  050D                     	;# 
  2406  050E                     	;# 
  2407  050F                     	;# 
  2408  050F                     	;# 
  2409  0510                     	;# 
  2410  0511                     	;# 
  2411  0512                     	;# 
  2412  0512                     	;# 
  2413  0513                     	;# 
  2414  0514                     	;# 
  2415  0515                     	;# 
  2416  0515                     	;# 
  2417  0516                     	;# 
  2418  0517                     	;# 
  2419  0518                     	;# 
  2420  0519                     	;# 
  2421  051A                     	;# 
  2422  051B                     	;# 
  2423  051C                     	;# 
  2424  051D                     	;# 
  2425  058C                     	;# 
  2426  058C                     	;# 
  2427  058D                     	;# 
  2428  058E                     	;# 
  2429  058F                     	;# 
  2430  058F                     	;# 
  2431  0590                     	;# 
  2432  0591                     	;# 
  2433  0592                     	;# 
  2434  0593                     	;# 
  2435  060C                     	;# 
  2436  060D                     	;# 
  2437  060E                     	;# 
  2438  060F                     	;# 
  2439  0610                     	;# 
  2440  0611                     	;# 
  2441  0612                     	;# 
  2442  0613                     	;# 
  2443  0614                     	;# 
  2444  0616                     	;# 
  2445  0617                     	;# 
  2446  0618                     	;# 
  2447  0619                     	;# 
  2448  061A                     	;# 
  2449  061B                     	;# 
  2450  061C                     	;# 
  2451  061D                     	;# 
  2452  061E                     	;# 
  2453  068C                     	;# 
  2454  068D                     	;# 
  2455  068E                     	;# 
  2456  068F                     	;# 
  2457  0690                     	;# 
  2458  0691                     	;# 
  2459  0692                     	;# 
  2460  0693                     	;# 
  2461  0694                     	;# 
  2462  070C                     	;# 
  2463  070D                     	;# 
  2464  070E                     	;# 
  2465  070F                     	;# 
  2466  0710                     	;# 
  2467  0711                     	;# 
  2468  0712                     	;# 
  2469  0713                     	;# 
  2470  0714                     	;# 
  2471  0716                     	;# 
  2472  0717                     	;# 
  2473  0718                     	;# 
  2474  0719                     	;# 
  2475  071A                     	;# 
  2476  071B                     	;# 
  2477  071C                     	;# 
  2478  071D                     	;# 
  2479  071E                     	;# 
  2480  0796                     	;# 
  2481  0797                     	;# 
  2482  0798                     	;# 
  2483  0799                     	;# 
  2484  079A                     	;# 
  2485  079B                     	;# 
  2486  080C                     	;# 
  2487  080D                     	;# 
  2488  080E                     	;# 
  2489  080F                     	;# 
  2490  0810                     	;# 
  2491  0811                     	;# 
  2492  0812                     	;# 
  2493  0813                     	;# 
  2494  0814                     	;# 
  2495  081A                     	;# 
  2496  081B                     	;# 
  2497  081C                     	;# 
  2498  081D                     	;# 
  2499  081E                     	;# 
  2500  081F                     	;# 
  2501  088C                     	;# 
  2502  088D                     	;# 
  2503  088E                     	;# 
  2504  088F                     	;# 
  2505  0890                     	;# 
  2506  0891                     	;# 
  2507  0892                     	;# 
  2508  0893                     	;# 
  2509  0895                     	;# 
  2510  0896                     	;# 
  2511  0897                     	;# 
  2512  0898                     	;# 
  2513  0899                     	;# 
  2514  089A                     	;# 
  2515  089B                     	;# 
  2516  090C                     	;# 
  2517  090E                     	;# 
  2518  090F                     	;# 
  2519  091F                     	;# 
  2520  091F                     	;# 
  2521  098F                     	;# 
  2522  098F                     	;# 
  2523  0990                     	;# 
  2524  0991                     	;# 
  2525  0992                     	;# 
  2526  0993                     	;# 
  2527  0994                     	;# 
  2528  0995                     	;# 
  2529  0996                     	;# 
  2530  0997                     	;# 
  2531  0E0F                     	;# 
  2532  0E10                     	;# 
  2533  0E11                     	;# 
  2534  0E12                     	;# 
  2535  0E13                     	;# 
  2536  0E14                     	;# 
  2537  0E15                     	;# 
  2538  0E16                     	;# 
  2539  0E17                     	;# 
  2540  0E18                     	;# 
  2541  0E19                     	;# 
  2542  0E1A                     	;# 
  2543  0E1B                     	;# 
  2544  0E1C                     	;# 
  2545  0E1D                     	;# 
  2546  0E1E                     	;# 
  2547  0E1F                     	;# 
  2548  0E20                     	;# 
  2549  0E21                     	;# 
  2550  0E22                     	;# 
  2551  0E23                     	;# 
  2552  0E24                     	;# 
  2553  0E25                     	;# 
  2554  0E26                     	;# 
  2555  0E27                     	;# 
  2556  0E28                     	;# 
  2557  0E29                     	;# 
  2558  0E2A                     	;# 
  2559  0E2B                     	;# 
  2560  0E2C                     	;# 
  2561  0E2D                     	;# 
  2562  0E2E                     	;# 
  2563  0E2F                     	;# 
  2564  0E30                     	;# 
  2565  0E31                     	;# 
  2566  0E32                     	;# 
  2567  0E33                     	;# 
  2568  0E34                     	;# 
  2569  0E35                     	;# 
  2570  0E36                     	;# 
  2571  0E37                     	;# 
  2572  0E8F                     	;# 
  2573  0E90                     	;# 
  2574  0E91                     	;# 
  2575  0E92                     	;# 
  2576  0E93                     	;# 
  2577  0E94                     	;# 
  2578  0E95                     	;# 
  2579  0E96                     	;# 
  2580  0E97                     	;# 
  2581  0E9C                     	;# 
  2582  0E9D                     	;# 
  2583  0E9E                     	;# 
  2584  0EA1                     	;# 
  2585  0EA2                     	;# 
  2586  0EA3                     	;# 
  2587  0EA4                     	;# 
  2588  0EA5                     	;# 
  2589  0EA9                     	;# 
  2590  0EAA                     	;# 
  2591  0EAB                     	;# 
  2592  0EAC                     	;# 
  2593  0EB1                     	;# 
  2594  0EB2                     	;# 
  2595  0EB3                     	;# 
  2596  0EB8                     	;# 
  2597  0EB9                     	;# 
  2598  0EBA                     	;# 
  2599  0EBB                     	;# 
  2600  0EBC                     	;# 
  2601  0EBD                     	;# 
  2602  0EBE                     	;# 
  2603  0EC3                     	;# 
  2604  0EC5                     	;# 
  2605  0EC6                     	;# 
  2606  0EC7                     	;# 
  2607  0EC8                     	;# 
  2608  0EC9                     	;# 
  2609  0ECA                     	;# 
  2610  0ECB                     	;# 
  2611  0ECC                     	;# 
  2612  0F10                     	;# 
  2613  0F11                     	;# 
  2614  0F12                     	;# 
  2615  0F13                     	;# 
  2616  0F14                     	;# 
  2617  0F15                     	;# 
  2618  0F16                     	;# 
  2619  0F17                     	;# 
  2620  0F18                     	;# 
  2621  0F19                     	;# 
  2622  0F1A                     	;# 
  2623  0F1B                     	;# 
  2624  0F1C                     	;# 
  2625  0F1D                     	;# 
  2626  0F1E                     	;# 
  2627  0F1F                     	;# 
  2628  0F20                     	;# 
  2629  0F21                     	;# 
  2630  0F22                     	;# 
  2631  0F23                     	;# 
  2632  0F24                     	;# 
  2633  0F25                     	;# 
  2634  0F26                     	;# 
  2635  0F27                     	;# 
  2636  0F38                     	;# 
  2637  0F39                     	;# 
  2638  0F3A                     	;# 
  2639  0F3B                     	;# 
  2640  0F3C                     	;# 
  2641  0F3D                     	;# 
  2642  0F3E                     	;# 
  2643  0F3F                     	;# 
  2644  0F40                     	;# 
  2645  0F41                     	;# 
  2646  0F43                     	;# 
  2647  0F44                     	;# 
  2648  0F45                     	;# 
  2649  0F46                     	;# 
  2650  0F47                     	;# 
  2651  0F48                     	;# 
  2652  0F49                     	;# 
  2653  0F4A                     	;# 
  2654  0F4B                     	;# 
  2655  0F4C                     	;# 
  2656  0F4E                     	;# 
  2657  0F4F                     	;# 
  2658  0F50                     	;# 
  2659  0F51                     	;# 
  2660  0F52                     	;# 
  2661  0F53                     	;# 
  2662  0F54                     	;# 
  2663  0F55                     	;# 
  2664  0F56                     	;# 
  2665  0F57                     	;# 
  2666  0F65                     	;# 
  2667  0F68                     	;# 
  2668  0F69                     	;# 
  2669  0F6A                     	;# 
  2670  0F6B                     	;# 
  2671  0FE4                     	;# 
  2672  0FE5                     	;# 
  2673  0FE6                     	;# 
  2674  0FE7                     	;# 
  2675  0FE8                     	;# 
  2676  0FE9                     	;# 
  2677  0FEA                     	;# 
  2678  0FEB                     	;# 
  2679  0FED                     	;# 
  2680  0FEE                     	;# 
  2681  0FEF                     	;# 
  2682  0000                     	;# 
  2683  0001                     	;# 
  2684  0002                     	;# 
  2685  0003                     	;# 
  2686  0004                     	;# 
  2687  0005                     	;# 
  2688  0006                     	;# 
  2689  0007                     	;# 
  2690  0008                     	;# 
  2691  0009                     	;# 
  2692  000A                     	;# 
  2693  000B                     	;# 
  2694  000C                     	;# 
  2695  000D                     	;# 
  2696  000E                     	;# 
  2697  0010                     	;# 
  2698  0011                     	;# 
  2699  0012                     	;# 
  2700  0013                     	;# 
  2701  0016                     	;# 
  2702  0017                     	;# 
  2703  0018                     	;# 
  2704  001C                     	;# 
  2705  001C                     	;# 
  2706  001D                     	;# 
  2707  001D                     	;# 
  2708  001E                     	;# 
  2709  001F                     	;# 
  2710  008C                     	;# 
  2711  008C                     	;# 
  2712  008D                     	;# 
  2713  008E                     	;# 
  2714  008E                     	;# 
  2715  008F                     	;# 
  2716  0090                     	;# 
  2717  0090                     	;# 
  2718  0091                     	;# 
  2719  0093                     	;# 
  2720  0094                     	;# 
  2721  0095                     	;# 
  2722  0096                     	;# 
  2723  0097                     	;# 
  2724  0098                     	;# 
  2725  0099                     	;# 
  2726  009A                     	;# 
  2727  009B                     	;# 
  2728  009C                     	;# 
  2729  009D                     	;# 
  2730  009E                     	;# 
  2731  010C                     	;# 
  2732  010D                     	;# 
  2733  010E                     	;# 
  2734  010E                     	;# 
  2735  010F                     	;# 
  2736  0110                     	;# 
  2737  0110                     	;# 
  2738  0111                     	;# 
  2739  0112                     	;# 
  2740  0112                     	;# 
  2741  0113                     	;# 
  2742  0114                     	;# 
  2743  0114                     	;# 
  2744  0115                     	;# 
  2745  0116                     	;# 
  2746  0116                     	;# 
  2747  0117                     	;# 
  2748  0119                     	;# 
  2749  0119                     	;# 
  2750  0119                     	;# 
  2751  011A                     	;# 
  2752  011A                     	;# 
  2753  011A                     	;# 
  2754  011B                     	;# 
  2755  011B                     	;# 
  2756  011B                     	;# 
  2757  011B                     	;# 
  2758  011B                     	;# 
  2759  011C                     	;# 
  2760  011C                     	;# 
  2761  011C                     	;# 
  2762  011D                     	;# 
  2763  011D                     	;# 
  2764  011D                     	;# 
  2765  011E                     	;# 
  2766  011E                     	;# 
  2767  011E                     	;# 
  2768  011F                     	;# 
  2769  011F                     	;# 
  2770  011F                     	;# 
  2771  011F                     	;# 
  2772  011F                     	;# 
  2773  018C                     	;# 
  2774  018D                     	;# 
  2775  018E                     	;# 
  2776  018F                     	;# 
  2777  0190                     	;# 
  2778  0191                     	;# 
  2779  0192                     	;# 
  2780  0196                     	;# 
  2781  0197                     	;# 
  2782  0198                     	;# 
  2783  0199                     	;# 
  2784  019A                     	;# 
  2785  019B                     	;# 
  2786  019C                     	;# 
  2787  020C                     	;# 
  2788  020C                     	;# 
  2789  020D                     	;# 
  2790  020E                     	;# 
  2791  020F                     	;# 
  2792  020F                     	;# 
  2793  0210                     	;# 
  2794  0210                     	;# 
  2795  0211                     	;# 
  2796  0211                     	;# 
  2797  0212                     	;# 
  2798  0212                     	;# 
  2799  0213                     	;# 
  2800  0214                     	;# 
  2801  0215                     	;# 
  2802  0215                     	;# 
  2803  0216                     	;# 
  2804  0216                     	;# 
  2805  0217                     	;# 
  2806  0217                     	;# 
  2807  0218                     	;# 
  2808  0218                     	;# 
  2809  0219                     	;# 
  2810  021A                     	;# 
  2811  021B                     	;# 
  2812  021B                     	;# 
  2813  021C                     	;# 
  2814  021C                     	;# 
  2815  021D                     	;# 
  2816  021D                     	;# 
  2817  021E                     	;# 
  2818  021F                     	;# 
  2819  028C                     	;# 
  2820  028C                     	;# 
  2821  028D                     	;# 
  2822  028D                     	;# 
  2823  028E                     	;# 
  2824  028F                     	;# 
  2825  0290                     	;# 
  2826  0290                     	;# 
  2827  0291                     	;# 
  2828  0292                     	;# 
  2829  0292                     	;# 
  2830  0293                     	;# 
  2831  0293                     	;# 
  2832  0294                     	;# 
  2833  0295                     	;# 
  2834  0296                     	;# 
  2835  0296                     	;# 
  2836  0297                     	;# 
  2837  0298                     	;# 
  2838  0298                     	;# 
  2839  0299                     	;# 
  2840  0299                     	;# 
  2841  029A                     	;# 
  2842  029B                     	;# 
  2843  029C                     	;# 
  2844  029C                     	;# 
  2845  029D                     	;# 
  2846  030C                     	;# 
  2847  030C                     	;# 
  2848  030D                     	;# 
  2849  030E                     	;# 
  2850  030F                     	;# 
  2851  0310                     	;# 
  2852  0310                     	;# 
  2853  0311                     	;# 
  2854  0312                     	;# 
  2855  0313                     	;# 
  2856  0314                     	;# 
  2857  0314                     	;# 
  2858  0315                     	;# 
  2859  0316                     	;# 
  2860  0317                     	;# 
  2861  0318                     	;# 
  2862  0318                     	;# 
  2863  0319                     	;# 
  2864  031A                     	;# 
  2865  031B                     	;# 
  2866  031C                     	;# 
  2867  031C                     	;# 
  2868  031D                     	;# 
  2869  031E                     	;# 
  2870  031F                     	;# 
  2871  038C                     	;# 
  2872  038D                     	;# 
  2873  038E                     	;# 
  2874  0390                     	;# 
  2875  0391                     	;# 
  2876  0392                     	;# 
  2877  040C                     	;# 
  2878  040D                     	;# 
  2879  040E                     	;# 
  2880  040F                     	;# 
  2881  0410                     	;# 
  2882  0411                     	;# 
  2883  0416                     	;# 
  2884  0416                     	;# 
  2885  0417                     	;# 
  2886  0418                     	;# 
  2887  0418                     	;# 
  2888  0419                     	;# 
  2889  041A                     	;# 
  2890  041A                     	;# 
  2891  041B                     	;# 
  2892  041C                     	;# 
  2893  041C                     	;# 
  2894  041D                     	;# 
  2895  041E                     	;# 
  2896  041F                     	;# 
  2897  048C                     	;# 
  2898  048C                     	;# 
  2899  048D                     	;# 
  2900  048E                     	;# 
  2901  048F                     	;# 
  2902  048F                     	;# 
  2903  0490                     	;# 
  2904  0491                     	;# 
  2905  0492                     	;# 
  2906  0492                     	;# 
  2907  0493                     	;# 
  2908  0494                     	;# 
  2909  0495                     	;# 
  2910  0495                     	;# 
  2911  0496                     	;# 
  2912  0497                     	;# 
  2913  0498                     	;# 
  2914  0499                     	;# 
  2915  049A                     	;# 
  2916  049B                     	;# 
  2917  049C                     	;# 
  2918  049D                     	;# 
  2919  050C                     	;# 
  2920  050C                     	;# 
  2921  050D                     	;# 
  2922  050E                     	;# 
  2923  050F                     	;# 
  2924  050F                     	;# 
  2925  0510                     	;# 
  2926  0511                     	;# 
  2927  0512                     	;# 
  2928  0512                     	;# 
  2929  0513                     	;# 
  2930  0514                     	;# 
  2931  0515                     	;# 
  2932  0515                     	;# 
  2933  0516                     	;# 
  2934  0517                     	;# 
  2935  0518                     	;# 
  2936  0519                     	;# 
  2937  051A                     	;# 
  2938  051B                     	;# 
  2939  051C                     	;# 
  2940  051D                     	;# 
  2941  058C                     	;# 
  2942  058C                     	;# 
  2943  058D                     	;# 
  2944  058E                     	;# 
  2945  058F                     	;# 
  2946  058F                     	;# 
  2947  0590                     	;# 
  2948  0591                     	;# 
  2949  0592                     	;# 
  2950  0593                     	;# 
  2951  060C                     	;# 
  2952  060D                     	;# 
  2953  060E                     	;# 
  2954  060F                     	;# 
  2955  0610                     	;# 
  2956  0611                     	;# 
  2957  0612                     	;# 
  2958  0613                     	;# 
  2959  0614                     	;# 
  2960  0616                     	;# 
  2961  0617                     	;# 
  2962  0618                     	;# 
  2963  0619                     	;# 
  2964  061A                     	;# 
  2965  061B                     	;# 
  2966  061C                     	;# 
  2967  061D                     	;# 
  2968  061E                     	;# 
  2969  068C                     	;# 
  2970  068D                     	;# 
  2971  068E                     	;# 
  2972  068F                     	;# 
  2973  0690                     	;# 
  2974  0691                     	;# 
  2975  0692                     	;# 
  2976  0693                     	;# 
  2977  0694                     	;# 
  2978  070C                     	;# 
  2979  070D                     	;# 
  2980  070E                     	;# 
  2981  070F                     	;# 
  2982  0710                     	;# 
  2983  0711                     	;# 
  2984  0712                     	;# 
  2985  0713                     	;# 
  2986  0714                     	;# 
  2987  0716                     	;# 
  2988  0717                     	;# 
  2989  0718                     	;# 
  2990  0719                     	;# 
  2991  071A                     	;# 
  2992  071B                     	;# 
  2993  071C                     	;# 
  2994  071D                     	;# 
  2995  071E                     	;# 
  2996  0796                     	;# 
  2997  0797                     	;# 
  2998  0798                     	;# 
  2999  0799                     	;# 
  3000  079A                     	;# 
  3001  079B                     	;# 
  3002  080C                     	;# 
  3003  080D                     	;# 
  3004  080E                     	;# 
  3005  080F                     	;# 
  3006  0810                     	;# 
  3007  0811                     	;# 
  3008  0812                     	;# 
  3009  0813                     	;# 
  3010  0814                     	;# 
  3011  081A                     	;# 
  3012  081B                     	;# 
  3013  081C                     	;# 
  3014  081D                     	;# 
  3015  081E                     	;# 
  3016  081F                     	;# 
  3017  088C                     	;# 
  3018  088D                     	;# 
  3019  088E                     	;# 
  3020  088F                     	;# 
  3021  0890                     	;# 
  3022  0891                     	;# 
  3023  0892                     	;# 
  3024  0893                     	;# 
  3025  0895                     	;# 
  3026  0896                     	;# 
  3027  0897                     	;# 
  3028  0898                     	;# 
  3029  0899                     	;# 
  3030  089A                     	;# 
  3031  089B                     	;# 
  3032  090C                     	;# 
  3033  090E                     	;# 
  3034  090F                     	;# 
  3035  091F                     	;# 
  3036  091F                     	;# 
  3037  098F                     	;# 
  3038  098F                     	;# 
  3039  0990                     	;# 
  3040  0991                     	;# 
  3041  0992                     	;# 
  3042  0993                     	;# 
  3043  0994                     	;# 
  3044  0995                     	;# 
  3045  0996                     	;# 
  3046  0997                     	;# 
  3047  0E0F                     	;# 
  3048  0E10                     	;# 
  3049  0E11                     	;# 
  3050  0E12                     	;# 
  3051  0E13                     	;# 
  3052  0E14                     	;# 
  3053  0E15                     	;# 
  3054  0E16                     	;# 
  3055  0E17                     	;# 
  3056  0E18                     	;# 
  3057  0E19                     	;# 
  3058  0E1A                     	;# 
  3059  0E1B                     	;# 
  3060  0E1C                     	;# 
  3061  0E1D                     	;# 
  3062  0E1E                     	;# 
  3063  0E1F                     	;# 
  3064  0E20                     	;# 
  3065  0E21                     	;# 
  3066  0E22                     	;# 
  3067  0E23                     	;# 
  3068  0E24                     	;# 
  3069  0E25                     	;# 
  3070  0E26                     	;# 
  3071  0E27                     	;# 
  3072  0E28                     	;# 
  3073  0E29                     	;# 
  3074  0E2A                     	;# 
  3075  0E2B                     	;# 
  3076  0E2C                     	;# 
  3077  0E2D                     	;# 
  3078  0E2E                     	;# 
  3079  0E2F                     	;# 
  3080  0E30                     	;# 
  3081  0E31                     	;# 
  3082  0E32                     	;# 
  3083  0E33                     	;# 
  3084  0E34                     	;# 
  3085  0E35                     	;# 
  3086  0E36                     	;# 
  3087  0E37                     	;# 
  3088  0E8F                     	;# 
  3089  0E90                     	;# 
  3090  0E91                     	;# 
  3091  0E92                     	;# 
  3092  0E93                     	;# 
  3093  0E94                     	;# 
  3094  0E95                     	;# 
  3095  0E96                     	;# 
  3096  0E97                     	;# 
  3097  0E9C                     	;# 
  3098  0E9D                     	;# 
  3099  0E9E                     	;# 
  3100  0EA1                     	;# 
  3101  0EA2                     	;# 
  3102  0EA3                     	;# 
  3103  0EA4                     	;# 
  3104  0EA5                     	;# 
  3105  0EA9                     	;# 
  3106  0EAA                     	;# 
  3107  0EAB                     	;# 
  3108  0EAC                     	;# 
  3109  0EB1                     	;# 
  3110  0EB2                     	;# 
  3111  0EB3                     	;# 
  3112  0EB8                     	;# 
  3113  0EB9                     	;# 
  3114  0EBA                     	;# 
  3115  0EBB                     	;# 
  3116  0EBC                     	;# 
  3117  0EBD                     	;# 
  3118  0EBE                     	;# 
  3119  0EC3                     	;# 
  3120  0EC5                     	;# 
  3121  0EC6                     	;# 
  3122  0EC7                     	;# 
  3123  0EC8                     	;# 
  3124  0EC9                     	;# 
  3125  0ECA                     	;# 
  3126  0ECB                     	;# 
  3127  0ECC                     	;# 
  3128  0F10                     	;# 
  3129  0F11                     	;# 
  3130  0F12                     	;# 
  3131  0F13                     	;# 
  3132  0F14                     	;# 
  3133  0F15                     	;# 
  3134  0F16                     	;# 
  3135  0F17                     	;# 
  3136  0F18                     	;# 
  3137  0F19                     	;# 
  3138  0F1A                     	;# 
  3139  0F1B                     	;# 
  3140  0F1C                     	;# 
  3141  0F1D                     	;# 
  3142  0F1E                     	;# 
  3143  0F1F                     	;# 
  3144  0F20                     	;# 
  3145  0F21                     	;# 
  3146  0F22                     	;# 
  3147  0F23                     	;# 
  3148  0F24                     	;# 
  3149  0F25                     	;# 
  3150  0F26                     	;# 
  3151  0F27                     	;# 
  3152  0F38                     	;# 
  3153  0F39                     	;# 
  3154  0F3A                     	;# 
  3155  0F3B                     	;# 
  3156  0F3C                     	;# 
  3157  0F3D                     	;# 
  3158  0F3E                     	;# 
  3159  0F3F                     	;# 
  3160  0F40                     	;# 
  3161  0F41                     	;# 
  3162  0F43                     	;# 
  3163  0F44                     	;# 
  3164  0F45                     	;# 
  3165  0F46                     	;# 
  3166  0F47                     	;# 
  3167  0F48                     	;# 
  3168  0F49                     	;# 
  3169  0F4A                     	;# 
  3170  0F4B                     	;# 
  3171  0F4C                     	;# 
  3172  0F4E                     	;# 
  3173  0F4F                     	;# 
  3174  0F50                     	;# 
  3175  0F51                     	;# 
  3176  0F52                     	;# 
  3177  0F53                     	;# 
  3178  0F54                     	;# 
  3179  0F55                     	;# 
  3180  0F56                     	;# 
  3181  0F57                     	;# 
  3182  0F65                     	;# 
  3183  0F68                     	;# 
  3184  0F69                     	;# 
  3185  0F6A                     	;# 
  3186  0F6B                     	;# 
  3187  0FE4                     	;# 
  3188  0FE5                     	;# 
  3189  0FE6                     	;# 
  3190  0FE7                     	;# 
  3191  0FE8                     	;# 
  3192  0FE9                     	;# 
  3193  0FEA                     	;# 
  3194  0FEB                     	;# 
  3195  0FED                     	;# 
  3196  0FEE                     	;# 
  3197  0FEF                     	;# 
  3198  0000                     	;# 
  3199  0001                     	;# 
  3200  0002                     	;# 
  3201  0003                     	;# 
  3202  0004                     	;# 
  3203  0005                     	;# 
  3204  0006                     	;# 
  3205  0007                     	;# 
  3206  0008                     	;# 
  3207  0009                     	;# 
  3208  000A                     	;# 
  3209  000B                     	;# 
  3210  000C                     	;# 
  3211  000D                     	;# 
  3212  000E                     	;# 
  3213  0010                     	;# 
  3214  0011                     	;# 
  3215  0012                     	;# 
  3216  0013                     	;# 
  3217  0016                     	;# 
  3218  0017                     	;# 
  3219  0018                     	;# 
  3220  001C                     	;# 
  3221  001C                     	;# 
  3222  001D                     	;# 
  3223  001D                     	;# 
  3224  001E                     	;# 
  3225  001F                     	;# 
  3226  008C                     	;# 
  3227  008C                     	;# 
  3228  008D                     	;# 
  3229  008E                     	;# 
  3230  008E                     	;# 
  3231  008F                     	;# 
  3232  0090                     	;# 
  3233  0090                     	;# 
  3234  0091                     	;# 
  3235  0093                     	;# 
  3236  0094                     	;# 
  3237  0095                     	;# 
  3238  0096                     	;# 
  3239  0097                     	;# 
  3240  0098                     	;# 
  3241  0099                     	;# 
  3242  009A                     	;# 
  3243  009B                     	;# 
  3244  009C                     	;# 
  3245  009D                     	;# 
  3246  009E                     	;# 
  3247  010C                     	;# 
  3248  010D                     	;# 
  3249  010E                     	;# 
  3250  010E                     	;# 
  3251  010F                     	;# 
  3252  0110                     	;# 
  3253  0110                     	;# 
  3254  0111                     	;# 
  3255  0112                     	;# 
  3256  0112                     	;# 
  3257  0113                     	;# 
  3258  0114                     	;# 
  3259  0114                     	;# 
  3260  0115                     	;# 
  3261  0116                     	;# 
  3262  0116                     	;# 
  3263  0117                     	;# 
  3264  0119                     	;# 
  3265  0119                     	;# 
  3266  0119                     	;# 
  3267  011A                     	;# 
  3268  011A                     	;# 
  3269  011A                     	;# 
  3270  011B                     	;# 
  3271  011B                     	;# 
  3272  011B                     	;# 
  3273  011B                     	;# 
  3274  011B                     	;# 
  3275  011C                     	;# 
  3276  011C                     	;# 
  3277  011C                     	;# 
  3278  011D                     	;# 
  3279  011D                     	;# 
  3280  011D                     	;# 
  3281  011E                     	;# 
  3282  011E                     	;# 
  3283  011E                     	;# 
  3284  011F                     	;# 
  3285  011F                     	;# 
  3286  011F                     	;# 
  3287  011F                     	;# 
  3288  011F                     	;# 
  3289  018C                     	;# 
  3290  018D                     	;# 
  3291  018E                     	;# 
  3292  018F                     	;# 
  3293  0190                     	;# 
  3294  0191                     	;# 
  3295  0192                     	;# 
  3296  0196                     	;# 
  3297  0197                     	;# 
  3298  0198                     	;# 
  3299  0199                     	;# 
  3300  019A                     	;# 
  3301  019B                     	;# 
  3302  019C                     	;# 
  3303  020C                     	;# 
  3304  020C                     	;# 
  3305  020D                     	;# 
  3306  020E                     	;# 
  3307  020F                     	;# 
  3308  020F                     	;# 
  3309  0210                     	;# 
  3310  0210                     	;# 
  3311  0211                     	;# 
  3312  0211                     	;# 
  3313  0212                     	;# 
  3314  0212                     	;# 
  3315  0213                     	;# 
  3316  0214                     	;# 
  3317  0215                     	;# 
  3318  0215                     	;# 
  3319  0216                     	;# 
  3320  0216                     	;# 
  3321  0217                     	;# 
  3322  0217                     	;# 
  3323  0218                     	;# 
  3324  0218                     	;# 
  3325  0219                     	;# 
  3326  021A                     	;# 
  3327  021B                     	;# 
  3328  021B                     	;# 
  3329  021C                     	;# 
  3330  021C                     	;# 
  3331  021D                     	;# 
  3332  021D                     	;# 
  3333  021E                     	;# 
  3334  021F                     	;# 
  3335  028C                     	;# 
  3336  028C                     	;# 
  3337  028D                     	;# 
  3338  028D                     	;# 
  3339  028E                     	;# 
  3340  028F                     	;# 
  3341  0290                     	;# 
  3342  0290                     	;# 
  3343  0291                     	;# 
  3344  0292                     	;# 
  3345  0292                     	;# 
  3346  0293                     	;# 
  3347  0293                     	;# 
  3348  0294                     	;# 
  3349  0295                     	;# 
  3350  0296                     	;# 
  3351  0296                     	;# 
  3352  0297                     	;# 
  3353  0298                     	;# 
  3354  0298                     	;# 
  3355  0299                     	;# 
  3356  0299                     	;# 
  3357  029A                     	;# 
  3358  029B                     	;# 
  3359  029C                     	;# 
  3360  029C                     	;# 
  3361  029D                     	;# 
  3362  030C                     	;# 
  3363  030C                     	;# 
  3364  030D                     	;# 
  3365  030E                     	;# 
  3366  030F                     	;# 
  3367  0310                     	;# 
  3368  0310                     	;# 
  3369  0311                     	;# 
  3370  0312                     	;# 
  3371  0313                     	;# 
  3372  0314                     	;# 
  3373  0314                     	;# 
  3374  0315                     	;# 
  3375  0316                     	;# 
  3376  0317                     	;# 
  3377  0318                     	;# 
  3378  0318                     	;# 
  3379  0319                     	;# 
  3380  031A                     	;# 
  3381  031B                     	;# 
  3382  031C                     	;# 
  3383  031C                     	;# 
  3384  031D                     	;# 
  3385  031E                     	;# 
  3386  031F                     	;# 
  3387  038C                     	;# 
  3388  038D                     	;# 
  3389  038E                     	;# 
  3390  0390                     	;# 
  3391  0391                     	;# 
  3392  0392                     	;# 
  3393  040C                     	;# 
  3394  040D                     	;# 
  3395  040E                     	;# 
  3396  040F                     	;# 
  3397  0410                     	;# 
  3398  0411                     	;# 
  3399  0416                     	;# 
  3400  0416                     	;# 
  3401  0417                     	;# 
  3402  0418                     	;# 
  3403  0418                     	;# 
  3404  0419                     	;# 
  3405  041A                     	;# 
  3406  041A                     	;# 
  3407  041B                     	;# 
  3408  041C                     	;# 
  3409  041C                     	;# 
  3410  041D                     	;# 
  3411  041E                     	;# 
  3412  041F                     	;# 
  3413  048C                     	;# 
  3414  048C                     	;# 
  3415  048D                     	;# 
  3416  048E                     	;# 
  3417  048F                     	;# 
  3418  048F                     	;# 
  3419  0490                     	;# 
  3420  0491                     	;# 
  3421  0492                     	;# 
  3422  0492                     	;# 
  3423  0493                     	;# 
  3424  0494                     	;# 
  3425  0495                     	;# 
  3426  0495                     	;# 
  3427  0496                     	;# 
  3428  0497                     	;# 
  3429  0498                     	;# 
  3430  0499                     	;# 
  3431  049A                     	;# 
  3432  049B                     	;# 
  3433  049C                     	;# 
  3434  049D                     	;# 
  3435  050C                     	;# 
  3436  050C                     	;# 
  3437  050D                     	;# 
  3438  050E                     	;# 
  3439  050F                     	;# 
  3440  050F                     	;# 
  3441  0510                     	;# 
  3442  0511                     	;# 
  3443  0512                     	;# 
  3444  0512                     	;# 
  3445  0513                     	;# 
  3446  0514                     	;# 
  3447  0515                     	;# 
  3448  0515                     	;# 
  3449  0516                     	;# 
  3450  0517                     	;# 
  3451  0518                     	;# 
  3452  0519                     	;# 
  3453  051A                     	;# 
  3454  051B                     	;# 
  3455  051C                     	;# 
  3456  051D                     	;# 
  3457  058C                     	;# 
  3458  058C                     	;# 
  3459  058D                     	;# 
  3460  058E                     	;# 
  3461  058F                     	;# 
  3462  058F                     	;# 
  3463  0590                     	;# 
  3464  0591                     	;# 
  3465  0592                     	;# 
  3466  0593                     	;# 
  3467  060C                     	;# 
  3468  060D                     	;# 
  3469  060E                     	;# 
  3470  060F                     	;# 
  3471  0610                     	;# 
  3472  0611                     	;# 
  3473  0612                     	;# 
  3474  0613                     	;# 
  3475  0614                     	;# 
  3476  0616                     	;# 
  3477  0617                     	;# 
  3478  0618                     	;# 
  3479  0619                     	;# 
  3480  061A                     	;# 
  3481  061B                     	;# 
  3482  061C                     	;# 
  3483  061D                     	;# 
  3484  061E                     	;# 
  3485  068C                     	;# 
  3486  068D                     	;# 
  3487  068E                     	;# 
  3488  068F                     	;# 
  3489  0690                     	;# 
  3490  0691                     	;# 
  3491  0692                     	;# 
  3492  0693                     	;# 
  3493  0694                     	;# 
  3494  070C                     	;# 
  3495  070D                     	;# 
  3496  070E                     	;# 
  3497  070F                     	;# 
  3498  0710                     	;# 
  3499  0711                     	;# 
  3500  0712                     	;# 
  3501  0713                     	;# 
  3502  0714                     	;# 
  3503  0716                     	;# 
  3504  0717                     	;# 
  3505  0718                     	;# 
  3506  0719                     	;# 
  3507  071A                     	;# 
  3508  071B                     	;# 
  3509  071C                     	;# 
  3510  071D                     	;# 
  3511  071E                     	;# 
  3512  0796                     	;# 
  3513  0797                     	;# 
  3514  0798                     	;# 
  3515  0799                     	;# 
  3516  079A                     	;# 
  3517  079B                     	;# 
  3518  080C                     	;# 
  3519  080D                     	;# 
  3520  080E                     	;# 
  3521  080F                     	;# 
  3522  0810                     	;# 
  3523  0811                     	;# 
  3524  0812                     	;# 
  3525  0813                     	;# 
  3526  0814                     	;# 
  3527  081A                     	;# 
  3528  081B                     	;# 
  3529  081C                     	;# 
  3530  081D                     	;# 
  3531  081E                     	;# 
  3532  081F                     	;# 
  3533  088C                     	;# 
  3534  088D                     	;# 
  3535  088E                     	;# 
  3536  088F                     	;# 
  3537  0890                     	;# 
  3538  0891                     	;# 
  3539  0892                     	;# 
  3540  0893                     	;# 
  3541  0895                     	;# 
  3542  0896                     	;# 
  3543  0897                     	;# 
  3544  0898                     	;# 
  3545  0899                     	;# 
  3546  089A                     	;# 
  3547  089B                     	;# 
  3548  090C                     	;# 
  3549  090E                     	;# 
  3550  090F                     	;# 
  3551  091F                     	;# 
  3552  091F                     	;# 
  3553  098F                     	;# 
  3554  098F                     	;# 
  3555  0990                     	;# 
  3556  0991                     	;# 
  3557  0992                     	;# 
  3558  0993                     	;# 
  3559  0994                     	;# 
  3560  0995                     	;# 
  3561  0996                     	;# 
  3562  0997                     	;# 
  3563  0E0F                     	;# 
  3564  0E10                     	;# 
  3565  0E11                     	;# 
  3566  0E12                     	;# 
  3567  0E13                     	;# 
  3568  0E14                     	;# 
  3569  0E15                     	;# 
  3570  0E16                     	;# 
  3571  0E17                     	;# 
  3572  0E18                     	;# 
  3573  0E19                     	;# 
  3574  0E1A                     	;# 
  3575  0E1B                     	;# 
  3576  0E1C                     	;# 
  3577  0E1D                     	;# 
  3578  0E1E                     	;# 
  3579  0E1F                     	;# 
  3580  0E20                     	;# 
  3581  0E21                     	;# 
  3582  0E22                     	;# 
  3583  0E23                     	;# 
  3584  0E24                     	;# 
  3585  0E25                     	;# 
  3586  0E26                     	;# 
  3587  0E27                     	;# 
  3588  0E28                     	;# 
  3589  0E29                     	;# 
  3590  0E2A                     	;# 
  3591  0E2B                     	;# 
  3592  0E2C                     	;# 
  3593  0E2D                     	;# 
  3594  0E2E                     	;# 
  3595  0E2F                     	;# 
  3596  0E30                     	;# 
  3597  0E31                     	;# 
  3598  0E32                     	;# 
  3599  0E33                     	;# 
  3600  0E34                     	;# 
  3601  0E35                     	;# 
  3602  0E36                     	;# 
  3603  0E37                     	;# 
  3604  0E8F                     	;# 
  3605  0E90                     	;# 
  3606  0E91                     	;# 
  3607  0E92                     	;# 
  3608  0E93                     	;# 
  3609  0E94                     	;# 
  3610  0E95                     	;# 
  3611  0E96                     	;# 
  3612  0E97                     	;# 
  3613  0E9C                     	;# 
  3614  0E9D                     	;# 
  3615  0E9E                     	;# 
  3616  0EA1                     	;# 
  3617  0EA2                     	;# 
  3618  0EA3                     	;# 
  3619  0EA4                     	;# 
  3620  0EA5                     	;# 
  3621  0EA9                     	;# 
  3622  0EAA                     	;# 
  3623  0EAB                     	;# 
  3624  0EAC                     	;# 
  3625  0EB1                     	;# 
  3626  0EB2                     	;# 
  3627  0EB3                     	;# 
  3628  0EB8                     	;# 
  3629  0EB9                     	;# 
  3630  0EBA                     	;# 
  3631  0EBB                     	;# 
  3632  0EBC                     	;# 
  3633  0EBD                     	;# 
  3634  0EBE                     	;# 
  3635  0EC3                     	;# 
  3636  0EC5                     	;# 
  3637  0EC6                     	;# 
  3638  0EC7                     	;# 
  3639  0EC8                     	;# 
  3640  0EC9                     	;# 
  3641  0ECA                     	;# 
  3642  0ECB                     	;# 
  3643  0ECC                     	;# 
  3644  0F10                     	;# 
  3645  0F11                     	;# 
  3646  0F12                     	;# 
  3647  0F13                     	;# 
  3648  0F14                     	;# 
  3649  0F15                     	;# 
  3650  0F16                     	;# 
  3651  0F17                     	;# 
  3652  0F18                     	;# 
  3653  0F19                     	;# 
  3654  0F1A                     	;# 
  3655  0F1B                     	;# 
  3656  0F1C                     	;# 
  3657  0F1D                     	;# 
  3658  0F1E                     	;# 
  3659  0F1F                     	;# 
  3660  0F20                     	;# 
  3661  0F21                     	;# 
  3662  0F22                     	;# 
  3663  0F23                     	;# 
  3664  0F24                     	;# 
  3665  0F25                     	;# 
  3666  0F26                     	;# 
  3667  0F27                     	;# 
  3668  0F38                     	;# 
  3669  0F39                     	;# 
  3670  0F3A                     	;# 
  3671  0F3B                     	;# 
  3672  0F3C                     	;# 
  3673  0F3D                     	;# 
  3674  0F3E                     	;# 
  3675  0F3F                     	;# 
  3676  0F40                     	;# 
  3677  0F41                     	;# 
  3678  0F43                     	;# 
  3679  0F44                     	;# 
  3680  0F45                     	;# 
  3681  0F46                     	;# 
  3682  0F47                     	;# 
  3683  0F48                     	;# 
  3684  0F49                     	;# 
  3685  0F4A                     	;# 
  3686  0F4B                     	;# 
  3687  0F4C                     	;# 
  3688  0F4E                     	;# 
  3689  0F4F                     	;# 
  3690  0F50                     	;# 
  3691  0F51                     	;# 
  3692  0F52                     	;# 
  3693  0F53                     	;# 
  3694  0F54                     	;# 
  3695  0F55                     	;# 
  3696  0F56                     	;# 
  3697  0F57                     	;# 
  3698  0F65                     	;# 
  3699  0F68                     	;# 
  3700  0F69                     	;# 
  3701  0F6A                     	;# 
  3702  0F6B                     	;# 
  3703  0FE4                     	;# 
  3704  0FE5                     	;# 
  3705  0FE6                     	;# 
  3706  0FE7                     	;# 
  3707  0FE8                     	;# 
  3708  0FE9                     	;# 
  3709  0FEA                     	;# 
  3710  0FEB                     	;# 
  3711  0FED                     	;# 
  3712  0FEE                     	;# 
  3713  0FEF                     	;# 
  3714                           
  3715                           	psect	stringtext
  3716  0741                     __pstringtext:	
  3717  0741                     _dpowers:	
  3718  0741  3401               	retlw	1
  3719  0742  3400               	retlw	0
  3720  0743  3400               	retlw	0
  3721  0744  3400               	retlw	0
  3722  0745  340A               	retlw	10
  3723  0746  3400               	retlw	0
  3724  0747  3400               	retlw	0
  3725  0748  3400               	retlw	0
  3726  0749  3464               	retlw	100
  3727  074A  3400               	retlw	0
  3728  074B  3400               	retlw	0
  3729  074C  3400               	retlw	0
  3730  074D  34E8               	retlw	232
  3731  074E  3403               	retlw	3
  3732  074F  3400               	retlw	0
  3733  0750  3400               	retlw	0
  3734  0751  3410               	retlw	16
  3735  0752  3427               	retlw	39
  3736  0753  3400               	retlw	0
  3737  0754  3400               	retlw	0
  3738  0755  34A0               	retlw	160
  3739  0756  3486               	retlw	134
  3740  0757  3401               	retlw	1
  3741  0758  3400               	retlw	0
  3742  0759  3440               	retlw	64
  3743  075A  3442               	retlw	66
  3744  075B  340F               	retlw	15
  3745  075C  3400               	retlw	0
  3746  075D  3480               	retlw	128
  3747  075E  3496               	retlw	150
  3748  075F  3498               	retlw	152
  3749  0760  3400               	retlw	0
  3750  0761  3400               	retlw	0
  3751  0762  34E1               	retlw	225
  3752  0763  34F5               	retlw	245
  3753  0764  3405               	retlw	5
  3754  0765  3400               	retlw	0
  3755  0766  34CA               	retlw	202
  3756  0767  349A               	retlw	154
  3757  0768  343B               	retlw	59
  3758  0769                     __end_of_dpowers:	
  3759  0769                     __powers_:	
  3760  0769  3400               	retlw	0
  3761  076A  3480               	retlw	128
  3762  076B  343F               	retlw	63
  3763  076C  3400               	retlw	0
  3764  076D  3420               	retlw	32
  3765  076E  3441               	retlw	65
  3766  076F  3400               	retlw	0
  3767  0770  34C8               	retlw	200
  3768  0771  3442               	retlw	66
  3769  0772  3400               	retlw	0
  3770  0773  347A               	retlw	122
  3771  0774  3444               	retlw	68
  3772  0775  3440               	retlw	64
  3773  0776  341C               	retlw	28
  3774  0777  3446               	retlw	70
  3775  0778  3450               	retlw	80
  3776  0779  34C3               	retlw	195
  3777  077A  3447               	retlw	71
  3778  077B  3424               	retlw	36
  3779  077C  3474               	retlw	116
  3780  077D  3449               	retlw	73
  3781  077E  3497               	retlw	151
  3782  077F  3418               	retlw	24
  3783  0780  344B               	retlw	75
  3784  0781  34BC               	retlw	188
  3785  0782  34BE               	retlw	190
  3786  0783  344C               	retlw	76
  3787  0784  346B               	retlw	107
  3788  0785  346E               	retlw	110
  3789  0786  344E               	retlw	78
  3790  0787  3403               	retlw	3
  3791  0788  3415               	retlw	21
  3792  0789  3450               	retlw	80
  3793  078A  3479               	retlw	121
  3794  078B  34AD               	retlw	173
  3795  078C  3460               	retlw	96
  3796  078D  34F3               	retlw	243
  3797  078E  3449               	retlw	73
  3798  078F  3471               	retlw	113
  3799  0790                     __end_of__powers_:	
  3800  0790                     __npowers_:	
  3801  0790  3400               	retlw	0
  3802  0791  3480               	retlw	128
  3803  0792  343F               	retlw	63
  3804  0793  34CD               	retlw	205
  3805  0794  34CC               	retlw	204
  3806  0795  343D               	retlw	61
  3807  0796  34D7               	retlw	215
  3808  0797  3423               	retlw	35
  3809  0798  343C               	retlw	60
  3810  0799  3412               	retlw	18
  3811  079A  3483               	retlw	131
  3812  079B  343A               	retlw	58
  3813  079C  34B7               	retlw	183
  3814  079D  34D1               	retlw	209
  3815  079E  3438               	retlw	56
  3816  079F  34C6               	retlw	198
  3817  07A0  3427               	retlw	39
  3818  07A1  3437               	retlw	55
  3819  07A2  3438               	retlw	56
  3820  07A3  3486               	retlw	134
  3821  07A4  3435               	retlw	53
  3822  07A5  34C0               	retlw	192
  3823  07A6  34D6               	retlw	214
  3824  07A7  3433               	retlw	51
  3825  07A8  34CC               	retlw	204
  3826  07A9  342B               	retlw	43
  3827  07AA  3432               	retlw	50
  3828  07AB  3470               	retlw	112
  3829  07AC  3489               	retlw	137
  3830  07AD  3430               	retlw	48
  3831  07AE  34E7               	retlw	231
  3832  07AF  34DB               	retlw	219
  3833  07B0  342E               	retlw	46
  3834  07B1  34E5               	retlw	229
  3835  07B2  343C               	retlw	60
  3836  07B3  341E               	retlw	30
  3837  07B4  3442               	retlw	66
  3838  07B5  34A2               	retlw	162
  3839  07B6  340D               	retlw	13
  3840  07B7                     __end_of__npowers_:	
  3841  07B7                     _hexpowers:	
  3842  07B7  3401               	retlw	1
  3843  07B8  3400               	retlw	0
  3844  07B9  3400               	retlw	0
  3845  07BA  3400               	retlw	0
  3846  07BB  3410               	retlw	16
  3847  07BC  3400               	retlw	0
  3848  07BD  3400               	retlw	0
  3849  07BE  3400               	retlw	0
  3850  07BF  3400               	retlw	0
  3851  07C0  3401               	retlw	1
  3852  07C1  3400               	retlw	0
  3853  07C2  3400               	retlw	0
  3854  07C3  3400               	retlw	0
  3855  07C4  3410               	retlw	16
  3856  07C5  3400               	retlw	0
  3857  07C6  3400               	retlw	0
  3858  07C7  3400               	retlw	0
  3859  07C8  3400               	retlw	0
  3860  07C9  3401               	retlw	1
  3861  07CA  3400               	retlw	0
  3862  07CB  3400               	retlw	0
  3863  07CC  3400               	retlw	0
  3864  07CD  3410               	retlw	16
  3865  07CE  3400               	retlw	0
  3866  07CF  3400               	retlw	0
  3867  07D0  3400               	retlw	0
  3868  07D1  3400               	retlw	0
  3869  07D2  3401               	retlw	1
  3870  07D3  3400               	retlw	0
  3871  07D4  3400               	retlw	0
  3872  07D5  3400               	retlw	0
  3873  07D6  3410               	retlw	16
  3874  07D7                     __end_of_hexpowers:	
  3875  000C                     _PORTAbits	set	12
  3876  0016                     _LATAbits	set	22
  3877  0013                     _TRISC	set	19
  3878  0012                     _TRISB	set	18
  3879  0011                     _TRISA	set	17
  3880  0018                     _LATC	set	24
  3881  0017                     _LATB	set	23
  3882  0016                     _LATA	set	22
  3883  000B                     _INTCONbits	set	11
  3884  005F                     _GIE	set	95
  3885  011A                     _TX1REG	set	282
  3886  0119                     _RC1REG	set	281
  3887  011D                     _RC1STAbits	set	285
  3888  011C                     _SP1BRGH	set	284
  3889  011B                     _SP1BRGL	set	283
  3890  011E                     _TX1STA	set	286
  3891  011D                     _RC1STA	set	285
  3892  011F                     _BAUD1CON	set	287
  3893  0196                     _SSP2BUF	set	406
  3894  019B                     _SSP2CON2bits	set	411
  3895  019A                     _SSP2CON1bits	set	410
  3896  0197                     _SSP2ADD	set	407
  3897  019C                     _SSP2CON3	set	412
  3898  019A                     _SSP2CON1	set	410
  3899  0199                     _SSP2STAT	set	409
  3900  0719                     _PIE3bits	set	1817
  3901  070F                     _PIR3bits	set	1807
  3902  0892                     _OSCTUNE	set	2194
  3903  0893                     _OSCFRQ	set	2195
  3904  0891                     _OSCEN	set	2193
  3905  088F                     _OSCCON3	set	2191
  3906  088D                     _OSCCON1	set	2189
  3907  0EC8                     _SSP2CLKPPSbits	set	3784
  3908  0EC9                     _SSP2DATPPSbits	set	3785
  3909  0E8F                     _PPSLOCKbits	set	3727
  3910  0E8F                     _PPSLOCK	set	3727
  3911  0F24                     _RC4PPS	set	3876
  3912  0F23                     _RC3PPS	set	3875
  3913  0F20                     _RC0PPS	set	3872
  3914  0F50                     _ODCONC	set	3920
  3915  0F45                     _ODCONB	set	3909
  3916  0F3A                     _ODCONA	set	3898
  3917  0F4F                     _WPUC	set	3919
  3918  0F39                     _WPUA	set	3897
  3919  0F44                     _WPUB	set	3908
  3920  0F65                     _WPUE	set	3941
  3921  0F38                     _ANSELA	set	3896
  3922  0F43                     _ANSELB	set	3907
  3923  0F4E                     _ANSELC	set	3918
  3924  07D7                     STR_3:	
  3925  07D7  344D               	retlw	77	;'M'
  3926  07D8  3450               	retlw	80	;'P'
  3927  07D9  344C               	retlw	76	;'L'
  3928  07DA  3441               	retlw	65	;'A'
  3929  07DB  3442               	retlw	66	;'B'
  3930  07DC  3458               	retlw	88	;'X'
  3931  07DD  3470               	retlw	112	;'p'
  3932  07DE  3472               	retlw	114	;'r'
  3933  07DF  3465               	retlw	101	;'e'
  3934  07E0  3473               	retlw	115	;'s'
  3935  07E1  3473               	retlw	115	;'s'
  3936  07E2  3420               	retlw	32	;' '
  3937  07E3  344C               	retlw	76	;'L'
  3938  07E4  3445               	retlw	69	;'E'
  3939  07E5  3444               	retlw	68	;'D'
  3940  07E6  3432               	retlw	50	;'2'
  3941  07E7  343D               	retlw	61	;'='
  3942  07E8  3472               	retlw	114	;'r'
  3943  07E9  3465               	retlw	101	;'e'
  3944  07EA  3461               	retlw	97	;'a'
  3945  07EB  3464               	retlw	100	;'d'
  3946  07EC  3420               	retlw	32	;' '
  3947  07ED  3469               	retlw	105	;'i'
  3948  07EE  346E               	retlw	110	;'n'
  3949  07EF  3464               	retlw	100	;'d'
  3950  07F0  3469               	retlw	105	;'i'
  3951  07F1  3463               	retlw	99	;'c'
  3952  07F2  3461               	retlw	97	;'a'
  3953  07F3  3474               	retlw	116	;'t'
  3954  07F4  346F               	retlw	111	;'o'
  3955  07F5  3472               	retlw	114	;'r'
  3956  07F6  342C               	retlw	44	;','
  3957  07F7  3420               	retlw	32	;' '
  3958  07F8  344C               	retlw	76	;'L'
  3959  07F9  3445               	retlw	69	;'E'
  3960  07FA  3444               	retlw	68	;'D'
  3961  07FB  3433               	retlw	51	;'3'
  3962  07FC  343D               	retlw	61	;'='
  3963  07FD  3445               	retlw	69	;'E'
  3964  07FE  344D               	retlw	77	;'M'
  3965  07FF  3443               	retlw	67	;'C'
  3966  0800  3431               	retlw	49	;'1'
  3967  0801  3430               	retlw	48	;'0'
  3968  0802  3430               	retlw	48	;'0'
  3969  0803  3431               	retlw	49	;'1'
  3970  0804  3420               	retlw	32	;' '
  3971  0805  3441               	retlw	65	;'A'
  3972  0806  344C               	retlw	76	;'L'
  3973  0807  3441               	retlw	65	;'A'
  3974  0808  3452               	retlw	82	;'R'
  3975  0809  344D               	retlw	77	;'M'
  3976  080A  3431               	retlw	49	;'1'
  3977  080B  342C               	retlw	44	;','
  3978  080C  3420               	retlw	32	;' '
  3979  080D  344C               	retlw	76	;'L'
  3980  080E  3445               	retlw	69	;'E'
  3981  080F  3444               	retlw	68	;'D'
  3982  0810  3434               	retlw	52	;'4'
  3983  0811  343D               	retlw	61	;'='
  3984  0812  3445               	retlw	69	;'E'
  3985  0813  344D               	retlw	77	;'M'
  3986  0814  3443               	retlw	67	;'C'
  3987  0815  3431               	retlw	49	;'1'
  3988  0816  3430               	retlw	48	;'0'
  3989  0817  3430               	retlw	48	;'0'
  3990  0818  3431               	retlw	49	;'1'
  3991  0819  3420               	retlw	32	;' '
  3992  081A  3441               	retlw	65	;'A'
  3993  081B  344C               	retlw	76	;'L'
  3994  081C  3441               	retlw	65	;'A'
  3995  081D  3452               	retlw	82	;'R'
  3996  081E  344D               	retlw	77	;'M'
  3997  081F  3432               	retlw	50	;'2'
  3998  0820  340A               	retlw	10
  3999  0821  3400               	retlw	0
  4000  0822                     STR_10:	
  4001  0822  3443               	retlw	67	;'C'
  4002  0823  346F               	retlw	111	;'o'
  4003  0824  346E               	retlw	110	;'n'
  4004  0825  3466               	retlw	102	;'f'
  4005  0826  3469               	retlw	105	;'i'
  4006  0827  3467               	retlw	103	;'g'
  4007  0828  3475               	retlw	117	;'u'
  4008  0829  3472               	retlw	114	;'r'
  4009  082A  3461               	retlw	97	;'a'
  4010  082B  3474               	retlw	116	;'t'
  4011  082C  3469               	retlw	105	;'i'
  4012  082D  346F               	retlw	111	;'o'
  4013  082E  346E               	retlw	110	;'n'
  4014  082F  3420               	retlw	32	;' '
  4015  0830  3452               	retlw	82	;'R'
  4016  0831  3465               	retlw	101	;'e'
  4017  0832  3467               	retlw	103	;'g'
  4018  0833  343A               	retlw	58	;':'
  4019  0834  3420               	retlw	32	;' '
  4020  0835  3409               	retlw	9
  4021  0836  3430               	retlw	48	;'0'
  4022  0837  3478               	retlw	120	;'x'
  4023  0838  3425               	retlw	37	;'%'
  4024  0839  3458               	retlw	88	;'X'
  4025  083A  3420               	retlw	32	;' '
  4026  083B  3428               	retlw	40	;'('
  4027  083C  344D               	retlw	77	;'M'
  4028  083D  3441               	retlw	65	;'A'
  4029  083E  3453               	retlw	83	;'S'
  4030  083F  344B               	retlw	75	;'K'
  4031  0840  3431               	retlw	49	;'1'
  4032  0841  343D               	retlw	61	;'='
  4033  0842  3425               	retlw	37	;'%'
  4034  0843  3464               	retlw	100	;'d'
  4035  0844  3420               	retlw	32	;' '
  4036  0845  3452               	retlw	82	;'R'
  4037  0846  3455               	retlw	85	;'U'
  4038  0847  344E               	retlw	78	;'N'
  4039  0848  342F               	retlw	47	;'/'
  4040  0849  3453               	retlw	83	;'S'
  4041  084A  3454               	retlw	84	;'T'
  4042  084B  344F               	retlw	79	;'O'
  4043  084C  3450               	retlw	80	;'P'
  4044  084D  343D               	retlw	61	;'='
  4045  084E  3425               	retlw	37	;'%'
  4046  084F  3464               	retlw	100	;'d'
  4047  0850  3420               	retlw	32	;' '
  4048  0851  3441               	retlw	65	;'A'
  4049  0852  344C               	retlw	76	;'L'
  4050  0853  3445               	retlw	69	;'E'
  4051  0854  3452               	retlw	82	;'R'
  4052  0855  3454               	retlw	84	;'T'
  4053  0856  342F               	retlw	47	;'/'
  4054  0857  3454               	retlw	84	;'T'
  4055  0858  3448               	retlw	72	;'H'
  4056  0859  3445               	retlw	69	;'E'
  4057  085A  3452               	retlw	82	;'R'
  4058  085B  344D               	retlw	77	;'M'
  4059  085C  3432               	retlw	50	;'2'
  4060  085D  343D               	retlw	61	;'='
  4061  085E  3425               	retlw	37	;'%'
  4062  085F  3464               	retlw	100	;'d'
  4063  0860  3429               	retlw	41	;')'
  4064  0861  340A               	retlw	10
  4065  0862  3400               	retlw	0
  4066  0863                     STR_9:	
  4067  0863  3453               	retlw	83	;'S'
  4068  0864  3474               	retlw	116	;'t'
  4069  0865  3461               	retlw	97	;'a'
  4070  0866  3474               	retlw	116	;'t'
  4071  0867  3475               	retlw	117	;'u'
  4072  0868  3473               	retlw	115	;'s'
  4073  0869  3420               	retlw	32	;' '
  4074  086A  3452               	retlw	82	;'R'
  4075  086B  3465               	retlw	101	;'e'
  4076  086C  3467               	retlw	103	;'g'
  4077  086D  343A               	retlw	58	;':'
  4078  086E  3420               	retlw	32	;' '
  4079  086F  3409               	retlw	9
  4080  0870  3409               	retlw	9
  4081  0871  3430               	retlw	48	;'0'
  4082  0872  3478               	retlw	120	;'x'
  4083  0873  3425               	retlw	37	;'%'
  4084  0874  3458               	retlw	88	;'X'
  4085  0875  3420               	retlw	32	;' '
  4086  0876  3428               	retlw	40	;'('
  4087  0877  3442               	retlw	66	;'B'
  4088  0878  3455               	retlw	85	;'U'
  4089  0879  3453               	retlw	83	;'S'
  4090  087A  3459               	retlw	89	;'Y'
  4091  087B  343D               	retlw	61	;'='
  4092  087C  3425               	retlw	37	;'%'
  4093  087D  3464               	retlw	100	;'d'
  4094  087E  3420               	retlw	32	;' '
  4095  087F  3454               	retlw	84	;'T'
  4096  0880  3448               	retlw	72	;'H'
  4097  0881  3449               	retlw	73	;'I'
  4098  0882  3447               	retlw	71	;'G'
  4099  0883  3448               	retlw	72	;'H'
  4100  0884  343D               	retlw	61	;'='
  4101  0885  3425               	retlw	37	;'%'
  4102  0886  3464               	retlw	100	;'d'
  4103  0887  3420               	retlw	32	;' '
  4104  0888  3454               	retlw	84	;'T'
  4105  0889  344C               	retlw	76	;'L'
  4106  088A  344F               	retlw	79	;'O'
  4107  088B  3457               	retlw	87	;'W'
  4108  088C  343D               	retlw	61	;'='
  4109  088D  3425               	retlw	37	;'%'
  4110  088E  3464               	retlw	100	;'d'
  4111  088F  3420               	retlw	32	;' '
  4112  0890  3454               	retlw	84	;'T'
  4113  0891  3448               	retlw	72	;'H'
  4114  0892  3452               	retlw	82	;'R'
  4115  0893  344D               	retlw	77	;'M'
  4116  0894  343D               	retlw	61	;'='
  4117  0895  3425               	retlw	37	;'%'
  4118  0896  3464               	retlw	100	;'d'
  4119  0897  3429               	retlw	41	;')'
  4120  0898  340A               	retlw	10
  4121  0899  3400               	retlw	0
  4122  089A                     STR_11:	
  4123  089A  3443               	retlw	67	;'C'
  4124  089B  346F               	retlw	111	;'o'
  4125  089C  346E               	retlw	110	;'n'
  4126  089D  3476               	retlw	118	;'v'
  4127  089E  3465               	retlw	101	;'e'
  4128  089F  3472               	retlw	114	;'r'
  4129  08A0  3473               	retlw	115	;'s'
  4130  08A1  3469               	retlw	105	;'i'
  4131  08A2  346F               	retlw	111	;'o'
  4132  08A3  346E               	retlw	110	;'n'
  4133  08A4  3420               	retlw	32	;' '
  4134  08A5  3472               	retlw	114	;'r'
  4135  08A6  3461               	retlw	97	;'a'
  4136  08A7  3474               	retlw	116	;'t'
  4137  08A8  3465               	retlw	101	;'e'
  4138  08A9  343A               	retlw	58	;':'
  4139  08AA  3409               	retlw	9
  4140  08AB  3430               	retlw	48	;'0'
  4141  08AC  3478               	retlw	120	;'x'
  4142  08AD  3425               	retlw	37	;'%'
  4143  08AE  3478               	retlw	120	;'x'
  4144  08AF  3420               	retlw	32	;' '
  4145  08B0  3428               	retlw	40	;'('
  4146  08B1  3425               	retlw	37	;'%'
  4147  08B2  342E               	retlw	46	;'.'
  4148  08B3  3434               	retlw	52	;'4'
  4149  08B4  3466               	retlw	102	;'f'
  4150  08B5  3420               	retlw	32	;' '
  4151  08B6  3463               	retlw	99	;'c'
  4152  08B7  346F               	retlw	111	;'o'
  4153  08B8  346E               	retlw	110	;'n'
  4154  08B9  3476               	retlw	118	;'v'
  4155  08BA  3465               	retlw	101	;'e'
  4156  08BB  3472               	retlw	114	;'r'
  4157  08BC  3473               	retlw	115	;'s'
  4158  08BD  3469               	retlw	105	;'i'
  4159  08BE  346F               	retlw	111	;'o'
  4160  08BF  346E               	retlw	110	;'n'
  4161  08C0  3473               	retlw	115	;'s'
  4162  08C1  3420               	retlw	32	;' '
  4163  08C2  3470               	retlw	112	;'p'
  4164  08C3  3465               	retlw	101	;'e'
  4165  08C4  3472               	retlw	114	;'r'
  4166  08C5  3420               	retlw	32	;' '
  4167  08C6  3473               	retlw	115	;'s'
  4168  08C7  3465               	retlw	101	;'e'
  4169  08C8  3463               	retlw	99	;'c'
  4170  08C9  346F               	retlw	111	;'o'
  4171  08CA  346E               	retlw	110	;'n'
  4172  08CB  3464               	retlw	100	;'d'
  4173  08CC  3429               	retlw	41	;')'
  4174  08CD  340A               	retlw	10
  4175  08CE  3400               	retlw	0
  4176  08CF                     STR_2:	
  4177  08CF  344D               	retlw	77	;'M'
  4178  08D0  3469               	retlw	105	;'i'
  4179  08D1  3463               	retlw	99	;'c'
  4180  08D2  3472               	retlw	114	;'r'
  4181  08D3  346F               	retlw	111	;'o'
  4182  08D4  3463               	retlw	99	;'c'
  4183  08D5  3468               	retlw	104	;'h'
  4184  08D6  3469               	retlw	105	;'i'
  4185  08D7  3470               	retlw	112	;'p'
  4186  08D8  3420               	retlw	32	;' '
  4187  08D9  3445               	retlw	69	;'E'
  4188  08DA  344D               	retlw	77	;'M'
  4189  08DB  3443               	retlw	67	;'C'
  4190  08DC  3431               	retlw	49	;'1'
  4191  08DD  3430               	retlw	48	;'0'
  4192  08DE  3430               	retlw	48	;'0'
  4193  08DF  3431               	retlw	49	;'1'
  4194  08E0  3420               	retlw	32	;' '
  4195  08E1  3454               	retlw	84	;'T'
  4196  08E2  3465               	retlw	101	;'e'
  4197  08E3  346D               	retlw	109	;'m'
  4198  08E4  3470               	retlw	112	;'p'
  4199  08E5  3465               	retlw	101	;'e'
  4200  08E6  3472               	retlw	114	;'r'
  4201  08E7  3461               	retlw	97	;'a'
  4202  08E8  3474               	retlw	116	;'t'
  4203  08E9  3475               	retlw	117	;'u'
  4204  08EA  3472               	retlw	114	;'r'
  4205  08EB  3465               	retlw	101	;'e'
  4206  08EC  3420               	retlw	32	;' '
  4207  08ED  3453               	retlw	83	;'S'
  4208  08EE  3465               	retlw	101	;'e'
  4209  08EF  346E               	retlw	110	;'n'
  4210  08F0  3473               	retlw	115	;'s'
  4211  08F1  346F               	retlw	111	;'o'
  4212  08F2  3472               	retlw	114	;'r'
  4213  08F3  3420               	retlw	32	;' '
  4214  08F4  3444               	retlw	68	;'D'
  4215  08F5  3465               	retlw	101	;'e'
  4216  08F6  346D               	retlw	109	;'m'
  4217  08F7  346F               	retlw	111	;'o'
  4218  08F8  3400               	retlw	0
  4219  08F9                     STR_15:	
  4220  08F9  3454               	retlw	84	;'T'
  4221  08FA  3465               	retlw	101	;'e'
  4222  08FB  346D               	retlw	109	;'m'
  4223  08FC  3470               	retlw	112	;'p'
  4224  08FD  3465               	retlw	101	;'e'
  4225  08FE  3472               	retlw	114	;'r'
  4226  08FF  3461               	retlw	97	;'a'
  4227  0900  3474               	retlw	116	;'t'
  4228  0901  3475               	retlw	117	;'u'
  4229  0902  3472               	retlw	114	;'r'
  4230  0903  3465               	retlw	101	;'e'
  4231  0904  3420               	retlw	32	;' '
  4232  0905  3468               	retlw	104	;'h'
  4233  0906  3469               	retlw	105	;'i'
  4234  0907  3467               	retlw	103	;'g'
  4235  0908  3468               	retlw	104	;'h'
  4236  0909  3420               	retlw	32	;' '
  4237  090A  346C               	retlw	108	;'l'
  4238  090B  3469               	retlw	105	;'i'
  4239  090C  346D               	retlw	109	;'m'
  4240  090D  3469               	retlw	105	;'i'
  4241  090E  3474               	retlw	116	;'t'
  4242  090F  343A               	retlw	58	;':'
  4243  0910  3409               	retlw	9
  4244  0911  3425               	retlw	37	;'%'
  4245  0912  3464               	retlw	100	;'d'
  4246  0913  342E               	retlw	46	;'.'
  4247  0914  3425               	retlw	37	;'%'
  4248  0915  3464               	retlw	100	;'d'
  4249  0916  3420               	retlw	32	;' '
  4250  0917  3443               	retlw	67	;'C'
  4251  0918  340A               	retlw	10
  4252  0919  3400               	retlw	0
  4253  091A                     STR_16:	
  4254  091A  3454               	retlw	84	;'T'
  4255  091B  3465               	retlw	101	;'e'
  4256  091C  346D               	retlw	109	;'m'
  4257  091D  3470               	retlw	112	;'p'
  4258  091E  3465               	retlw	101	;'e'
  4259  091F  3472               	retlw	114	;'r'
  4260  0920  3461               	retlw	97	;'a'
  4261  0921  3474               	retlw	116	;'t'
  4262  0922  3475               	retlw	117	;'u'
  4263  0923  3472               	retlw	114	;'r'
  4264  0924  3465               	retlw	101	;'e'
  4265  0925  3420               	retlw	32	;' '
  4266  0926  346C               	retlw	108	;'l'
  4267  0927  346F               	retlw	111	;'o'
  4268  0928  3477               	retlw	119	;'w'
  4269  0929  3420               	retlw	32	;' '
  4270  092A  346C               	retlw	108	;'l'
  4271  092B  3469               	retlw	105	;'i'
  4272  092C  346D               	retlw	109	;'m'
  4273  092D  3469               	retlw	105	;'i'
  4274  092E  3474               	retlw	116	;'t'
  4275  092F  343A               	retlw	58	;':'
  4276  0930  3409               	retlw	9
  4277  0931  3425               	retlw	37	;'%'
  4278  0932  3464               	retlw	100	;'d'
  4279  0933  342E               	retlw	46	;'.'
  4280  0934  3425               	retlw	37	;'%'
  4281  0935  3464               	retlw	100	;'d'
  4282  0936  3420               	retlw	32	;' '
  4283  0937  3443               	retlw	67	;'C'
  4284  0938  340A               	retlw	10
  4285  0939  3400               	retlw	0
  4286  093A                     STR_19:	
  4287  093A  3443               	retlw	67	;'C'
  4288  093B  3475               	retlw	117	;'u'
  4289  093C  3472               	retlw	114	;'r'
  4290  093D  3472               	retlw	114	;'r'
  4291  093E  3465               	retlw	101	;'e'
  4292  093F  346E               	retlw	110	;'n'
  4293  0940  3474               	retlw	116	;'t'
  4294  0941  3420               	retlw	32	;' '
  4295  0942  3454               	retlw	84	;'T'
  4296  0943  3465               	retlw	101	;'e'
  4297  0944  346D               	retlw	109	;'m'
  4298  0945  3470               	retlw	112	;'p'
  4299  0946  3465               	retlw	101	;'e'
  4300  0947  3472               	retlw	114	;'r'
  4301  0948  3461               	retlw	97	;'a'
  4302  0949  3474               	retlw	116	;'t'
  4303  094A  3475               	retlw	117	;'u'
  4304  094B  3472               	retlw	114	;'r'
  4305  094C  3465               	retlw	101	;'e'
  4306  094D  343A               	retlw	58	;':'
  4307  094E  3409               	retlw	9
  4308  094F  3425               	retlw	37	;'%'
  4309  0950  3464               	retlw	100	;'d'
  4310  0951  342E               	retlw	46	;'.'
  4311  0952  3425               	retlw	37	;'%'
  4312  0953  3464               	retlw	100	;'d'
  4313  0954  3420               	retlw	32	;' '
  4314  0955  3443               	retlw	67	;'C'
  4315  0956  340A               	retlw	10
  4316  0957  3400               	retlw	0
  4317  0958                     STR_18:	
  4318  0958  3454               	retlw	84	;'T'
  4319  0959  3468               	retlw	104	;'h'
  4320  095A  3465               	retlw	101	;'e'
  4321  095B  3472               	retlw	114	;'r'
  4322  095C  346D               	retlw	109	;'m'
  4323  095D  3461               	retlw	97	;'a'
  4324  095E  346C               	retlw	108	;'l'
  4325  095F  3420               	retlw	32	;' '
  4326  0960  3468               	retlw	104	;'h'
  4327  0961  3479               	retlw	121	;'y'
  4328  0962  3473               	retlw	115	;'s'
  4329  0963  3474               	retlw	116	;'t'
  4330  0964  3465               	retlw	101	;'e'
  4331  0965  3472               	retlw	114	;'r'
  4332  0966  3465               	retlw	101	;'e'
  4333  0967  3473               	retlw	115	;'s'
  4334  0968  3469               	retlw	105	;'i'
  4335  0969  3473               	retlw	115	;'s'
  4336  096A  343A               	retlw	58	;':'
  4337  096B  3409               	retlw	9
  4338  096C  3425               	retlw	37	;'%'
  4339  096D  3464               	retlw	100	;'d'
  4340  096E  3420               	retlw	32	;' '
  4341  096F  3443               	retlw	67	;'C'
  4342  0970  340A               	retlw	10
  4343  0971  340A               	retlw	10
  4344  0972  3400               	retlw	0
  4345  0973                     STR_4:	
  4346  0973  3450               	retlw	80	;'P'
  4347  0974  3472               	retlw	114	;'r'
  4348  0975  346F               	retlw	111	;'o'
  4349  0976  3464               	retlw	100	;'d'
  4350  0977  3475               	retlw	117	;'u'
  4351  0978  3463               	retlw	99	;'c'
  4352  0979  3474               	retlw	116	;'t'
  4353  097A  3420               	retlw	32	;' '
  4354  097B  3449               	retlw	73	;'I'
  4355  097C  3444               	retlw	68	;'D'
  4356  097D  343A               	retlw	58	;':'
  4357  097E  3409               	retlw	9
  4358  097F  3409               	retlw	9
  4359  0980  3445               	retlw	69	;'E'
  4360  0981  344D               	retlw	77	;'M'
  4361  0982  3443               	retlw	67	;'C'
  4362  0983  3431               	retlw	49	;'1'
  4363  0984  3430               	retlw	48	;'0'
  4364  0985  3430               	retlw	48	;'0'
  4365  0986  3431               	retlw	49	;'1'
  4366  0987  3425               	retlw	37	;'%'
  4367  0988  3473               	retlw	115	;'s'
  4368  0989  340A               	retlw	10
  4369  098A  3400               	retlw	0
  4370  098B                     STR_7:	
  4371  098B  344D               	retlw	77	;'M'
  4372  098C  3461               	retlw	97	;'a'
  4373  098D  346E               	retlw	110	;'n'
  4374  098E  3475               	retlw	117	;'u'
  4375  098F  3466               	retlw	102	;'f'
  4376  0990  3461               	retlw	97	;'a'
  4377  0991  3463               	retlw	99	;'c'
  4378  0992  3474               	retlw	116	;'t'
  4379  0993  3475               	retlw	117	;'u'
  4380  0994  3472               	retlw	114	;'r'
  4381  0995  3465               	retlw	101	;'e'
  4382  0996  3472               	retlw	114	;'r'
  4383  0997  3420               	retlw	32	;' '
  4384  0998  3449               	retlw	73	;'I'
  4385  0999  3444               	retlw	68	;'D'
  4386  099A  343A               	retlw	58	;':'
  4387  099B  3409               	retlw	9
  4388  099C  3430               	retlw	48	;'0'
  4389  099D  3478               	retlw	120	;'x'
  4390  099E  3425               	retlw	37	;'%'
  4391  099F  3458               	retlw	88	;'X'
  4392  09A0  340A               	retlw	10
  4393  09A1  3400               	retlw	0
  4394  09A2                     STR_17:	
  4395  09A2  3454               	retlw	84	;'T'
  4396  09A3  3468               	retlw	104	;'h'
  4397  09A4  3465               	retlw	101	;'e'
  4398  09A5  3472               	retlw	114	;'r'
  4399  09A6  346D               	retlw	109	;'m'
  4400  09A7  3461               	retlw	97	;'a'
  4401  09A8  346C               	retlw	108	;'l'
  4402  09A9  3420               	retlw	32	;' '
  4403  09AA  346C               	retlw	108	;'l'
  4404  09AB  3469               	retlw	105	;'i'
  4405  09AC  346D               	retlw	109	;'m'
  4406  09AD  3469               	retlw	105	;'i'
  4407  09AE  3474               	retlw	116	;'t'
  4408  09AF  343A               	retlw	58	;':'
  4409  09B0  3409               	retlw	9
  4410  09B1  3409               	retlw	9
  4411  09B2  3425               	retlw	37	;'%'
  4412  09B3  3464               	retlw	100	;'d'
  4413  09B4  3420               	retlw	32	;' '
  4414  09B5  3443               	retlw	67	;'C'
  4415  09B6  340A               	retlw	10
  4416  09B7  3400               	retlw	0
  4417  09B8                     STR_12:	
  4418  09B8  3453               	retlw	83	;'S'
  4419  09B9  344D               	retlw	77	;'M'
  4420  09BA  3442               	retlw	66	;'B'
  4421  09BB  3475               	retlw	117	;'u'
  4422  09BC  3473               	retlw	115	;'s'
  4423  09BD  3420               	retlw	32	;' '
  4424  09BE  3454               	retlw	84	;'T'
  4425  09BF  3469               	retlw	105	;'i'
  4426  09C0  346D               	retlw	109	;'m'
  4427  09C1  3465               	retlw	101	;'e'
  4428  09C2  344F               	retlw	79	;'O'
  4429  09C3  3475               	retlw	117	;'u'
  4430  09C4  3474               	retlw	116	;'t'
  4431  09C5  343A               	retlw	58	;':'
  4432  09C6  3409               	retlw	9
  4433  09C7  3409               	retlw	9
  4434  09C8  3425               	retlw	37	;'%'
  4435  09C9  3473               	retlw	115	;'s'
  4436  09CA  340A               	retlw	10
  4437  09CB  3400               	retlw	0
  4438  09CC                     STR_21:	
  4439  09CC  3430               	retlw	48	;'0'
  4440  09CD  3431               	retlw	49	;'1'
  4441  09CE  3432               	retlw	50	;'2'
  4442  09CF  3433               	retlw	51	;'3'
  4443  09D0  3434               	retlw	52	;'4'
  4444  09D1  3435               	retlw	53	;'5'
  4445  09D2  3436               	retlw	54	;'6'
  4446  09D3  3437               	retlw	55	;'7'
  4447  09D4  3438               	retlw	56	;'8'
  4448  09D5  3439               	retlw	57	;'9'
  4449  09D6  3441               	retlw	65	;'A'
  4450  09D7  3442               	retlw	66	;'B'
  4451  09D8  3443               	retlw	67	;'C'
  4452  09D9  3444               	retlw	68	;'D'
  4453  09DA  3445               	retlw	69	;'E'
  4454  09DB  3446               	retlw	70	;'F'
  4455  09DC  3400               	retlw	0
  4456  09DD                     STR_22:	
  4457  09DD  3430               	retlw	48	;'0'
  4458  09DE  3431               	retlw	49	;'1'
  4459  09DF  3432               	retlw	50	;'2'
  4460  09E0  3433               	retlw	51	;'3'
  4461  09E1  3434               	retlw	52	;'4'
  4462  09E2  3435               	retlw	53	;'5'
  4463  09E3  3436               	retlw	54	;'6'
  4464  09E4  3437               	retlw	55	;'7'
  4465  09E5  3438               	retlw	56	;'8'
  4466  09E6  3439               	retlw	57	;'9'
  4467  09E7  3461               	retlw	97	;'a'
  4468  09E8  3462               	retlw	98	;'b'
  4469  09E9  3463               	retlw	99	;'c'
  4470  09EA  3464               	retlw	100	;'d'
  4471  09EB  3465               	retlw	101	;'e'
  4472  09EC  3466               	retlw	102	;'f'
  4473  09ED  3400               	retlw	0
  4474  09EE                     STR_8:	
  4475  09EE  3452               	retlw	82	;'R'
  4476  09EF  3465               	retlw	101	;'e'
  4477  09F0  3476               	retlw	118	;'v'
  4478  09F1  3469               	retlw	105	;'i'
  4479  09F2  3473               	retlw	115	;'s'
  4480  09F3  3469               	retlw	105	;'i'
  4481  09F4  346F               	retlw	111	;'o'
  4482  09F5  346E               	retlw	110	;'n'
  4483  09F6  3420               	retlw	32	;' '
  4484  09F7  343A               	retlw	58	;':'
  4485  09F8  3409               	retlw	9
  4486  09F9  3409               	retlw	9
  4487  09FA  3425               	retlw	37	;'%'
  4488  09FB  3464               	retlw	100	;'d'
  4489  09FC  340A               	retlw	10
  4490  09FD  3400               	retlw	0
  4491  09FE                     STR_14:	
  4492  09FE  3444               	retlw	68	;'D'
  4493  09FF  3469               	retlw	105	;'i'
  4494  0A00  3473               	retlw	115	;'s'
  4495  0A01  3461               	retlw	97	;'a'
  4496  0A02  3462               	retlw	98	;'b'
  4497  0A03  346C               	retlw	108	;'l'
  4498  0A04  3465               	retlw	101	;'e'
  4499  0A05  3464               	retlw	100	;'d'
  4500  0A06  3400               	retlw	0
  4501  0A07                     STR_13:	
  4502  0A07  3445               	retlw	69	;'E'
  4503  0A08  346E               	retlw	110	;'n'
  4504  0A09  3461               	retlw	97	;'a'
  4505  0A0A  3462               	retlw	98	;'b'
  4506  0A0B  346C               	retlw	108	;'l'
  4507  0A0C  3465               	retlw	101	;'e'
  4508  0A0D  3464               	retlw	100	;'d'
  4509  0A0E  3400               	retlw	0
  4510  0A0F                     STR_20:	
  4511  0A0F  3428               	retlw	40	;'('
  4512  0A10  346E               	retlw	110	;'n'
  4513  0A11  3475               	retlw	117	;'u'
  4514  0A12  346C               	retlw	108	;'l'
  4515  0A13  346C               	retlw	108	;'l'
  4516  0A14  3429               	retlw	41	;')'
  4517  0A15  3400               	retlw	0
  4518  0A16                     STR_5:	
  4519  0A16  342D               	retlw	45	;'-'
  4520  0A17  3431               	retlw	49	;'1'
  4521  0A18  3400               	retlw	0
  4522  0A19                     STR_1:	
  4523  0A19  340C               	retlw	12
  4524  0A1A  3400               	retlw	0
  4525  0972                     
  4526                           ; #config settings
  4527  0000                     
  4528                           	psect	cinit
  4529  0022                     start_initialization:	
  4530  0022                     __initialization:	
  4531                           
  4532                           ; Clear objects allocated to COMMON
  4533  0022  01F0               	clrf	__pbssCOMMON& (0+127)
  4534  0023  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  4535  0024  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  4536  0025  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  4537  0026  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  4538  0027  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  4539  0028  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  4540                           
  4541                           ; Clear objects allocated to BANK0
  4542  0029  0020               	movlb	0	; select bank0
  4543  002A  01EF               	clrf	__pbssBANK0& (0+127)
  4544                           
  4545                           ; Clear objects allocated to BANK1
  4546  002B  30E4               	movlw	low __pbssBANK1
  4547  002C  0084               	movwf	4
  4548  002D  3000               	movlw	high __pbssBANK1
  4549  002E  0085               	movwf	5
  4550  002F  3009               	movlw	9
  4551  0030  319C  2469  3180   	fcall	clear_ram0
  4552                           
  4553                           ; Clear objects allocated to BANK2
  4554  0033  3020               	movlw	low __pbssBANK2
  4555  0034  0084               	movwf	4
  4556  0035  3001               	movlw	high __pbssBANK2
  4557  0036  0085               	movwf	5
  4558  0037  3014               	movlw	20
  4559  0038  319C  2469         	fcall	clear_ram0
  4560  003A                     end_of_initialization:	
  4561                           ;End of C runtime variable initialization code
  4562                           
  4563  003A                     __end_of__initialization:	
  4564  003A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4565  003B  0020               	movlb	0
  4566  003C  3192  2A18         	ljmp	_main	;jump to C main() function
  4567                           
  4568                           	psect	bssCOMMON
  4569  0070                     __pbssCOMMON:	
  4570  0070                     _i2c2_object:	
  4571  0070                     	ds	5
  4572  0075                     _p_i2c2_current:	
  4573  0075                     	ds	1
  4574  0076                     _p_i2c2_trb_current:	
  4575  0076                     	ds	1
  4576                           
  4577                           	psect	bssBANK0
  4578  006F                     __pbssBANK0:	
  4579  006F                     _i2c2_state:	
  4580  006F                     	ds	1
  4581                           
  4582                           	psect	bssBANK1
  4583  00E4                     __pbssBANK1:	
  4584  00E4                     I2C2_ISR@i2c_10bit_address_restart:	
  4585  00E4                     	ds	1
  4586  00E5                     I2C2_ISR@i2c_bytes_left:	
  4587  00E5                     	ds	1
  4588  00E6                     I2C2_ISR@pi2c_buf_ptr:	
  4589  00E6                     	ds	1
  4590  00E7                     _i2c2_trb_count:	
  4591  00E7                     	ds	1
  4592  00E8                     _i2c2_tr_queue:	
  4593  00E8                     	ds	3
  4594  00EB                     I2C2_ISR@i2c_address:	
  4595  00EB                     	ds	2
  4596                           
  4597                           	psect	bssBANK2
  4598  0120                     __pbssBANK2:	
  4599  0120                     EMC1001_Read@trb:	
  4600  0120                     	ds	8
  4601  0128                     EMC1001_Write@trb:	
  4602  0128                     	ds	4
  4603  012C                     I2C2_MasterRead@trBlock:	
  4604  012C                     	ds	4
  4605  0130                     I2C2_MasterWrite@trBlock:	
  4606  0130                     	ds	4
  4607                           
  4608                           	psect	clrtext
  4609  1C69                     clear_ram0:	
  4610                           ;	Called with FSR0 containing the base address, and
  4611                           ;	WREG with the size to clear
  4612                           
  4613  1C69  0064               	clrwdt	;clear the watchdog before getting into this loop
  4614  1C6A                     clrloop0:	
  4615  1C6A  0180               	clrf	0	;clear RAM location pointed to by FSR
  4616  1C6B  3101               	addfsr 0,1
  4617  1C6C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4618  1C6D  2C6A               	goto	clrloop0	;have we reached the end yet?
  4619  1C6E  3400               	retlw	0	;all done for this memory range, return
  4620                           
  4621                           	psect	cstackBANK1
  4622  00A0                     __pcstackBANK1:	
  4623  00A0                     ?_printf:	
  4624  00A0                     printf@f:	
  4625                           ; 2 bytes @ 0x0
  4626                           
  4627                           
  4628                           ; 2 bytes @ 0x0
  4629  00A0                     	ds	12
  4630  00AC                     _printf$1372:	
  4631                           
  4632                           ; 3 bytes @ 0xC
  4633  00AC                     	ds	3
  4634  00AF                     printf@idx:	
  4635                           
  4636                           ; 1 bytes @ 0xF
  4637  00AF                     	ds	1
  4638  00B0                     _printf$850:	
  4639                           
  4640                           ; 2 bytes @ 0x10
  4641  00B0                     	ds	2
  4642  00B2                     printf@len:	
  4643                           
  4644                           ; 2 bytes @ 0x12
  4645  00B2                     	ds	2
  4646  00B4                     printf@cp:	
  4647                           
  4648                           ; 2 bytes @ 0x14
  4649  00B4                     	ds	2
  4650  00B6                     printf@ap:	
  4651                           
  4652                           ; 1 bytes @ 0x16
  4653  00B6                     	ds	1
  4654  00B7                     printf@flag:	
  4655                           
  4656                           ; 2 bytes @ 0x17
  4657  00B7                     	ds	2
  4658  00B9                     printf@exp:	
  4659                           
  4660                           ; 2 bytes @ 0x19
  4661  00B9                     	ds	2
  4662  00BB                     printf@tmpval:	
  4663                           
  4664                           ; 4 bytes @ 0x1B
  4665  00BB                     	ds	4
  4666  00BF                     printf@val:	
  4667                           
  4668                           ; 4 bytes @ 0x1F
  4669  00BF                     	ds	4
  4670  00C3                     printf@fval:	
  4671                           
  4672                           ; 3 bytes @ 0x23
  4673  00C3                     	ds	3
  4674  00C6                     printf@prec:	
  4675                           
  4676                           ; 2 bytes @ 0x26
  4677  00C6                     	ds	2
  4678  00C8                     printf@c:	
  4679                           
  4680                           ; 1 bytes @ 0x28
  4681  00C8                     	ds	1
  4682  00C9                     ??_EMC1001_PrintInfo:	
  4683  00C9                     _EMC1001_PrintTemp$1368:	
  4684                           ; 1 bytes @ 0x29
  4685                           
  4686                           
  4687                           ; 2 bytes @ 0x29
  4688  00C9                     	ds	2
  4689  00CB                     EMC1001_PrintTemp@temp:	
  4690                           
  4691                           ; 1 bytes @ 0x2B
  4692  00CB                     	ds	1
  4693  00CC                     EMC1001_PrintTemp@templo:	
  4694                           
  4695                           ; 1 bytes @ 0x2C
  4696  00CC                     	ds	10
  4697  00D6                     EMC1001_PrintInfo@cr:	
  4698                           
  4699                           ; 3 bytes @ 0x36
  4700  00D6                     	ds	3
  4701  00D9                     _EMC1001_PrintInfo$767:	
  4702                           
  4703                           ; 2 bytes @ 0x39
  4704  00D9                     	ds	2
  4705  00DB                     _EMC1001_PrintInfo$777:	
  4706                           
  4707                           ; 2 bytes @ 0x3B
  4708  00DB                     	ds	2
  4709  00DD                     _EMC1001_PrintInfo$1367:	
  4710                           
  4711                           ; 2 bytes @ 0x3D
  4712  00DD                     	ds	2
  4713  00DF                     EMC1001_PrintInfo@temp:	
  4714                           
  4715                           ; 1 bytes @ 0x3F
  4716  00DF                     	ds	1
  4717  00E0                     EMC1001_PrintInfo@templo:	
  4718                           
  4719                           ; 1 bytes @ 0x40
  4720  00E0                     	ds	1
  4721  00E1                     EMC1001_PrintInfo@data:	
  4722                           
  4723                           ; 1 bytes @ 0x41
  4724  00E1                     	ds	1
  4725  00E2                     ??_main:	
  4726                           
  4727                           ; 1 bytes @ 0x42
  4728  00E2                     	ds	2
  4729                           
  4730                           	psect	cstackCOMMON
  4731  0077                     __pcstackCOMMON:	
  4732  0077                     ?_isdigit:	
  4733  0077                     ?_I2C2_Stop:	
  4734                           ; 1 bit 
  4735                           
  4736  0077                     ??_I2C2_Stop:	
  4737                           ; 1 bytes @ 0x0
  4738                           
  4739  0077                     ?_I2C2_FunctionComplete:	
  4740                           ; 1 bytes @ 0x0
  4741                           
  4742  0077                     ??_I2C2_FunctionComplete:	
  4743                           ; 1 bytes @ 0x0
  4744                           
  4745  0077                     ?_PIN_MANAGER_Initialize:	
  4746                           ; 1 bytes @ 0x0
  4747                           
  4748  0077                     ?_OSCILLATOR_Initialize:	
  4749                           ; 1 bytes @ 0x0
  4750                           
  4751  0077                     ?_EMC1001_SetConversionRate:	
  4752                           ; 1 bytes @ 0x0
  4753                           
  4754  0077                     ?_EMC1001_SetThermLimit:	
  4755                           ; 1 bytes @ 0x0
  4756                           
  4757  0077                     ?_EMC1001_SetThermHysteresis:	
  4758                           ; 1 bytes @ 0x0
  4759                           
  4760  0077                     ?_EMC1001_SMBusTimeout:	
  4761                           ; 1 bytes @ 0x0
  4762                           
  4763  0077                     ?_EMC1001_MASK1:	
  4764                           ; 1 bytes @ 0x0
  4765                           
  4766  0077                     ?_EMC1001_StandbyMode:	
  4767                           ; 1 bytes @ 0x0
  4768                           
  4769  0077                     ?_EMC1001_THERM2:	
  4770                           ; 1 bytes @ 0x0
  4771                           
  4772  0077                     ?_EMC1001_PrintInfo:	
  4773                           ; 1 bytes @ 0x0
  4774                           
  4775  0077                     ?_EMC1001_PrintTemp:	
  4776                           ; 1 bytes @ 0x0
  4777                           
  4778  0077                     ?_EUSART_Initialize:	
  4779                           ; 1 bytes @ 0x0
  4780                           
  4781  0077                     ?_EUSART_Write:	
  4782                           ; 1 bytes @ 0x0
  4783                           
  4784  0077                     ?_putch:	
  4785                           ; 1 bytes @ 0x0
  4786                           
  4787  0077                     ?_I2C2_Initialize:	
  4788                           ; 1 bytes @ 0x0
  4789                           
  4790  0077                     ?_I2C2_ISR:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793  0077                     ?_I2C2_BusCollisionISR:	
  4794                           ; 1 bytes @ 0x0
  4795                           
  4796  0077                     ??_I2C2_BusCollisionISR:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  0077                     ?_INTERRUPT_InterruptManager:	
  4800                           ; 1 bytes @ 0x0
  4801                           
  4802  0077                     ?_SYSTEM_Initialize:	
  4803                           ; 1 bytes @ 0x0
  4804                           
  4805  0077                     ?_main:	
  4806                           ; 1 bytes @ 0x0
  4807                           
  4808                           
  4809                           ; 1 bytes @ 0x0
  4810  0077                     	ds	1
  4811  0078                     I2C2_Stop@completion_code:	
  4812                           
  4813                           ; 1 bytes @ 0x1
  4814  0078                     	ds	1
  4815  0079                     ??_I2C2_ISR:	
  4816                           
  4817                           ; 1 bytes @ 0x2
  4818  0079                     	ds	4
  4819  007D                     ??_INTERRUPT_InterruptManager:	
  4820                           
  4821                           ; 1 bytes @ 0x6
  4822  007D                     	ds	1
  4823                           
  4824                           	psect	cstackBANK0
  4825  0020                     __pcstackBANK0:	
  4826  0020                     ?___ftge:	
  4827  0020                     ?_I2C2_MasterWriteTRBBuild:	
  4828                           ; 1 bit 
  4829                           
  4830  0020                     ?_I2C2_MasterTRBInsert:	
  4831                           ; 1 bytes @ 0x0
  4832                           
  4833  0020                     ?_I2C2_MasterReadTRBBuild:	
  4834                           ; 1 bytes @ 0x0
  4835                           
  4836  0020                     ??_PIN_MANAGER_Initialize:	
  4837                           ; 1 bytes @ 0x0
  4838                           
  4839  0020                     ??_OSCILLATOR_Initialize:	
  4840                           ; 1 bytes @ 0x0
  4841                           
  4842  0020                     ??_isdigit:	
  4843                           ; 1 bytes @ 0x0
  4844                           
  4845  0020                     ??_EUSART_Initialize:	
  4846                           ; 1 bytes @ 0x0
  4847                           
  4848  0020                     ??_EUSART_Write:	
  4849                           ; 1 bytes @ 0x0
  4850                           
  4851  0020                     ??_I2C2_Initialize:	
  4852                           ; 1 bytes @ 0x0
  4853                           
  4854  0020                     ?___awmod:	
  4855                           ; 1 bytes @ 0x0
  4856                           
  4857  0020                     ?___ftpack:	
  4858                           ; 2 bytes @ 0x0
  4859                           
  4860  0020                     ?___ftneg:	
  4861                           ; 3 bytes @ 0x0
  4862                           
  4863  0020                     ?__tdiv_to_l_:	
  4864                           ; 3 bytes @ 0x0
  4865                           
  4866  0020                     ?__div_to_l_:	
  4867                           ; 4 bytes @ 0x0
  4868                           
  4869  0020                     ?___lldiv:	
  4870                           ; 4 bytes @ 0x0
  4871                           
  4872  0020                     EUSART_Write@txData:	
  4873                           ; 4 bytes @ 0x0
  4874                           
  4875  0020                     I2C2_MasterTRBInsert@ptrb_list:	
  4876                           ; 1 bytes @ 0x0
  4877                           
  4878  0020                     I2C2_MasterReadTRBBuild@pdata:	
  4879                           ; 1 bytes @ 0x0
  4880                           
  4881  0020                     I2C2_MasterWriteTRBBuild@pdata:	
  4882                           ; 1 bytes @ 0x0
  4883                           
  4884  0020                     PIN_MANAGER_Initialize@state:	
  4885                           ; 1 bytes @ 0x0
  4886                           
  4887  0020                     _isdigit$1105:	
  4888                           ; 1 bytes @ 0x0
  4889                           
  4890  0020                     ___awmod@divisor:	
  4891                           ; 1 bytes @ 0x0
  4892                           
  4893  0020                     __div_to_l_@f1:	
  4894                           ; 2 bytes @ 0x0
  4895                           
  4896  0020                     ___ftpack@arg:	
  4897                           ; 3 bytes @ 0x0
  4898                           
  4899  0020                     __tdiv_to_l_@f1:	
  4900                           ; 3 bytes @ 0x0
  4901                           
  4902  0020                     ___ftge@ff1:	
  4903                           ; 3 bytes @ 0x0
  4904                           
  4905  0020                     ___ftneg@f1:	
  4906                           ; 3 bytes @ 0x0
  4907                           
  4908  0020                     ___lldiv@divisor:	
  4909                           ; 3 bytes @ 0x0
  4910                           
  4911                           
  4912                           ; 4 bytes @ 0x0
  4913  0020                     	ds	1
  4914  0021                     ??_putch:	
  4915  0021                     ??_SYSTEM_Initialize:	
  4916                           ; 1 bytes @ 0x1
  4917                           
  4918  0021                     putch@txData:	
  4919                           ; 1 bytes @ 0x1
  4920                           
  4921  0021                     I2C2_MasterTRBInsert@pflag:	
  4922                           ; 1 bytes @ 0x1
  4923                           
  4924  0021                     I2C2_MasterReadTRBBuild@length:	
  4925                           ; 1 bytes @ 0x1
  4926                           
  4927  0021                     I2C2_MasterWriteTRBBuild@length:	
  4928                           ; 1 bytes @ 0x1
  4929                           
  4930  0021                     isdigit@c:	
  4931                           ; 1 bytes @ 0x1
  4932                           
  4933                           
  4934                           ; 1 bytes @ 0x1
  4935  0021                     	ds	1
  4936  0022                     ??_I2C2_MasterTRBInsert:	
  4937  0022                     ?_cputs:	
  4938                           ; 1 bytes @ 0x2
  4939                           
  4940  0022                     I2C2_MasterReadTRBBuild@address:	
  4941                           ; 1 bytes @ 0x2
  4942                           
  4943  0022                     I2C2_MasterWriteTRBBuild@address:	
  4944                           ; 2 bytes @ 0x2
  4945                           
  4946  0022                     ___awmod@dividend:	
  4947                           ; 2 bytes @ 0x2
  4948                           
  4949  0022                     cputs@s:	
  4950                           ; 2 bytes @ 0x2
  4951                           
  4952                           
  4953                           ; 2 bytes @ 0x2
  4954  0022                     	ds	1
  4955  0023                     ??___ftneg:	
  4956  0023                     I2C2_MasterTRBInsert@count:	
  4957                           ; 1 bytes @ 0x3
  4958                           
  4959  0023                     ___ftpack@exp:	
  4960                           ; 1 bytes @ 0x3
  4961                           
  4962  0023                     __div_to_l_@f2:	
  4963                           ; 1 bytes @ 0x3
  4964                           
  4965  0023                     __tdiv_to_l_@f2:	
  4966                           ; 3 bytes @ 0x3
  4967                           
  4968  0023                     ___ftge@ff2:	
  4969                           ; 3 bytes @ 0x3
  4970                           
  4971                           
  4972                           ; 3 bytes @ 0x3
  4973  0023                     	ds	1
  4974  0024                     ??_I2C2_MasterWriteTRBBuild:	
  4975  0024                     ??_I2C2_MasterReadTRBBuild:	
  4976                           ; 1 bytes @ 0x4
  4977                           
  4978  0024                     ??_cputs:	
  4979                           ; 1 bytes @ 0x4
  4980                           
  4981  0024                     ??___awmod:	
  4982                           ; 1 bytes @ 0x4
  4983                           
  4984  0024                     ___ftpack@sign:	
  4985                           ; 1 bytes @ 0x4
  4986                           
  4987  0024                     ___lldiv@dividend:	
  4988                           ; 1 bytes @ 0x4
  4989                           
  4990                           
  4991                           ; 4 bytes @ 0x4
  4992  0024                     	ds	1
  4993  0025                     ??___ftpack:	
  4994  0025                     ?_puts:	
  4995                           ; 1 bytes @ 0x5
  4996                           
  4997  0025                     ___awmod@counter:	
  4998                           ; 2 bytes @ 0x5
  4999                           
  5000  0025                     puts@s:	
  5001                           ; 1 bytes @ 0x5
  5002                           
  5003                           
  5004                           ; 2 bytes @ 0x5
  5005  0025                     	ds	1
  5006  0026                     ??__tdiv_to_l_:	
  5007  0026                     ??__div_to_l_:	
  5008                           ; 1 bytes @ 0x6
  5009                           
  5010  0026                     ??___ftge:	
  5011                           ; 1 bytes @ 0x6
  5012                           
  5013  0026                     I2C2_MasterReadTRBBuild@ptrb:	
  5014                           ; 1 bytes @ 0x6
  5015                           
  5016  0026                     I2C2_MasterWriteTRBBuild@ptrb:	
  5017                           ; 1 bytes @ 0x6
  5018                           
  5019  0026                     ___awmod@sign:	
  5020                           ; 1 bytes @ 0x6
  5021                           
  5022                           
  5023                           ; 1 bytes @ 0x6
  5024  0026                     	ds	1
  5025  0027                     ??_puts:	
  5026  0027                     ?_EMC1001_Read:	
  5027                           ; 1 bytes @ 0x7
  5028                           
  5029  0027                     ?_EMC1001_Write:	
  5030                           ; 1 bytes @ 0x7
  5031                           
  5032  0027                     ?___awdiv:	
  5033                           ; 1 bytes @ 0x7
  5034                           
  5035  0027                     EMC1001_Read@pData:	
  5036                           ; 2 bytes @ 0x7
  5037                           
  5038  0027                     EMC1001_Write@data:	
  5039                           ; 1 bytes @ 0x7
  5040                           
  5041  0027                     ___awdiv@divisor:	
  5042                           ; 1 bytes @ 0x7
  5043                           
  5044                           
  5045                           ; 2 bytes @ 0x7
  5046  0027                     	ds	1
  5047  0028                     ??_EMC1001_Read:	
  5048  0028                     ??_EMC1001_Write:	
  5049                           ; 1 bytes @ 0x8
  5050                           
  5051  0028                     ??___lldiv:	
  5052                           ; 1 bytes @ 0x8
  5053                           
  5054  0028                     ?___awtoft:	
  5055                           ; 1 bytes @ 0x8
  5056                           
  5057  0028                     ?___lltoft:	
  5058                           ; 3 bytes @ 0x8
  5059                           
  5060  0028                     ___awtoft@c:	
  5061                           ; 3 bytes @ 0x8
  5062                           
  5063  0028                     ___lltoft@c:	
  5064                           ; 2 bytes @ 0x8
  5065                           
  5066                           
  5067                           ; 4 bytes @ 0x8
  5068  0028                     	ds	1
  5069  0029                     ___awdiv@dividend:	
  5070  0029                     ___lldiv@quotient:	
  5071                           ; 2 bytes @ 0x9
  5072                           
  5073                           
  5074                           ; 4 bytes @ 0x9
  5075  0029                     	ds	1
  5076  002A                     EMC1001_Read@timeOut:	
  5077  002A                     EMC1001_Write@reg:	
  5078                           ; 1 bytes @ 0xA
  5079                           
  5080  002A                     __tdiv_to_l_@quot:	
  5081                           ; 1 bytes @ 0xA
  5082                           
  5083                           
  5084                           ; 4 bytes @ 0xA
  5085  002A                     	ds	1
  5086  002B                     ??___awdiv:	
  5087  002B                     ??___awtoft:	
  5088                           ; 1 bytes @ 0xB
  5089                           
  5090  002B                     EMC1001_Read@reg:	
  5091                           ; 1 bytes @ 0xB
  5092                           
  5093  002B                     EMC1001_Write@buffer:	
  5094                           ; 1 bytes @ 0xB
  5095                           
  5096                           
  5097                           ; 2 bytes @ 0xB
  5098  002B                     	ds	1
  5099  002C                     ??___lltoft:	
  5100  002C                     EMC1001_Read@status:	
  5101                           ; 1 bytes @ 0xC
  5102                           
  5103  002C                     ___awdiv@counter:	
  5104                           ; 1 bytes @ 0xC
  5105                           
  5106                           
  5107                           ; 1 bytes @ 0xC
  5108  002C                     	ds	1
  5109  002D                     EMC1001_Write@timeOut:	
  5110  002D                     ___awdiv@sign:	
  5111                           ; 1 bytes @ 0xD
  5112                           
  5113  002D                     ___awtoft@sign:	
  5114                           ; 1 bytes @ 0xD
  5115                           
  5116  002D                     ___lldiv@counter:	
  5117                           ; 1 bytes @ 0xD
  5118                           
  5119  002D                     ___lltoft@exp:	
  5120                           ; 1 bytes @ 0xD
  5121                           
  5122                           
  5123                           ; 1 bytes @ 0xD
  5124  002D                     	ds	1
  5125  002E                     ?___llmod:	
  5126  002E                     EMC1001_Write@status:	
  5127                           ; 4 bytes @ 0xE
  5128                           
  5129  002E                     __tdiv_to_l_@cntr:	
  5130                           ; 1 bytes @ 0xE
  5131                           
  5132  002E                     ___awdiv@quotient:	
  5133                           ; 1 bytes @ 0xE
  5134                           
  5135  002E                     __div_to_l_@quot:	
  5136                           ; 2 bytes @ 0xE
  5137                           
  5138  002E                     ___llmod@divisor:	
  5139                           ; 4 bytes @ 0xE
  5140                           
  5141                           
  5142                           ; 4 bytes @ 0xE
  5143  002E                     	ds	1
  5144  002F                     ??_EMC1001_SetConversionRate:	
  5145  002F                     ??_EMC1001_SetThermLimit:	
  5146                           ; 1 bytes @ 0xF
  5147                           
  5148  002F                     ??_EMC1001_SetThermHysteresis:	
  5149                           ; 1 bytes @ 0xF
  5150                           
  5151  002F                     ??_EMC1001_SMBusTimeout:	
  5152                           ; 1 bytes @ 0xF
  5153                           
  5154  002F                     ??_EMC1001_MASK1:	
  5155                           ; 1 bytes @ 0xF
  5156                           
  5157  002F                     ??_EMC1001_StandbyMode:	
  5158                           ; 1 bytes @ 0xF
  5159                           
  5160  002F                     ??_EMC1001_THERM2:	
  5161                           ; 1 bytes @ 0xF
  5162                           
  5163  002F                     __tdiv_to_l_@exp1:	
  5164                           ; 1 bytes @ 0xF
  5165                           
  5166                           
  5167                           ; 1 bytes @ 0xF
  5168  002F                     	ds	1
  5169  0030                     ?_EMC1001_SetTempHighLimit:	
  5170  0030                     ?_EMC1001_SetTempLowLimit:	
  5171                           ; 1 bytes @ 0x10
  5172                           
  5173  0030                     ?___wmul:	
  5174                           ; 1 bytes @ 0x10
  5175                           
  5176  0030                     EMC1001_SetConversionRate@data:	
  5177                           ; 2 bytes @ 0x10
  5178                           
  5179  0030                     EMC1001_SetTempHighLimit@LB:	
  5180                           ; 1 bytes @ 0x10
  5181                           
  5182  0030                     EMC1001_SetTempLowLimit@LB:	
  5183                           ; 1 bytes @ 0x10
  5184                           
  5185  0030                     EMC1001_SetThermLimit@data:	
  5186                           ; 1 bytes @ 0x10
  5187                           
  5188  0030                     EMC1001_SetThermHysteresis@data:	
  5189                           ; 1 bytes @ 0x10
  5190                           
  5191  0030                     EMC1001_SMBusTimeout@enable:	
  5192                           ; 1 bytes @ 0x10
  5193                           
  5194  0030                     EMC1001_MASK1@enable:	
  5195                           ; 1 bytes @ 0x10
  5196                           
  5197  0030                     EMC1001_StandbyMode@enable:	
  5198                           ; 1 bytes @ 0x10
  5199                           
  5200  0030                     EMC1001_THERM2@enable:	
  5201                           ; 1 bytes @ 0x10
  5202                           
  5203  0030                     ___wmul@multiplier:	
  5204                           ; 1 bytes @ 0x10
  5205                           
  5206                           
  5207                           ; 2 bytes @ 0x10
  5208  0030                     	ds	1
  5209  0031                     ??_EMC1001_SetTempHighLimit:	
  5210  0031                     ??_EMC1001_SetTempLowLimit:	
  5211                           ; 1 bytes @ 0x11
  5212                           
  5213  0031                     EMC1001_MASK1@data:	
  5214                           ; 1 bytes @ 0x11
  5215                           
  5216  0031                     EMC1001_StandbyMode@data:	
  5217                           ; 1 bytes @ 0x11
  5218                           
  5219  0031                     EMC1001_THERM2@data:	
  5220                           ; 1 bytes @ 0x11
  5221                           
  5222                           
  5223                           ; 1 bytes @ 0x11
  5224  0031                     	ds	1
  5225  0032                     __div_to_l_@cntr:	
  5226  0032                     ___wmul@multiplicand:	
  5227                           ; 1 bytes @ 0x12
  5228                           
  5229  0032                     ___llmod@dividend:	
  5230                           ; 2 bytes @ 0x12
  5231                           
  5232                           
  5233                           ; 4 bytes @ 0x12
  5234  0032                     	ds	1
  5235  0033                     __div_to_l_@exp1:	
  5236                           
  5237                           ; 1 bytes @ 0x13
  5238  0033                     	ds	1
  5239  0034                     ??___wmul:	
  5240  0034                     ___wmul@product:	
  5241                           ; 1 bytes @ 0x14
  5242                           
  5243                           
  5244                           ; 2 bytes @ 0x14
  5245  0034                     	ds	1
  5246  0035                     EMC1001_SetTempHighLimit@HB:	
  5247  0035                     EMC1001_SetTempLowLimit@HB:	
  5248                           ; 1 bytes @ 0x15
  5249                           
  5250                           
  5251                           ; 1 bytes @ 0x15
  5252  0035                     	ds	1
  5253  0036                     ??___llmod:	
  5254  0036                     ?___ftmul:	
  5255                           ; 1 bytes @ 0x16
  5256                           
  5257  0036                     ___ftmul@f1:	
  5258                           ; 3 bytes @ 0x16
  5259                           
  5260                           
  5261                           ; 3 bytes @ 0x16
  5262  0036                     	ds	1
  5263  0037                     ___llmod@counter:	
  5264                           
  5265                           ; 1 bytes @ 0x17
  5266  0037                     	ds	2
  5267  0039                     ___ftmul@f2:	
  5268                           
  5269                           ; 3 bytes @ 0x19
  5270  0039                     	ds	3
  5271  003C                     ??___ftmul:	
  5272                           
  5273                           ; 1 bytes @ 0x1C
  5274  003C                     	ds	4
  5275  0040                     ___ftmul@exp:	
  5276                           
  5277                           ; 1 bytes @ 0x20
  5278  0040                     	ds	1
  5279  0041                     ___ftmul@f3_as_product:	
  5280                           
  5281                           ; 3 bytes @ 0x21
  5282  0041                     	ds	3
  5283  0044                     ___ftmul@cntr:	
  5284                           
  5285                           ; 1 bytes @ 0x24
  5286  0044                     	ds	1
  5287  0045                     ___ftmul@sign:	
  5288                           
  5289                           ; 1 bytes @ 0x25
  5290  0045                     	ds	1
  5291  0046                     ?_fround:	
  5292  0046                     ?_scale:	
  5293                           ; 3 bytes @ 0x26
  5294                           
  5295                           
  5296                           ; 3 bytes @ 0x26
  5297  0046                     	ds	3
  5298  0049                     ??_fround:	
  5299  0049                     ??_scale:	
  5300                           ; 1 bytes @ 0x29
  5301                           
  5302                           
  5303                           ; 1 bytes @ 0x29
  5304  0049                     	ds	2
  5305  004B                     _scale$1371:	
  5306                           
  5307                           ; 3 bytes @ 0x2B
  5308  004B                     	ds	2
  5309  004D                     _fround$1370:	
  5310                           
  5311                           ; 3 bytes @ 0x2D
  5312  004D                     	ds	1
  5313  004E                     scale@scl:	
  5314                           
  5315                           ; 1 bytes @ 0x2E
  5316  004E                     	ds	1
  5317  004F                     ?___fttol:	
  5318  004F                     ___fttol@f1:	
  5319                           ; 4 bytes @ 0x2F
  5320                           
  5321                           
  5322                           ; 3 bytes @ 0x2F
  5323  004F                     	ds	1
  5324  0050                     _fround$1369:	
  5325                           
  5326                           ; 3 bytes @ 0x30
  5327  0050                     	ds	3
  5328  0053                     ??___fttol:	
  5329  0053                     fround@prec:	
  5330                           ; 1 bytes @ 0x33
  5331                           
  5332                           
  5333                           ; 1 bytes @ 0x33
  5334  0053                     	ds	1
  5335  0054                     ?___ftadd:	
  5336  0054                     ___ftadd@f1:	
  5337                           ; 3 bytes @ 0x34
  5338                           
  5339                           
  5340                           ; 3 bytes @ 0x34
  5341  0054                     	ds	3
  5342  0057                     ___fttol@sign1:	
  5343  0057                     ___ftadd@f2:	
  5344                           ; 1 bytes @ 0x37
  5345                           
  5346                           
  5347                           ; 3 bytes @ 0x37
  5348  0057                     	ds	1
  5349  0058                     ___fttol@lval:	
  5350                           
  5351                           ; 4 bytes @ 0x38
  5352  0058                     	ds	2
  5353  005A                     ??___ftadd:	
  5354                           
  5355                           ; 1 bytes @ 0x3A
  5356  005A                     	ds	2
  5357  005C                     ___fttol@exp1:	
  5358                           
  5359                           ; 1 bytes @ 0x3C
  5360  005C                     	ds	2
  5361  005E                     ___ftadd@sign:	
  5362                           
  5363                           ; 1 bytes @ 0x3E
  5364  005E                     	ds	1
  5365  005F                     ___ftadd@exp2:	
  5366                           
  5367                           ; 1 bytes @ 0x3F
  5368  005F                     	ds	1
  5369  0060                     ___ftadd@exp1:	
  5370                           
  5371                           ; 1 bytes @ 0x40
  5372  0060                     	ds	1
  5373  0061                     ?___ftsub:	
  5374  0061                     ___ftsub@f2:	
  5375                           ; 3 bytes @ 0x41
  5376                           
  5377                           
  5378                           ; 3 bytes @ 0x41
  5379  0061                     	ds	3
  5380  0064                     ___ftsub@f1:	
  5381                           
  5382                           ; 3 bytes @ 0x44
  5383  0064                     	ds	3
  5384  0067                     ??_printf:	
  5385  0067                     ??___ftsub:	
  5386                           ; 1 bytes @ 0x47
  5387                           
  5388                           
  5389                           ; 1 bytes @ 0x47
  5390  0067                     	ds	6
  5391  006D                     ??_EMC1001_PrintTemp:	
  5392                           
  5393                           ; 1 bytes @ 0x4D
  5394  006D                     	ds	2
  5395                           
  5396                           	psect	maintext
  5397  1218                     __pmaintext:	
  5398 ;;
  5399 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5400 ;;
  5401 ;; *************** function _main *****************
  5402 ;; Defined at:
  5403 ;;		line 10 in file "main.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;		None
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;		None
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : B1F/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;Total ram usage:        2 bytes
  5422 ;; Hardware stack levels required when called:    8
  5423 ;; This function calls:
  5424 ;;		_EMC1001_MASK1
  5425 ;;		_EMC1001_PrintInfo
  5426 ;;		_EMC1001_PrintTemp
  5427 ;;		_EMC1001_SMBusTimeout
  5428 ;;		_EMC1001_SetConversionRate
  5429 ;;		_EMC1001_SetTempHighLimit
  5430 ;;		_EMC1001_SetTempLowLimit
  5431 ;;		_EMC1001_SetThermHysteresis
  5432 ;;		_EMC1001_SetThermLimit
  5433 ;;		_EMC1001_StandbyMode
  5434 ;;		_EMC1001_THERM2
  5435 ;;		_SYSTEM_Initialize
  5436 ;;		_printf
  5437 ;;		_puts
  5438 ;; This function is called by:
  5439 ;;		Startup code after reset
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _main
  5445  1218                     _main:	
  5446                           
  5447                           ;main.c: 13: SYSTEM_Initialize();
  5448                           
  5449                           ;incstack = 0
  5450                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5451  1218  319C  24AA  3192   	fcall	_SYSTEM_Initialize
  5452                           
  5453                           ;main.c: 14: (INTCONbits.GIE = 1);
  5454  121B  178B               	bsf	11,7	;volatile
  5455                           
  5456                           ;main.c: 15: (INTCONbits.PEIE = 1);
  5457  121C  170B               	bsf	11,6	;volatile
  5458                           
  5459                           ;main.c: 18: do { LATAbits.LATA0 = 0; } while(0);
  5460  121D  0020               	movlb	0	; select bank0
  5461  121E  1016               	bcf	22,0	;volatile
  5462                           
  5463                           ;main.c: 19: do { LATAbits.LATA1 = 0; } while(0);
  5464  121F  1096               	bcf	22,1	;volatile
  5465                           
  5466                           ;main.c: 20: do { LATAbits.LATA2 = 0; } while(0);
  5467  1220  1116               	bcf	22,2	;volatile
  5468                           
  5469                           ;main.c: 21: do { LATAbits.LATA3 = 0; } while(0);
  5470  1221  1196               	bcf	22,3	;volatile
  5471                           
  5472                           ;main.c: 24: EMC1001_SetConversionRate(0x05);
  5473  1222  3005               	movlw	5
  5474  1223  319C  24C2  3192   	fcall	_EMC1001_SetConversionRate
  5475                           
  5476                           ;main.c: 25: EMC1001_SetThermLimit(30);
  5477  1226  301E               	movlw	30
  5478  1227  319C  2495  3192   	fcall	_EMC1001_SetThermLimit
  5479                           
  5480                           ;main.c: 26: EMC1001_SetThermHysteresis(3);
  5481  122A  3003               	movlw	3
  5482  122B  319C  248B  3192   	fcall	_EMC1001_SetThermHysteresis
  5483                           
  5484                           ;main.c: 27: EMC1001_SMBusTimeout(0);
  5485  122E  3000               	movlw	0
  5486  122F  318A  221D  3192   	fcall	_EMC1001_SMBusTimeout
  5487                           
  5488                           ;main.c: 28: EMC1001_MASK1(0);
  5489  1232  3000               	movlw	0
  5490  1233  319D  2573  3192   	fcall	_EMC1001_MASK1
  5491                           
  5492                           ;main.c: 29: EMC1001_StandbyMode(0);
  5493  1236  3000               	movlw	0
  5494  1237  319D  2594  3192   	fcall	_EMC1001_StandbyMode
  5495                           
  5496                           ;main.c: 30: EMC1001_THERM2(0);
  5497  123A  3000               	movlw	0
  5498  123B  319D  25B5  3192   	fcall	_EMC1001_THERM2
  5499                           
  5500                           ;main.c: 31: EMC1001_SetTempHighLimit(29,25);
  5501  123E  3019               	movlw	25
  5502  123F  0021               	movlb	1	; select bank1
  5503  1240  00E2               	movwf	??_main^(0+128)
  5504  1241  0862               	movf	??_main^(0+128),w
  5505  1242  0020               	movlb	0	; select bank0
  5506  1243  00B0               	movwf	EMC1001_SetTempHighLimit@LB
  5507  1244  301D               	movlw	29
  5508  1245  319E  264E  3192   	fcall	_EMC1001_SetTempHighLimit
  5509                           
  5510                           ;main.c: 32: EMC1001_SetTempLowLimit(26,75);
  5511  1248  304B               	movlw	75
  5512  1249  0021               	movlb	1	; select bank1
  5513  124A  00E2               	movwf	??_main^(0+128)
  5514  124B  0862               	movf	??_main^(0+128),w
  5515  124C  0020               	movlb	0	; select bank0
  5516  124D  00B0               	movwf	EMC1001_SetTempLowLimit@LB
  5517  124E  301A               	movlw	26
  5518  124F  319E  267E  3192   	fcall	_EMC1001_SetTempLowLimit
  5519  1252                     l4624:	
  5520                           ;main.c: 35: while (1)
  5521                           
  5522                           
  5523                           ;main.c: 36: {
  5524                           ;main.c: 37: printf("\x0C");
  5525  1252  3019               	movlw	low (STR_1| (0+32768))
  5526  1253  0021               	movlb	1	; select bank1
  5527  1254  00A0               	movwf	printf@f^(0+128)
  5528  1255  308A               	movlw	high (STR_1| (0+32768))
  5529  1256  00A1               	movwf	(printf@f^(0+128)+1)
  5530  1257  3180  203E  3192   	fcall	_printf
  5531                           
  5532                           ;main.c: 38: puts("Microchip EMC1001 Temperature Sensor Demo");
  5533  125A  30CF               	movlw	low (STR_2| (0+32768))
  5534  125B  0020               	movlb	0	; select bank0
  5535  125C  00A5               	movwf	puts@s
  5536  125D  3088               	movlw	high (STR_2| (0+32768))
  5537  125E  00A6               	movwf	puts@s+1
  5538  125F  319C  24B6  3192   	fcall	_puts
  5539                           
  5540                           ;main.c: 39: puts("MPLABXpress LED2=read indicator, LED3=EMC1001 ALARM1, LED4=EMC1001 AL
      +                          ARM2\n");
  5541  1262  30D7               	movlw	low (STR_3| (0+32768))
  5542  1263  0020               	movlb	0	; select bank0
  5543  1264  00A5               	movwf	puts@s
  5544  1265  3087               	movlw	high (STR_3| (0+32768))
  5545  1266  00A6               	movwf	puts@s+1
  5546  1267  319C  24B6  3192   	fcall	_puts
  5547                           
  5548                           ;main.c: 41: do { LATAbits.LATA0 = 1; } while(0);
  5549  126A  0020               	movlb	0	; select bank0
  5550  126B  1416               	bsf	22,0	;volatile
  5551                           
  5552                           ;main.c: 42: EMC1001_PrintInfo();
  5553  126C  318B  2376  3192   	fcall	_EMC1001_PrintInfo
  5554                           
  5555                           ;main.c: 43: EMC1001_PrintTemp();
  5556  126F  3191  2160  3192   	fcall	_EMC1001_PrintTemp
  5557                           
  5558                           ;main.c: 44: do { LATAbits.LATA0 = 0; } while(0);
  5559  1272  0020               	movlb	0	; select bank0
  5560  1273  1016               	bcf	22,0	;volatile
  5561                           
  5562                           ;main.c: 46: LATAbits.LATA1=~PORTAbits.RA7;
  5563  1274  1003               	clrc
  5564  1275  1F8C               	btfss	12,7	;volatile
  5565  1276  1403               	setc
  5566  1277  1C03               	btfss	3,0
  5567  1278  2A7C               	goto	u6370
  5568  1279  0020               	movlb	0	; select bank0
  5569  127A  1496               	bsf	22,1	;volatile
  5570  127B  2A7E               	goto	l4636
  5571  127C                     u6370:	
  5572  127C  0020               	movlb	0	; select bank0
  5573  127D  1096               	bcf	22,1	;volatile
  5574  127E                     l4636:	
  5575                           
  5576                           ;main.c: 47: LATAbits.LATA2=~PORTAbits.RA6;
  5577  127E  1003               	clrc
  5578  127F  1F0C               	btfss	12,6	;volatile
  5579  1280  1403               	setc
  5580  1281  1C03               	btfss	3,0
  5581  1282  2A86               	goto	u6390
  5582  1283  0020               	movlb	0	; select bank0
  5583  1284  1516               	bsf	22,2	;volatile
  5584  1285  2A88               	goto	l4638
  5585  1286                     u6390:	
  5586  1286  0020               	movlb	0	; select bank0
  5587  1287  1116               	bcf	22,2	;volatile
  5588  1288                     l4638:	
  5589                           
  5590                           ;main.c: 49: _delay((unsigned long)((1000)*(1000000/4000.0)));
  5591  1288  3002               	movlw	2
  5592  1289  0021               	movlb	1	; select bank1
  5593  128A  00E3               	movwf	(??_main^(0+128)+1)
  5594  128B  3045               	movlw	69
  5595  128C  00E2               	movwf	??_main^(0+128)
  5596  128D  30A9               	movlw	169
  5597  128E                     u6417:	
  5598  128E  0B89               	decfsz	9,f
  5599  128F  2A8E               	goto	u6417
  5600  1290  0BE2               	decfsz	??_main^(0+128),f
  5601  1291  2A8E               	goto	u6417
  5602  1292  0BE3               	decfsz	(??_main^(0+128)+1),f
  5603  1293  2A8E               	goto	u6417
  5604  1294  3200               	nop2
  5605  1295  2A52               	goto	l4624
  5606  1296                     __end_of_main:	
  5607                           
  5608                           	psect	text1
  5609  1CB6                     __ptext1:	
  5610 ;; *************** function _puts *****************
  5611 ;; Defined at:
  5612 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/puts.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  5615 ;;		 -> STR_3(75), STR_2(42), 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  2    5[BANK0 ] int 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5627 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;Total ram usage:        2 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    6
  5634 ;; This function calls:
  5635 ;;		_cputs
  5636 ;;		_putch
  5637 ;; This function is called by:
  5638 ;;		_main
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _puts
  5644  1CB6                     _puts:	
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5648  1CB6  0020               	movlb	0	; select bank0
  5649  1CB7  0826               	movf	puts@s+1,w
  5650  1CB8  00A3               	movwf	cputs@s+1
  5651  1CB9  0825               	movf	puts@s,w
  5652  1CBA  00A2               	movwf	cputs@s
  5653  1CBB  319C  24F2  319C   	fcall	_cputs
  5654  1CBE  300A               	movlw	10
  5655  1CBF  319C  2463         	fcall	_putch
  5656  1CC1  0008               	return
  5657  1CC2                     __end_of_puts:	
  5658                           
  5659                           	psect	text2
  5660  1CF2                     __ptext2:	
  5661 ;; *************** function _cputs *****************
  5662 ;; Defined at:
  5663 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/cputs.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  5666 ;;		 -> STR_3(75), STR_2(42), 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5678 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5681 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5682 ;;Total ram usage:        3 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    5
  5685 ;; This function calls:
  5686 ;;		_putch
  5687 ;; This function is called by:
  5688 ;;		_puts
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           
  5693                           ;psect for function _cputs
  5694  1CF2                     _cputs:	
  5695  1CF2                     l4496:	
  5696                           ;incstack = 0
  5697                           ; Regs used in _cputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5698                           
  5699  1CF2  0020               	movlb	0	; select bank0
  5700  1CF3  0822               	movf	cputs@s,w
  5701  1CF4  0084               	movwf	4
  5702  1CF5  0823               	movf	cputs@s+1,w
  5703  1CF6  0085               	movwf	5
  5704  1CF7  0012               	moviw fsr0++
  5705  1CF8  1903               	btfsc	3,2
  5706  1CF9  0008               	return
  5707  1CFA  0020               	movlb	0	; select bank0
  5708  1CFB  0822               	movf	cputs@s,w
  5709  1CFC  0084               	movwf	4
  5710  1CFD  0823               	movf	cputs@s+1,w
  5711  1CFE  0085               	movwf	5
  5712  1CFF  0800               	movf	0,w	;code access
  5713  1D00  319C  2463  319C   	fcall	_putch
  5714  1D03  3001               	movlw	1
  5715  1D04  0020               	movlb	0	; select bank0
  5716  1D05  07A2               	addwf	cputs@s,f
  5717  1D06  3000               	movlw	0
  5718  1D07  3DA3               	addwfc	cputs@s+1,f
  5719  1D08  2CF2               	goto	l4496
  5720  1D09                     __end_of_cputs:	
  5721                           
  5722                           	psect	text3
  5723  1CAA                     __ptext3:	
  5724 ;; *************** function _SYSTEM_Initialize *****************
  5725 ;; Defined at:
  5726 ;;		line 82 in file "mcc_generated_files/mcc.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;		None
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;		None
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, pclath, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;Total ram usage:        0 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    4
  5747 ;; This function calls:
  5748 ;;		_EUSART_Initialize
  5749 ;;		_I2C2_Initialize
  5750 ;;		_OSCILLATOR_Initialize
  5751 ;;		_PIN_MANAGER_Initialize
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _SYSTEM_Initialize
  5759  1CAA                     _SYSTEM_Initialize:	
  5760                           
  5761                           ;mcc.c: 85: PIN_MANAGER_Initialize();
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5765  1CAA  319F  27B9  319C   	fcall	_PIN_MANAGER_Initialize
  5766                           
  5767                           ;mcc.c: 86: OSCILLATOR_Initialize();
  5768  1CAD  319C  2478  319C   	fcall	_OSCILLATOR_Initialize
  5769                           
  5770                           ;mcc.c: 87: I2C2_Initialize();
  5771  1CB0  319D  2521  319C   	fcall	_I2C2_Initialize
  5772                           
  5773                           ;mcc.c: 88: EUSART_Initialize();
  5774  1CB3  319C  249F         	fcall	_EUSART_Initialize
  5775  1CB5  0008               	return
  5776  1CB6                     __end_of_SYSTEM_Initialize:	
  5777                           
  5778                           	psect	text4
  5779  1FB9                     __ptext4:	
  5780 ;; *************** function _PIN_MANAGER_Initialize *****************
  5781 ;; Defined at:
  5782 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  state           1    0[BANK0 ] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;Total ram usage:        1 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    3
  5803 ;; This function calls:
  5804 ;;		Nothing
  5805 ;; This function is called by:
  5806 ;;		_SYSTEM_Initialize
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _PIN_MANAGER_Initialize
  5812  1FB9                     _PIN_MANAGER_Initialize:	
  5813                           
  5814                           ;pin_manager.c: 56: LATA = 0x00;
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5818  1FB9  0020               	movlb	0	; select bank0
  5819  1FBA  0196               	clrf	22	;volatile
  5820                           
  5821                           ;pin_manager.c: 57: LATB = 0x00;
  5822  1FBB  0197               	clrf	23	;volatile
  5823                           
  5824                           ;pin_manager.c: 58: LATC = 0x01;
  5825  1FBC  3001               	movlw	1
  5826  1FBD  0098               	movwf	24	;volatile
  5827                           
  5828                           ;pin_manager.c: 63: TRISA = 0xF0;
  5829  1FBE  30F0               	movlw	240
  5830  1FBF  0091               	movwf	17	;volatile
  5831                           
  5832                           ;pin_manager.c: 64: TRISB = 0xFF;
  5833  1FC0  30FF               	movlw	255
  5834  1FC1  0092               	movwf	18	;volatile
  5835                           
  5836                           ;pin_manager.c: 65: TRISC = 0xFE;
  5837  1FC2  30FE               	movlw	254
  5838  1FC3  0093               	movwf	19	;volatile
  5839                           
  5840                           ;pin_manager.c: 70: ANSELC = 0xE7;
  5841  1FC4  30E7               	movlw	231
  5842  1FC5  003E               	movlb	30	; select bank30
  5843  1FC6  00CE               	movwf	78	;volatile
  5844                           
  5845                           ;pin_manager.c: 71: ANSELB = 0xFF;
  5846  1FC7  30FF               	movlw	255
  5847  1FC8  00C3               	movwf	67	;volatile
  5848                           
  5849                           ;pin_manager.c: 72: ANSELA = 0x30;
  5850  1FC9  3030               	movlw	48
  5851  1FCA  00B8               	movwf	56	;volatile
  5852                           
  5853                           ;pin_manager.c: 77: WPUE = 0x08;
  5854  1FCB  3008               	movlw	8
  5855  1FCC  00E5               	movwf	101	;volatile
  5856                           
  5857                           ;pin_manager.c: 78: WPUB = 0xFF;
  5858  1FCD  30FF               	movlw	255
  5859  1FCE  00C4               	movwf	68	;volatile
  5860                           
  5861                           ;pin_manager.c: 79: WPUA = 0xF0;
  5862  1FCF  30F0               	movlw	240
  5863  1FD0  00B9               	movwf	57	;volatile
  5864                           
  5865                           ;pin_manager.c: 80: WPUC = 0xE7;
  5866  1FD1  30E7               	movlw	231
  5867  1FD2  00CF               	movwf	79	;volatile
  5868                           
  5869                           ;pin_manager.c: 85: ODCONA = 0x00;
  5870  1FD3  01BA               	clrf	58	;volatile
  5871                           
  5872                           ;pin_manager.c: 86: ODCONB = 0x00;
  5873  1FD4  01C5               	clrf	69	;volatile
  5874                           
  5875                           ;pin_manager.c: 87: ODCONC = 0x00;
  5876  1FD5  01D0               	clrf	80	;volatile
  5877                           
  5878                           ;pin_manager.c: 94: bool state = GIE;
  5879  1FD6  3000               	movlw	0
  5880  1FD7  1B8B               	btfsc	11,7	;volatile
  5881  1FD8  3001               	movlw	1
  5882  1FD9  0020               	movlb	0	; select bank0
  5883  1FDA  00A0               	movwf	PIN_MANAGER_Initialize@state
  5884                           
  5885                           ;pin_manager.c: 95: GIE = 0;
  5886  1FDB  138B               	bcf	11,7	;volatile
  5887                           
  5888                           ;pin_manager.c: 96: PPSLOCK = 0x55;
  5889  1FDC  3055               	movlw	85
  5890  1FDD  003D               	movlb	29	; select bank29
  5891  1FDE  008F               	movwf	15	;volatile
  5892                           
  5893                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
  5894  1FDF  30AA               	movlw	170
  5895  1FE0  008F               	movwf	15	;volatile
  5896                           
  5897                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x00;
  5898  1FE1  100F               	bcf	15,0	;volatile
  5899                           
  5900                           ;pin_manager.c: 100: RC0PPS = 0x10;
  5901  1FE2  3010               	movlw	16
  5902  1FE3  003E               	movlb	30	; select bank30
  5903  1FE4  00A0               	movwf	32	;volatile
  5904                           
  5905                           ;pin_manager.c: 101: RC3PPS = 0x17;
  5906  1FE5  3017               	movlw	23
  5907  1FE6  00A3               	movwf	35	;volatile
  5908                           
  5909                           ;pin_manager.c: 102: SSP2DATPPSbits.SSP2DATPPS = 0x13;
  5910  1FE7  003D               	movlb	29	; select bank29
  5911  1FE8  0849               	movf	73,w	;volatile
  5912  1FE9  39E0               	andlw	-32
  5913  1FEA  3813               	iorlw	19
  5914  1FEB  00C9               	movwf	73	;volatile
  5915                           
  5916                           ;pin_manager.c: 103: SSP2CLKPPSbits.SSP2CLKPPS = 0x14;
  5917  1FEC  0848               	movf	72,w	;volatile
  5918  1FED  39E0               	andlw	-32
  5919  1FEE  3814               	iorlw	20
  5920  1FEF  00C8               	movwf	72	;volatile
  5921                           
  5922                           ;pin_manager.c: 104: RC4PPS = 0x16;
  5923  1FF0  3016               	movlw	22
  5924  1FF1  003E               	movlb	30	; select bank30
  5925  1FF2  00A4               	movwf	36	;volatile
  5926                           
  5927                           ;pin_manager.c: 106: PPSLOCK = 0x55;
  5928  1FF3  3055               	movlw	85
  5929  1FF4  003D               	movlb	29	; select bank29
  5930  1FF5  008F               	movwf	15	;volatile
  5931                           
  5932                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
  5933  1FF6  30AA               	movlw	170
  5934  1FF7  008F               	movwf	15	;volatile
  5935                           
  5936                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x01;
  5937  1FF8  140F               	bsf	15,0	;volatile
  5938                           
  5939                           ;pin_manager.c: 110: GIE = state;
  5940  1FF9  0020               	movlb	0	; select bank0
  5941  1FFA  1C20               	btfss	PIN_MANAGER_Initialize@state,0
  5942  1FFB  2FFE               	goto	u5590
  5943  1FFC  178B               	bsf	11,7	;volatile
  5944  1FFD  0008               	return
  5945  1FFE                     u5590:	
  5946  1FFE  138B               	bcf	11,7	;volatile
  5947  1FFF  0008               	return
  5948  2000                     __end_of_PIN_MANAGER_Initialize:	
  5949                           
  5950                           	psect	text5
  5951  1C78                     __ptext5:	
  5952 ;; *************** function _OSCILLATOR_Initialize *****************
  5953 ;; Defined at:
  5954 ;;		line 91 in file "mcc_generated_files/mcc.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      void 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;Total ram usage:        0 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    3
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		_SYSTEM_Initialize
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _OSCILLATOR_Initialize
  5984  1C78                     _OSCILLATOR_Initialize:	
  5985                           
  5986                           ;mcc.c: 94: OSCCON1 = 0x62;
  5987                           
  5988                           ;incstack = 0
  5989                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5990  1C78  3062               	movlw	98
  5991  1C79  0031               	movlb	17	; select bank17
  5992  1C7A  008D               	movwf	13	;volatile
  5993                           
  5994                           ;mcc.c: 96: OSCCON3 = 0x00;
  5995  1C7B  018F               	clrf	15	;volatile
  5996                           
  5997                           ;mcc.c: 98: OSCEN = 0x00;
  5998  1C7C  0191               	clrf	17	;volatile
  5999                           
  6000                           ;mcc.c: 100: OSCFRQ = 0x02;
  6001  1C7D  3002               	movlw	2
  6002  1C7E  0093               	movwf	19	;volatile
  6003                           
  6004                           ;mcc.c: 102: OSCTUNE = 0x00;
  6005  1C7F  0192               	clrf	18	;volatile
  6006  1C80  0008               	return
  6007  1C81                     __end_of_OSCILLATOR_Initialize:	
  6008                           
  6009                           	psect	text6
  6010  1D21                     __ptext6:	
  6011 ;; *************** function _I2C2_Initialize *****************
  6012 ;; Defined at:
  6013 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;Total ram usage:        1 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    3
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_SYSTEM_Initialize
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _I2C2_Initialize
  6043  1D21                     _I2C2_Initialize:	
  6044                           
  6045                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  6049  1D21  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  6050  1D22  0020               	movlb	0	; select bank0
  6051  1D23  00A0               	movwf	??_I2C2_Initialize
  6052  1D24  0820               	movf	??_I2C2_Initialize,w
  6053  1D25  00F1               	movwf	_i2c2_object+1
  6054                           
  6055                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  6056  1D26  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  6057  1D27  00A0               	movwf	??_I2C2_Initialize
  6058  1D28  0820               	movf	??_I2C2_Initialize,w
  6059  1D29  00F0               	movwf	_i2c2_object
  6060                           
  6061                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  6062  1D2A  14F2               	bsf	_i2c2_object+2,1
  6063                           
  6064                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  6065  1D2B  1072               	bcf	_i2c2_object+2,0
  6066                           
  6067                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  6068  1D2C  01F4               	clrf	_i2c2_object+4
  6069                           
  6070                           ;i2c2.c: 208: SSP2STAT = 0x80;
  6071  1D2D  3080               	movlw	128
  6072  1D2E  0023               	movlb	3	; select bank3
  6073  1D2F  0099               	movwf	25	;volatile
  6074                           
  6075                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  6076  1D30  3028               	movlw	40
  6077  1D31  009A               	movwf	26	;volatile
  6078                           
  6079                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  6080  1D32  019C               	clrf	28	;volatile
  6081                           
  6082                           ;i2c2.c: 214: SSP2ADD = 0x04;
  6083  1D33  3004               	movlw	4
  6084  1D34  0097               	movwf	23	;volatile
  6085                           
  6086                           ;i2c2.c: 218: PIR3bits.SSP2IF = 0;
  6087  1D35  002E               	movlb	14	; select bank14
  6088  1D36  110F               	bcf	15,2	;volatile
  6089                           
  6090                           ;i2c2.c: 220: PIE3bits.SSP2IE = 1;
  6091  1D37  1519               	bsf	25,2	;volatile
  6092  1D38  0008               	return
  6093  1D39                     __end_of_I2C2_Initialize:	
  6094                           
  6095                           	psect	text7
  6096  1C9F                     __ptext7:	
  6097 ;; *************** function _EUSART_Initialize *****************
  6098 ;; Defined at:
  6099 ;;		line 55 in file "mcc_generated_files/eusart.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;		None
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  1    wreg      void 
  6106 ;; Registers used:
  6107 ;;		wreg, status,2
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;Total ram usage:        0 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    3
  6120 ;; This function calls:
  6121 ;;		Nothing
  6122 ;; This function is called by:
  6123 ;;		_SYSTEM_Initialize
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           
  6128                           ;psect for function _EUSART_Initialize
  6129  1C9F                     _EUSART_Initialize:	
  6130                           
  6131                           ;eusart.c: 60: BAUD1CON = 0x08;
  6132                           
  6133                           ;incstack = 0
  6134                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6135  1C9F  3008               	movlw	8
  6136  1CA0  0022               	movlb	2	; select bank2
  6137  1CA1  009F               	movwf	31	;volatile
  6138                           
  6139                           ;eusart.c: 63: RC1STA = 0x80;
  6140  1CA2  3080               	movlw	128
  6141  1CA3  009D               	movwf	29	;volatile
  6142                           
  6143                           ;eusart.c: 66: TX1STA = 0x24;
  6144  1CA4  3024               	movlw	36
  6145  1CA5  009E               	movwf	30	;volatile
  6146                           
  6147                           ;eusart.c: 69: SP1BRGL = 0x19;
  6148  1CA6  3019               	movlw	25
  6149  1CA7  009B               	movwf	27	;volatile
  6150                           
  6151                           ;eusart.c: 72: SP1BRGH = 0x00;
  6152  1CA8  019C               	clrf	28	;volatile
  6153  1CA9  0008               	return
  6154  1CAA                     __end_of_EUSART_Initialize:	
  6155                           
  6156                           	psect	text8
  6157  1DB5                     __ptext8:	
  6158 ;; *************** function _EMC1001_THERM2 *****************
  6159 ;; Defined at:
  6160 ;;		line 185 in file "EMC1001.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  enable          1    wreg     unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  enable          1   16[BANK0 ] unsigned char 
  6165 ;;  data            1   17[BANK0 ] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      unsigned char 
  6168 ;; Registers used:
  6169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;Total ram usage:        3 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    5
  6182 ;; This function calls:
  6183 ;;		_EMC1001_Read
  6184 ;;		_EMC1001_Write
  6185 ;; This function is called by:
  6186 ;;		_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _EMC1001_THERM2
  6192  1DB5                     _EMC1001_THERM2:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _EMC1001_THERM2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6196                           ;EMC1001_THERM2@enable stored from wreg
  6197  1DB5  0020               	movlb	0	; select bank0
  6198  1DB6  00B0               	movwf	EMC1001_THERM2@enable
  6199                           
  6200                           ;EMC1001.c: 187: uint8_t data;
  6201                           ;EMC1001.c: 188: EMC1001_Read(0x03,&data);
  6202  1DB7  3031               	movlw	(low (EMC1001_THERM2@data| 0))& (0+255)
  6203  1DB8  00AF               	movwf	??_EMC1001_THERM2
  6204  1DB9  082F               	movf	??_EMC1001_THERM2,w
  6205  1DBA  00A7               	movwf	EMC1001_Read@pData
  6206  1DBB  3003               	movlw	3
  6207  1DBC  3190  206E  319D   	fcall	_EMC1001_Read
  6208                           
  6209                           ;EMC1001.c: 190: if (enable)
  6210  1DBF  0020               	movlb	0	; select bank0
  6211  1DC0  0830               	movf	EMC1001_THERM2@enable,w
  6212  1DC1  1903               	btfsc	3,2
  6213  1DC2  2DCC               	goto	l3828
  6214                           
  6215                           ;EMC1001.c: 191: return EMC1001_Write(0x03,data|0b00100000);
  6216                           ;	Return value of _EMC1001_THERM2 is never used
  6217  1DC3  0831               	movf	EMC1001_THERM2@data,w
  6218  1DC4  3820               	iorlw	32
  6219  1DC5  00AF               	movwf	??_EMC1001_THERM2
  6220  1DC6  082F               	movf	??_EMC1001_THERM2,w
  6221  1DC7  00A7               	movwf	EMC1001_Write@data
  6222  1DC8  3003               	movlw	3
  6223  1DC9  3190  2026         	fcall	_EMC1001_Write
  6224  1DCB  0008               	return
  6225  1DCC                     l3828:	
  6226                           
  6227                           ;EMC1001.c: 192: else
  6228                           ;EMC1001.c: 193: return EMC1001_Write(0x03,data&0b11011111);
  6229                           ;	Return value of _EMC1001_THERM2 is never used
  6230  1DCC  0020               	movlb	0	; select bank0
  6231  1DCD  0831               	movf	EMC1001_THERM2@data,w
  6232  1DCE  39DF               	andlw	223
  6233  1DCF  00AF               	movwf	??_EMC1001_THERM2
  6234  1DD0  082F               	movf	??_EMC1001_THERM2,w
  6235  1DD1  00A7               	movwf	EMC1001_Write@data
  6236  1DD2  3003               	movlw	3
  6237  1DD3  3190  2026         	fcall	_EMC1001_Write
  6238  1DD5  0008               	return
  6239  1DD6                     __end_of_EMC1001_THERM2:	
  6240                           
  6241                           	psect	text9
  6242  1D94                     __ptext9:	
  6243 ;; *************** function _EMC1001_StandbyMode *****************
  6244 ;; Defined at:
  6245 ;;		line 170 in file "EMC1001.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;  enable          1    wreg     unsigned char 
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  enable          1   16[BANK0 ] unsigned char 
  6250 ;;  data            1   17[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      unsigned char 
  6253 ;; Registers used:
  6254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;Total ram usage:        3 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    5
  6267 ;; This function calls:
  6268 ;;		_EMC1001_Read
  6269 ;;		_EMC1001_Write
  6270 ;; This function is called by:
  6271 ;;		_main
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           
  6276                           ;psect for function _EMC1001_StandbyMode
  6277  1D94                     _EMC1001_StandbyMode:	
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _EMC1001_StandbyMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6281                           ;EMC1001_StandbyMode@enable stored from wreg
  6282  1D94  0020               	movlb	0	; select bank0
  6283  1D95  00B0               	movwf	EMC1001_StandbyMode@enable
  6284                           
  6285                           ;EMC1001.c: 172: uint8_t data;
  6286                           ;EMC1001.c: 173: EMC1001_Read(0x03,&data);
  6287  1D96  3031               	movlw	(low (EMC1001_StandbyMode@data| 0))& (0+255)
  6288  1D97  00AF               	movwf	??_EMC1001_StandbyMode
  6289  1D98  082F               	movf	??_EMC1001_StandbyMode,w
  6290  1D99  00A7               	movwf	EMC1001_Read@pData
  6291  1D9A  3003               	movlw	3
  6292  1D9B  3190  206E  319D   	fcall	_EMC1001_Read
  6293                           
  6294                           ;EMC1001.c: 175: if (enable)
  6295  1D9E  0020               	movlb	0	; select bank0
  6296  1D9F  0830               	movf	EMC1001_StandbyMode@enable,w
  6297  1DA0  1903               	btfsc	3,2
  6298  1DA1  2DAB               	goto	l3814
  6299                           
  6300                           ;EMC1001.c: 176: return EMC1001_Write(0x03,data|0b01000000);
  6301                           ;	Return value of _EMC1001_StandbyMode is never used
  6302  1DA2  0831               	movf	EMC1001_StandbyMode@data,w
  6303  1DA3  3840               	iorlw	64
  6304  1DA4  00AF               	movwf	??_EMC1001_StandbyMode
  6305  1DA5  082F               	movf	??_EMC1001_StandbyMode,w
  6306  1DA6  00A7               	movwf	EMC1001_Write@data
  6307  1DA7  3003               	movlw	3
  6308  1DA8  3190  2026         	fcall	_EMC1001_Write
  6309  1DAA  0008               	return
  6310  1DAB                     l3814:	
  6311                           
  6312                           ;EMC1001.c: 177: else
  6313                           ;EMC1001.c: 178: return EMC1001_Write(0x03,data&0b10111111);
  6314                           ;	Return value of _EMC1001_StandbyMode is never used
  6315  1DAB  0020               	movlb	0	; select bank0
  6316  1DAC  0831               	movf	EMC1001_StandbyMode@data,w
  6317  1DAD  39BF               	andlw	191
  6318  1DAE  00AF               	movwf	??_EMC1001_StandbyMode
  6319  1DAF  082F               	movf	??_EMC1001_StandbyMode,w
  6320  1DB0  00A7               	movwf	EMC1001_Write@data
  6321  1DB1  3003               	movlw	3
  6322  1DB2  3190  2026         	fcall	_EMC1001_Write
  6323  1DB4  0008               	return
  6324  1DB5                     __end_of_EMC1001_StandbyMode:	
  6325                           
  6326                           	psect	text10
  6327  1C95                     __ptext10:	
  6328 ;; *************** function _EMC1001_SetThermLimit *****************
  6329 ;; Defined at:
  6330 ;;		line 117 in file "EMC1001.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;  data            1    wreg     unsigned char 
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  data            1   16[BANK0 ] unsigned char 
  6335 ;; Return value:  Size  Location     Type
  6336 ;;                  1    wreg      unsigned char 
  6337 ;; Registers used:
  6338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6339 ;; Tracked objects:
  6340 ;;		On entry : 0/0
  6341 ;;		On exit  : 0/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;Total ram usage:        2 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:    5
  6351 ;; This function calls:
  6352 ;;		_EMC1001_Write
  6353 ;; This function is called by:
  6354 ;;		_main
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           
  6359                           ;psect for function _EMC1001_SetThermLimit
  6360  1C95                     _EMC1001_SetThermLimit:	
  6361                           
  6362                           ;incstack = 0
  6363                           ; Regs used in _EMC1001_SetThermLimit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6364                           ;EMC1001_SetThermLimit@data stored from wreg
  6365  1C95  0020               	movlb	0	; select bank0
  6366  1C96  00B0               	movwf	EMC1001_SetThermLimit@data
  6367                           
  6368                           ;EMC1001.c: 119: return EMC1001_Write(0x20,data);
  6369                           ;	Return value of _EMC1001_SetThermLimit is never used
  6370  1C97  0830               	movf	EMC1001_SetThermLimit@data,w
  6371  1C98  00AF               	movwf	??_EMC1001_SetThermLimit
  6372  1C99  082F               	movf	??_EMC1001_SetThermLimit,w
  6373  1C9A  00A7               	movwf	EMC1001_Write@data
  6374  1C9B  3020               	movlw	32
  6375  1C9C  3190  2026         	fcall	_EMC1001_Write
  6376  1C9E  0008               	return
  6377  1C9F                     __end_of_EMC1001_SetThermLimit:	
  6378                           
  6379                           	psect	text11
  6380  1C8B                     __ptext11:	
  6381 ;; *************** function _EMC1001_SetThermHysteresis *****************
  6382 ;; Defined at:
  6383 ;;		line 126 in file "EMC1001.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  data            1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  data            1   16[BANK0 ] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      unsigned char 
  6390 ;; Registers used:
  6391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        2 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    5
  6404 ;; This function calls:
  6405 ;;		_EMC1001_Write
  6406 ;; This function is called by:
  6407 ;;		_main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _EMC1001_SetThermHysteresis
  6413  1C8B                     _EMC1001_SetThermHysteresis:	
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _EMC1001_SetThermHysteresis: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6417                           ;EMC1001_SetThermHysteresis@data stored from wreg
  6418  1C8B  0020               	movlb	0	; select bank0
  6419  1C8C  00B0               	movwf	EMC1001_SetThermHysteresis@data
  6420                           
  6421                           ;EMC1001.c: 128: return EMC1001_Write(0x21,data);
  6422                           ;	Return value of _EMC1001_SetThermHysteresis is never used
  6423  1C8D  0830               	movf	EMC1001_SetThermHysteresis@data,w
  6424  1C8E  00AF               	movwf	??_EMC1001_SetThermHysteresis
  6425  1C8F  082F               	movf	??_EMC1001_SetThermHysteresis,w
  6426  1C90  00A7               	movwf	EMC1001_Write@data
  6427  1C91  3021               	movlw	33
  6428  1C92  3190  2026         	fcall	_EMC1001_Write
  6429  1C94  0008               	return
  6430  1C95                     __end_of_EMC1001_SetThermHysteresis:	
  6431                           
  6432                           	psect	text12
  6433  1E7E                     __ptext12:	
  6434 ;; *************** function _EMC1001_SetTempLowLimit *****************
  6435 ;; Defined at:
  6436 ;;		line 105 in file "EMC1001.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  HB              1    wreg     unsigned char 
  6439 ;;  LB              1   16[BANK0 ] unsigned char 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  HB              1   21[BANK0 ] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      unsigned char 
  6444 ;; Registers used:
  6445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        6 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    5
  6458 ;; This function calls:
  6459 ;;		_EMC1001_Write
  6460 ;;		___awdiv
  6461 ;; This function is called by:
  6462 ;;		_main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _EMC1001_SetTempLowLimit
  6468  1E7E                     _EMC1001_SetTempLowLimit:	
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _EMC1001_SetTempLowLimit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6472                           ;EMC1001_SetTempLowLimit@HB stored from wreg
  6473  1E7E  0020               	movlb	0	; select bank0
  6474  1E7F  00B5               	movwf	EMC1001_SetTempLowLimit@HB
  6475                           
  6476                           ;EMC1001.c: 107: EMC1001_Write(0x07,HB);
  6477  1E80  0835               	movf	EMC1001_SetTempLowLimit@HB,w
  6478  1E81  00B1               	movwf	??_EMC1001_SetTempLowLimit
  6479  1E82  0831               	movf	??_EMC1001_SetTempLowLimit,w
  6480  1E83  00A7               	movwf	EMC1001_Write@data
  6481  1E84  3007               	movlw	7
  6482  1E85  3190  2026  319E   	fcall	_EMC1001_Write
  6483                           
  6484                           ;EMC1001.c: 108: if (LB!=0) LB=(LB/25)<<6;
  6485  1E88  0020               	movlb	0	; select bank0
  6486  1E89  0830               	movf	EMC1001_SetTempLowLimit@LB,w
  6487  1E8A  1903               	btfsc	3,2
  6488  1E8B  2EA6               	goto	l3848
  6489  1E8C  3019               	movlw	25
  6490  1E8D  00A7               	movwf	___awdiv@divisor
  6491  1E8E  3000               	movlw	0
  6492  1E8F  00A8               	movwf	___awdiv@divisor+1
  6493  1E90  0830               	movf	EMC1001_SetTempLowLimit@LB,w
  6494  1E91  00B1               	movwf	??_EMC1001_SetTempLowLimit
  6495  1E92  01B2               	clrf	??_EMC1001_SetTempLowLimit+1
  6496  1E93  0831               	movf	??_EMC1001_SetTempLowLimit,w
  6497  1E94  00A9               	movwf	___awdiv@dividend
  6498  1E95  0832               	movf	??_EMC1001_SetTempLowLimit+1,w
  6499  1E96  00AA               	movwf	___awdiv@dividend+1
  6500  1E97  3190  20BB  319E   	fcall	___awdiv
  6501  1E9A  0020               	movlb	0	; select bank0
  6502  1E9B  0827               	movf	?___awdiv,w
  6503  1E9C  00B3               	movwf	??_EMC1001_SetTempLowLimit+2
  6504  1E9D  3005               	movlw	5
  6505  1E9E                     u5035:	
  6506  1E9E  35B3               	lslf	??_EMC1001_SetTempLowLimit+2,f
  6507  1E9F  3EFF               	addlw	-1
  6508  1EA0  1D03               	skipz
  6509  1EA1  2E9E               	goto	u5035
  6510  1EA2  3533               	lslf	??_EMC1001_SetTempLowLimit+2,w
  6511  1EA3  00B4               	movwf	??_EMC1001_SetTempLowLimit+3
  6512  1EA4  0834               	movf	??_EMC1001_SetTempLowLimit+3,w
  6513  1EA5  00B0               	movwf	EMC1001_SetTempLowLimit@LB
  6514  1EA6                     l3848:	
  6515                           
  6516                           ;EMC1001.c: 109: EMC1001_Write(0x08,LB);
  6517  1EA6  0830               	movf	EMC1001_SetTempLowLimit@LB,w
  6518  1EA7  00B1               	movwf	??_EMC1001_SetTempLowLimit
  6519  1EA8  0831               	movf	??_EMC1001_SetTempLowLimit,w
  6520  1EA9  00A7               	movwf	EMC1001_Write@data
  6521  1EAA  3008               	movlw	8
  6522  1EAB  3190  2026         	fcall	_EMC1001_Write
  6523  1EAD  0008               	return
  6524  1EAE                     __end_of_EMC1001_SetTempLowLimit:	
  6525                           ;EMC1001.c: 110: return 1;
  6526                           ;	Return value of _EMC1001_SetTempLowLimit is never used
  6527                           
  6528                           
  6529                           	psect	text13
  6530  1E4E                     __ptext13:	
  6531 ;; *************** function _EMC1001_SetTempHighLimit *****************
  6532 ;; Defined at:
  6533 ;;		line 93 in file "EMC1001.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  HB              1    wreg     unsigned char 
  6536 ;;  LB              1   16[BANK0 ] unsigned char 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  HB              1   21[BANK0 ] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      unsigned char 
  6541 ;; Registers used:
  6542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:        6 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    5
  6555 ;; This function calls:
  6556 ;;		_EMC1001_Write
  6557 ;;		___awdiv
  6558 ;; This function is called by:
  6559 ;;		_main
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           
  6564                           ;psect for function _EMC1001_SetTempHighLimit
  6565  1E4E                     _EMC1001_SetTempHighLimit:	
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _EMC1001_SetTempHighLimit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6569                           ;EMC1001_SetTempHighLimit@HB stored from wreg
  6570  1E4E  0020               	movlb	0	; select bank0
  6571  1E4F  00B5               	movwf	EMC1001_SetTempHighLimit@HB
  6572                           
  6573                           ;EMC1001.c: 95: EMC1001_Write(0x05,HB);
  6574  1E50  0835               	movf	EMC1001_SetTempHighLimit@HB,w
  6575  1E51  00B1               	movwf	??_EMC1001_SetTempHighLimit
  6576  1E52  0831               	movf	??_EMC1001_SetTempHighLimit,w
  6577  1E53  00A7               	movwf	EMC1001_Write@data
  6578  1E54  3005               	movlw	5
  6579  1E55  3190  2026  319E   	fcall	_EMC1001_Write
  6580                           
  6581                           ;EMC1001.c: 96: if (LB!=0) LB=(LB/25)<<6;
  6582  1E58  0020               	movlb	0	; select bank0
  6583  1E59  0830               	movf	EMC1001_SetTempHighLimit@LB,w
  6584  1E5A  1903               	btfsc	3,2
  6585  1E5B  2E76               	goto	l3838
  6586  1E5C  3019               	movlw	25
  6587  1E5D  00A7               	movwf	___awdiv@divisor
  6588  1E5E  3000               	movlw	0
  6589  1E5F  00A8               	movwf	___awdiv@divisor+1
  6590  1E60  0830               	movf	EMC1001_SetTempHighLimit@LB,w
  6591  1E61  00B1               	movwf	??_EMC1001_SetTempHighLimit
  6592  1E62  01B2               	clrf	??_EMC1001_SetTempHighLimit+1
  6593  1E63  0831               	movf	??_EMC1001_SetTempHighLimit,w
  6594  1E64  00A9               	movwf	___awdiv@dividend
  6595  1E65  0832               	movf	??_EMC1001_SetTempHighLimit+1,w
  6596  1E66  00AA               	movwf	___awdiv@dividend+1
  6597  1E67  3190  20BB  319E   	fcall	___awdiv
  6598  1E6A  0020               	movlb	0	; select bank0
  6599  1E6B  0827               	movf	?___awdiv,w
  6600  1E6C  00B3               	movwf	??_EMC1001_SetTempHighLimit+2
  6601  1E6D  3005               	movlw	5
  6602  1E6E                     u5015:	
  6603  1E6E  35B3               	lslf	??_EMC1001_SetTempHighLimit+2,f
  6604  1E6F  3EFF               	addlw	-1
  6605  1E70  1D03               	skipz
  6606  1E71  2E6E               	goto	u5015
  6607  1E72  3533               	lslf	??_EMC1001_SetTempHighLimit+2,w
  6608  1E73  00B4               	movwf	??_EMC1001_SetTempHighLimit+3
  6609  1E74  0834               	movf	??_EMC1001_SetTempHighLimit+3,w
  6610  1E75  00B0               	movwf	EMC1001_SetTempHighLimit@LB
  6611  1E76                     l3838:	
  6612                           
  6613                           ;EMC1001.c: 97: EMC1001_Write(0x06,LB);
  6614  1E76  0830               	movf	EMC1001_SetTempHighLimit@LB,w
  6615  1E77  00B1               	movwf	??_EMC1001_SetTempHighLimit
  6616  1E78  0831               	movf	??_EMC1001_SetTempHighLimit,w
  6617  1E79  00A7               	movwf	EMC1001_Write@data
  6618  1E7A  3006               	movlw	6
  6619  1E7B  3190  2026         	fcall	_EMC1001_Write
  6620  1E7D  0008               	return
  6621  1E7E                     __end_of_EMC1001_SetTempHighLimit:	
  6622                           ;EMC1001.c: 98: return 1;
  6623                           ;	Return value of _EMC1001_SetTempHighLimit is never used
  6624                           
  6625                           
  6626                           	psect	text14
  6627  1CC2                     __ptext14:	
  6628 ;; *************** function _EMC1001_SetConversionRate *****************
  6629 ;; Defined at:
  6630 ;;		line 81 in file "EMC1001.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  data            1    wreg     unsigned char 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  data            1   16[BANK0 ] unsigned char 
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      unsigned char 
  6637 ;; Registers used:
  6638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;Total ram usage:        2 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    5
  6651 ;; This function calls:
  6652 ;;		_EMC1001_Write
  6653 ;; This function is called by:
  6654 ;;		_main
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _EMC1001_SetConversionRate
  6660  1CC2                     _EMC1001_SetConversionRate:	
  6661                           
  6662                           ;incstack = 0
  6663                           ; Regs used in _EMC1001_SetConversionRate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6664                           ;EMC1001_SetConversionRate@data stored from wreg
  6665  1CC2  0020               	movlb	0	; select bank0
  6666  1CC3  00B0               	movwf	EMC1001_SetConversionRate@data
  6667                           
  6668                           ;EMC1001.c: 83: if(data>=0x00 && data<=0x09)
  6669  1CC4  300A               	movlw	10
  6670  1CC5  0230               	subwf	EMC1001_SetConversionRate@data,w
  6671  1CC6  1803               	skipnc
  6672  1CC7  0008               	return
  6673                           
  6674                           ;EMC1001.c: 84: return EMC1001_Write(0x04,data);
  6675                           ;	Return value of _EMC1001_SetConversionRate is never used
  6676  1CC8  0830               	movf	EMC1001_SetConversionRate@data,w
  6677  1CC9  00AF               	movwf	??_EMC1001_SetConversionRate
  6678  1CCA  082F               	movf	??_EMC1001_SetConversionRate,w
  6679  1CCB  00A7               	movwf	EMC1001_Write@data
  6680  1CCC  3004               	movlw	4
  6681  1CCD  3190  2026         	fcall	_EMC1001_Write
  6682                           
  6683                           ;EMC1001.c: 85: else
  6684                           ;EMC1001.c: 86: return 0;
  6685                           ;	Return value of _EMC1001_SetConversionRate is never used
  6686  1CCF  0008               	return
  6687  1CD0                     __end_of_EMC1001_SetConversionRate:	
  6688                           
  6689                           	psect	text15
  6690  0A1D                     __ptext15:	
  6691 ;; *************** function _EMC1001_SMBusTimeout *****************
  6692 ;; Defined at:
  6693 ;;		line 144 in file "EMC1001.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  enable          1    wreg     unsigned char 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  enable          1   16[BANK0 ] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      unsigned char 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;Total ram usage:        2 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    5
  6714 ;; This function calls:
  6715 ;;		_EMC1001_Write
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _EMC1001_SMBusTimeout
  6723  0A1D                     _EMC1001_SMBusTimeout:	
  6724                           
  6725                           ;incstack = 0
  6726                           ; Regs used in _EMC1001_SMBusTimeout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6727                           ;EMC1001_SMBusTimeout@enable stored from wreg
  6728  0A1D  0020               	movlb	0	; select bank0
  6729  0A1E  00B0               	movwf	EMC1001_SMBusTimeout@enable
  6730                           
  6731                           ;EMC1001.c: 146: if (enable)
  6732  0A1F  0830               	movf	EMC1001_SMBusTimeout@enable,w
  6733  0A20  1903               	btfsc	3,2
  6734  0A21  2A2A               	goto	l3786
  6735                           
  6736                           ;EMC1001.c: 147: return EMC1001_Write(0x22,0b10000000);
  6737                           ;	Return value of _EMC1001_SMBusTimeout is never used
  6738  0A22  3080               	movlw	128
  6739  0A23  00AF               	movwf	??_EMC1001_SMBusTimeout
  6740  0A24  082F               	movf	??_EMC1001_SMBusTimeout,w
  6741  0A25  00A7               	movwf	EMC1001_Write@data
  6742  0A26  3022               	movlw	34
  6743  0A27  3190  2026         	fcall	_EMC1001_Write
  6744  0A29  0008               	return
  6745  0A2A                     l3786:	
  6746                           
  6747                           ;EMC1001.c: 148: else
  6748                           ;EMC1001.c: 149: return EMC1001_Write(0x22,0b00000000);
  6749                           ;	Return value of _EMC1001_SMBusTimeout is never used
  6750  0A2A  0020               	movlb	0	; select bank0
  6751  0A2B  01A7               	clrf	EMC1001_Write@data
  6752  0A2C  3022               	movlw	34
  6753  0A2D  3190  2026         	fcall	_EMC1001_Write
  6754  0A2F  0008               	return
  6755  0A30                     __end_of_EMC1001_SMBusTimeout:	
  6756                           
  6757                           	psect	text16
  6758  1160                     __ptext16:	
  6759 ;; *************** function _EMC1001_PrintTemp *****************
  6760 ;; Defined at:
  6761 ;;		line 233 in file "EMC1001.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  templo          1   44[BANK1 ] unsigned char 
  6766 ;;  temp            1   43[BANK1 ] char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      void 
  6769 ;; Registers used:
  6770 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;Total ram usage:        6 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    7
  6783 ;; This function calls:
  6784 ;;		_EMC1001_Read
  6785 ;;		___wmul
  6786 ;;		_printf
  6787 ;; This function is called by:
  6788 ;;		_main
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function _EMC1001_PrintTemp
  6794  1160                     _EMC1001_PrintTemp:	
  6795                           
  6796                           ;EMC1001.c: 235: int8_t temp;
  6797                           ;EMC1001.c: 236: uint8_t templo;
  6798                           ;EMC1001.c: 238: if (EMC1001_Read(0x00, (uint8_t*)&temp)) {
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _EMC1001_PrintTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6802  1160  30CB               	movlw	(low (EMC1001_PrintTemp@temp| 0))& (0+255)
  6803  1161  0020               	movlb	0	; select bank0
  6804  1162  00ED               	movwf	??_EMC1001_PrintTemp
  6805  1163  086D               	movf	??_EMC1001_PrintTemp,w
  6806  1164  00A7               	movwf	EMC1001_Read@pData
  6807  1165  3000               	movlw	0
  6808  1166  3190  206E  3191   	fcall	_EMC1001_Read
  6809  1169  3A00               	xorlw	0
  6810  116A  1903               	skipnz
  6811  116B  0008               	return
  6812                           
  6813                           ;EMC1001.c: 239: EMC1001_Read(0x02, &templo);
  6814  116C  30CC               	movlw	(low (EMC1001_PrintTemp@templo| 0))& (0+255)
  6815  116D  0020               	movlb	0	; select bank0
  6816  116E  00ED               	movwf	??_EMC1001_PrintTemp
  6817  116F  086D               	movf	??_EMC1001_PrintTemp,w
  6818  1170  00A7               	movwf	EMC1001_Read@pData
  6819  1171  3002               	movlw	2
  6820  1172  3190  206E  3191   	fcall	_EMC1001_Read
  6821                           
  6822                           ;EMC1001.c: 240: templo = templo >> 6;
  6823  1175  0021               	movlb	1	; select bank1
  6824  1176  084C               	movf	EMC1001_PrintTemp@templo^(0+128),w
  6825  1177  0020               	movlb	0	; select bank0
  6826  1178  00ED               	movwf	??_EMC1001_PrintTemp
  6827  1179  3006               	movlw	6
  6828  117A                     u6355:	
  6829  117A  36ED               	lsrf	??_EMC1001_PrintTemp,f
  6830  117B  0B89               	decfsz	9,f
  6831  117C  297A               	goto	u6355
  6832  117D  086D               	movf	??_EMC1001_PrintTemp,w
  6833  117E  00EE               	movwf	??_EMC1001_PrintTemp+1
  6834  117F  086E               	movf	??_EMC1001_PrintTemp+1,w
  6835  1180  0021               	movlb	1	; select bank1
  6836  1181  00CC               	movwf	EMC1001_PrintTemp@templo^(0+128)
  6837                           
  6838                           ;EMC1001.c: 241: if (temp < 0) templo = 3-templo;
  6839  1182  1FCB               	btfss	EMC1001_PrintTemp@temp^(0+128),7
  6840  1183  298C               	goto	l4588
  6841  1184  034C               	decf	EMC1001_PrintTemp@templo^(0+128),w
  6842  1185  3AFF               	xorlw	255
  6843  1186  3E03               	addlw	3
  6844  1187  0020               	movlb	0	; select bank0
  6845  1188  00ED               	movwf	??_EMC1001_PrintTemp
  6846  1189  086D               	movf	??_EMC1001_PrintTemp,w
  6847  118A  0021               	movlb	1	; select bank1
  6848  118B  00CC               	movwf	EMC1001_PrintTemp@templo^(0+128)
  6849  118C                     l4588:	
  6850                           
  6851                           ;EMC1001.c: 242: printf("Current Temperature:\t%d.%d C\n", temp, templo*25);
  6852  118C  084C               	movf	EMC1001_PrintTemp@templo^(0+128),w
  6853  118D  0020               	movlb	0	; select bank0
  6854  118E  00ED               	movwf	??_EMC1001_PrintTemp
  6855  118F  01EE               	clrf	??_EMC1001_PrintTemp+1
  6856  1190  086D               	movf	??_EMC1001_PrintTemp,w
  6857  1191  00B0               	movwf	___wmul@multiplier
  6858  1192  086E               	movf	??_EMC1001_PrintTemp+1,w
  6859  1193  00B1               	movwf	___wmul@multiplier+1
  6860  1194  3019               	movlw	25
  6861  1195  00B2               	movwf	___wmul@multiplicand
  6862  1196  3000               	movlw	0
  6863  1197  00B3               	movwf	___wmul@multiplicand+1
  6864  1198  319D  2539  3191   	fcall	___wmul
  6865  119B  0020               	movlb	0	; select bank0
  6866  119C  0831               	movf	?___wmul+1,w
  6867  119D  0021               	movlb	1	; select bank1
  6868  119E  00CA               	movwf	(_EMC1001_PrintTemp$1368+1)^(0+128)
  6869  119F  0020               	movlb	0	; select bank0
  6870  11A0  0830               	movf	?___wmul,w
  6871  11A1  0021               	movlb	1	; select bank1
  6872  11A2  00C9               	movwf	_EMC1001_PrintTemp$1368^(0+128)
  6873                           
  6874                           ;EMC1001.c: 242: printf("Current Temperature:\t%d.%d C\n", temp, templo*25);
  6875  11A3  303A               	movlw	low (STR_19| (0+32768))
  6876  11A4  00A0               	movwf	printf@f^(0+128)
  6877  11A5  3089               	movlw	high (STR_19| (0+32768))
  6878  11A6  00A1               	movwf	(printf@f^(0+128)+1)
  6879  11A7  084B               	movf	EMC1001_PrintTemp@temp^(0+128),w
  6880  11A8  00A2               	movwf	(?_printf^(0+128)+2)
  6881  11A9  01A3               	clrf	((?_printf+1)^(0+128)+2)
  6882  11AA  1BA2               	btfsc	(?_printf^(0+128)+2),7
  6883  11AB  03A3               	decf	((?_printf+1)^(0+128)+2),f
  6884  11AC  084A               	movf	(_EMC1001_PrintTemp$1368+1)^(0+128),w
  6885  11AD  00A5               	movwf	((?_printf+1)^(0+128)+4)
  6886  11AE  0849               	movf	_EMC1001_PrintTemp$1368^(0+128),w
  6887  11AF  00A4               	movwf	(?_printf^(0+128)+4)
  6888  11B0  3180  203E         	fcall	_printf
  6889  11B2  0008               	return
  6890  11B3                     __end_of_EMC1001_PrintTemp:	
  6891                           
  6892                           	psect	text17
  6893  0B76                     __ptext17:	
  6894 ;; *************** function _EMC1001_PrintInfo *****************
  6895 ;; Defined at:
  6896 ;;		line 199 in file "EMC1001.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  cr              3   54[BANK1 ] float 
  6901 ;;  data            1   65[BANK1 ] unsigned char 
  6902 ;;  templo          1   64[BANK1 ] unsigned char 
  6903 ;;  temp            1   63[BANK1 ] char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  1    wreg      void 
  6906 ;; Registers used:
  6907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;Total ram usage:       25 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    7
  6920 ;; This function calls:
  6921 ;;		_EMC1001_Read
  6922 ;;		___awtoft
  6923 ;;		___ftmul
  6924 ;;		___wmul
  6925 ;;		_printf
  6926 ;; This function is called by:
  6927 ;;		_main
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           
  6932                           ;psect for function _EMC1001_PrintInfo
  6933  0B76                     _EMC1001_PrintInfo:	
  6934                           
  6935                           ;EMC1001.c: 201: uint8_t data;
  6936                           ;EMC1001.c: 202: float cr=0;
  6937                           
  6938                           ;incstack = 0
  6939                           ; Regs used in _EMC1001_PrintInfo: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6940  0B76  3000               	movlw	0
  6941  0B77  0021               	movlb	1	; select bank1
  6942  0B78  00D6               	movwf	EMC1001_PrintInfo@cr^(0+128)
  6943  0B79  3000               	movlw	0
  6944  0B7A  00D7               	movwf	(EMC1001_PrintInfo@cr+1)^(0+128)
  6945  0B7B  3000               	movlw	0
  6946  0B7C  00D8               	movwf	(EMC1001_PrintInfo@cr+2)^(0+128)
  6947                           
  6948                           ;EMC1001.c: 203: int8_t temp;
  6949                           ;EMC1001.c: 204: uint8_t templo;
  6950                           ;EMC1001.c: 206: if (EMC1001_Read(0xfd,&data)) printf("Product ID:\t\tEMC1001%s\n", data
      +                           ? "-1" : "");
  6951  0B7D  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  6952  0B7E  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  6953  0B7F  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  6954  0B80  0020               	movlb	0	; select bank0
  6955  0B81  00A7               	movwf	EMC1001_Read@pData
  6956  0B82  30FD               	movlw	253
  6957  0B83  3190  206E  318B   	fcall	_EMC1001_Read
  6958  0B86  3A00               	xorlw	0
  6959  0B87  1903               	skipnz
  6960  0B88  2BA0               	goto	l4516
  6961  0B89  0021               	movlb	1	; select bank1
  6962  0B8A  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  6963  0B8B  1D03               	btfss	3,2
  6964  0B8C  2B91               	goto	l4512
  6965  0B8D  3072               	movlw	low ((STR_18+26)| (0+32768))
  6966  0B8E  00D9               	movwf	_EMC1001_PrintInfo$767^(0+128)
  6967  0B8F  3089               	movlw	high ((STR_18+26)| (0+32768))
  6968  0B90  2B94               	goto	L1
  6969  0B91                     l4512:	
  6970  0B91  3016               	movlw	low (STR_5| (0+32768))
  6971  0B92  00D9               	movwf	_EMC1001_PrintInfo$767^(0+128)
  6972  0B93  308A               	movlw	high (STR_5| (0+32768))
  6973  0B94                     L1:	
  6974  0B94  00DA               	movwf	(_EMC1001_PrintInfo$767^(0+128)+1)
  6975  0B95  3073               	movlw	low (STR_4| (0+32768))
  6976  0B96  00A0               	movwf	printf@f^(0+128)
  6977  0B97  3089               	movlw	high (STR_4| (0+32768))
  6978  0B98  00A1               	movwf	(printf@f^(0+128)+1)
  6979  0B99  085A               	movf	(_EMC1001_PrintInfo$767+1)^(0+128),w
  6980  0B9A  00A3               	movwf	((low ((?_printf| 0+2))+1))^(0+128)
  6981  0B9B  0859               	movf	_EMC1001_PrintInfo$767^(0+128),w
  6982  0B9C  00A2               	movwf	(low ((?_printf| 0+2)))^(0+128)
  6983  0B9D  3180  203E  318B   	fcall	_printf
  6984  0BA0                     l4516:	
  6985                           
  6986                           ;EMC1001.c: 207: if (EMC1001_Read(0xfe,&data)) printf("Manufacturer ID:\t0x%X\n", data);
  6987  0BA0  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  6988  0BA1  0021               	movlb	1	; select bank1
  6989  0BA2  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  6990  0BA3  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  6991  0BA4  0020               	movlb	0	; select bank0
  6992  0BA5  00A7               	movwf	EMC1001_Read@pData
  6993  0BA6  30FE               	movlw	254
  6994  0BA7  3190  206E  318B   	fcall	_EMC1001_Read
  6995  0BAA  3A00               	xorlw	0
  6996  0BAB  1903               	skipnz
  6997  0BAC  2BBC               	goto	l4520
  6998  0BAD  308B               	movlw	low (STR_7| (0+32768))
  6999  0BAE  0021               	movlb	1	; select bank1
  7000  0BAF  00A0               	movwf	printf@f^(0+128)
  7001  0BB0  3089               	movlw	high (STR_7| (0+32768))
  7002  0BB1  00A1               	movwf	(printf@f^(0+128)+1)
  7003  0BB2  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7004  0BB3  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7005  0BB4  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7006  0BB5  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7007  0BB6  00A2               	movwf	(?_printf^(0+128)+2)
  7008  0BB7  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7009  0BB8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7010  0BB9  3180  203E  318B   	fcall	_printf
  7011  0BBC                     l4520:	
  7012                           
  7013                           ;EMC1001.c: 208: if (EMC1001_Read(0xff,&data)) printf("Revision :\t\t%d\n", data);
  7014  0BBC  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7015  0BBD  0021               	movlb	1	; select bank1
  7016  0BBE  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7017  0BBF  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7018  0BC0  0020               	movlb	0	; select bank0
  7019  0BC1  00A7               	movwf	EMC1001_Read@pData
  7020  0BC2  30FF               	movlw	255
  7021  0BC3  3190  206E  318B   	fcall	_EMC1001_Read
  7022  0BC6  3A00               	xorlw	0
  7023  0BC7  1903               	skipnz
  7024  0BC8  2BD8               	goto	l4524
  7025  0BC9  30EE               	movlw	low (STR_8| (0+32768))
  7026  0BCA  0021               	movlb	1	; select bank1
  7027  0BCB  00A0               	movwf	printf@f^(0+128)
  7028  0BCC  3089               	movlw	high (STR_8| (0+32768))
  7029  0BCD  00A1               	movwf	(printf@f^(0+128)+1)
  7030  0BCE  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7031  0BCF  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7032  0BD0  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7033  0BD1  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7034  0BD2  00A2               	movwf	(?_printf^(0+128)+2)
  7035  0BD3  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7036  0BD4  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7037  0BD5  3180  203E  318B   	fcall	_printf
  7038  0BD8                     l4524:	
  7039                           
  7040                           ;EMC1001.c: 209: if (EMC1001_Read(0x01,&data)) printf("Status Reg: \t\t0x%X (BUSY=%d THI
      +                          GH=%d TLOW=%d THRM=%d)\n",data,data>>7,data>>6&1,data>>5&1,data&1);
  7041  0BD8  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7042  0BD9  0021               	movlb	1	; select bank1
  7043  0BDA  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7044  0BDB  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7045  0BDC  0020               	movlb	0	; select bank0
  7046  0BDD  00A7               	movwf	EMC1001_Read@pData
  7047  0BDE  3001               	movlw	1
  7048  0BDF  3190  206E  318B   	fcall	_EMC1001_Read
  7049  0BE2  3A00               	xorlw	0
  7050  0BE3  1903               	skipnz
  7051  0BE4  2C25               	goto	l4528
  7052  0BE5  3063               	movlw	low (STR_9| (0+32768))
  7053  0BE6  0021               	movlb	1	; select bank1
  7054  0BE7  00A0               	movwf	printf@f^(0+128)
  7055  0BE8  3088               	movlw	high (STR_9| (0+32768))
  7056  0BE9  00A1               	movwf	(printf@f^(0+128)+1)
  7057  0BEA  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7058  0BEB  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7059  0BEC  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7060  0BED  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7061  0BEE  00A2               	movwf	(?_printf^(0+128)+2)
  7062  0BEF  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7063  0BF0  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7064  0BF1  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7065  0BF2  00CB               	movwf	(??_EMC1001_PrintInfo+2)^(0+128)
  7066  0BF3  3007               	movlw	7
  7067  0BF4                     u6155:	
  7068  0BF4  36CB               	lsrf	(??_EMC1001_PrintInfo+2)^(0+128),f
  7069  0BF5  0B89               	decfsz	9,f
  7070  0BF6  2BF4               	goto	u6155
  7071  0BF7  084B               	movf	(??_EMC1001_PrintInfo+2)^(0+128),w
  7072  0BF8  00CC               	movwf	(??_EMC1001_PrintInfo+3)^(0+128)
  7073  0BF9  01CD               	clrf	((??_EMC1001_PrintInfo+3)^(0+128)+1)
  7074  0BFA  084C               	movf	(??_EMC1001_PrintInfo+3)^(0+128),w
  7075  0BFB  00A4               	movwf	(?_printf^(0+128)+4)
  7076  0BFC  084D               	movf	(??_EMC1001_PrintInfo+4)^(0+128),w
  7077  0BFD  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7078  0BFE  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7079  0BFF  00CE               	movwf	(??_EMC1001_PrintInfo+5)^(0+128)
  7080  0C00  3006               	movlw	6
  7081  0C01                     u6165:	
  7082  0C01  36CE               	lsrf	(??_EMC1001_PrintInfo+5)^(0+128),f
  7083  0C02  0B89               	decfsz	9,f
  7084  0C03  2C01               	goto	u6165
  7085  0C04  084E               	movf	(??_EMC1001_PrintInfo+5)^(0+128),w
  7086  0C05  3901               	andlw	1
  7087  0C06  00CF               	movwf	(??_EMC1001_PrintInfo+6)^(0+128)
  7088  0C07  01D0               	clrf	((??_EMC1001_PrintInfo+6)^(0+128)+1)
  7089  0C08  084F               	movf	(??_EMC1001_PrintInfo+6)^(0+128),w
  7090  0C09  00A6               	movwf	(?_printf^(0+128)+6)
  7091  0C0A  0850               	movf	(??_EMC1001_PrintInfo+7)^(0+128),w
  7092  0C0B  00A7               	movwf	((?_printf+1)^(0+128)+6)
  7093  0C0C  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7094  0C0D  00D1               	movwf	(??_EMC1001_PrintInfo+8)^(0+128)
  7095  0C0E  3005               	movlw	5
  7096  0C0F                     u6175:	
  7097  0C0F  36D1               	lsrf	(??_EMC1001_PrintInfo+8)^(0+128),f
  7098  0C10  0B89               	decfsz	9,f
  7099  0C11  2C0F               	goto	u6175
  7100  0C12  0851               	movf	(??_EMC1001_PrintInfo+8)^(0+128),w
  7101  0C13  3901               	andlw	1
  7102  0C14  00D2               	movwf	(??_EMC1001_PrintInfo+9)^(0+128)
  7103  0C15  01D3               	clrf	((??_EMC1001_PrintInfo+9)^(0+128)+1)
  7104  0C16  0852               	movf	(??_EMC1001_PrintInfo+9)^(0+128),w
  7105  0C17  00A8               	movwf	(?_printf^(0+128)+8)
  7106  0C18  0853               	movf	(??_EMC1001_PrintInfo+10)^(0+128),w
  7107  0C19  00A9               	movwf	((?_printf+1)^(0+128)+8)
  7108  0C1A  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7109  0C1B  3901               	andlw	1
  7110  0C1C  00D4               	movwf	(??_EMC1001_PrintInfo+11)^(0+128)
  7111  0C1D  01D5               	clrf	((??_EMC1001_PrintInfo+11)^(0+128)+1)
  7112  0C1E  0854               	movf	(??_EMC1001_PrintInfo+11)^(0+128),w
  7113  0C1F  00AA               	movwf	(?_printf^(0+128)+10)
  7114  0C20  0855               	movf	(??_EMC1001_PrintInfo+12)^(0+128),w
  7115  0C21  00AB               	movwf	((?_printf+1)^(0+128)+10)
  7116  0C22  3180  203E  318B   	fcall	_printf
  7117  0C25                     l4528:	
  7118                           
  7119                           ;EMC1001.c: 210: if (EMC1001_Read(0x03,&data)) printf("Configuration Reg: \t0x%X (MASK1=
      +                          %d RUN/STOP=%d ALERT/THERM2=%d)\n",data,data>>7,data>>6&1,data>>5&1);
  7120  0C25  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7121  0C26  0021               	movlb	1	; select bank1
  7122  0C27  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7123  0C28  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7124  0C29  0020               	movlb	0	; select bank0
  7125  0C2A  00A7               	movwf	EMC1001_Read@pData
  7126  0C2B  3003               	movlw	3
  7127  0C2C  3190  206E  318B   	fcall	_EMC1001_Read
  7128  0C2F  3A00               	xorlw	0
  7129  0C30  1903               	skipnz
  7130  0C31  2C6A               	goto	l4532
  7131  0C32  3022               	movlw	low (STR_10| (0+32768))
  7132  0C33  0021               	movlb	1	; select bank1
  7133  0C34  00A0               	movwf	printf@f^(0+128)
  7134  0C35  3088               	movlw	high (STR_10| (0+32768))
  7135  0C36  00A1               	movwf	(printf@f^(0+128)+1)
  7136  0C37  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7137  0C38  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7138  0C39  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7139  0C3A  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7140  0C3B  00A2               	movwf	(?_printf^(0+128)+2)
  7141  0C3C  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7142  0C3D  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7143  0C3E  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7144  0C3F  00CB               	movwf	(??_EMC1001_PrintInfo+2)^(0+128)
  7145  0C40  3007               	movlw	7
  7146  0C41                     u6195:	
  7147  0C41  36CB               	lsrf	(??_EMC1001_PrintInfo+2)^(0+128),f
  7148  0C42  0B89               	decfsz	9,f
  7149  0C43  2C41               	goto	u6195
  7150  0C44  084B               	movf	(??_EMC1001_PrintInfo+2)^(0+128),w
  7151  0C45  00CC               	movwf	(??_EMC1001_PrintInfo+3)^(0+128)
  7152  0C46  01CD               	clrf	((??_EMC1001_PrintInfo+3)^(0+128)+1)
  7153  0C47  084C               	movf	(??_EMC1001_PrintInfo+3)^(0+128),w
  7154  0C48  00A4               	movwf	(?_printf^(0+128)+4)
  7155  0C49  084D               	movf	(??_EMC1001_PrintInfo+4)^(0+128),w
  7156  0C4A  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7157  0C4B  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7158  0C4C  00CE               	movwf	(??_EMC1001_PrintInfo+5)^(0+128)
  7159  0C4D  3006               	movlw	6
  7160  0C4E                     u6205:	
  7161  0C4E  36CE               	lsrf	(??_EMC1001_PrintInfo+5)^(0+128),f
  7162  0C4F  0B89               	decfsz	9,f
  7163  0C50  2C4E               	goto	u6205
  7164  0C51  084E               	movf	(??_EMC1001_PrintInfo+5)^(0+128),w
  7165  0C52  3901               	andlw	1
  7166  0C53  00CF               	movwf	(??_EMC1001_PrintInfo+6)^(0+128)
  7167  0C54  01D0               	clrf	((??_EMC1001_PrintInfo+6)^(0+128)+1)
  7168  0C55  084F               	movf	(??_EMC1001_PrintInfo+6)^(0+128),w
  7169  0C56  00A6               	movwf	(?_printf^(0+128)+6)
  7170  0C57  0850               	movf	(??_EMC1001_PrintInfo+7)^(0+128),w
  7171  0C58  00A7               	movwf	((?_printf+1)^(0+128)+6)
  7172  0C59  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7173  0C5A  00D1               	movwf	(??_EMC1001_PrintInfo+8)^(0+128)
  7174  0C5B  3005               	movlw	5
  7175  0C5C                     u6215:	
  7176  0C5C  36D1               	lsrf	(??_EMC1001_PrintInfo+8)^(0+128),f
  7177  0C5D  0B89               	decfsz	9,f
  7178  0C5E  2C5C               	goto	u6215
  7179  0C5F  0851               	movf	(??_EMC1001_PrintInfo+8)^(0+128),w
  7180  0C60  3901               	andlw	1
  7181  0C61  00D2               	movwf	(??_EMC1001_PrintInfo+9)^(0+128)
  7182  0C62  01D3               	clrf	((??_EMC1001_PrintInfo+9)^(0+128)+1)
  7183  0C63  0852               	movf	(??_EMC1001_PrintInfo+9)^(0+128),w
  7184  0C64  00A8               	movwf	(?_printf^(0+128)+8)
  7185  0C65  0853               	movf	(??_EMC1001_PrintInfo+10)^(0+128),w
  7186  0C66  00A9               	movwf	((?_printf+1)^(0+128)+8)
  7187  0C67  3180  203E  318B   	fcall	_printf
  7188  0C6A                     l4532:	
  7189                           
  7190                           ;EMC1001.c: 211: if (EMC1001_Read(0x04, &data)){
  7191  0C6A  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7192  0C6B  0021               	movlb	1	; select bank1
  7193  0C6C  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7194  0C6D  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7195  0C6E  0020               	movlb	0	; select bank0
  7196  0C6F  00A7               	movwf	EMC1001_Read@pData
  7197  0C70  3004               	movlw	4
  7198  0C71  3190  206E  318B   	fcall	_EMC1001_Read
  7199  0C74  3A00               	xorlw	0
  7200  0C75  1903               	skipnz
  7201  0C76  2CC2               	goto	l4540
  7202                           
  7203                           ;EMC1001.c: 212: if (data<0x0A ) cr=(0x01<<data)*0.0625;
  7204  0C77  300A               	movlw	10
  7205  0C78  0021               	movlb	1	; select bank1
  7206  0C79  0261               	subwf	EMC1001_PrintInfo@data^(0+128),w
  7207  0C7A  1803               	skipnc
  7208  0C7B  2CAE               	goto	l4538
  7209  0C7C  3000               	movlw	0
  7210  0C7D  0020               	movlb	0	; select bank0
  7211  0C7E  00B6               	movwf	___ftmul@f1
  7212  0C7F  3080               	movlw	128
  7213  0C80  00B7               	movwf	___ftmul@f1+1
  7214  0C81  303D               	movlw	61
  7215  0C82  00B8               	movwf	___ftmul@f1+2
  7216  0C83  3001               	movlw	1
  7217  0C84  0021               	movlb	1	; select bank1
  7218  0C85  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7219  0C86  3000               	movlw	0
  7220  0C87  00CA               	movwf	(??_EMC1001_PrintInfo^(0+128)+1)
  7221  0C88  0A61               	incf	EMC1001_PrintInfo@data^(0+128),w
  7222  0C89  2C8C               	goto	u6244
  7223  0C8A                     u6245:	
  7224  0C8A  35C9               	lslf	??_EMC1001_PrintInfo^(0+128),f
  7225  0C8B  0DCA               	rlf	(??_EMC1001_PrintInfo^(0+128)+1),f
  7226  0C8C                     u6244:	
  7227  0C8C  0B89               	decfsz	9,f
  7228  0C8D  2C8A               	goto	u6245
  7229  0C8E  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7230  0C8F  0020               	movlb	0	; select bank0
  7231  0C90  00A8               	movwf	___awtoft@c
  7232  0C91  0021               	movlb	1	; select bank1
  7233  0C92  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7234  0C93  0020               	movlb	0	; select bank0
  7235  0C94  00A9               	movwf	___awtoft@c+1
  7236  0C95  319D  25D6  318B   	fcall	___awtoft
  7237  0C98  0020               	movlb	0	; select bank0
  7238  0C99  0828               	movf	?___awtoft,w
  7239  0C9A  00B9               	movwf	___ftmul@f2
  7240  0C9B  0829               	movf	?___awtoft+1,w
  7241  0C9C  00BA               	movwf	___ftmul@f2+1
  7242  0C9D  082A               	movf	?___awtoft+2,w
  7243  0C9E  00BB               	movwf	___ftmul@f2+2
  7244  0C9F  3193  231D  318B   	fcall	___ftmul
  7245  0CA2  0020               	movlb	0	; select bank0
  7246  0CA3  0836               	movf	?___ftmul,w
  7247  0CA4  0021               	movlb	1	; select bank1
  7248  0CA5  00D6               	movwf	EMC1001_PrintInfo@cr^(0+128)
  7249  0CA6  0020               	movlb	0	; select bank0
  7250  0CA7  0837               	movf	?___ftmul+1,w
  7251  0CA8  0021               	movlb	1	; select bank1
  7252  0CA9  00D7               	movwf	(EMC1001_PrintInfo@cr+1)^(0+128)
  7253  0CAA  0020               	movlb	0	; select bank0
  7254  0CAB  0838               	movf	?___ftmul+2,w
  7255  0CAC  0021               	movlb	1	; select bank1
  7256  0CAD  00D8               	movwf	(EMC1001_PrintInfo@cr+2)^(0+128)
  7257  0CAE                     l4538:	
  7258                           
  7259                           ;EMC1001.c: 213: printf("Conversion rate:\t0x%x (%.4f conversions per second)\n",data,cr
      +                          );
  7260  0CAE  309A               	movlw	low (STR_11| (0+32768))
  7261  0CAF  00A0               	movwf	printf@f^(0+128)
  7262  0CB0  3088               	movlw	high (STR_11| (0+32768))
  7263  0CB1  00A1               	movwf	(printf@f^(0+128)+1)
  7264  0CB2  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7265  0CB3  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7266  0CB4  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7267  0CB5  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7268  0CB6  00A2               	movwf	(?_printf^(0+128)+2)
  7269  0CB7  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7270  0CB8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7271  0CB9  0856               	movf	EMC1001_PrintInfo@cr^(0+128),w
  7272  0CBA  00A4               	movwf	(?_printf^(0+128)+4)
  7273  0CBB  0857               	movf	(EMC1001_PrintInfo@cr+1)^(0+128),w
  7274  0CBC  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7275  0CBD  0858               	movf	(EMC1001_PrintInfo@cr+2)^(0+128),w
  7276  0CBE  00A6               	movwf	((?_printf+2)^(0+128)+4)
  7277  0CBF  3180  203E  318B   	fcall	_printf
  7278  0CC2                     l4540:	
  7279                           
  7280                           ;EMC1001.c: 214: }
  7281                           ;EMC1001.c: 215: if (EMC1001_Read(0x22,&data)) printf("SMBus TimeOut:\t\t%s\n", data>>7 
      +                          ? "Enabled":"Disabled");
  7282  0CC2  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7283  0CC3  0021               	movlb	1	; select bank1
  7284  0CC4  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7285  0CC5  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7286  0CC6  0020               	movlb	0	; select bank0
  7287  0CC7  00A7               	movwf	EMC1001_Read@pData
  7288  0CC8  3022               	movlw	34
  7289  0CC9  3190  206E  318B   	fcall	_EMC1001_Read
  7290  0CCC  3A00               	xorlw	0
  7291  0CCD  1903               	skipnz
  7292  0CCE  2CEC               	goto	l4550
  7293  0CCF  0021               	movlb	1	; select bank1
  7294  0CD0  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7295  0CD1  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7296  0CD2  3007               	movlw	7
  7297  0CD3                     u6265:	
  7298  0CD3  36C9               	lsrf	??_EMC1001_PrintInfo^(0+128),f
  7299  0CD4  0B89               	decfsz	9,f
  7300  0CD5  2CD3               	goto	u6265
  7301  0CD6  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7302  0CD7  1D03               	btfss	3,2
  7303  0CD8  2CDD               	goto	l4546
  7304  0CD9  30FE               	movlw	low (STR_14| (0+32768))
  7305  0CDA  00DB               	movwf	_EMC1001_PrintInfo$777^(0+128)
  7306  0CDB  3089               	movlw	high (STR_14| (0+32768))
  7307  0CDC  2CE0               	goto	L2
  7308  0CDD                     l4546:	
  7309  0CDD  3007               	movlw	low (STR_13| (0+32768))
  7310  0CDE  00DB               	movwf	_EMC1001_PrintInfo$777^(0+128)
  7311  0CDF  308A               	movlw	high (STR_13| (0+32768))
  7312  0CE0                     L2:	
  7313  0CE0  00DC               	movwf	(_EMC1001_PrintInfo$777^(0+128)+1)
  7314  0CE1  30B8               	movlw	low (STR_12| (0+32768))
  7315  0CE2  00A0               	movwf	printf@f^(0+128)
  7316  0CE3  3089               	movlw	high (STR_12| (0+32768))
  7317  0CE4  00A1               	movwf	(printf@f^(0+128)+1)
  7318  0CE5  085C               	movf	(_EMC1001_PrintInfo$777+1)^(0+128),w
  7319  0CE6  00A3               	movwf	((low ((?_printf| 0+2))+1))^(0+128)
  7320  0CE7  085B               	movf	_EMC1001_PrintInfo$777^(0+128),w
  7321  0CE8  00A2               	movwf	(low ((?_printf| 0+2)))^(0+128)
  7322  0CE9  3180  203E  318B   	fcall	_printf
  7323  0CEC                     l4550:	
  7324                           
  7325                           ;EMC1001.c: 216: if (EMC1001_Read(0x05, (uint8_t*)&temp)) {
  7326  0CEC  30DF               	movlw	(low (EMC1001_PrintInfo@temp| 0))& (0+255)
  7327  0CED  0021               	movlb	1	; select bank1
  7328  0CEE  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7329  0CEF  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7330  0CF0  0020               	movlb	0	; select bank0
  7331  0CF1  00A7               	movwf	EMC1001_Read@pData
  7332  0CF2  3005               	movlw	5
  7333  0CF3  3190  206E  318B   	fcall	_EMC1001_Read
  7334  0CF6  3A00               	xorlw	0
  7335  0CF7  1903               	skipnz
  7336  0CF8  2D37               	goto	l4560
  7337                           
  7338                           ;EMC1001.c: 217: EMC1001_Read(0x06, &templo);
  7339  0CF9  30E0               	movlw	(low (EMC1001_PrintInfo@templo| 0))& (0+255)
  7340  0CFA  0021               	movlb	1	; select bank1
  7341  0CFB  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7342  0CFC  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7343  0CFD  0020               	movlb	0	; select bank0
  7344  0CFE  00A7               	movwf	EMC1001_Read@pData
  7345  0CFF  3006               	movlw	6
  7346  0D00  3190  206E  318B   	fcall	_EMC1001_Read
  7347                           
  7348                           ;EMC1001.c: 218: templo = templo >> 6;
  7349  0D03  0021               	movlb	1	; select bank1
  7350  0D04  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7351  0D05  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7352  0D06  3006               	movlw	6
  7353  0D07                     u6295:	
  7354  0D07  36C9               	lsrf	??_EMC1001_PrintInfo^(0+128),f
  7355  0D08  0B89               	decfsz	9,f
  7356  0D09  2D07               	goto	u6295
  7357  0D0A  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7358  0D0B  00CA               	movwf	(??_EMC1001_PrintInfo+1)^(0+128)
  7359  0D0C  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7360  0D0D  00E0               	movwf	EMC1001_PrintInfo@templo^(0+128)
  7361                           
  7362                           ;EMC1001.c: 219: printf("Temperature high limit:\t%d.%d C\n", temp, templo*25);
  7363  0D0E  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7364  0D0F  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7365  0D10  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7366  0D11  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7367  0D12  0020               	movlb	0	; select bank0
  7368  0D13  00B0               	movwf	___wmul@multiplier
  7369  0D14  0021               	movlb	1	; select bank1
  7370  0D15  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7371  0D16  0020               	movlb	0	; select bank0
  7372  0D17  00B1               	movwf	___wmul@multiplier+1
  7373  0D18  3019               	movlw	25
  7374  0D19  00B2               	movwf	___wmul@multiplicand
  7375  0D1A  3000               	movlw	0
  7376  0D1B  00B3               	movwf	___wmul@multiplicand+1
  7377  0D1C  319D  2539  318B   	fcall	___wmul
  7378  0D1F  0020               	movlb	0	; select bank0
  7379  0D20  0831               	movf	?___wmul+1,w
  7380  0D21  0021               	movlb	1	; select bank1
  7381  0D22  00DE               	movwf	(_EMC1001_PrintInfo$1367+1)^(0+128)
  7382  0D23  0020               	movlb	0	; select bank0
  7383  0D24  0830               	movf	?___wmul,w
  7384  0D25  0021               	movlb	1	; select bank1
  7385  0D26  00DD               	movwf	_EMC1001_PrintInfo$1367^(0+128)
  7386                           
  7387                           ;EMC1001.c: 219: printf("Temperature high limit:\t%d.%d C\n", temp, templo*25);
  7388  0D27  30F9               	movlw	low (STR_15| (0+32768))
  7389  0D28  00A0               	movwf	printf@f^(0+128)
  7390  0D29  3088               	movlw	high (STR_15| (0+32768))
  7391  0D2A  00A1               	movwf	(printf@f^(0+128)+1)
  7392  0D2B  085F               	movf	EMC1001_PrintInfo@temp^(0+128),w
  7393  0D2C  00A2               	movwf	(?_printf^(0+128)+2)
  7394  0D2D  01A3               	clrf	((?_printf+1)^(0+128)+2)
  7395  0D2E  1BA2               	btfsc	(?_printf^(0+128)+2),7
  7396  0D2F  03A3               	decf	((?_printf+1)^(0+128)+2),f
  7397  0D30  085E               	movf	(_EMC1001_PrintInfo$1367+1)^(0+128),w
  7398  0D31  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7399  0D32  085D               	movf	_EMC1001_PrintInfo$1367^(0+128),w
  7400  0D33  00A4               	movwf	(?_printf^(0+128)+4)
  7401  0D34  3180  203E  318B   	fcall	_printf
  7402  0D37                     l4560:	
  7403                           
  7404                           ;EMC1001.c: 220: }
  7405                           ;EMC1001.c: 221: if (EMC1001_Read(0x07, (uint8_t*)&temp)) {
  7406  0D37  30DF               	movlw	(low (EMC1001_PrintInfo@temp| 0))& (0+255)
  7407  0D38  0021               	movlb	1	; select bank1
  7408  0D39  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7409  0D3A  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7410  0D3B  0020               	movlb	0	; select bank0
  7411  0D3C  00A7               	movwf	EMC1001_Read@pData
  7412  0D3D  3007               	movlw	7
  7413  0D3E  3190  206E  318B   	fcall	_EMC1001_Read
  7414  0D41  3A00               	xorlw	0
  7415  0D42  1903               	skipnz
  7416  0D43  2D82               	goto	l4570
  7417                           
  7418                           ;EMC1001.c: 222: EMC1001_Read(0x08, &templo);
  7419  0D44  30E0               	movlw	(low (EMC1001_PrintInfo@templo| 0))& (0+255)
  7420  0D45  0021               	movlb	1	; select bank1
  7421  0D46  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7422  0D47  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7423  0D48  0020               	movlb	0	; select bank0
  7424  0D49  00A7               	movwf	EMC1001_Read@pData
  7425  0D4A  3008               	movlw	8
  7426  0D4B  3190  206E  318B   	fcall	_EMC1001_Read
  7427                           
  7428                           ;EMC1001.c: 223: templo = templo >> 6;
  7429  0D4E  0021               	movlb	1	; select bank1
  7430  0D4F  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7431  0D50  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7432  0D51  3006               	movlw	6
  7433  0D52                     u6315:	
  7434  0D52  36C9               	lsrf	??_EMC1001_PrintInfo^(0+128),f
  7435  0D53  0B89               	decfsz	9,f
  7436  0D54  2D52               	goto	u6315
  7437  0D55  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7438  0D56  00CA               	movwf	(??_EMC1001_PrintInfo+1)^(0+128)
  7439  0D57  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7440  0D58  00E0               	movwf	EMC1001_PrintInfo@templo^(0+128)
  7441                           
  7442                           ;EMC1001.c: 224: printf("Temperature low limit:\t%d.%d C\n", temp, templo*25);
  7443  0D59  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7444  0D5A  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7445  0D5B  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7446  0D5C  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7447  0D5D  0020               	movlb	0	; select bank0
  7448  0D5E  00B0               	movwf	___wmul@multiplier
  7449  0D5F  0021               	movlb	1	; select bank1
  7450  0D60  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7451  0D61  0020               	movlb	0	; select bank0
  7452  0D62  00B1               	movwf	___wmul@multiplier+1
  7453  0D63  3019               	movlw	25
  7454  0D64  00B2               	movwf	___wmul@multiplicand
  7455  0D65  3000               	movlw	0
  7456  0D66  00B3               	movwf	___wmul@multiplicand+1
  7457  0D67  319D  2539  318B   	fcall	___wmul
  7458  0D6A  0020               	movlb	0	; select bank0
  7459  0D6B  0831               	movf	?___wmul+1,w
  7460  0D6C  0021               	movlb	1	; select bank1
  7461  0D6D  00DE               	movwf	(_EMC1001_PrintInfo$1367+1)^(0+128)
  7462  0D6E  0020               	movlb	0	; select bank0
  7463  0D6F  0830               	movf	?___wmul,w
  7464  0D70  0021               	movlb	1	; select bank1
  7465  0D71  00DD               	movwf	_EMC1001_PrintInfo$1367^(0+128)
  7466                           
  7467                           ;EMC1001.c: 224: printf("Temperature low limit:\t%d.%d C\n", temp, templo*25);
  7468  0D72  301A               	movlw	low (STR_16| (0+32768))
  7469  0D73  00A0               	movwf	printf@f^(0+128)
  7470  0D74  3089               	movlw	high (STR_16| (0+32768))
  7471  0D75  00A1               	movwf	(printf@f^(0+128)+1)
  7472  0D76  085F               	movf	EMC1001_PrintInfo@temp^(0+128),w
  7473  0D77  00A2               	movwf	(?_printf^(0+128)+2)
  7474  0D78  01A3               	clrf	((?_printf+1)^(0+128)+2)
  7475  0D79  1BA2               	btfsc	(?_printf^(0+128)+2),7
  7476  0D7A  03A3               	decf	((?_printf+1)^(0+128)+2),f
  7477  0D7B  085E               	movf	(_EMC1001_PrintInfo$1367+1)^(0+128),w
  7478  0D7C  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7479  0D7D  085D               	movf	_EMC1001_PrintInfo$1367^(0+128),w
  7480  0D7E  00A4               	movwf	(?_printf^(0+128)+4)
  7481  0D7F  3180  203E  318B   	fcall	_printf
  7482  0D82                     l4570:	
  7483                           
  7484                           ;EMC1001.c: 225: }
  7485                           ;EMC1001.c: 226: if (EMC1001_Read(0x20, &data)) printf("Thermal limit:\t\t%d C\n", data)
      +                          ;
  7486  0D82  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7487  0D83  0021               	movlb	1	; select bank1
  7488  0D84  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7489  0D85  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7490  0D86  0020               	movlb	0	; select bank0
  7491  0D87  00A7               	movwf	EMC1001_Read@pData
  7492  0D88  3020               	movlw	32
  7493  0D89  3190  206E  318B   	fcall	_EMC1001_Read
  7494  0D8C  3A00               	xorlw	0
  7495  0D8D  1903               	skipnz
  7496  0D8E  2D9E               	goto	l4574
  7497  0D8F  30A2               	movlw	low (STR_17| (0+32768))
  7498  0D90  0021               	movlb	1	; select bank1
  7499  0D91  00A0               	movwf	printf@f^(0+128)
  7500  0D92  3089               	movlw	high (STR_17| (0+32768))
  7501  0D93  00A1               	movwf	(printf@f^(0+128)+1)
  7502  0D94  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7503  0D95  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7504  0D96  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7505  0D97  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7506  0D98  00A2               	movwf	(?_printf^(0+128)+2)
  7507  0D99  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7508  0D9A  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7509  0D9B  3180  203E  318B   	fcall	_printf
  7510  0D9E                     l4574:	
  7511                           
  7512                           ;EMC1001.c: 227: if (EMC1001_Read(0x21, &data)) printf("Thermal hysteresis:\t%d C\n\n", 
      +                          data);
  7513  0D9E  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7514  0D9F  0021               	movlb	1	; select bank1
  7515  0DA0  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7516  0DA1  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7517  0DA2  0020               	movlb	0	; select bank0
  7518  0DA3  00A7               	movwf	EMC1001_Read@pData
  7519  0DA4  3021               	movlw	33
  7520  0DA5  3190  206E  318B   	fcall	_EMC1001_Read
  7521  0DA8  3A00               	xorlw	0
  7522  0DA9  1903               	skipnz
  7523  0DAA  0008               	return
  7524  0DAB  3058               	movlw	low (STR_18| (0+32768))
  7525  0DAC  0021               	movlb	1	; select bank1
  7526  0DAD  00A0               	movwf	printf@f^(0+128)
  7527  0DAE  3089               	movlw	high (STR_18| (0+32768))
  7528  0DAF  00A1               	movwf	(printf@f^(0+128)+1)
  7529  0DB0  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7530  0DB1  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7531  0DB2  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7532  0DB3  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7533  0DB4  00A2               	movwf	(?_printf^(0+128)+2)
  7534  0DB5  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7535  0DB6  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7536  0DB7  3180  203E         	fcall	_printf
  7537  0DB9  0008               	return
  7538  0DBA                     __end_of_EMC1001_PrintInfo:	
  7539                           
  7540                           	psect	text18
  7541  003E                     __ptext18:	
  7542 ;; *************** function _printf *****************
  7543 ;; Defined at:
  7544 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  7547 ;;		 -> STR_19(30), STR_18(27), STR_17(22), STR_16(32), 
  7548 ;;		 -> STR_15(33), STR_12(20), STR_11(53), STR_10(65), 
  7549 ;;		 -> STR_9(55), STR_8(16), STR_7(23), STR_4(24), 
  7550 ;;		 -> STR_1(2), 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;  idx             1   15[BANK1 ] unsigned char 
  7553 ;;  val             4   31[BANK1 ] unsigned long 
  7554 ;;  tmpval          4   27[BANK1 ] struct .
  7555 ;;  fval            3   35[BANK1 ] struct .
  7556 ;;  prec            2   38[BANK1 ] int 
  7557 ;;  exp             2   25[BANK1 ] int 
  7558 ;;  flag            2   23[BANK1 ] unsigned short 
  7559 ;;  cp              2   20[BANK1 ] PTR const unsigned char 
  7560 ;;		 -> STR_20(7), STR_14(9), STR_13(8), STR_6(1), 
  7561 ;;		 -> STR_5(3), EMC1001_PrintInfo@data(1), I2C2_ISR@i2c_address(2), 
  7562 ;;  len             2   18[BANK1 ] unsigned int 
  7563 ;;  width           2    0        int 
  7564 ;;  c               1   40[BANK1 ] char 
  7565 ;;  ap              1   22[BANK1 ] PTR void [1]
  7566 ;;		 -> ?_printf(2), 
  7567 ;;  d               1    0        unsigned char 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  2    0[BANK1 ] int 
  7570 ;; Registers used:
  7571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7577 ;;      Params:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Totals:         0       6      41       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;Total ram usage:       47 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    6
  7584 ;; This function calls:
  7585 ;;		___awdiv
  7586 ;;		___ftadd
  7587 ;;		___ftge
  7588 ;;		___ftmul
  7589 ;;		___ftneg
  7590 ;;		___ftsub
  7591 ;;		___fttol
  7592 ;;		___lldiv
  7593 ;;		___llmod
  7594 ;;		___lltoft
  7595 ;;		___wmul
  7596 ;;		__div_to_l_
  7597 ;;		__tdiv_to_l_
  7598 ;;		_fround
  7599 ;;		_isdigit
  7600 ;;		_putch
  7601 ;;		_scale
  7602 ;; This function is called by:
  7603 ;;		_main
  7604 ;;		_EMC1001_PrintInfo
  7605 ;;		_EMC1001_PrintTemp
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _printf
  7611  003E                     _printf:	
  7612                           
  7613                           ;doprnt.c: 466: va_list ap;
  7614                           ;doprnt.c: 499: signed char c;
  7615                           ;doprnt.c: 501: int width;
  7616                           ;doprnt.c: 504: int prec;
  7617                           ;doprnt.c: 508: unsigned short flag;
  7618                           ;doprnt.c: 515: char d;
  7619                           ;doprnt.c: 516: double fval;
  7620                           ;doprnt.c: 517: int exp;
  7621                           ;doprnt.c: 523: union {
  7622                           ;doprnt.c: 524: unsigned long vd;
  7623                           ;doprnt.c: 525: double integ;
  7624                           ;doprnt.c: 526: } tmpval;
  7625                           ;doprnt.c: 528: unsigned long val;
  7626                           ;doprnt.c: 529: unsigned len;
  7627                           ;doprnt.c: 530: const char * cp;
  7628                           ;doprnt.c: 533: *ap = __va_start();
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7632  003E  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  7633  003F  0020               	movlb	0	; select bank0
  7634  0040  00E7               	movwf	??_printf
  7635  0041  0867               	movf	??_printf,w
  7636  0042  0021               	movlb	1	; select bank1
  7637  0043  00B6               	movwf	printf@ap^(0+128)
  7638  0044                     l4488:	
  7639                           ;doprnt.c: 536: while(c = *f++) {
  7640                           
  7641  0044  0021               	movlb	1	; select bank1
  7642  0045  0821               	movf	(printf@f+1)^(0+128),w
  7643  0046  0020               	movlb	0	; select bank0
  7644  0047  00E8               	movwf	??_printf+1
  7645  0048  0021               	movlb	1	; select bank1
  7646  0049  0820               	movf	printf@f^(0+128),w
  7647  004A  0020               	movlb	0	; select bank0
  7648  004B  00E7               	movwf	??_printf
  7649  004C  0021               	movlb	1	; select bank1
  7650  004D  0AA0               	incf	printf@f^(0+128),f
  7651  004E  1903               	skipnz
  7652  004F  0AA1               	incf	(printf@f+1)^(0+128),f
  7653  0050  0020               	movlb	0	; select bank0
  7654  0051  0867               	movf	??_printf,w
  7655  0052  0084               	movwf	4
  7656  0053  0868               	movf	??_printf+1,w
  7657  0054  0085               	movwf	5
  7658  0055  0800               	movf	0,w	;code access
  7659  0056  00E9               	movwf	??_printf+2
  7660  0057  0869               	movf	??_printf+2,w
  7661  0058  0021               	movlb	1	; select bank1
  7662  0059  00C8               	movwf	printf@c^(0+128)
  7663  005A  0848               	movf	printf@c^(0+128),w
  7664  005B  1903               	btfsc	3,2
  7665  005C  0008               	return
  7666                           
  7667                           ;doprnt.c: 538: if(c != '%')
  7668  005D  3025               	movlw	37
  7669  005E  0648               	xorwf	printf@c^(0+128),w
  7670  005F  1903               	btfsc	3,2
  7671  0060  2866               	goto	l4234
  7672                           
  7673                           ;doprnt.c: 540: {
  7674                           ;doprnt.c: 541: (putch(c) );
  7675  0061  0848               	movf	printf@c^(0+128),w
  7676  0062  319C  2463  3180   	fcall	_putch
  7677                           
  7678                           ;doprnt.c: 542: continue;
  7679  0065  2844               	goto	l4488
  7680  0066                     l4234:	
  7681                           
  7682                           ;doprnt.c: 543: }
  7683                           ;doprnt.c: 548: flag = 0;
  7684  0066  0021               	movlb	1	; select bank1
  7685  0067  01B7               	clrf	printf@flag^(0+128)
  7686  0068  01B8               	clrf	(printf@flag+1)^(0+128)
  7687                           
  7688                           ;doprnt.c: 611: if(*f == '.') {
  7689  0069  0820               	movf	printf@f^(0+128),w
  7690  006A  0084               	movwf	4
  7691  006B  0821               	movf	(printf@f+1)^(0+128),w
  7692  006C  0085               	movwf	5
  7693  006D  0012               	moviw fsr0++
  7694  006E  3A2E               	xorlw	46
  7695  006F  1D03               	btfss	3,2
  7696  0070  28AF               	goto	l4250
  7697                           
  7698                           ;doprnt.c: 612: flag |= 0x4000;
  7699  0071  1738               	bsf	(printf@flag^(0+128)+1),6
  7700                           
  7701                           ;doprnt.c: 613: f++;
  7702  0072  3001               	movlw	1
  7703  0073  07A0               	addwf	printf@f^(0+128),f
  7704  0074  3000               	movlw	0
  7705  0075  3DA1               	addwfc	(printf@f+1)^(0+128),f
  7706                           
  7707                           ;doprnt.c: 620: {
  7708                           ;doprnt.c: 621: prec = 0;
  7709  0076  01C6               	clrf	printf@prec^(0+128)
  7710  0077  01C7               	clrf	(printf@prec+1)^(0+128)
  7711  0078                     l4248:	
  7712                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7713                           
  7714  0078  0820               	movf	printf@f^(0+128),w
  7715  0079  0084               	movwf	4
  7716  007A  0821               	movf	(printf@f+1)^(0+128),w
  7717  007B  0085               	movwf	5
  7718  007C  0800               	movf	0,w	;code access
  7719  007D  319C  24D0  3180   	fcall	_isdigit
  7720  0080  1C03               	btfss	3,0
  7721  0081  2905               	goto	l4282
  7722                           
  7723                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7724  0082  0021               	movlb	1	; select bank1
  7725  0083  0820               	movf	printf@f^(0+128),w
  7726  0084  0084               	movwf	4
  7727  0085  0821               	movf	(printf@f+1)^(0+128),w
  7728  0086  0085               	movwf	5
  7729  0087  0800               	movf	0,w	;code access
  7730  0088  0020               	movlb	0	; select bank0
  7731  0089  00E7               	movwf	??_printf
  7732  008A  01E8               	clrf	??_printf+1
  7733  008B  0021               	movlb	1	; select bank1
  7734  008C  0847               	movf	(printf@prec+1)^(0+128),w
  7735  008D  0020               	movlb	0	; select bank0
  7736  008E  00B1               	movwf	___wmul@multiplier+1
  7737  008F  0021               	movlb	1	; select bank1
  7738  0090  0846               	movf	printf@prec^(0+128),w
  7739  0091  0020               	movlb	0	; select bank0
  7740  0092  00B0               	movwf	___wmul@multiplier
  7741  0093  300A               	movlw	10
  7742  0094  00B2               	movwf	___wmul@multiplicand
  7743  0095  3000               	movlw	0
  7744  0096  00B3               	movwf	___wmul@multiplicand+1
  7745  0097  319D  2539  3180   	fcall	___wmul
  7746  009A  0020               	movlb	0	; select bank0
  7747  009B  0867               	movf	??_printf,w
  7748  009C  0730               	addwf	?___wmul,w
  7749  009D  00E9               	movwf	??_printf+2
  7750  009E  0868               	movf	??_printf+1,w
  7751  009F  3D31               	addwfc	?___wmul+1,w
  7752  00A0  00EA               	movwf	??_printf+3
  7753  00A1  0869               	movf	??_printf+2,w
  7754  00A2  3ED0               	addlw	208
  7755  00A3  0021               	movlb	1	; select bank1
  7756  00A4  00C6               	movwf	printf@prec^(0+128)
  7757  00A5  30FF               	movlw	255
  7758  00A6  0020               	movlb	0	; select bank0
  7759  00A7  3D6A               	addwfc	??_printf+3,w
  7760  00A8  0021               	movlb	1	; select bank1
  7761  00A9  00C7               	movwf	(printf@prec+1)^(0+128)
  7762  00AA  3001               	movlw	1
  7763  00AB  07A0               	addwf	printf@f^(0+128),f
  7764  00AC  3000               	movlw	0
  7765  00AD  3DA1               	addwfc	(printf@f+1)^(0+128),f
  7766  00AE  2878               	goto	l4248
  7767  00AF                     l4250:	
  7768                           ;doprnt.c: 624: }
  7769                           ;doprnt.c: 625: } else {
  7770                           
  7771                           
  7772                           ;doprnt.c: 626: prec = 0;
  7773  00AF  0021               	movlb	1	; select bank1
  7774  00B0  01C6               	clrf	printf@prec^(0+128)
  7775  00B1  01C7               	clrf	(printf@prec+1)^(0+128)
  7776                           
  7777                           ;doprnt.c: 628: flag |= 0x1000;
  7778  00B2  1638               	bsf	(printf@flag^(0+128)+1),4
  7779                           
  7780                           ;doprnt.c: 630: }
  7781                           ;doprnt.c: 635: switch(c = *f++) {
  7782  00B3  2905               	goto	l4282
  7783  00B4                     l492:	
  7784                           ;doprnt.c: 662: case 'f':
  7785                           
  7786                           ;doprnt.c: 638: goto alldone;
  7787                           
  7788                           ;doprnt.c: 637: case 0:
  7789                           
  7790                           
  7791                           ;doprnt.c: 663: flag |= 0x400;
  7792  00B4  1538               	bsf	(printf@flag^(0+128)+1),2
  7793                           
  7794                           ;doprnt.c: 698: case 'i':
  7795                           ;doprnt.c: 699: break;
  7796                           
  7797                           ;doprnt.c: 697: case 'd':
  7798                           
  7799                           ;doprnt.c: 664: break;
  7800  00B5  292F               	goto	l4284
  7801  00B6                     l496:	
  7802                           ;doprnt.c: 712: case 'X':
  7803                           
  7804                           
  7805                           ;doprnt.c: 714: flag |= 0x20;
  7806  00B6  16B7               	bsf	printf@flag^(0+128),5
  7807  00B7                     l497:	
  7808                           ;doprnt.c: 718: case 'x':
  7809                           
  7810                           
  7811                           ;doprnt.c: 721: flag |= 0x80;
  7812  00B7  17B7               	bsf	printf@flag^(0+128),7
  7813                           
  7814                           ;doprnt.c: 723: break;
  7815  00B8  292F               	goto	l4284
  7816  00B9                     l4254:	
  7817                           ;doprnt.c: 728: case 's':
  7818                           
  7819                           
  7820                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7821  00B9  0836               	movf	printf@ap^(0+128),w
  7822  00BA  0086               	movwf	6
  7823  00BB  0187               	clrf	7
  7824  00BC  3F40               	moviw [0]fsr1
  7825  00BD  00B4               	movwf	printf@cp^(0+128)
  7826  00BE  3F41               	moviw [1]fsr1
  7827  00BF  00B5               	movwf	(printf@cp+1)^(0+128)
  7828  00C0  3002               	movlw	2
  7829  00C1  0020               	movlb	0	; select bank0
  7830  00C2  00E7               	movwf	??_printf
  7831  00C3  0867               	movf	??_printf,w
  7832  00C4  0021               	movlb	1	; select bank1
  7833  00C5  07B6               	addwf	printf@ap^(0+128),f
  7834                           
  7835                           ;doprnt.c: 740: if(!cp)
  7836  00C6  0834               	movf	printf@cp^(0+128),w
  7837  00C7  0435               	iorwf	(printf@cp+1)^(0+128),w
  7838  00C8  1D03               	btfss	3,2
  7839  00C9  28CE               	goto	l4262
  7840                           
  7841                           ;doprnt.c: 741: cp = "(null)";
  7842  00CA  300F               	movlw	low (STR_20| (0+32768))
  7843  00CB  00B4               	movwf	printf@cp^(0+128)
  7844  00CC  308A               	movlw	high (STR_20| (0+32768))
  7845  00CD  00B5               	movwf	(printf@cp^(0+128)+1)
  7846  00CE                     l4262:	
  7847                           
  7848                           ;doprnt.c: 745: len = 0;
  7849  00CE  01B2               	clrf	printf@len^(0+128)
  7850  00CF  01B3               	clrf	(printf@len+1)^(0+128)
  7851  00D0                     l4266:	
  7852                           ;doprnt.c: 746: while(cp[len])
  7853                           
  7854  00D0  0834               	movf	printf@cp^(0+128),w
  7855  00D1  0732               	addwf	printf@len^(0+128),w
  7856  00D2  0084               	movwf	4
  7857  00D3  0835               	movf	(printf@cp+1)^(0+128),w
  7858  00D4  3D33               	addwfc	(printf@len+1)^(0+128),w
  7859  00D5  0085               	movwf	5
  7860  00D6  0012               	moviw fsr0++
  7861  00D7  1903               	btfsc	3,2
  7862  00D8  28DE               	goto	l4268
  7863                           
  7864                           ;doprnt.c: 747: len++;
  7865  00D9  3001               	movlw	1
  7866  00DA  07B2               	addwf	printf@len^(0+128),f
  7867  00DB  3000               	movlw	0
  7868  00DC  3DB3               	addwfc	(printf@len+1)^(0+128),f
  7869  00DD  28D0               	goto	l4266
  7870  00DE                     l4268:	
  7871                           
  7872                           ;doprnt.c: 753: if(prec && prec < len)
  7873  00DE  0846               	movf	printf@prec^(0+128),w
  7874  00DF  0447               	iorwf	(printf@prec+1)^(0+128),w
  7875  00E0  1903               	btfsc	3,2
  7876  00E1  28EE               	goto	l4278
  7877  00E2  0833               	movf	(printf@len+1)^(0+128),w
  7878  00E3  0247               	subwf	(printf@prec+1)^(0+128),w
  7879  00E4  1D03               	skipz
  7880  00E5  28E8               	goto	u5675
  7881  00E6  0832               	movf	printf@len^(0+128),w
  7882  00E7  0246               	subwf	printf@prec^(0+128),w
  7883  00E8                     u5675:	
  7884  00E8  1803               	skipnc
  7885  00E9  28EE               	goto	l4278
  7886                           
  7887                           ;doprnt.c: 754: len = prec;
  7888  00EA  0847               	movf	(printf@prec+1)^(0+128),w
  7889  00EB  00B3               	movwf	(printf@len+1)^(0+128)
  7890  00EC  0846               	movf	printf@prec^(0+128),w
  7891  00ED  00B2               	movwf	printf@len^(0+128)
  7892  00EE                     l4278:	
  7893                           ;doprnt.c: 767: while(len--)
  7894                           
  7895  00EE  3001               	movlw	1
  7896  00EF  02B2               	subwf	printf@len^(0+128),f
  7897  00F0  3000               	movlw	0
  7898  00F1  3BB3               	subwfb	(printf@len+1)^(0+128),f
  7899  00F2  0A32               	incf	printf@len^(0+128),w
  7900  00F3  1903               	btfsc	3,2
  7901  00F4  0A33               	incf	(printf@len+1)^(0+128),w
  7902  00F5  1903               	btfsc	3,2
  7903  00F6  2844               	goto	l4488
  7904                           
  7905                           ;doprnt.c: 768: (putch(*cp++) );
  7906  00F7  0834               	movf	printf@cp^(0+128),w
  7907  00F8  0084               	movwf	4
  7908  00F9  0835               	movf	(printf@cp+1)^(0+128),w
  7909  00FA  0085               	movwf	5
  7910  00FB  0800               	movf	0,w	;code access
  7911  00FC  319C  2463  3180   	fcall	_putch
  7912  00FF  3001               	movlw	1
  7913  0100  0021               	movlb	1	; select bank1
  7914  0101  07B4               	addwf	printf@cp^(0+128),f
  7915  0102  3000               	movlw	0
  7916  0103  3DB5               	addwfc	(printf@cp+1)^(0+128),f
  7917  0104  28EE               	goto	l4278
  7918  0105                     l4282:	
  7919                           ;doprnt.c: 822: }
  7920                           
  7921                           ;doprnt.c: 813: continue;
  7922                           
  7923                           ;doprnt.c: 802: default:
  7924                           
  7925                           ;doprnt.c: 774: continue;
  7926                           
  7927  0105  0021               	movlb	1	; select bank1
  7928  0106  0821               	movf	(printf@f+1)^(0+128),w
  7929  0107  0020               	movlb	0	; select bank0
  7930  0108  00E8               	movwf	??_printf+1
  7931  0109  0021               	movlb	1	; select bank1
  7932  010A  0820               	movf	printf@f^(0+128),w
  7933  010B  0020               	movlb	0	; select bank0
  7934  010C  00E7               	movwf	??_printf
  7935  010D  0021               	movlb	1	; select bank1
  7936  010E  0AA0               	incf	printf@f^(0+128),f
  7937  010F  1903               	skipnz
  7938  0110  0AA1               	incf	(printf@f+1)^(0+128),f
  7939  0111  0020               	movlb	0	; select bank0
  7940  0112  0867               	movf	??_printf,w
  7941  0113  0084               	movwf	4
  7942  0114  0868               	movf	??_printf+1,w
  7943  0115  0085               	movwf	5
  7944  0116  0800               	movf	0,w	;code access
  7945  0117  0021               	movlb	1	; select bank1
  7946  0118  00C8               	movwf	printf@c^(0+128)
  7947                           
  7948                           ; Switch size 1, requested type "space"
  7949                           ; Number of cases is 7, Range of values is 0 to 120
  7950                           ; switch strategies available:
  7951                           ; Name         Instructions Cycles
  7952                           ; simple_byte           22    12 (average)
  7953                           ; direct_byte          248     6 (fixed)
  7954                           ; jumptable            260     6 (fixed)
  7955                           ;	Chosen strategy is simple_byte
  7956  0119  3A00               	xorlw	0	; case 0
  7957  011A  1903               	skipnz
  7958  011B  2F40               	goto	l576
  7959  011C  3A58               	xorlw	88	; case 88
  7960  011D  1903               	skipnz
  7961  011E  28B6               	goto	l496
  7962  011F  3A3C               	xorlw	60	; case 100
  7963  0120  1903               	skipnz
  7964  0121  292F               	goto	l4284
  7965  0122  3A02               	xorlw	2	; case 102
  7966  0123  1903               	skipnz
  7967  0124  28B4               	goto	l492
  7968  0125  3A0F               	xorlw	15	; case 105
  7969  0126  1903               	skipnz
  7970  0127  292F               	goto	l4284
  7971  0128  3A1A               	xorlw	26	; case 115
  7972  0129  1903               	skipnz
  7973  012A  28B9               	goto	l4254
  7974  012B  3A0B               	xorlw	11	; case 120
  7975  012C  1903               	skipnz
  7976  012D  28B7               	goto	l497
  7977  012E  2844               	goto	l4488
  7978  012F                     l4284:	
  7979                           
  7980                           ;doprnt.c: 825: if(flag & (0x700)) {
  7981  012F  3000               	movlw	0
  7982  0130  0537               	andwf	printf@flag^(0+128),w
  7983  0131  0020               	movlb	0	; select bank0
  7984  0132  00E7               	movwf	??_printf
  7985  0133  3007               	movlw	7
  7986  0134  0021               	movlb	1	; select bank1
  7987  0135  0538               	andwf	(printf@flag+1)^(0+128),w
  7988  0136  0020               	movlb	0	; select bank0
  7989  0137  00E8               	movwf	??_printf+1
  7990  0138  0867               	movf	??_printf,w
  7991  0139  0468               	iorwf	??_printf+1,w
  7992  013A  1903               	btfsc	3,2
  7993  013B  2D79               	goto	l508
  7994                           
  7995                           ;doprnt.c: 827: if(flag & 0x1000)
  7996  013C  0021               	movlb	1	; select bank1
  7997  013D  1E38               	btfss	(printf@flag+1)^(0+128),4
  7998  013E  2943               	goto	l4290
  7999                           
  8000                           ;doprnt.c: 829: prec = 6;
  8001  013F  3006               	movlw	6
  8002  0140  00C6               	movwf	printf@prec^(0+128)
  8003  0141  3000               	movlw	0
  8004  0142  00C7               	movwf	(printf@prec^(0+128)+1)
  8005  0143                     l4290:	
  8006                           
  8007                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8008  0143  0836               	movf	printf@ap^(0+128),w
  8009  0144  0086               	movwf	6
  8010  0145  0187               	clrf	7
  8011  0146  3F40               	moviw [0]fsr1
  8012  0147  00C3               	movwf	printf@fval^(0+128)
  8013  0148  3F41               	moviw [1]fsr1
  8014  0149  00C4               	movwf	(printf@fval+1)^(0+128)
  8015  014A  3F42               	moviw [2]fsr1
  8016  014B  00C5               	movwf	(printf@fval+2)^(0+128)
  8017  014C  3003               	movlw	3
  8018  014D  0020               	movlb	0	; select bank0
  8019  014E  00E7               	movwf	??_printf
  8020  014F  0867               	movf	??_printf,w
  8021  0150  0021               	movlb	1	; select bank1
  8022  0151  07B6               	addwf	printf@ap^(0+128),f
  8023                           
  8024                           ;doprnt.c: 831: if(fval < 0.0) {
  8025  0152  0843               	movf	printf@fval^(0+128),w
  8026  0153  0020               	movlb	0	; select bank0
  8027  0154  00A0               	movwf	___ftge@ff1
  8028  0155  0021               	movlb	1	; select bank1
  8029  0156  0844               	movf	(printf@fval+1)^(0+128),w
  8030  0157  0020               	movlb	0	; select bank0
  8031  0158  00A1               	movwf	___ftge@ff1+1
  8032  0159  0021               	movlb	1	; select bank1
  8033  015A  0845               	movf	(printf@fval+2)^(0+128),w
  8034  015B  0020               	movlb	0	; select bank0
  8035  015C  00A2               	movwf	___ftge@ff1+2
  8036  015D  3000               	movlw	0
  8037  015E  00A3               	movwf	___ftge@ff2
  8038  015F  3000               	movlw	0
  8039  0160  00A4               	movwf	___ftge@ff2+1
  8040  0161  3000               	movlw	0
  8041  0162  00A5               	movwf	___ftge@ff2+2
  8042  0163  319E  26AE  3180   	fcall	___ftge
  8043  0166  1803               	btfsc	3,0
  8044  0167  2987               	goto	l4300
  8045                           
  8046                           ;doprnt.c: 832: fval = -fval;
  8047  0168  0021               	movlb	1	; select bank1
  8048  0169  0843               	movf	printf@fval^(0+128),w
  8049  016A  0020               	movlb	0	; select bank0
  8050  016B  00A0               	movwf	___ftneg@f1
  8051  016C  0021               	movlb	1	; select bank1
  8052  016D  0844               	movf	(printf@fval+1)^(0+128),w
  8053  016E  0020               	movlb	0	; select bank0
  8054  016F  00A1               	movwf	___ftneg@f1+1
  8055  0170  0021               	movlb	1	; select bank1
  8056  0171  0845               	movf	(printf@fval+2)^(0+128),w
  8057  0172  0020               	movlb	0	; select bank0
  8058  0173  00A2               	movwf	___ftneg@f1+2
  8059  0174  319C  246F  3180   	fcall	___ftneg
  8060  0177  0020               	movlb	0	; select bank0
  8061  0178  0820               	movf	?___ftneg,w
  8062  0179  0021               	movlb	1	; select bank1
  8063  017A  00C3               	movwf	printf@fval^(0+128)
  8064  017B  0020               	movlb	0	; select bank0
  8065  017C  0821               	movf	?___ftneg+1,w
  8066  017D  0021               	movlb	1	; select bank1
  8067  017E  00C4               	movwf	(printf@fval+1)^(0+128)
  8068  017F  0020               	movlb	0	; select bank0
  8069  0180  0822               	movf	?___ftneg+2,w
  8070  0181  0021               	movlb	1	; select bank1
  8071  0182  00C5               	movwf	(printf@fval+2)^(0+128)
  8072                           
  8073                           ;doprnt.c: 833: flag |= 0x03;
  8074  0183  3003               	movlw	3
  8075  0184  04B7               	iorwf	printf@flag^(0+128),f
  8076  0185  3000               	movlw	0
  8077  0186  04B8               	iorwf	(printf@flag+1)^(0+128),f
  8078  0187                     l4300:	
  8079                           
  8080                           ;doprnt.c: 834: }
  8081                           ;doprnt.c: 835: exp = 0;
  8082  0187  0021               	movlb	1	; select bank1
  8083  0188  01B9               	clrf	printf@exp^(0+128)
  8084  0189  01BA               	clrf	(printf@exp+1)^(0+128)
  8085                           
  8086                           ;doprnt.c: 836: if( fval!=0) {
  8087  018A  0845               	movf	(printf@fval+2)^(0+128),w
  8088  018B  0444               	iorwf	(printf@fval+1)^(0+128),w
  8089  018C  0443               	iorwf	printf@fval^(0+128),w
  8090  018D  1903               	skipnz
  8091  018E  2A59               	goto	l511
  8092                           
  8093                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8094  018F  30C3               	movlw	low (printf@fval| 0)
  8095  0190  0086               	movwf	6
  8096  0191  0187               	clrf	7
  8097  0192  3F40               	moviw [0]fsr1
  8098  0193  0020               	movlb	0	; select bank0
  8099  0194  00E7               	movwf	??_printf
  8100  0195  3F41               	moviw [1]fsr1
  8101  0196  00E8               	movwf	??_printf+1
  8102  0197  3F42               	moviw [2]fsr1
  8103  0198  00E9               	movwf	??_printf+2
  8104  0199  3F43               	moviw [3]fsr1
  8105  019A  00EA               	movwf	??_printf+3
  8106  019B  300F               	movlw	15
  8107  019C                     u5735:	
  8108  019C  36EA               	lsrf	??_printf+3,f
  8109  019D  0CE9               	rrf	??_printf+2,f
  8110  019E  0CE8               	rrf	??_printf+1,f
  8111  019F  0CE7               	rrf	??_printf,f
  8112  01A0  0B89               	decfsz	9,f
  8113  01A1  299C               	goto	u5735
  8114  01A2  30FF               	movlw	255
  8115  01A3  0567               	andwf	??_printf,w
  8116  01A4  00EB               	movwf	??_printf+4
  8117  01A5  3000               	movlw	0
  8118  01A6  0568               	andwf	??_printf+1,w
  8119  01A7  00EC               	movwf	??_printf+5
  8120  01A8  086B               	movf	??_printf+4,w
  8121  01A9  3E82               	addlw	130
  8122  01AA  0021               	movlb	1	; select bank1
  8123  01AB  00B9               	movwf	printf@exp^(0+128)
  8124  01AC  30FF               	movlw	255
  8125  01AD  0020               	movlb	0	; select bank0
  8126  01AE  3D6C               	addwfc	??_printf+5,w
  8127  01AF  0021               	movlb	1	; select bank1
  8128  01B0  00BA               	movwf	(printf@exp+1)^(0+128)
  8129                           
  8130                           ;doprnt.c: 838: exp--;
  8131  01B1  30FF               	movlw	255
  8132  01B2  07B9               	addwf	printf@exp^(0+128),f
  8133  01B3  30FF               	movlw	255
  8134  01B4  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8135                           
  8136                           ;doprnt.c: 839: exp *= 3;
  8137  01B5  3003               	movlw	3
  8138  01B6  0020               	movlb	0	; select bank0
  8139  01B7  00B0               	movwf	___wmul@multiplier
  8140  01B8  3000               	movlw	0
  8141  01B9  00B1               	movwf	___wmul@multiplier+1
  8142  01BA  0021               	movlb	1	; select bank1
  8143  01BB  083A               	movf	(printf@exp+1)^(0+128),w
  8144  01BC  0020               	movlb	0	; select bank0
  8145  01BD  00B3               	movwf	___wmul@multiplicand+1
  8146  01BE  0021               	movlb	1	; select bank1
  8147  01BF  0839               	movf	printf@exp^(0+128),w
  8148  01C0  0020               	movlb	0	; select bank0
  8149  01C1  00B2               	movwf	___wmul@multiplicand
  8150  01C2  319D  2539  3180   	fcall	___wmul
  8151  01C5  0020               	movlb	0	; select bank0
  8152  01C6  0831               	movf	?___wmul+1,w
  8153  01C7  0021               	movlb	1	; select bank1
  8154  01C8  00BA               	movwf	(printf@exp+1)^(0+128)
  8155  01C9  0020               	movlb	0	; select bank0
  8156  01CA  0830               	movf	?___wmul,w
  8157  01CB  0021               	movlb	1	; select bank1
  8158  01CC  00B9               	movwf	printf@exp^(0+128)
  8159                           
  8160                           ;doprnt.c: 840: exp /= 10;
  8161  01CD  300A               	movlw	10
  8162  01CE  0020               	movlb	0	; select bank0
  8163  01CF  00A7               	movwf	___awdiv@divisor
  8164  01D0  3000               	movlw	0
  8165  01D1  00A8               	movwf	___awdiv@divisor+1
  8166  01D2  0021               	movlb	1	; select bank1
  8167  01D3  083A               	movf	(printf@exp+1)^(0+128),w
  8168  01D4  0020               	movlb	0	; select bank0
  8169  01D5  00AA               	movwf	___awdiv@dividend+1
  8170  01D6  0021               	movlb	1	; select bank1
  8171  01D7  0839               	movf	printf@exp^(0+128),w
  8172  01D8  0020               	movlb	0	; select bank0
  8173  01D9  00A9               	movwf	___awdiv@dividend
  8174  01DA  3190  20BB  3180   	fcall	___awdiv
  8175  01DD  0020               	movlb	0	; select bank0
  8176  01DE  0828               	movf	?___awdiv+1,w
  8177  01DF  0021               	movlb	1	; select bank1
  8178  01E0  00BA               	movwf	(printf@exp+1)^(0+128)
  8179  01E1  0020               	movlb	0	; select bank0
  8180  01E2  0827               	movf	?___awdiv,w
  8181  01E3  0021               	movlb	1	; select bank1
  8182  01E4  00B9               	movwf	printf@exp^(0+128)
  8183                           
  8184                           ;doprnt.c: 841: if(exp < 0)
  8185  01E5  1FBA               	btfss	(printf@exp+1)^(0+128),7
  8186  01E6  29EB               	goto	l4316
  8187                           
  8188                           ;doprnt.c: 842: exp--;
  8189  01E7  30FF               	movlw	255
  8190  01E8  07B9               	addwf	printf@exp^(0+128),f
  8191  01E9  30FF               	movlw	255
  8192  01EA  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8193  01EB                     l4316:	
  8194                           
  8195                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  8196  01EB  0339               	decf	printf@exp^(0+128),w
  8197  01EC  3AFF               	xorlw	255
  8198  01ED  318D  25BA  3180   	fcall	_scale
  8199  01F0  0020               	movlb	0	; select bank0
  8200  01F1  0846               	movf	?_scale,w
  8201  01F2  0021               	movlb	1	; select bank1
  8202  01F3  00BB               	movwf	printf@tmpval^(0+128)
  8203  01F4  0020               	movlb	0	; select bank0
  8204  01F5  0847               	movf	?_scale+1,w
  8205  01F6  0021               	movlb	1	; select bank1
  8206  01F7  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8207  01F8  0020               	movlb	0	; select bank0
  8208  01F9  0848               	movf	?_scale+2,w
  8209  01FA  0021               	movlb	1	; select bank1
  8210  01FB  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8211                           
  8212                           ;doprnt.c: 847: tmpval.integ *= fval;
  8213  01FC  0843               	movf	printf@fval^(0+128),w
  8214  01FD  0020               	movlb	0	; select bank0
  8215  01FE  00B6               	movwf	___ftmul@f1
  8216  01FF  0021               	movlb	1	; select bank1
  8217  0200  0844               	movf	(printf@fval+1)^(0+128),w
  8218  0201  0020               	movlb	0	; select bank0
  8219  0202  00B7               	movwf	___ftmul@f1+1
  8220  0203  0021               	movlb	1	; select bank1
  8221  0204  0845               	movf	(printf@fval+2)^(0+128),w
  8222  0205  0020               	movlb	0	; select bank0
  8223  0206  00B8               	movwf	___ftmul@f1+2
  8224  0207  0021               	movlb	1	; select bank1
  8225  0208  083B               	movf	printf@tmpval^(0+128),w
  8226  0209  0020               	movlb	0	; select bank0
  8227  020A  00B9               	movwf	___ftmul@f2
  8228  020B  0021               	movlb	1	; select bank1
  8229  020C  083C               	movf	(printf@tmpval+1)^(0+128),w
  8230  020D  0020               	movlb	0	; select bank0
  8231  020E  00BA               	movwf	___ftmul@f2+1
  8232  020F  0021               	movlb	1	; select bank1
  8233  0210  083D               	movf	(printf@tmpval+2)^(0+128),w
  8234  0211  0020               	movlb	0	; select bank0
  8235  0212  00BB               	movwf	___ftmul@f2+2
  8236  0213  3193  231D  3180   	fcall	___ftmul
  8237  0216  0020               	movlb	0	; select bank0
  8238  0217  0836               	movf	?___ftmul,w
  8239  0218  0021               	movlb	1	; select bank1
  8240  0219  00BB               	movwf	printf@tmpval^(0+128)
  8241  021A  0020               	movlb	0	; select bank0
  8242  021B  0837               	movf	?___ftmul+1,w
  8243  021C  0021               	movlb	1	; select bank1
  8244  021D  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8245  021E  0020               	movlb	0	; select bank0
  8246  021F  0838               	movf	?___ftmul+2,w
  8247  0220  0021               	movlb	1	; select bank1
  8248  0221  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8249                           
  8250                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  8251  0222  083B               	movf	printf@tmpval^(0+128),w
  8252  0223  0020               	movlb	0	; select bank0
  8253  0224  00A0               	movwf	___ftge@ff1
  8254  0225  0021               	movlb	1	; select bank1
  8255  0226  083C               	movf	(printf@tmpval+1)^(0+128),w
  8256  0227  0020               	movlb	0	; select bank0
  8257  0228  00A1               	movwf	___ftge@ff1+1
  8258  0229  0021               	movlb	1	; select bank1
  8259  022A  083D               	movf	(printf@tmpval+2)^(0+128),w
  8260  022B  0020               	movlb	0	; select bank0
  8261  022C  00A2               	movwf	___ftge@ff1+2
  8262  022D  3000               	movlw	0
  8263  022E  00A3               	movwf	___ftge@ff2
  8264  022F  3080               	movlw	128
  8265  0230  00A4               	movwf	___ftge@ff2+1
  8266  0231  303F               	movlw	63
  8267  0232  00A5               	movwf	___ftge@ff2+2
  8268  0233  319E  26AE  3180   	fcall	___ftge
  8269  0236  1803               	btfsc	3,0
  8270  0237  2A3D               	goto	l4324
  8271                           
  8272                           ;doprnt.c: 849: exp--;
  8273  0238  30FF               	movlw	255
  8274  0239  0021               	movlb	1	; select bank1
  8275  023A  07B9               	addwf	printf@exp^(0+128),f
  8276  023B  30FF               	movlw	255
  8277  023C  2A58               	goto	L3
  8278  023D                     l4324:	
  8279                           
  8280                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  8281  023D  0021               	movlb	1	; select bank1
  8282  023E  083B               	movf	printf@tmpval^(0+128),w
  8283  023F  0020               	movlb	0	; select bank0
  8284  0240  00A0               	movwf	___ftge@ff1
  8285  0241  0021               	movlb	1	; select bank1
  8286  0242  083C               	movf	(printf@tmpval+1)^(0+128),w
  8287  0243  0020               	movlb	0	; select bank0
  8288  0244  00A1               	movwf	___ftge@ff1+1
  8289  0245  0021               	movlb	1	; select bank1
  8290  0246  083D               	movf	(printf@tmpval+2)^(0+128),w
  8291  0247  0020               	movlb	0	; select bank0
  8292  0248  00A2               	movwf	___ftge@ff1+2
  8293  0249  3000               	movlw	0
  8294  024A  00A3               	movwf	___ftge@ff2
  8295  024B  3020               	movlw	32
  8296  024C  00A4               	movwf	___ftge@ff2+1
  8297  024D  3041               	movlw	65
  8298  024E  00A5               	movwf	___ftge@ff2+2
  8299  024F  319E  26AE  3180   	fcall	___ftge
  8300  0252  1C03               	btfss	3,0
  8301  0253  2A59               	goto	l511
  8302                           
  8303                           ;doprnt.c: 851: exp++;
  8304  0254  3001               	movlw	1
  8305  0255  0021               	movlb	1	; select bank1
  8306  0256  07B9               	addwf	printf@exp^(0+128),f
  8307  0257  3000               	movlw	0
  8308  0258                     L3:	
  8309  0258  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8310  0259                     l511:	
  8311                           
  8312                           ;doprnt.c: 852: }
  8313                           ;doprnt.c: 1112: if(prec <= 12)
  8314  0259  0021               	movlb	1	; select bank1
  8315  025A  0847               	movf	(printf@prec+1)^(0+128),w
  8316  025B  3A80               	xorlw	128
  8317  025C  0020               	movlb	0	; select bank0
  8318  025D  00E7               	movwf	??_printf
  8319  025E  3080               	movlw	128
  8320  025F  0267               	subwf	??_printf,w
  8321  0260  1D03               	skipz
  8322  0261  2A65               	goto	u5775
  8323  0262  300D               	movlw	13
  8324  0263  0021               	movlb	1	; select bank1
  8325  0264  0246               	subwf	printf@prec^(0+128),w
  8326  0265                     u5775:	
  8327  0265  1803               	skipnc
  8328  0266  2A8E               	goto	l4330
  8329                           
  8330                           ;doprnt.c: 1113: fval += fround(prec);
  8331  0267  0021               	movlb	1	; select bank1
  8332  0268  0846               	movf	printf@prec^(0+128),w
  8333  0269  3196  269A  3180   	fcall	_fround
  8334  026C  0020               	movlb	0	; select bank0
  8335  026D  0846               	movf	?_fround,w
  8336  026E  00D4               	movwf	___ftadd@f1
  8337  026F  0847               	movf	?_fround+1,w
  8338  0270  00D5               	movwf	___ftadd@f1+1
  8339  0271  0848               	movf	?_fround+2,w
  8340  0272  00D6               	movwf	___ftadd@f1+2
  8341  0273  0021               	movlb	1	; select bank1
  8342  0274  0843               	movf	printf@fval^(0+128),w
  8343  0275  0020               	movlb	0	; select bank0
  8344  0276  00D7               	movwf	___ftadd@f2
  8345  0277  0021               	movlb	1	; select bank1
  8346  0278  0844               	movf	(printf@fval+1)^(0+128),w
  8347  0279  0020               	movlb	0	; select bank0
  8348  027A  00D8               	movwf	___ftadd@f2+1
  8349  027B  0021               	movlb	1	; select bank1
  8350  027C  0845               	movf	(printf@fval+2)^(0+128),w
  8351  027D  0020               	movlb	0	; select bank0
  8352  027E  00D9               	movwf	___ftadd@f2+2
  8353  027F  3194  2487  3180   	fcall	___ftadd
  8354  0282  0020               	movlb	0	; select bank0
  8355  0283  0854               	movf	?___ftadd,w
  8356  0284  0021               	movlb	1	; select bank1
  8357  0285  00C3               	movwf	printf@fval^(0+128)
  8358  0286  0020               	movlb	0	; select bank0
  8359  0287  0855               	movf	?___ftadd+1,w
  8360  0288  0021               	movlb	1	; select bank1
  8361  0289  00C4               	movwf	(printf@fval+1)^(0+128)
  8362  028A  0020               	movlb	0	; select bank0
  8363  028B  0856               	movf	?___ftadd+2,w
  8364  028C  0021               	movlb	1	; select bank1
  8365  028D  00C5               	movwf	(printf@fval+2)^(0+128)
  8366  028E                     l4330:	
  8367                           
  8368                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8369  028E  0021               	movlb	1	; select bank1
  8370  028F  083A               	movf	(printf@exp+1)^(0+128),w
  8371  0290  3A80               	xorlw	128
  8372  0291  0020               	movlb	0	; select bank0
  8373  0292  00E7               	movwf	??_printf
  8374  0293  3080               	movlw	128
  8375  0294  0267               	subwf	??_printf,w
  8376  0295  1D03               	skipz
  8377  0296  2A9A               	goto	u5785
  8378  0297  300A               	movlw	10
  8379  0298  0021               	movlb	1	; select bank1
  8380  0299  0239               	subwf	printf@exp^(0+128),w
  8381  029A                     u5785:	
  8382  029A  1803               	skipnc
  8383  029B  2AC5               	goto	l4338
  8384  029C  0021               	movlb	1	; select bank1
  8385  029D  0845               	movf	(printf@fval+2)^(0+128),w
  8386  029E  0444               	iorwf	(printf@fval+1)^(0+128),w
  8387  029F  0443               	iorwf	printf@fval^(0+128),w
  8388  02A0  1903               	skipnz
  8389  02A1  2B24               	goto	l4352
  8390  02A2  0843               	movf	printf@fval^(0+128),w
  8391  02A3  0020               	movlb	0	; select bank0
  8392  02A4  00CF               	movwf	___fttol@f1
  8393  02A5  0021               	movlb	1	; select bank1
  8394  02A6  0844               	movf	(printf@fval+1)^(0+128),w
  8395  02A7  0020               	movlb	0	; select bank0
  8396  02A8  00D0               	movwf	___fttol@f1+1
  8397  02A9  0021               	movlb	1	; select bank1
  8398  02AA  0845               	movf	(printf@fval+2)^(0+128),w
  8399  02AB  0020               	movlb	0	; select bank0
  8400  02AC  00D1               	movwf	___fttol@f1+2
  8401  02AD  3192  2296  3180   	fcall	___fttol
  8402  02B0  0020               	movlb	0	; select bank0
  8403  02B1  0852               	movf	?___fttol+3,w
  8404  02B2  0451               	iorwf	?___fttol+2,w
  8405  02B3  0450               	iorwf	?___fttol+1,w
  8406  02B4  044F               	iorwf	?___fttol,w
  8407  02B5  1D03               	skipz
  8408  02B6  2B24               	goto	l4352
  8409  02B7  0021               	movlb	1	; select bank1
  8410  02B8  083A               	movf	(printf@exp+1)^(0+128),w
  8411  02B9  3A80               	xorlw	128
  8412  02BA  0020               	movlb	0	; select bank0
  8413  02BB  00E7               	movwf	??_printf
  8414  02BC  3080               	movlw	128
  8415  02BD  0267               	subwf	??_printf,w
  8416  02BE  1D03               	skipz
  8417  02BF  2AC3               	goto	u5815
  8418  02C0  3002               	movlw	2
  8419  02C1  0021               	movlb	1	; select bank1
  8420  02C2  0239               	subwf	printf@exp^(0+128),w
  8421  02C3                     u5815:	
  8422  02C3  1C03               	skipc
  8423  02C4  2B24               	goto	l4352
  8424  02C5                     l4338:	
  8425                           
  8426                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  8427  02C5  0021               	movlb	1	; select bank1
  8428  02C6  083B               	movf	printf@tmpval^(0+128),w
  8429  02C7  0020               	movlb	0	; select bank0
  8430  02C8  00A0               	movwf	___ftge@ff1
  8431  02C9  0021               	movlb	1	; select bank1
  8432  02CA  083C               	movf	(printf@tmpval+1)^(0+128),w
  8433  02CB  0020               	movlb	0	; select bank0
  8434  02CC  00A1               	movwf	___ftge@ff1+1
  8435  02CD  0021               	movlb	1	; select bank1
  8436  02CE  083D               	movf	(printf@tmpval+2)^(0+128),w
  8437  02CF  0020               	movlb	0	; select bank0
  8438  02D0  00A2               	movwf	___ftge@ff1+2
  8439  02D1  3070               	movlw	112
  8440  02D2  00A3               	movwf	___ftge@ff2
  8441  02D3  3089               	movlw	137
  8442  02D4  00A4               	movwf	___ftge@ff2+1
  8443  02D5  3040               	movlw	64
  8444  02D6  00A5               	movwf	___ftge@ff2+2
  8445  02D7  319E  26AE  3180   	fcall	___ftge
  8446  02DA  1803               	btfsc	3,0
  8447  02DB  2ADE               	goto	l4342
  8448                           
  8449                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8450  02DC  30F7               	movlw	247
  8451  02DD  2ADF               	goto	L4
  8452  02DE                     l4342:	
  8453                           ;doprnt.c: 1122: }else{
  8454                           
  8455                           
  8456                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8457  02DE  30F8               	movlw	248
  8458  02DF                     L4:	
  8459  02DF  0021               	movlb	1	; select bank1
  8460  02E0  07B9               	addwf	printf@exp^(0+128),f
  8461  02E1  30FF               	movlw	255
  8462  02E2  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8463                           
  8464                           ;doprnt.c: 1124: }
  8465                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  8466  02E3  0839               	movf	printf@exp^(0+128),w
  8467  02E4  318D  25BA  3180   	fcall	_scale
  8468  02E7  0020               	movlb	0	; select bank0
  8469  02E8  0846               	movf	?_scale,w
  8470  02E9  0021               	movlb	1	; select bank1
  8471  02EA  00BB               	movwf	printf@tmpval^(0+128)
  8472  02EB  0020               	movlb	0	; select bank0
  8473  02EC  0847               	movf	?_scale+1,w
  8474  02ED  0021               	movlb	1	; select bank1
  8475  02EE  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8476  02EF  0020               	movlb	0	; select bank0
  8477  02F0  0848               	movf	?_scale+2,w
  8478  02F1  0021               	movlb	1	; select bank1
  8479  02F2  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8480                           
  8481                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  8482  02F3  0843               	movf	printf@fval^(0+128),w
  8483  02F4  0020               	movlb	0	; select bank0
  8484  02F5  00A0               	movwf	__tdiv_to_l_@f1
  8485  02F6  0021               	movlb	1	; select bank1
  8486  02F7  0844               	movf	(printf@fval+1)^(0+128),w
  8487  02F8  0020               	movlb	0	; select bank0
  8488  02F9  00A1               	movwf	__tdiv_to_l_@f1+1
  8489  02FA  0021               	movlb	1	; select bank1
  8490  02FB  0845               	movf	(printf@fval+2)^(0+128),w
  8491  02FC  0020               	movlb	0	; select bank0
  8492  02FD  00A2               	movwf	__tdiv_to_l_@f1+2
  8493  02FE  0021               	movlb	1	; select bank1
  8494  02FF  083B               	movf	printf@tmpval^(0+128),w
  8495  0300  0020               	movlb	0	; select bank0
  8496  0301  00A3               	movwf	__tdiv_to_l_@f2
  8497  0302  0021               	movlb	1	; select bank1
  8498  0303  083C               	movf	(printf@tmpval+1)^(0+128),w
  8499  0304  0020               	movlb	0	; select bank0
  8500  0305  00A4               	movwf	__tdiv_to_l_@f2+1
  8501  0306  0021               	movlb	1	; select bank1
  8502  0307  083D               	movf	(printf@tmpval+2)^(0+128),w
  8503  0308  0020               	movlb	0	; select bank0
  8504  0309  00A5               	movwf	__tdiv_to_l_@f2+2
  8505  030A  3193  23D1  3180   	fcall	__tdiv_to_l_
  8506  030D  0020               	movlb	0	; select bank0
  8507  030E  0823               	movf	?__tdiv_to_l_+3,w
  8508  030F  0021               	movlb	1	; select bank1
  8509  0310  00C2               	movwf	(printf@val+3)^(0+128)
  8510  0311  0020               	movlb	0	; select bank0
  8511  0312  0822               	movf	?__tdiv_to_l_+2,w
  8512  0313  0021               	movlb	1	; select bank1
  8513  0314  00C1               	movwf	(printf@val+2)^(0+128)
  8514  0315  0020               	movlb	0	; select bank0
  8515  0316  0821               	movf	?__tdiv_to_l_+1,w
  8516  0317  0021               	movlb	1	; select bank1
  8517  0318  00C0               	movwf	(printf@val+1)^(0+128)
  8518  0319  0020               	movlb	0	; select bank0
  8519  031A  0820               	movf	?__tdiv_to_l_,w
  8520  031B  0021               	movlb	1	; select bank1
  8521  031C  00BF               	movwf	printf@val^(0+128)
  8522                           
  8523                           ;doprnt.c: 1129: fval = 0.0;
  8524  031D  3000               	movlw	0
  8525  031E  00C3               	movwf	printf@fval^(0+128)
  8526  031F  3000               	movlw	0
  8527  0320  00C4               	movwf	(printf@fval+1)^(0+128)
  8528  0321  3000               	movlw	0
  8529  0322  00C5               	movwf	(printf@fval+2)^(0+128)
  8530                           
  8531                           ;doprnt.c: 1130: } else {
  8532  0323  2B79               	goto	l4356
  8533  0324                     l4352:	
  8534                           
  8535                           ;doprnt.c: 1131: val = (unsigned long)fval;
  8536  0324  0021               	movlb	1	; select bank1
  8537  0325  0843               	movf	printf@fval^(0+128),w
  8538  0326  0020               	movlb	0	; select bank0
  8539  0327  00CF               	movwf	___fttol@f1
  8540  0328  0021               	movlb	1	; select bank1
  8541  0329  0844               	movf	(printf@fval+1)^(0+128),w
  8542  032A  0020               	movlb	0	; select bank0
  8543  032B  00D0               	movwf	___fttol@f1+1
  8544  032C  0021               	movlb	1	; select bank1
  8545  032D  0845               	movf	(printf@fval+2)^(0+128),w
  8546  032E  0020               	movlb	0	; select bank0
  8547  032F  00D1               	movwf	___fttol@f1+2
  8548  0330  3192  2296  3180   	fcall	___fttol
  8549  0333  0020               	movlb	0	; select bank0
  8550  0334  0852               	movf	?___fttol+3,w
  8551  0335  0021               	movlb	1	; select bank1
  8552  0336  00C2               	movwf	(printf@val+3)^(0+128)
  8553  0337  0020               	movlb	0	; select bank0
  8554  0338  0851               	movf	?___fttol+2,w
  8555  0339  0021               	movlb	1	; select bank1
  8556  033A  00C1               	movwf	(printf@val+2)^(0+128)
  8557  033B  0020               	movlb	0	; select bank0
  8558  033C  0850               	movf	?___fttol+1,w
  8559  033D  0021               	movlb	1	; select bank1
  8560  033E  00C0               	movwf	(printf@val+1)^(0+128)
  8561  033F  0020               	movlb	0	; select bank0
  8562  0340  084F               	movf	?___fttol,w
  8563  0341  0021               	movlb	1	; select bank1
  8564  0342  00BF               	movwf	printf@val^(0+128)
  8565                           
  8566                           ;doprnt.c: 1132: fval -= (double)val;
  8567  0343  0842               	movf	(printf@val+3)^(0+128),w
  8568  0344  0020               	movlb	0	; select bank0
  8569  0345  00AB               	movwf	___lltoft@c+3
  8570  0346  0021               	movlb	1	; select bank1
  8571  0347  0841               	movf	(printf@val+2)^(0+128),w
  8572  0348  0020               	movlb	0	; select bank0
  8573  0349  00AA               	movwf	___lltoft@c+2
  8574  034A  0021               	movlb	1	; select bank1
  8575  034B  0840               	movf	(printf@val+1)^(0+128),w
  8576  034C  0020               	movlb	0	; select bank0
  8577  034D  00A9               	movwf	___lltoft@c+1
  8578  034E  0021               	movlb	1	; select bank1
  8579  034F  083F               	movf	printf@val^(0+128),w
  8580  0350  0020               	movlb	0	; select bank0
  8581  0351  00A8               	movwf	___lltoft@c
  8582  0352  319D  25F8  3180   	fcall	___lltoft
  8583  0355  0020               	movlb	0	; select bank0
  8584  0356  0828               	movf	?___lltoft,w
  8585  0357  00E1               	movwf	___ftsub@f2
  8586  0358  0829               	movf	?___lltoft+1,w
  8587  0359  00E2               	movwf	___ftsub@f2+1
  8588  035A  082A               	movf	?___lltoft+2,w
  8589  035B  00E3               	movwf	___ftsub@f2+2
  8590  035C  0021               	movlb	1	; select bank1
  8591  035D  0843               	movf	printf@fval^(0+128),w
  8592  035E  0020               	movlb	0	; select bank0
  8593  035F  00E4               	movwf	___ftsub@f1
  8594  0360  0021               	movlb	1	; select bank1
  8595  0361  0844               	movf	(printf@fval+1)^(0+128),w
  8596  0362  0020               	movlb	0	; select bank0
  8597  0363  00E5               	movwf	___ftsub@f1+1
  8598  0364  0021               	movlb	1	; select bank1
  8599  0365  0845               	movf	(printf@fval+2)^(0+128),w
  8600  0366  0020               	movlb	0	; select bank0
  8601  0367  00E6               	movwf	___ftsub@f1+2
  8602  0368  319D  2555  3180   	fcall	___ftsub
  8603  036B  0020               	movlb	0	; select bank0
  8604  036C  0861               	movf	?___ftsub,w
  8605  036D  0021               	movlb	1	; select bank1
  8606  036E  00C3               	movwf	printf@fval^(0+128)
  8607  036F  0020               	movlb	0	; select bank0
  8608  0370  0862               	movf	?___ftsub+1,w
  8609  0371  0021               	movlb	1	; select bank1
  8610  0372  00C4               	movwf	(printf@fval+1)^(0+128)
  8611  0373  0020               	movlb	0	; select bank0
  8612  0374  0863               	movf	?___ftsub+2,w
  8613  0375  0021               	movlb	1	; select bank1
  8614  0376  00C5               	movwf	(printf@fval+2)^(0+128)
  8615                           
  8616                           ;doprnt.c: 1133: exp = 0;
  8617  0377  01B9               	clrf	printf@exp^(0+128)
  8618  0378  01BA               	clrf	(printf@exp+1)^(0+128)
  8619  0379                     l4356:	
  8620                           
  8621                           ;doprnt.c: 1134: }
  8622                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8623  0379  01C8               	clrf	printf@c^(0+128)
  8624  037A  0AC8               	incf	printf@c^(0+128),f
  8625  037B  300A               	movlw	10
  8626  037C  0648               	xorwf	printf@c^(0+128),w
  8627  037D  1903               	btfsc	3,2
  8628  037E  2BB6               	goto	l4368
  8629  037F                     l4362:	
  8630                           
  8631                           ;doprnt.c: 1137: if(val < dpowers[c])
  8632  037F  0848               	movf	printf@c^(0+128),w
  8633  0380  0020               	movlb	0	; select bank0
  8634  0381  00E7               	movwf	??_printf
  8635  0382  01E8               	clrf	??_printf+1
  8636  0383  35E7               	lslf	??_printf,f
  8637  0384  0DE8               	rlf	??_printf+1,f
  8638  0385  35E7               	lslf	??_printf,f
  8639  0386  0DE8               	rlf	??_printf+1,f
  8640  0387  3041               	movlw	low (_dpowers| (0+32768))
  8641  0388  0767               	addwf	??_printf,w
  8642  0389  0084               	movwf	4
  8643  038A  3087               	movlw	high (_dpowers| (0+32768))
  8644  038B  3D68               	addwfc	??_printf+1,w
  8645  038C  0085               	movwf	5
  8646  038D  3F00               	moviw [0]fsr0
  8647  038E  00E9               	movwf	??_printf+2
  8648  038F  3F01               	moviw [1]fsr0
  8649  0390  00EA               	movwf	??_printf+3
  8650  0391  3F02               	moviw [2]fsr0
  8651  0392  00EB               	movwf	??_printf+4
  8652  0393  3F03               	moviw [3]fsr0
  8653  0394  00EC               	movwf	??_printf+5
  8654  0395  086C               	movf	??_printf+5,w
  8655  0396  0021               	movlb	1	; select bank1
  8656  0397  0242               	subwf	(printf@val+3)^(0+128),w
  8657  0398  1D03               	skipz
  8658  0399  2BAA               	goto	u5845
  8659  039A  0020               	movlb	0	; select bank0
  8660  039B  086B               	movf	??_printf+4,w
  8661  039C  0021               	movlb	1	; select bank1
  8662  039D  0241               	subwf	(printf@val+2)^(0+128),w
  8663  039E  1D03               	skipz
  8664  039F  2BAA               	goto	u5845
  8665  03A0  0020               	movlb	0	; select bank0
  8666  03A1  086A               	movf	??_printf+3,w
  8667  03A2  0021               	movlb	1	; select bank1
  8668  03A3  0240               	subwf	(printf@val+1)^(0+128),w
  8669  03A4  1D03               	skipz
  8670  03A5  2BAA               	goto	u5845
  8671  03A6  0020               	movlb	0	; select bank0
  8672  03A7  0869               	movf	??_printf+2,w
  8673  03A8  0021               	movlb	1	; select bank1
  8674  03A9  023F               	subwf	printf@val^(0+128),w
  8675  03AA                     u5845:	
  8676  03AA  1C03               	btfss	3,0
  8677  03AB  2BB6               	goto	l4368
  8678                           
  8679                           ;doprnt.c: 1138: break;
  8680  03AC  3001               	movlw	1
  8681  03AD  0020               	movlb	0	; select bank0
  8682  03AE  00E7               	movwf	??_printf
  8683  03AF  0867               	movf	??_printf,w
  8684  03B0  0021               	movlb	1	; select bank1
  8685  03B1  07C8               	addwf	printf@c^(0+128),f
  8686  03B2  300A               	movlw	10
  8687  03B3  0648               	xorwf	printf@c^(0+128),w
  8688  03B4  1D03               	btfss	3,2
  8689  03B5  2B7F               	goto	l4362
  8690  03B6                     l4368:	
  8691                           
  8692                           ;doprnt.c: 1175: {
  8693                           ;doprnt.c: 1188: if(flag & 0x03)
  8694  03B6  3003               	movlw	3
  8695  03B7  0537               	andwf	printf@flag^(0+128),w
  8696  03B8  0020               	movlb	0	; select bank0
  8697  03B9  00E7               	movwf	??_printf
  8698  03BA  3000               	movlw	0
  8699  03BB  0021               	movlb	1	; select bank1
  8700  03BC  0538               	andwf	(printf@flag+1)^(0+128),w
  8701  03BD  0020               	movlb	0	; select bank0
  8702  03BE  00E8               	movwf	??_printf+1
  8703  03BF  0867               	movf	??_printf,w
  8704  03C0  0468               	iorwf	??_printf+1,w
  8705  03C1  1903               	btfsc	3,2
  8706  03C2  2BC7               	goto	l4378
  8707                           
  8708                           ;doprnt.c: 1190: (putch('-') );
  8709  03C3  302D               	movlw	45
  8710  03C4                     L12:	
  8711  03C4  319C  2463  3180   	fcall	_putch
  8712  03C7                     l4378:	
  8713                           ;doprnt.c: 1195: }
  8714                           ;doprnt.c: 1196: while(c--) {
  8715                           
  8716  03C7  30FF               	movlw	255
  8717  03C8  0020               	movlb	0	; select bank0
  8718  03C9  00E7               	movwf	??_printf
  8719  03CA  0867               	movf	??_printf,w
  8720  03CB  0021               	movlb	1	; select bank1
  8721  03CC  07C8               	addwf	printf@c^(0+128),f
  8722  03CD  0A48               	incf	printf@c^(0+128),w
  8723  03CE  1903               	btfsc	3,2
  8724  03CF  2C42               	goto	l4384
  8725                           
  8726                           ;doprnt.c: 1200: {
  8727                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8728  03D0  0021               	movlb	1	; select bank1
  8729  03D1  0848               	movf	printf@c^(0+128),w
  8730  03D2  0020               	movlb	0	; select bank0
  8731  03D3  00E7               	movwf	??_printf
  8732  03D4  01E8               	clrf	??_printf+1
  8733  03D5  35E7               	lslf	??_printf,f
  8734  03D6  0DE8               	rlf	??_printf+1,f
  8735  03D7  35E7               	lslf	??_printf,f
  8736  03D8  0DE8               	rlf	??_printf+1,f
  8737  03D9  3041               	movlw	low (_dpowers| (0+32768))
  8738  03DA  0767               	addwf	??_printf,w
  8739  03DB  0084               	movwf	4
  8740  03DC  3087               	movlw	high (_dpowers| (0+32768))
  8741  03DD  3D68               	addwfc	??_printf+1,w
  8742  03DE  0085               	movwf	5
  8743  03DF  3F00               	moviw [0]fsr0
  8744  03E0  00A0               	movwf	___lldiv@divisor
  8745  03E1  3F01               	moviw [1]fsr0
  8746  03E2  00A1               	movwf	___lldiv@divisor+1
  8747  03E3  3F02               	moviw [2]fsr0
  8748  03E4  00A2               	movwf	___lldiv@divisor+2
  8749  03E5  3F03               	moviw [3]fsr0
  8750  03E6  00A3               	movwf	___lldiv@divisor+3
  8751  03E7  0021               	movlb	1	; select bank1
  8752  03E8  0842               	movf	(printf@val+3)^(0+128),w
  8753  03E9  0020               	movlb	0	; select bank0
  8754  03EA  00A7               	movwf	___lldiv@dividend+3
  8755  03EB  0021               	movlb	1	; select bank1
  8756  03EC  0841               	movf	(printf@val+2)^(0+128),w
  8757  03ED  0020               	movlb	0	; select bank0
  8758  03EE  00A6               	movwf	___lldiv@dividend+2
  8759  03EF  0021               	movlb	1	; select bank1
  8760  03F0  0840               	movf	(printf@val+1)^(0+128),w
  8761  03F1  0020               	movlb	0	; select bank0
  8762  03F2  00A5               	movwf	___lldiv@dividend+1
  8763  03F3  0021               	movlb	1	; select bank1
  8764  03F4  083F               	movf	printf@val^(0+128),w
  8765  03F5  0020               	movlb	0	; select bank0
  8766  03F6  00A4               	movwf	___lldiv@dividend
  8767  03F7  3191  210D  3180   	fcall	___lldiv
  8768  03FA  0020               	movlb	0	; select bank0
  8769  03FB  0823               	movf	?___lldiv+3,w
  8770  03FC  0021               	movlb	1	; select bank1
  8771  03FD  00BE               	movwf	(printf@tmpval+3)^(0+128)
  8772  03FE  0020               	movlb	0	; select bank0
  8773  03FF  0822               	movf	?___lldiv+2,w
  8774  0400  0021               	movlb	1	; select bank1
  8775  0401  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8776  0402  0020               	movlb	0	; select bank0
  8777  0403  0821               	movf	?___lldiv+1,w
  8778  0404  0021               	movlb	1	; select bank1
  8779  0405  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8780  0406  0020               	movlb	0	; select bank0
  8781  0407  0820               	movf	?___lldiv,w
  8782  0408  0021               	movlb	1	; select bank1
  8783  0409  00BB               	movwf	printf@tmpval^(0+128)
  8784                           
  8785                           ;doprnt.c: 1202: tmpval.vd %= 10;
  8786  040A  3000               	movlw	0
  8787  040B  0020               	movlb	0	; select bank0
  8788  040C  00B1               	movwf	___llmod@divisor+3
  8789  040D  3000               	movlw	0
  8790  040E  00B0               	movwf	___llmod@divisor+2
  8791  040F  3000               	movlw	0
  8792  0410  00AF               	movwf	___llmod@divisor+1
  8793  0411  300A               	movlw	10
  8794  0412  00AE               	movwf	___llmod@divisor
  8795  0413  0021               	movlb	1	; select bank1
  8796  0414  083E               	movf	(printf@tmpval+3)^(0+128),w
  8797  0415  0020               	movlb	0	; select bank0
  8798  0416  00B5               	movwf	___llmod@dividend+3
  8799  0417  0021               	movlb	1	; select bank1
  8800  0418  083D               	movf	(printf@tmpval+2)^(0+128),w
  8801  0419  0020               	movlb	0	; select bank0
  8802  041A  00B4               	movwf	___llmod@dividend+2
  8803  041B  0021               	movlb	1	; select bank1
  8804  041C  083C               	movf	(printf@tmpval+1)^(0+128),w
  8805  041D  0020               	movlb	0	; select bank0
  8806  041E  00B3               	movwf	___llmod@dividend+1
  8807  041F  0021               	movlb	1	; select bank1
  8808  0420  083B               	movf	printf@tmpval^(0+128),w
  8809  0421  0020               	movlb	0	; select bank0
  8810  0422  00B2               	movwf	___llmod@dividend
  8811  0423  319E  26EA  3180   	fcall	___llmod
  8812  0426  0020               	movlb	0	; select bank0
  8813  0427  0831               	movf	?___llmod+3,w
  8814  0428  0021               	movlb	1	; select bank1
  8815  0429  00BE               	movwf	(printf@tmpval+3)^(0+128)
  8816  042A  0020               	movlb	0	; select bank0
  8817  042B  0830               	movf	?___llmod+2,w
  8818  042C  0021               	movlb	1	; select bank1
  8819  042D  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8820  042E  0020               	movlb	0	; select bank0
  8821  042F  082F               	movf	?___llmod+1,w
  8822  0430  0021               	movlb	1	; select bank1
  8823  0431  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8824  0432  0020               	movlb	0	; select bank0
  8825  0433  082E               	movf	?___llmod,w
  8826  0434  0021               	movlb	1	; select bank1
  8827  0435  00BB               	movwf	printf@tmpval^(0+128)
  8828                           
  8829                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  8830  0436  083B               	movf	printf@tmpval^(0+128),w
  8831  0437  3E30               	addlw	48
  8832  0438  2BC4               	goto	L12
  8833  0439                     l4380:	
  8834                           ;doprnt.c: 1204: }
  8835                           ;doprnt.c: 1206: }
  8836                           ;doprnt.c: 1207: while(exp > 0) {
  8837                           
  8838                           
  8839                           ;doprnt.c: 1208: (putch('0') );
  8840  0439  3030               	movlw	48
  8841  043A  319C  2463  3180   	fcall	_putch
  8842                           
  8843                           ;doprnt.c: 1209: exp--;
  8844  043D  30FF               	movlw	255
  8845  043E  0021               	movlb	1	; select bank1
  8846  043F  07B9               	addwf	printf@exp^(0+128),f
  8847  0440  30FF               	movlw	255
  8848  0441  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8849  0442                     l4384:	
  8850  0442  083A               	movf	(printf@exp+1)^(0+128),w
  8851  0443  3A80               	xorlw	128
  8852  0444  0020               	movlb	0	; select bank0
  8853  0445  00E7               	movwf	??_printf
  8854  0446  3080               	movlw	128
  8855  0447  0267               	subwf	??_printf,w
  8856  0448  1D03               	skipz
  8857  0449  2C4D               	goto	u5885
  8858  044A  3001               	movlw	1
  8859  044B  0021               	movlb	1	; select bank1
  8860  044C  0239               	subwf	printf@exp^(0+128),w
  8861  044D                     u5885:	
  8862  044D  1803               	skipnc
  8863  044E  2C39               	goto	l4380
  8864                           
  8865                           ;doprnt.c: 1210: }
  8866                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8867  044F  0021               	movlb	1	; select bank1
  8868  0450  0847               	movf	(printf@prec+1)^(0+128),w
  8869  0451  3A80               	xorlw	128
  8870  0452  0020               	movlb	0	; select bank0
  8871  0453  00E7               	movwf	??_printf
  8872  0454  3080               	movlw	128
  8873  0455  0267               	subwf	??_printf,w
  8874  0456  1D03               	skipz
  8875  0457  2C5B               	goto	u5895
  8876  0458  3009               	movlw	9
  8877  0459  0021               	movlb	1	; select bank1
  8878  045A  0246               	subwf	printf@prec^(0+128),w
  8879  045B                     u5895:	
  8880  045B  1C03               	skipc
  8881  045C  2C5F               	goto	l4390
  8882                           
  8883                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8884  045D  3008               	movlw	8
  8885  045E  2C61               	goto	L5
  8886  045F                     l4390:	
  8887                           
  8888                           ;doprnt.c: 1213: else
  8889                           ;doprnt.c: 1214: c = prec;
  8890  045F  0021               	movlb	1	; select bank1
  8891  0460  0846               	movf	printf@prec^(0+128),w
  8892  0461                     L5:	
  8893  0461  0020               	movlb	0	; select bank0
  8894  0462  00E7               	movwf	??_printf
  8895  0463  0867               	movf	??_printf,w
  8896  0464  0021               	movlb	1	; select bank1
  8897  0465  00C8               	movwf	printf@c^(0+128)
  8898                           
  8899                           ;doprnt.c: 1215: prec -= c;
  8900  0466  0848               	movf	printf@c^(0+128),w
  8901  0467  0020               	movlb	0	; select bank0
  8902  0468  00E7               	movwf	??_printf
  8903  0469  01E8               	clrf	??_printf+1
  8904  046A  1BE7               	btfsc	??_printf,7
  8905  046B  03E8               	decf	??_printf+1,f
  8906  046C  0867               	movf	??_printf,w
  8907  046D  0021               	movlb	1	; select bank1
  8908  046E  02C6               	subwf	printf@prec^(0+128),f
  8909  046F  0020               	movlb	0	; select bank0
  8910  0470  0868               	movf	??_printf+1,w
  8911  0471  0021               	movlb	1	; select bank1
  8912  0472  3BC7               	subwfb	(printf@prec+1)^(0+128),f
  8913                           
  8914                           ;doprnt.c: 1219: if(c)
  8915  0473  0848               	movf	printf@c^(0+128),w
  8916  0474  1903               	btfsc	3,2
  8917  0475  2C7A               	goto	l4396
  8918                           
  8919                           ;doprnt.c: 1221: (putch('.') );
  8920  0476  302E               	movlw	46
  8921  0477  319C  2463  3180   	fcall	_putch
  8922  047A                     l4396:	
  8923                           
  8924                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8925  047A  0021               	movlb	1	; select bank1
  8926  047B  0848               	movf	printf@c^(0+128),w
  8927  047C  318D  25BA  3180   	fcall	_scale
  8928  047F  0020               	movlb	0	; select bank0
  8929  0480  0846               	movf	?_scale,w
  8930  0481  0021               	movlb	1	; select bank1
  8931  0482  00AC               	movwf	_printf$1372^(0+128)
  8932  0483  0020               	movlb	0	; select bank0
  8933  0484  0847               	movf	?_scale+1,w
  8934  0485  0021               	movlb	1	; select bank1
  8935  0486  00AD               	movwf	(_printf$1372+1)^(0+128)
  8936  0487  0020               	movlb	0	; select bank0
  8937  0488  0848               	movf	?_scale+2,w
  8938  0489  0021               	movlb	1	; select bank1
  8939  048A  00AE               	movwf	(_printf$1372+2)^(0+128)
  8940                           
  8941                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8942  048B  082C               	movf	_printf$1372^(0+128),w
  8943  048C  0020               	movlb	0	; select bank0
  8944  048D  00B9               	movwf	___ftmul@f2
  8945  048E  0021               	movlb	1	; select bank1
  8946  048F  082D               	movf	(_printf$1372+1)^(0+128),w
  8947  0490  0020               	movlb	0	; select bank0
  8948  0491  00BA               	movwf	___ftmul@f2+1
  8949  0492  0021               	movlb	1	; select bank1
  8950  0493  082E               	movf	(_printf$1372+2)^(0+128),w
  8951  0494  0020               	movlb	0	; select bank0
  8952  0495  00BB               	movwf	___ftmul@f2+2
  8953  0496  0021               	movlb	1	; select bank1
  8954  0497  0843               	movf	printf@fval^(0+128),w
  8955  0498  0020               	movlb	0	; select bank0
  8956  0499  00B6               	movwf	___ftmul@f1
  8957  049A  0021               	movlb	1	; select bank1
  8958  049B  0844               	movf	(printf@fval+1)^(0+128),w
  8959  049C  0020               	movlb	0	; select bank0
  8960  049D  00B7               	movwf	___ftmul@f1+1
  8961  049E  0021               	movlb	1	; select bank1
  8962  049F  0845               	movf	(printf@fval+2)^(0+128),w
  8963  04A0  0020               	movlb	0	; select bank0
  8964  04A1  00B8               	movwf	___ftmul@f1+2
  8965  04A2  3193  231D  3180   	fcall	___ftmul
  8966  04A5  0020               	movlb	0	; select bank0
  8967  04A6  0836               	movf	?___ftmul,w
  8968  04A7  00CF               	movwf	___fttol@f1
  8969  04A8  0837               	movf	?___ftmul+1,w
  8970  04A9  00D0               	movwf	___fttol@f1+1
  8971  04AA  0838               	movf	?___ftmul+2,w
  8972  04AB  00D1               	movwf	___fttol@f1+2
  8973  04AC  3192  2296  3180   	fcall	___fttol
  8974  04AF  0020               	movlb	0	; select bank0
  8975  04B0  0852               	movf	?___fttol+3,w
  8976  04B1  0021               	movlb	1	; select bank1
  8977  04B2  00C2               	movwf	(printf@val+3)^(0+128)
  8978  04B3  0020               	movlb	0	; select bank0
  8979  04B4  0851               	movf	?___fttol+2,w
  8980  04B5  0021               	movlb	1	; select bank1
  8981  04B6  00C1               	movwf	(printf@val+2)^(0+128)
  8982  04B7  0020               	movlb	0	; select bank0
  8983  04B8  0850               	movf	?___fttol+1,w
  8984  04B9  0021               	movlb	1	; select bank1
  8985  04BA  00C0               	movwf	(printf@val+1)^(0+128)
  8986  04BB  0020               	movlb	0	; select bank0
  8987  04BC  084F               	movf	?___fttol,w
  8988  04BD                     L6:	
  8989  04BD  0021               	movlb	1	; select bank1
  8990  04BE  00BF               	movwf	printf@val^(0+128)
  8991  04BF  30FF               	movlw	255
  8992  04C0  0020               	movlb	0	; select bank0
  8993  04C1  00E7               	movwf	??_printf
  8994  04C2  0867               	movf	??_printf,w
  8995  04C3  0021               	movlb	1	; select bank1
  8996  04C4  07C8               	addwf	printf@c^(0+128),f
  8997  04C5  0A48               	incf	printf@c^(0+128),w
  8998  04C6  1903               	btfsc	3,2
  8999  04C7  2D74               	goto	l4412
  9000                           
  9001                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  9002                           
  9003                           ;doprnt.c: 1228: while(c--) {
  9004  04C8  0848               	movf	printf@c^(0+128),w
  9005  04C9  0020               	movlb	0	; select bank0
  9006  04CA  00E7               	movwf	??_printf
  9007  04CB  01E8               	clrf	??_printf+1
  9008  04CC  35E7               	lslf	??_printf,f
  9009  04CD  0DE8               	rlf	??_printf+1,f
  9010  04CE  35E7               	lslf	??_printf,f
  9011  04CF  0DE8               	rlf	??_printf+1,f
  9012  04D0  3041               	movlw	low (_dpowers| (0+32768))
  9013  04D1  0767               	addwf	??_printf,w
  9014  04D2  0084               	movwf	4
  9015  04D3  3087               	movlw	high (_dpowers| (0+32768))
  9016  04D4  3D68               	addwfc	??_printf+1,w
  9017  04D5  0085               	movwf	5
  9018  04D6  3F00               	moviw [0]fsr0
  9019  04D7  00A0               	movwf	___lldiv@divisor
  9020  04D8  3F01               	moviw [1]fsr0
  9021  04D9  00A1               	movwf	___lldiv@divisor+1
  9022  04DA  3F02               	moviw [2]fsr0
  9023  04DB  00A2               	movwf	___lldiv@divisor+2
  9024  04DC  3F03               	moviw [3]fsr0
  9025  04DD  00A3               	movwf	___lldiv@divisor+3
  9026  04DE  0021               	movlb	1	; select bank1
  9027  04DF  0842               	movf	(printf@val+3)^(0+128),w
  9028  04E0  0020               	movlb	0	; select bank0
  9029  04E1  00A7               	movwf	___lldiv@dividend+3
  9030  04E2  0021               	movlb	1	; select bank1
  9031  04E3  0841               	movf	(printf@val+2)^(0+128),w
  9032  04E4  0020               	movlb	0	; select bank0
  9033  04E5  00A6               	movwf	___lldiv@dividend+2
  9034  04E6  0021               	movlb	1	; select bank1
  9035  04E7  0840               	movf	(printf@val+1)^(0+128),w
  9036  04E8  0020               	movlb	0	; select bank0
  9037  04E9  00A5               	movwf	___lldiv@dividend+1
  9038  04EA  0021               	movlb	1	; select bank1
  9039  04EB  083F               	movf	printf@val^(0+128),w
  9040  04EC  0020               	movlb	0	; select bank0
  9041  04ED  00A4               	movwf	___lldiv@dividend
  9042  04EE  3191  210D  3180   	fcall	___lldiv
  9043  04F1  0020               	movlb	0	; select bank0
  9044  04F2  0823               	movf	?___lldiv+3,w
  9045  04F3  0021               	movlb	1	; select bank1
  9046  04F4  00BE               	movwf	(printf@tmpval+3)^(0+128)
  9047  04F5  0020               	movlb	0	; select bank0
  9048  04F6  0822               	movf	?___lldiv+2,w
  9049  04F7  0021               	movlb	1	; select bank1
  9050  04F8  00BD               	movwf	(printf@tmpval+2)^(0+128)
  9051  04F9  0020               	movlb	0	; select bank0
  9052  04FA  0821               	movf	?___lldiv+1,w
  9053  04FB  0021               	movlb	1	; select bank1
  9054  04FC  00BC               	movwf	(printf@tmpval+1)^(0+128)
  9055  04FD  0020               	movlb	0	; select bank0
  9056  04FE  0820               	movf	?___lldiv,w
  9057  04FF  0021               	movlb	1	; select bank1
  9058  0500  00BB               	movwf	printf@tmpval^(0+128)
  9059                           
  9060                           ;doprnt.c: 1230: tmpval.vd %= 10;
  9061  0501  3000               	movlw	0
  9062  0502  0020               	movlb	0	; select bank0
  9063  0503  00B1               	movwf	___llmod@divisor+3
  9064  0504  3000               	movlw	0
  9065  0505  00B0               	movwf	___llmod@divisor+2
  9066  0506  3000               	movlw	0
  9067  0507  00AF               	movwf	___llmod@divisor+1
  9068  0508  300A               	movlw	10
  9069  0509  00AE               	movwf	___llmod@divisor
  9070  050A  0021               	movlb	1	; select bank1
  9071  050B  083E               	movf	(printf@tmpval+3)^(0+128),w
  9072  050C  0020               	movlb	0	; select bank0
  9073  050D  00B5               	movwf	___llmod@dividend+3
  9074  050E  0021               	movlb	1	; select bank1
  9075  050F  083D               	movf	(printf@tmpval+2)^(0+128),w
  9076  0510  0020               	movlb	0	; select bank0
  9077  0511  00B4               	movwf	___llmod@dividend+2
  9078  0512  0021               	movlb	1	; select bank1
  9079  0513  083C               	movf	(printf@tmpval+1)^(0+128),w
  9080  0514  0020               	movlb	0	; select bank0
  9081  0515  00B3               	movwf	___llmod@dividend+1
  9082  0516  0021               	movlb	1	; select bank1
  9083  0517  083B               	movf	printf@tmpval^(0+128),w
  9084  0518  0020               	movlb	0	; select bank0
  9085  0519  00B2               	movwf	___llmod@dividend
  9086  051A  319E  26EA  3180   	fcall	___llmod
  9087  051D  0020               	movlb	0	; select bank0
  9088  051E  0831               	movf	?___llmod+3,w
  9089  051F  0021               	movlb	1	; select bank1
  9090  0520  00BE               	movwf	(printf@tmpval+3)^(0+128)
  9091  0521  0020               	movlb	0	; select bank0
  9092  0522  0830               	movf	?___llmod+2,w
  9093  0523  0021               	movlb	1	; select bank1
  9094  0524  00BD               	movwf	(printf@tmpval+2)^(0+128)
  9095  0525  0020               	movlb	0	; select bank0
  9096  0526  082F               	movf	?___llmod+1,w
  9097  0527  0021               	movlb	1	; select bank1
  9098  0528  00BC               	movwf	(printf@tmpval+1)^(0+128)
  9099  0529  0020               	movlb	0	; select bank0
  9100  052A  082E               	movf	?___llmod,w
  9101  052B  0021               	movlb	1	; select bank1
  9102  052C  00BB               	movwf	printf@tmpval^(0+128)
  9103                           
  9104                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  9105  052D  083B               	movf	printf@tmpval^(0+128),w
  9106  052E  3E30               	addlw	48
  9107  052F  319C  2463  3180   	fcall	_putch
  9108                           
  9109                           ;doprnt.c: 1232: val %= dpowers[c];
  9110  0532  0021               	movlb	1	; select bank1
  9111  0533  0848               	movf	printf@c^(0+128),w
  9112  0534  0020               	movlb	0	; select bank0
  9113  0535  00E7               	movwf	??_printf
  9114  0536  01E8               	clrf	??_printf+1
  9115  0537  35E7               	lslf	??_printf,f
  9116  0538  0DE8               	rlf	??_printf+1,f
  9117  0539  35E7               	lslf	??_printf,f
  9118  053A  0DE8               	rlf	??_printf+1,f
  9119  053B  3041               	movlw	low (_dpowers| (0+32768))
  9120  053C  0767               	addwf	??_printf,w
  9121  053D  0084               	movwf	4
  9122  053E  3087               	movlw	high (_dpowers| (0+32768))
  9123  053F  3D68               	addwfc	??_printf+1,w
  9124  0540  0085               	movwf	5
  9125  0541  3F00               	moviw [0]fsr0
  9126  0542  00AE               	movwf	___llmod@divisor
  9127  0543  3F01               	moviw [1]fsr0
  9128  0544  00AF               	movwf	___llmod@divisor+1
  9129  0545  3F02               	moviw [2]fsr0
  9130  0546  00B0               	movwf	___llmod@divisor+2
  9131  0547  3F03               	moviw [3]fsr0
  9132  0548  00B1               	movwf	___llmod@divisor+3
  9133  0549  0021               	movlb	1	; select bank1
  9134  054A  0842               	movf	(printf@val+3)^(0+128),w
  9135  054B  0020               	movlb	0	; select bank0
  9136  054C  00B5               	movwf	___llmod@dividend+3
  9137  054D  0021               	movlb	1	; select bank1
  9138  054E  0841               	movf	(printf@val+2)^(0+128),w
  9139  054F  0020               	movlb	0	; select bank0
  9140  0550  00B4               	movwf	___llmod@dividend+2
  9141  0551  0021               	movlb	1	; select bank1
  9142  0552  0840               	movf	(printf@val+1)^(0+128),w
  9143  0553  0020               	movlb	0	; select bank0
  9144  0554  00B3               	movwf	___llmod@dividend+1
  9145  0555  0021               	movlb	1	; select bank1
  9146  0556  083F               	movf	printf@val^(0+128),w
  9147  0557  0020               	movlb	0	; select bank0
  9148  0558  00B2               	movwf	___llmod@dividend
  9149  0559  319E  26EA  3180   	fcall	___llmod
  9150  055C  0020               	movlb	0	; select bank0
  9151  055D  0831               	movf	?___llmod+3,w
  9152  055E  0021               	movlb	1	; select bank1
  9153  055F  00C2               	movwf	(printf@val+3)^(0+128)
  9154  0560  0020               	movlb	0	; select bank0
  9155  0561  0830               	movf	?___llmod+2,w
  9156  0562  0021               	movlb	1	; select bank1
  9157  0563  00C1               	movwf	(printf@val+2)^(0+128)
  9158  0564  0020               	movlb	0	; select bank0
  9159  0565  082F               	movf	?___llmod+1,w
  9160  0566  0021               	movlb	1	; select bank1
  9161  0567  00C0               	movwf	(printf@val+1)^(0+128)
  9162  0568  0020               	movlb	0	; select bank0
  9163  0569  082E               	movf	?___llmod,w
  9164  056A  2CBD               	goto	L6
  9165  056B                     l4408:	
  9166                           ;doprnt.c: 1233: }
  9167                           ;doprnt.c: 1235: while(prec) {
  9168                           
  9169                           
  9170                           ;doprnt.c: 1236: (putch('0') );
  9171  056B  3030               	movlw	48
  9172  056C  319C  2463  3180   	fcall	_putch
  9173                           
  9174                           ;doprnt.c: 1237: prec--;
  9175  056F  30FF               	movlw	255
  9176  0570  0021               	movlb	1	; select bank1
  9177  0571  07C6               	addwf	printf@prec^(0+128),f
  9178  0572  30FF               	movlw	255
  9179  0573  3DC7               	addwfc	(printf@prec+1)^(0+128),f
  9180  0574                     l4412:	
  9181  0574  0846               	movf	printf@prec^(0+128),w
  9182  0575  0447               	iorwf	(printf@prec+1)^(0+128),w
  9183  0576  1903               	btfsc	3,2
  9184  0577  2844               	goto	l4488
  9185  0578  2D6B               	goto	l4408
  9186  0579                     l508:	
  9187                           ;doprnt.c: 1238: }
  9188                           ;doprnt.c: 1245: continue;
  9189                           
  9190                           
  9191                           ;doprnt.c: 1246: }
  9192                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9193  0579  0021               	movlb	1	; select bank1
  9194  057A  1BB7               	btfsc	printf@flag^(0+128),7
  9195  057B  2DA8               	goto	l4424
  9196                           
  9197                           ;doprnt.c: 1253: {
  9198                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  9199  057C  0836               	movf	printf@ap^(0+128),w
  9200  057D  0086               	movwf	6
  9201  057E  0187               	clrf	7
  9202  057F  3F40               	moviw [0]fsr1
  9203  0580  0020               	movlb	0	; select bank0
  9204  0581  00E7               	movwf	??_printf
  9205  0582  3F41               	moviw [1]fsr1
  9206  0583  00E8               	movwf	??_printf+1
  9207  0584  0867               	movf	??_printf,w
  9208  0585  0021               	movlb	1	; select bank1
  9209  0586  00BF               	movwf	printf@val^(0+128)
  9210  0587  0020               	movlb	0	; select bank0
  9211  0588  0868               	movf	??_printf+1,w
  9212  0589  0021               	movlb	1	; select bank1
  9213  058A  00C0               	movwf	(printf@val+1)^(0+128)
  9214  058B  0D89               	rlf	9,f
  9215  058C  3B89               	subwfb	9,f
  9216  058D  0989               	comf	9,f
  9217  058E  00C1               	movwf	(printf@val+2)^(0+128)
  9218  058F  00C2               	movwf	(printf@val+3)^(0+128)
  9219  0590  3002               	movlw	2
  9220  0591  0020               	movlb	0	; select bank0
  9221  0592  00E7               	movwf	??_printf
  9222  0593  0867               	movf	??_printf,w
  9223  0594  0021               	movlb	1	; select bank1
  9224  0595  07B6               	addwf	printf@ap^(0+128),f
  9225                           
  9226                           ;doprnt.c: 1261: if((long)val < 0) {
  9227  0596  1FC2               	btfss	(printf@val+3)^(0+128),7
  9228  0597  2DBF               	goto	l4428
  9229                           
  9230                           ;doprnt.c: 1262: flag |= 0x03;
  9231  0598  3003               	movlw	3
  9232  0599  04B7               	iorwf	printf@flag^(0+128),f
  9233  059A  3000               	movlw	0
  9234  059B  04B8               	iorwf	(printf@flag+1)^(0+128),f
  9235                           
  9236                           ;doprnt.c: 1263: val = -val;
  9237  059C  09BF               	comf	printf@val^(0+128),f
  9238  059D  09C0               	comf	(printf@val+1)^(0+128),f
  9239  059E  09C1               	comf	(printf@val+2)^(0+128),f
  9240  059F  09C2               	comf	(printf@val+3)^(0+128),f
  9241  05A0  0ABF               	incf	printf@val^(0+128),f
  9242  05A1  1903               	skipnz
  9243  05A2  0AC0               	incf	(printf@val+1)^(0+128),f
  9244  05A3  1903               	skipnz
  9245  05A4  0AC1               	incf	(printf@val+2)^(0+128),f
  9246  05A5  1903               	skipnz
  9247  05A6  0AC2               	incf	(printf@val+3)^(0+128),f
  9248                           
  9249                           ;doprnt.c: 1264: }
  9250                           ;doprnt.c: 1266: }
  9251  05A7  2DBF               	goto	l4428
  9252  05A8                     l4424:	
  9253                           
  9254                           ;doprnt.c: 1268: else
  9255                           ;doprnt.c: 1273: {
  9256                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9257  05A8  0836               	movf	printf@ap^(0+128),w
  9258  05A9  0086               	movwf	6
  9259  05AA  0187               	clrf	7
  9260  05AB  3F40               	moviw [0]fsr1
  9261  05AC  0020               	movlb	0	; select bank0
  9262  05AD  00E7               	movwf	??_printf
  9263  05AE  3F41               	moviw [1]fsr1
  9264  05AF  00E8               	movwf	??_printf+1
  9265  05B0  0867               	movf	??_printf,w
  9266  05B1  0021               	movlb	1	; select bank1
  9267  05B2  00BF               	movwf	printf@val^(0+128)
  9268  05B3  0020               	movlb	0	; select bank0
  9269  05B4  0868               	movf	??_printf+1,w
  9270  05B5  0021               	movlb	1	; select bank1
  9271  05B6  00C0               	movwf	(printf@val^(0+128)+1)
  9272  05B7  01C1               	clrf	(printf@val^(0+128)+2)
  9273  05B8  01C2               	clrf	(printf@val^(0+128)+3)
  9274  05B9  3002               	movlw	2
  9275  05BA  0020               	movlb	0	; select bank0
  9276  05BB  00E7               	movwf	??_printf
  9277  05BC  0867               	movf	??_printf,w
  9278  05BD  0021               	movlb	1	; select bank1
  9279  05BE  07B6               	addwf	printf@ap^(0+128),f
  9280  05BF                     l4428:	
  9281                           
  9282                           ;doprnt.c: 1287: }
  9283                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  9284  05BF  0846               	movf	printf@prec^(0+128),w
  9285  05C0  0447               	iorwf	(printf@prec+1)^(0+128),w
  9286  05C1  1D03               	btfss	3,2
  9287  05C2  2E42               	goto	l4456
  9288  05C3  0842               	movf	(printf@val+3)^(0+128),w
  9289  05C4  0441               	iorwf	(printf@val+2)^(0+128),w
  9290  05C5  0440               	iorwf	(printf@val+1)^(0+128),w
  9291  05C6  043F               	iorwf	printf@val^(0+128),w
  9292  05C7  1D03               	skipz
  9293  05C8  2E42               	goto	l4456
  9294                           
  9295                           ;doprnt.c: 1291: prec++;
  9296  05C9  3001               	movlw	1
  9297  05CA  07C6               	addwf	printf@prec^(0+128),f
  9298  05CB  3000               	movlw	0
  9299  05CC  3DC7               	addwfc	(printf@prec+1)^(0+128),f
  9300                           
  9301                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9302  05CD  2E42               	goto	l4456
  9303  05CE                     l551:	
  9304                           ;doprnt.c: 1299: case 0x00:
  9305                           
  9306                           
  9307                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9308  05CE  01C8               	clrf	printf@c^(0+128)
  9309  05CF  0AC8               	incf	printf@c^(0+128),f
  9310  05D0                     L9:	
  9311  05D0  300A               	movlw	10
  9312  05D1  0648               	xorwf	printf@c^(0+128),w
  9313  05D2  1903               	btfsc	3,2
  9314  05D3  2E4B               	goto	l4458
  9315                           
  9316                           ;doprnt.c: 1306: if(val < dpowers[c])
  9317  05D4  0848               	movf	printf@c^(0+128),w
  9318  05D5  0020               	movlb	0	; select bank0
  9319  05D6  00E7               	movwf	??_printf
  9320  05D7  01E8               	clrf	??_printf+1
  9321  05D8  35E7               	lslf	??_printf,f
  9322  05D9  0DE8               	rlf	??_printf+1,f
  9323  05DA  35E7               	lslf	??_printf,f
  9324  05DB  0DE8               	rlf	??_printf+1,f
  9325  05DC  3041               	movlw	low (_dpowers| (0+32768))
  9326  05DD  0767               	addwf	??_printf,w
  9327  05DE  0084               	movwf	4
  9328  05DF  3087               	movlw	high (_dpowers| (0+32768))
  9329  05E0  3D68               	addwfc	??_printf+1,w
  9330  05E1  0085               	movwf	5
  9331  05E2  3F00               	moviw [0]fsr0
  9332  05E3  00E9               	movwf	??_printf+2
  9333  05E4  3F01               	moviw [1]fsr0
  9334  05E5  00EA               	movwf	??_printf+3
  9335  05E6  3F02               	moviw [2]fsr0
  9336  05E7  00EB               	movwf	??_printf+4
  9337  05E8  3F03               	moviw [3]fsr0
  9338  05E9  00EC               	movwf	??_printf+5
  9339  05EA  086C               	movf	??_printf+5,w
  9340  05EB  0021               	movlb	1	; select bank1
  9341  05EC  0242               	subwf	(printf@val+3)^(0+128),w
  9342  05ED  1D03               	skipz
  9343  05EE  2DFF               	goto	u5985
  9344  05EF  0020               	movlb	0	; select bank0
  9345  05F0  086B               	movf	??_printf+4,w
  9346  05F1  0021               	movlb	1	; select bank1
  9347  05F2  0241               	subwf	(printf@val+2)^(0+128),w
  9348  05F3  1D03               	skipz
  9349  05F4  2DFF               	goto	u5985
  9350  05F5  0020               	movlb	0	; select bank0
  9351  05F6  086A               	movf	??_printf+3,w
  9352  05F7  0021               	movlb	1	; select bank1
  9353  05F8  0240               	subwf	(printf@val+1)^(0+128),w
  9354  05F9  1D03               	skipz
  9355  05FA  2DFF               	goto	u5985
  9356  05FB  0020               	movlb	0	; select bank0
  9357  05FC  0869               	movf	??_printf+2,w
  9358  05FD  0021               	movlb	1	; select bank1
  9359  05FE  023F               	subwf	printf@val^(0+128),w
  9360  05FF                     u5985:	
  9361  05FF  1C03               	btfss	3,0
  9362  0600  2E4B               	goto	l4458
  9363                           
  9364                           ;doprnt.c: 1307: break;
  9365  0601  3001               	movlw	1
  9366  0602  0020               	movlb	0	; select bank0
  9367  0603  00E7               	movwf	??_printf
  9368  0604  0867               	movf	??_printf,w
  9369  0605  0021               	movlb	1	; select bank1
  9370  0606  07C8               	addwf	printf@c^(0+128),f
  9371  0607  2DD0               	goto	L9
  9372  0608                     l556:	
  9373                           ;doprnt.c: 1314: case 0x80:
  9374                           
  9375                           ;doprnt.c: 1309: break;
  9376                           
  9377                           
  9378                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9379  0608  01C8               	clrf	printf@c^(0+128)
  9380  0609  0AC8               	incf	printf@c^(0+128),f
  9381  060A                     L10:	
  9382  060A  3008               	movlw	8
  9383  060B  0648               	xorwf	printf@c^(0+128),w
  9384  060C  1903               	btfsc	3,2
  9385  060D  2E4B               	goto	l4458
  9386                           
  9387                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9388  060E  0848               	movf	printf@c^(0+128),w
  9389  060F  0020               	movlb	0	; select bank0
  9390  0610  00E7               	movwf	??_printf
  9391  0611  01E8               	clrf	??_printf+1
  9392  0612  35E7               	lslf	??_printf,f
  9393  0613  0DE8               	rlf	??_printf+1,f
  9394  0614  35E7               	lslf	??_printf,f
  9395  0615  0DE8               	rlf	??_printf+1,f
  9396  0616  30B7               	movlw	low (_hexpowers| (0+32768))
  9397  0617  0767               	addwf	??_printf,w
  9398  0618  0084               	movwf	4
  9399  0619  3087               	movlw	high (_hexpowers| (0+32768))
  9400  061A  3D68               	addwfc	??_printf+1,w
  9401  061B  0085               	movwf	5
  9402  061C  3F00               	moviw [0]fsr0
  9403  061D  00E9               	movwf	??_printf+2
  9404  061E  3F01               	moviw [1]fsr0
  9405  061F  00EA               	movwf	??_printf+3
  9406  0620  3F02               	moviw [2]fsr0
  9407  0621  00EB               	movwf	??_printf+4
  9408  0622  3F03               	moviw [3]fsr0
  9409  0623  00EC               	movwf	??_printf+5
  9410  0624  086C               	movf	??_printf+5,w
  9411  0625  0021               	movlb	1	; select bank1
  9412  0626  0242               	subwf	(printf@val+3)^(0+128),w
  9413  0627  1D03               	skipz
  9414  0628  2E39               	goto	u6015
  9415  0629  0020               	movlb	0	; select bank0
  9416  062A  086B               	movf	??_printf+4,w
  9417  062B  0021               	movlb	1	; select bank1
  9418  062C  0241               	subwf	(printf@val+2)^(0+128),w
  9419  062D  1D03               	skipz
  9420  062E  2E39               	goto	u6015
  9421  062F  0020               	movlb	0	; select bank0
  9422  0630  086A               	movf	??_printf+3,w
  9423  0631  0021               	movlb	1	; select bank1
  9424  0632  0240               	subwf	(printf@val+1)^(0+128),w
  9425  0633  1D03               	skipz
  9426  0634  2E39               	goto	u6015
  9427  0635  0020               	movlb	0	; select bank0
  9428  0636  0869               	movf	??_printf+2,w
  9429  0637  0021               	movlb	1	; select bank1
  9430  0638  023F               	subwf	printf@val^(0+128),w
  9431  0639                     u6015:	
  9432  0639  1C03               	btfss	3,0
  9433  063A  2E4B               	goto	l4458
  9434                           
  9435                           ;doprnt.c: 1318: break;
  9436  063B  3001               	movlw	1
  9437  063C  0020               	movlb	0	; select bank0
  9438  063D  00E7               	movwf	??_printf
  9439  063E  0867               	movf	??_printf,w
  9440  063F  0021               	movlb	1	; select bank1
  9441  0640  07C8               	addwf	printf@c^(0+128),f
  9442  0641  2E0A               	goto	L10
  9443  0642                     l4456:	
  9444                           ;doprnt.c: 1336: }
  9445                           
  9446                           ;doprnt.c: 1320: break;
  9447                           
  9448  0642  0837               	movf	printf@flag^(0+128),w
  9449  0643  3980               	andlw	128
  9450                           
  9451                           ; Switch size 1, requested type "space"
  9452                           ; Number of cases is 2, Range of values is 0 to 128
  9453                           ; switch strategies available:
  9454                           ; Name         Instructions Cycles
  9455                           ; simple_byte            7     4 (average)
  9456                           ; jumptable            260     6 (fixed)
  9457                           ;	Chosen strategy is simple_byte
  9458  0644  3A00               	xorlw	0	; case 0
  9459  0645  1903               	skipnz
  9460  0646  2DCE               	goto	l551
  9461  0647  3A80               	xorlw	128	; case 128
  9462  0648  1903               	skipnz
  9463  0649  2E08               	goto	l556
  9464  064A  2E4B               	goto	l4458
  9465  064B                     l4458:	
  9466                           
  9467                           ;doprnt.c: 1339: if(c < prec)
  9468  064B  0848               	movf	printf@c^(0+128),w
  9469  064C  0020               	movlb	0	; select bank0
  9470  064D  00E7               	movwf	??_printf
  9471  064E  01E8               	clrf	??_printf+1
  9472  064F  1BE7               	btfsc	??_printf,7
  9473  0650  03E8               	decf	??_printf+1,f
  9474  0651  0868               	movf	??_printf+1,w
  9475  0652  3A80               	xorlw	128
  9476  0653  00E9               	movwf	??_printf+2
  9477  0654  0021               	movlb	1	; select bank1
  9478  0655  0847               	movf	(printf@prec+1)^(0+128),w
  9479  0656  3A80               	xorlw	128
  9480  0657  0020               	movlb	0	; select bank0
  9481  0658  0269               	subwf	??_printf+2,w
  9482  0659  1D03               	skipz
  9483  065A  2E5F               	goto	u6035
  9484  065B  0021               	movlb	1	; select bank1
  9485  065C  0846               	movf	printf@prec^(0+128),w
  9486  065D  0020               	movlb	0	; select bank0
  9487  065E  0267               	subwf	??_printf,w
  9488  065F                     u6035:	
  9489  065F  1803               	skipnc
  9490  0660  2E69               	goto	l4462
  9491                           
  9492                           ;doprnt.c: 1340: c = prec;
  9493  0661  0021               	movlb	1	; select bank1
  9494  0662  0846               	movf	printf@prec^(0+128),w
  9495  0663  0020               	movlb	0	; select bank0
  9496  0664  00E7               	movwf	??_printf
  9497  0665  0867               	movf	??_printf,w
  9498  0666  0021               	movlb	1	; select bank1
  9499  0667  00C8               	movwf	printf@c^(0+128)
  9500  0668  2E85               	goto	l561
  9501  0669                     l4462:	
  9502                           
  9503                           ;doprnt.c: 1341: else if(prec < c)
  9504  0669  0021               	movlb	1	; select bank1
  9505  066A  0848               	movf	printf@c^(0+128),w
  9506  066B  0020               	movlb	0	; select bank0
  9507  066C  00E7               	movwf	??_printf
  9508  066D  01E8               	clrf	??_printf+1
  9509  066E  1BE7               	btfsc	??_printf,7
  9510  066F  03E8               	decf	??_printf+1,f
  9511  0670  0021               	movlb	1	; select bank1
  9512  0671  0847               	movf	(printf@prec+1)^(0+128),w
  9513  0672  3A80               	xorlw	128
  9514  0673  0020               	movlb	0	; select bank0
  9515  0674  00E9               	movwf	??_printf+2
  9516  0675  0868               	movf	??_printf+1,w
  9517  0676  3A80               	xorlw	128
  9518  0677  0269               	subwf	??_printf+2,w
  9519  0678  1D03               	skipz
  9520  0679  2E7D               	goto	u6045
  9521  067A  0867               	movf	??_printf,w
  9522  067B  0021               	movlb	1	; select bank1
  9523  067C  0246               	subwf	printf@prec^(0+128),w
  9524  067D                     u6045:	
  9525  067D  1803               	skipnc
  9526  067E  2E85               	goto	l561
  9527                           
  9528                           ;doprnt.c: 1342: prec = c;
  9529  067F  0021               	movlb	1	; select bank1
  9530  0680  0848               	movf	printf@c^(0+128),w
  9531  0681  00C6               	movwf	printf@prec^(0+128)
  9532  0682  01C7               	clrf	(printf@prec+1)^(0+128)
  9533  0683  1BC6               	btfsc	printf@prec^(0+128),7
  9534  0684  03C7               	decf	(printf@prec+1)^(0+128),f
  9535  0685                     l561:	
  9536                           
  9537                           ;doprnt.c: 1422: {
  9538                           ;doprnt.c: 1438: if(flag & 0x03)
  9539  0685  3003               	movlw	3
  9540  0686  0021               	movlb	1	; select bank1
  9541  0687  0537               	andwf	printf@flag^(0+128),w
  9542  0688  0020               	movlb	0	; select bank0
  9543  0689  00E7               	movwf	??_printf
  9544  068A  3000               	movlw	0
  9545  068B  0021               	movlb	1	; select bank1
  9546  068C  0538               	andwf	(printf@flag+1)^(0+128),w
  9547  068D  0020               	movlb	0	; select bank0
  9548  068E  00E8               	movwf	??_printf+1
  9549  068F  0867               	movf	??_printf,w
  9550  0690  0468               	iorwf	??_printf+1,w
  9551  0691  1903               	btfsc	3,2
  9552  0692  2F2B               	goto	l4486
  9553                           
  9554                           ;doprnt.c: 1439: (putch('-') );
  9555  0693  302D               	movlw	45
  9556  0694  2F28               	goto	L11
  9557  0695                     l4468:	
  9558                           ;doprnt.c: 1478: {
  9559                           ;doprnt.c: 1483: case 0x00:
  9560                           
  9561                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  9562                           
  9563                           ;doprnt.c: 1469: }
  9564                           ;doprnt.c: 1474: while(prec--) {
  9565                           
  9566                           
  9567                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9568  0695  3000               	movlw	0
  9569  0696  0020               	movlb	0	; select bank0
  9570  0697  00B1               	movwf	___llmod@divisor+3
  9571  0698  3000               	movlw	0
  9572  0699  00B0               	movwf	___llmod@divisor+2
  9573  069A  3000               	movlw	0
  9574  069B  00AF               	movwf	___llmod@divisor+1
  9575  069C  300A               	movlw	10
  9576  069D  00AE               	movwf	___llmod@divisor
  9577  069E  0021               	movlb	1	; select bank1
  9578  069F  0847               	movf	(printf@prec+1)^(0+128),w
  9579  06A0  0085               	movwf	5
  9580  06A1  0846               	movf	printf@prec^(0+128),w
  9581  06A2  0084               	movwf	4
  9582  06A3  3584               	lslf	4,f
  9583  06A4  0D85               	rlf	5,f
  9584  06A5  3584               	lslf	4,f
  9585  06A6  0D85               	rlf	5,f
  9586  06A7  3041               	movlw	low (_dpowers| (0+32768))
  9587  06A8  0784               	addwf	4,f
  9588  06A9  3087               	movlw	high (_dpowers| (0+32768))
  9589  06AA  3D85               	addwfc	5,f
  9590  06AB  3F00               	moviw [0]fsr0
  9591  06AC  0020               	movlb	0	; select bank0
  9592  06AD  00A0               	movwf	___lldiv@divisor
  9593  06AE  3F01               	moviw [1]fsr0
  9594  06AF  00A1               	movwf	___lldiv@divisor+1
  9595  06B0  3F02               	moviw [2]fsr0
  9596  06B1  00A2               	movwf	___lldiv@divisor+2
  9597  06B2  3F03               	moviw [3]fsr0
  9598  06B3  00A3               	movwf	___lldiv@divisor+3
  9599  06B4  0021               	movlb	1	; select bank1
  9600  06B5  0842               	movf	(printf@val+3)^(0+128),w
  9601  06B6  0020               	movlb	0	; select bank0
  9602  06B7  00A7               	movwf	___lldiv@dividend+3
  9603  06B8  0021               	movlb	1	; select bank1
  9604  06B9  0841               	movf	(printf@val+2)^(0+128),w
  9605  06BA  0020               	movlb	0	; select bank0
  9606  06BB  00A6               	movwf	___lldiv@dividend+2
  9607  06BC  0021               	movlb	1	; select bank1
  9608  06BD  0840               	movf	(printf@val+1)^(0+128),w
  9609  06BE  0020               	movlb	0	; select bank0
  9610  06BF  00A5               	movwf	___lldiv@dividend+1
  9611  06C0  0021               	movlb	1	; select bank1
  9612  06C1  083F               	movf	printf@val^(0+128),w
  9613  06C2  0020               	movlb	0	; select bank0
  9614  06C3  00A4               	movwf	___lldiv@dividend
  9615  06C4  3191  210D  3180   	fcall	___lldiv
  9616  06C7  0020               	movlb	0	; select bank0
  9617  06C8  0823               	movf	?___lldiv+3,w
  9618  06C9  00B5               	movwf	___llmod@dividend+3
  9619  06CA  0822               	movf	?___lldiv+2,w
  9620  06CB  00B4               	movwf	___llmod@dividend+2
  9621  06CC  0821               	movf	?___lldiv+1,w
  9622  06CD  00B3               	movwf	___llmod@dividend+1
  9623  06CE  0820               	movf	?___lldiv,w
  9624  06CF  00B2               	movwf	___llmod@dividend
  9625  06D0  319E  26EA  3180   	fcall	___llmod
  9626  06D3  0020               	movlb	0	; select bank0
  9627  06D4  082E               	movf	?___llmod,w
  9628  06D5  3E30               	addlw	48
  9629  06D6  00E7               	movwf	??_printf
  9630  06D7  0867               	movf	??_printf,w
  9631  06D8  2F25               	goto	L7
  9632  06D9                     l4470:	
  9633                           ;doprnt.c: 1497: case 0x80:
  9634                           
  9635                           ;doprnt.c: 1491: break;
  9636                           
  9637                           
  9638                           ;doprnt.c: 1499: {
  9639                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9640  06D9  0847               	movf	(printf@prec+1)^(0+128),w
  9641  06DA  0085               	movwf	5
  9642  06DB  0846               	movf	printf@prec^(0+128),w
  9643  06DC  0084               	movwf	4
  9644  06DD  3584               	lslf	4,f
  9645  06DE  0D85               	rlf	5,f
  9646  06DF  3584               	lslf	4,f
  9647  06E0  0D85               	rlf	5,f
  9648  06E1  30B7               	movlw	low (_hexpowers| (0+32768))
  9649  06E2  0784               	addwf	4,f
  9650  06E3  3087               	movlw	high (_hexpowers| (0+32768))
  9651  06E4  3D85               	addwfc	5,f
  9652  06E5  3F00               	moviw [0]fsr0
  9653  06E6  0020               	movlb	0	; select bank0
  9654  06E7  00A0               	movwf	___lldiv@divisor
  9655  06E8  3F01               	moviw [1]fsr0
  9656  06E9  00A1               	movwf	___lldiv@divisor+1
  9657  06EA  3F02               	moviw [2]fsr0
  9658  06EB  00A2               	movwf	___lldiv@divisor+2
  9659  06EC  3F03               	moviw [3]fsr0
  9660  06ED  00A3               	movwf	___lldiv@divisor+3
  9661  06EE  0021               	movlb	1	; select bank1
  9662  06EF  0842               	movf	(printf@val+3)^(0+128),w
  9663  06F0  0020               	movlb	0	; select bank0
  9664  06F1  00A7               	movwf	___lldiv@dividend+3
  9665  06F2  0021               	movlb	1	; select bank1
  9666  06F3  0841               	movf	(printf@val+2)^(0+128),w
  9667  06F4  0020               	movlb	0	; select bank0
  9668  06F5  00A6               	movwf	___lldiv@dividend+2
  9669  06F6  0021               	movlb	1	; select bank1
  9670  06F7  0840               	movf	(printf@val+1)^(0+128),w
  9671  06F8  0020               	movlb	0	; select bank0
  9672  06F9  00A5               	movwf	___lldiv@dividend+1
  9673  06FA  0021               	movlb	1	; select bank1
  9674  06FB  083F               	movf	printf@val^(0+128),w
  9675  06FC  0020               	movlb	0	; select bank0
  9676  06FD  00A4               	movwf	___lldiv@dividend
  9677  06FE  3191  210D  3180   	fcall	___lldiv
  9678  0701  0020               	movlb	0	; select bank0
  9679  0702  0820               	movf	?___lldiv,w
  9680  0703  390F               	andlw	15
  9681  0704  00E7               	movwf	??_printf
  9682  0705  0867               	movf	??_printf,w
  9683  0706  0021               	movlb	1	; select bank1
  9684  0707  00AF               	movwf	printf@idx^(0+128)
  9685                           
  9686                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  9687  0708  1AB7               	btfsc	printf@flag^(0+128),5
  9688  0709  2F0E               	goto	l4476
  9689  070A  30DD               	movlw	low (STR_22| (0+32768))
  9690  070B  00B0               	movwf	_printf$850^(0+128)
  9691  070C  3089               	movlw	high (STR_22| (0+32768))
  9692  070D  2F11               	goto	L8
  9693  070E                     l4476:	
  9694  070E  30CC               	movlw	low (STR_21| (0+32768))
  9695  070F  00B0               	movwf	_printf$850^(0+128)
  9696  0710  3089               	movlw	high (STR_21| (0+32768))
  9697  0711                     L8:	
  9698  0711  00B1               	movwf	(_printf$850^(0+128)+1)
  9699  0712  0831               	movf	(_printf$850+1)^(0+128),w
  9700  0713  0020               	movlb	0	; select bank0
  9701  0714  00E8               	movwf	??_printf+1
  9702  0715  0021               	movlb	1	; select bank1
  9703  0716  0830               	movf	_printf$850^(0+128),w
  9704  0717  0020               	movlb	0	; select bank0
  9705  0718  00E7               	movwf	??_printf
  9706  0719  0021               	movlb	1	; select bank1
  9707  071A  082F               	movf	printf@idx^(0+128),w
  9708  071B  0020               	movlb	0	; select bank0
  9709  071C  0767               	addwf	??_printf,w
  9710  071D  0084               	movwf	4
  9711  071E  0868               	movf	??_printf+1,w
  9712  071F  1803               	skipnc
  9713  0720  0A68               	incf	??_printf+1,w
  9714  0721  0085               	movwf	5
  9715  0722  0800               	movf	0,w	;code access
  9716  0723  00E9               	movwf	??_printf+2
  9717  0724  0869               	movf	??_printf+2,w
  9718  0725                     L7:	
  9719  0725  0021               	movlb	1	; select bank1
  9720  0726  00C8               	movwf	printf@c^(0+128)
  9721  0727                     l4484:	
  9722                           ;doprnt.c: 1523: }
  9723                           
  9724                           ;doprnt.c: 1508: }
  9725                           ;doprnt.c: 1510: break;
  9726                           
  9727                           
  9728                           ;doprnt.c: 1524: (putch(c) );
  9729  0727  0848               	movf	printf@c^(0+128),w
  9730  0728                     L11:	
  9731  0728  319C  2463  3180   	fcall	_putch
  9732  072B                     l4486:	
  9733  072B  30FF               	movlw	255
  9734  072C  0021               	movlb	1	; select bank1
  9735  072D  07C6               	addwf	printf@prec^(0+128),f
  9736  072E  30FF               	movlw	255
  9737  072F  3DC7               	addwfc	(printf@prec+1)^(0+128),f
  9738  0730  0A46               	incf	printf@prec^(0+128),w
  9739  0731  1903               	btfsc	3,2
  9740  0732  0A47               	incf	(printf@prec+1)^(0+128),w
  9741  0733  1903               	btfsc	3,2
  9742  0734  2844               	goto	l4488
  9743  0735  0021               	movlb	1	; select bank1
  9744  0736  0837               	movf	printf@flag^(0+128),w
  9745  0737  3980               	andlw	128
  9746                           
  9747                           ; Switch size 1, requested type "space"
  9748                           ; Number of cases is 2, Range of values is 0 to 128
  9749                           ; switch strategies available:
  9750                           ; Name         Instructions Cycles
  9751                           ; simple_byte            7     4 (average)
  9752                           ; jumptable            260     6 (fixed)
  9753                           ;	Chosen strategy is simple_byte
  9754  0738  3A00               	xorlw	0	; case 0
  9755  0739  1903               	skipnz
  9756  073A  2E95               	goto	l4468
  9757  073B  3A80               	xorlw	128	; case 128
  9758  073C  1903               	skipnz
  9759  073D  2ED9               	goto	l4470
  9760  073E  2F27               	goto	l4484
  9761  073F  2F27               	goto	l4484
  9762  0740                     l576:	
  9763                           ;doprnt.c: 1540: return 0;
  9764                           ;	Return value of _printf is never used
  9765                           
  9766                           ;doprnt.c: 1525: }
  9767                           ;doprnt.c: 1533: }
  9768                           ;doprnt.c: 1535: alldone:
  9769                           
  9770  0740  0008               	return
  9771  0741                     __end_of_printf:	
  9772                           
  9773                           	psect	text19
  9774  0DBA                     __ptext19:	
  9775 ;; *************** function _scale *****************
  9776 ;; Defined at:
  9777 ;;		line 425 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  scl             1    wreg     char 
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  scl             1   46[BANK0 ] char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  3   38[BANK0 ] char 
  9784 ;; Registers used:
  9785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        9 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    5
  9798 ;; This function calls:
  9799 ;;		___awdiv
  9800 ;;		___awmod
  9801 ;;		___ftmul
  9802 ;;		___wmul
  9803 ;; This function is called by:
  9804 ;;		_printf
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           
  9809                           ;psect for function _scale
  9810  0DBA                     _scale:	
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9814                           ;scale@scl stored from wreg
  9815  0DBA  0020               	movlb	0	; select bank0
  9816  0DBB  00CE               	movwf	scale@scl
  9817                           
  9818                           ;doprnt.c: 428: if(scl < 0) {
  9819  0DBC  1FCE               	btfss	scale@scl,7
  9820  0DBD  2EE0               	goto	l4112
  9821                           
  9822                           ;doprnt.c: 429: scl = -scl;
  9823  0DBE  09CE               	comf	scale@scl,f
  9824  0DBF  0ACE               	incf	scale@scl,f
  9825                           
  9826                           ;doprnt.c: 430: if(scl>=110)
  9827  0DC0  084E               	movf	scale@scl,w
  9828  0DC1  3A80               	xorlw	128
  9829  0DC2  3E12               	addlw	-238
  9830  0DC3  1C03               	skipc
  9831  0DC4  2E64               	goto	l4102
  9832                           
  9833                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9834  0DC5  300A               	movlw	10
  9835  0DC6  00A7               	movwf	___awdiv@divisor
  9836  0DC7  3000               	movlw	0
  9837  0DC8  00A8               	movwf	___awdiv@divisor+1
  9838  0DC9  084E               	movf	scale@scl,w
  9839  0DCA  00A2               	movwf	___awmod@dividend
  9840  0DCB  01A3               	clrf	___awmod@dividend+1
  9841  0DCC  1BA2               	btfsc	___awmod@dividend,7
  9842  0DCD  03A3               	decf	___awmod@dividend+1,f
  9843  0DCE  3064               	movlw	100
  9844  0DCF  00A0               	movwf	___awmod@divisor
  9845  0DD0  3000               	movlw	0
  9846  0DD1  00A1               	movwf	___awmod@divisor+1
  9847  0DD2  319F  2773  318D   	fcall	___awmod
  9848  0DD5  0020               	movlb	0	; select bank0
  9849  0DD6  0821               	movf	?___awmod+1,w
  9850  0DD7  00AA               	movwf	___awdiv@dividend+1
  9851  0DD8  0820               	movf	?___awmod,w
  9852  0DD9  00A9               	movwf	___awdiv@dividend
  9853  0DDA  3190  20BB  318D   	fcall	___awdiv
  9854  0DDD  0020               	movlb	0	; select bank0
  9855  0DDE  0827               	movf	?___awdiv,w
  9856  0DDF  3E09               	addlw	9
  9857  0DE0  00B0               	movwf	___wmul@multiplier
  9858  0DE1  3000               	movlw	0
  9859  0DE2  3D28               	addwfc	?___awdiv+1,w
  9860  0DE3  00B1               	movwf	___wmul@multiplier+1
  9861  0DE4  3003               	movlw	3
  9862  0DE5  00B2               	movwf	___wmul@multiplicand
  9863  0DE6  3000               	movlw	0
  9864  0DE7  00B3               	movwf	___wmul@multiplicand+1
  9865  0DE8  319D  2539  318D   	fcall	___wmul
  9866  0DEB  0020               	movlb	0	; select bank0
  9867  0DEC  0831               	movf	?___wmul+1,w
  9868  0DED  0085               	movwf	5
  9869  0DEE  0830               	movf	?___wmul,w
  9870  0DEF  0084               	movwf	4
  9871  0DF0  3090               	movlw	low (__npowers_| (0+32768))
  9872  0DF1  0784               	addwf	4,f
  9873  0DF2  3087               	movlw	high (__npowers_| (0+32768))
  9874  0DF3  3D85               	addwfc	5,f
  9875  0DF4  3F00               	moviw [0]fsr0
  9876  0DF5  00B6               	movwf	___ftmul@f1
  9877  0DF6  3F01               	moviw [1]fsr0
  9878  0DF7  00B7               	movwf	___ftmul@f1+1
  9879  0DF8  3F02               	moviw [2]fsr0
  9880  0DF9  00B8               	movwf	___ftmul@f1+2
  9881  0DFA  3064               	movlw	100
  9882  0DFB  00A7               	movwf	___awdiv@divisor
  9883  0DFC  3000               	movlw	0
  9884  0DFD  00A8               	movwf	___awdiv@divisor+1
  9885  0DFE  084E               	movf	scale@scl,w
  9886  0DFF  00A9               	movwf	___awdiv@dividend
  9887  0E00  01AA               	clrf	___awdiv@dividend+1
  9888  0E01  1BA9               	btfsc	___awdiv@dividend,7
  9889  0E02  03AA               	decf	___awdiv@dividend+1,f
  9890  0E03  3190  20BB  318D   	fcall	___awdiv
  9891  0E06  0020               	movlb	0	; select bank0
  9892  0E07  0827               	movf	?___awdiv,w
  9893  0E08  3E12               	addlw	18
  9894  0E09  00B0               	movwf	___wmul@multiplier
  9895  0E0A  3000               	movlw	0
  9896  0E0B  3D28               	addwfc	?___awdiv+1,w
  9897  0E0C  00B1               	movwf	___wmul@multiplier+1
  9898  0E0D  3003               	movlw	3
  9899  0E0E  00B2               	movwf	___wmul@multiplicand
  9900  0E0F  3000               	movlw	0
  9901  0E10  00B3               	movwf	___wmul@multiplicand+1
  9902  0E11  319D  2539  318D   	fcall	___wmul
  9903  0E14  0020               	movlb	0	; select bank0
  9904  0E15  0831               	movf	?___wmul+1,w
  9905  0E16  0085               	movwf	5
  9906  0E17  0830               	movf	?___wmul,w
  9907  0E18  0084               	movwf	4
  9908  0E19  3090               	movlw	low (__npowers_| (0+32768))
  9909  0E1A  0784               	addwf	4,f
  9910  0E1B  3087               	movlw	high (__npowers_| (0+32768))
  9911  0E1C  3D85               	addwfc	5,f
  9912  0E1D  3F00               	moviw [0]fsr0
  9913  0E1E  00B9               	movwf	___ftmul@f2
  9914  0E1F  3F01               	moviw [1]fsr0
  9915  0E20  00BA               	movwf	___ftmul@f2+1
  9916  0E21  3F02               	moviw [2]fsr0
  9917  0E22  00BB               	movwf	___ftmul@f2+2
  9918  0E23  3193  231D  318D   	fcall	___ftmul
  9919  0E26  0020               	movlb	0	; select bank0
  9920  0E27  0836               	movf	?___ftmul,w
  9921  0E28  00CB               	movwf	_scale$1371
  9922  0E29  0837               	movf	?___ftmul+1,w
  9923  0E2A  00CC               	movwf	_scale$1371+1
  9924  0E2B  0838               	movf	?___ftmul+2,w
  9925  0E2C  00CD               	movwf	_scale$1371+2
  9926                           
  9927                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9928  0E2D  084E               	movf	scale@scl,w
  9929  0E2E  00A2               	movwf	___awmod@dividend
  9930  0E2F  01A3               	clrf	___awmod@dividend+1
  9931  0E30  1BA2               	btfsc	___awmod@dividend,7
  9932  0E31  03A3               	decf	___awmod@dividend+1,f
  9933  0E32  300A               	movlw	10
  9934  0E33  00A0               	movwf	___awmod@divisor
  9935  0E34  3000               	movlw	0
  9936  0E35  00A1               	movwf	___awmod@divisor+1
  9937  0E36  319F  2773  318D   	fcall	___awmod
  9938  0E39  0020               	movlb	0	; select bank0
  9939  0E3A  0821               	movf	?___awmod+1,w
  9940  0E3B  00B1               	movwf	___wmul@multiplier+1
  9941  0E3C  0820               	movf	?___awmod,w
  9942  0E3D  00B0               	movwf	___wmul@multiplier
  9943  0E3E  3003               	movlw	3
  9944  0E3F  00B2               	movwf	___wmul@multiplicand
  9945  0E40  3000               	movlw	0
  9946  0E41  00B3               	movwf	___wmul@multiplicand+1
  9947  0E42  319D  2539  318D   	fcall	___wmul
  9948  0E45  0020               	movlb	0	; select bank0
  9949  0E46  0831               	movf	?___wmul+1,w
  9950  0E47  0085               	movwf	5
  9951  0E48  0830               	movf	?___wmul,w
  9952  0E49  0084               	movwf	4
  9953  0E4A  3090               	movlw	low (__npowers_| (0+32768))
  9954  0E4B  0784               	addwf	4,f
  9955  0E4C  3087               	movlw	high (__npowers_| (0+32768))
  9956  0E4D  3D85               	addwfc	5,f
  9957  0E4E  3F00               	moviw [0]fsr0
  9958  0E4F  00B6               	movwf	___ftmul@f1
  9959  0E50  3F01               	moviw [1]fsr0
  9960  0E51  00B7               	movwf	___ftmul@f1+1
  9961  0E52  3F02               	moviw [2]fsr0
  9962  0E53  00B8               	movwf	___ftmul@f1+2
  9963  0E54  084B               	movf	_scale$1371,w
  9964  0E55  00B9               	movwf	___ftmul@f2
  9965  0E56  084C               	movf	_scale$1371+1,w
  9966  0E57  00BA               	movwf	___ftmul@f2+1
  9967  0E58  084D               	movf	_scale$1371+2,w
  9968  0E59  00BB               	movwf	___ftmul@f2+2
  9969  0E5A  3193  231D         	fcall	___ftmul
  9970  0E5C  0020               	movlb	0	; select bank0
  9971  0E5D  0836               	movf	?___ftmul,w
  9972  0E5E  00C6               	movwf	?_scale
  9973  0E5F  0837               	movf	?___ftmul+1,w
  9974  0E60  00C7               	movwf	?_scale+1
  9975  0E61  0838               	movf	?___ftmul+2,w
  9976  0E62  00C8               	movwf	?_scale+2
  9977  0E63  0008               	return
  9978  0E64                     l4102:	
  9979                           
  9980                           ;doprnt.c: 432: else if(scl > 10)
  9981  0E64  084E               	movf	scale@scl,w
  9982  0E65  3A80               	xorlw	128
  9983  0E66  3E75               	addlw	-139
  9984  0E67  1C03               	skipc
  9985  0E68  2EC3               	goto	l4108
  9986                           
  9987                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9988  0E69  084E               	movf	scale@scl,w
  9989  0E6A  00A2               	movwf	___awmod@dividend
  9990  0E6B  01A3               	clrf	___awmod@dividend+1
  9991  0E6C  1BA2               	btfsc	___awmod@dividend,7
  9992  0E6D  03A3               	decf	___awmod@dividend+1,f
  9993  0E6E  300A               	movlw	10
  9994  0E6F  00A0               	movwf	___awmod@divisor
  9995  0E70  3000               	movlw	0
  9996  0E71  00A1               	movwf	___awmod@divisor+1
  9997  0E72  319F  2773  318D   	fcall	___awmod
  9998  0E75  0020               	movlb	0	; select bank0
  9999  0E76  0821               	movf	?___awmod+1,w
 10000  0E77  00B1               	movwf	___wmul@multiplier+1
 10001  0E78  0820               	movf	?___awmod,w
 10002  0E79  00B0               	movwf	___wmul@multiplier
 10003  0E7A  3003               	movlw	3
 10004  0E7B  00B2               	movwf	___wmul@multiplicand
 10005  0E7C  3000               	movlw	0
 10006  0E7D  00B3               	movwf	___wmul@multiplicand+1
 10007  0E7E  319D  2539  318D   	fcall	___wmul
 10008  0E81  0020               	movlb	0	; select bank0
 10009  0E82  0831               	movf	?___wmul+1,w
 10010  0E83  0085               	movwf	5
 10011  0E84  0830               	movf	?___wmul,w
 10012  0E85  0084               	movwf	4
 10013  0E86  3090               	movlw	low (__npowers_| (0+32768))
 10014  0E87  0784               	addwf	4,f
 10015  0E88  3087               	movlw	high (__npowers_| (0+32768))
 10016  0E89  3D85               	addwfc	5,f
 10017  0E8A  3F00               	moviw [0]fsr0
 10018  0E8B  00B6               	movwf	___ftmul@f1
 10019  0E8C  3F01               	moviw [1]fsr0
 10020  0E8D  00B7               	movwf	___ftmul@f1+1
 10021  0E8E  3F02               	moviw [2]fsr0
 10022  0E8F  00B8               	movwf	___ftmul@f1+2
 10023  0E90  300A               	movlw	10
 10024  0E91  00A7               	movwf	___awdiv@divisor
 10025  0E92  3000               	movlw	0
 10026  0E93  00A8               	movwf	___awdiv@divisor+1
 10027  0E94  084E               	movf	scale@scl,w
 10028  0E95  00A9               	movwf	___awdiv@dividend
 10029  0E96  01AA               	clrf	___awdiv@dividend+1
 10030  0E97  1BA9               	btfsc	___awdiv@dividend,7
 10031  0E98  03AA               	decf	___awdiv@dividend+1,f
 10032  0E99  3190  20BB  318D   	fcall	___awdiv
 10033  0E9C  0020               	movlb	0	; select bank0
 10034  0E9D  0827               	movf	?___awdiv,w
 10035  0E9E  3E09               	addlw	9
 10036  0E9F  00B0               	movwf	___wmul@multiplier
 10037  0EA0  3000               	movlw	0
 10038  0EA1  3D28               	addwfc	?___awdiv+1,w
 10039  0EA2  00B1               	movwf	___wmul@multiplier+1
 10040  0EA3  3003               	movlw	3
 10041  0EA4  00B2               	movwf	___wmul@multiplicand
 10042  0EA5  3000               	movlw	0
 10043  0EA6  00B3               	movwf	___wmul@multiplicand+1
 10044  0EA7  319D  2539  318D   	fcall	___wmul
 10045  0EAA  0020               	movlb	0	; select bank0
 10046  0EAB  0831               	movf	?___wmul+1,w
 10047  0EAC  0085               	movwf	5
 10048  0EAD  0830               	movf	?___wmul,w
 10049  0EAE  0084               	movwf	4
 10050  0EAF  3090               	movlw	low (__npowers_| (0+32768))
 10051  0EB0  0784               	addwf	4,f
 10052  0EB1  3087               	movlw	high (__npowers_| (0+32768))
 10053  0EB2  3D85               	addwfc	5,f
 10054  0EB3  3F00               	moviw [0]fsr0
 10055  0EB4  00B9               	movwf	___ftmul@f2
 10056  0EB5  3F01               	moviw [1]fsr0
 10057  0EB6  00BA               	movwf	___ftmul@f2+1
 10058  0EB7  3F02               	moviw [2]fsr0
 10059  0EB8  00BB               	movwf	___ftmul@f2+2
 10060  0EB9  3193  231D         	fcall	___ftmul
 10061  0EBB  0020               	movlb	0	; select bank0
 10062  0EBC  0836               	movf	?___ftmul,w
 10063  0EBD  00C6               	movwf	?_scale
 10064  0EBE  0837               	movf	?___ftmul+1,w
 10065  0EBF  00C7               	movwf	?_scale+1
 10066  0EC0  0838               	movf	?___ftmul+2,w
 10067  0EC1  00C8               	movwf	?_scale+2
 10068  0EC2  0008               	return
 10069  0EC3                     l4108:	
 10070                           
 10071                           ;doprnt.c: 434: return _npowers_[scl];
 10072  0EC3  084E               	movf	scale@scl,w
 10073  0EC4  00C9               	movwf	??_scale
 10074  0EC5  01CA               	clrf	??_scale+1
 10075  0EC6  0849               	movf	??_scale,w
 10076  0EC7  00B0               	movwf	___wmul@multiplier
 10077  0EC8  084A               	movf	??_scale+1,w
 10078  0EC9  00B1               	movwf	___wmul@multiplier+1
 10079  0ECA  3003               	movlw	3
 10080  0ECB  00B2               	movwf	___wmul@multiplicand
 10081  0ECC  3000               	movlw	0
 10082  0ECD  00B3               	movwf	___wmul@multiplicand+1
 10083  0ECE  319D  2539         	fcall	___wmul
 10084  0ED0  0020               	movlb	0	; select bank0
 10085  0ED1  0831               	movf	?___wmul+1,w
 10086  0ED2  0085               	movwf	5
 10087  0ED3  0830               	movf	?___wmul,w
 10088  0ED4  0084               	movwf	4
 10089  0ED5  3090               	movlw	low (__npowers_| (0+32768))
 10090  0ED6  0784               	addwf	4,f
 10091  0ED7  3087               	movlw	high (__npowers_| (0+32768))
 10092  0ED8  3D85               	addwfc	5,f
 10093  0ED9  3F00               	moviw [0]fsr0
 10094  0EDA  00C6               	movwf	?_scale
 10095  0EDB  3F01               	moviw [1]fsr0
 10096  0EDC  00C7               	movwf	?_scale+1
 10097  0EDD  3F02               	moviw [2]fsr0
 10098  0EDE  00C8               	movwf	?_scale+2
 10099  0EDF  0008               	return
 10100  0EE0                     l4112:	
 10101                           
 10102                           ;doprnt.c: 435: }
 10103                           ;doprnt.c: 436: if(scl>=110)
 10104  0EE0  084E               	movf	scale@scl,w
 10105  0EE1  3A80               	xorlw	128
 10106  0EE2  3E12               	addlw	-238
 10107  0EE3  1C03               	skipc
 10108  0EE4  2F84               	goto	l4120
 10109                           
 10110                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10111  0EE5  300A               	movlw	10
 10112  0EE6  00A7               	movwf	___awdiv@divisor
 10113  0EE7  3000               	movlw	0
 10114  0EE8  00A8               	movwf	___awdiv@divisor+1
 10115  0EE9  084E               	movf	scale@scl,w
 10116  0EEA  00A2               	movwf	___awmod@dividend
 10117  0EEB  01A3               	clrf	___awmod@dividend+1
 10118  0EEC  1BA2               	btfsc	___awmod@dividend,7
 10119  0EED  03A3               	decf	___awmod@dividend+1,f
 10120  0EEE  3064               	movlw	100
 10121  0EEF  00A0               	movwf	___awmod@divisor
 10122  0EF0  3000               	movlw	0
 10123  0EF1  00A1               	movwf	___awmod@divisor+1
 10124  0EF2  319F  2773  318D   	fcall	___awmod
 10125  0EF5  0020               	movlb	0	; select bank0
 10126  0EF6  0821               	movf	?___awmod+1,w
 10127  0EF7  00AA               	movwf	___awdiv@dividend+1
 10128  0EF8  0820               	movf	?___awmod,w
 10129  0EF9  00A9               	movwf	___awdiv@dividend
 10130  0EFA  3190  20BB  318D   	fcall	___awdiv
 10131  0EFD  0020               	movlb	0	; select bank0
 10132  0EFE  0827               	movf	?___awdiv,w
 10133  0EFF  3E09               	addlw	9
 10134  0F00  00B0               	movwf	___wmul@multiplier
 10135  0F01  3000               	movlw	0
 10136  0F02  3D28               	addwfc	?___awdiv+1,w
 10137  0F03  00B1               	movwf	___wmul@multiplier+1
 10138  0F04  3003               	movlw	3
 10139  0F05  00B2               	movwf	___wmul@multiplicand
 10140  0F06  3000               	movlw	0
 10141  0F07  00B3               	movwf	___wmul@multiplicand+1
 10142  0F08  319D  2539  318D   	fcall	___wmul
 10143  0F0B  0020               	movlb	0	; select bank0
 10144  0F0C  0831               	movf	?___wmul+1,w
 10145  0F0D  0085               	movwf	5
 10146  0F0E  0830               	movf	?___wmul,w
 10147  0F0F  0084               	movwf	4
 10148  0F10  3069               	movlw	low (__powers_| (0+32768))
 10149  0F11  0784               	addwf	4,f
 10150  0F12  3087               	movlw	high (__powers_| (0+32768))
 10151  0F13  3D85               	addwfc	5,f
 10152  0F14  3F00               	moviw [0]fsr0
 10153  0F15  00B6               	movwf	___ftmul@f1
 10154  0F16  3F01               	moviw [1]fsr0
 10155  0F17  00B7               	movwf	___ftmul@f1+1
 10156  0F18  3F02               	moviw [2]fsr0
 10157  0F19  00B8               	movwf	___ftmul@f1+2
 10158  0F1A  3064               	movlw	100
 10159  0F1B  00A7               	movwf	___awdiv@divisor
 10160  0F1C  3000               	movlw	0
 10161  0F1D  00A8               	movwf	___awdiv@divisor+1
 10162  0F1E  084E               	movf	scale@scl,w
 10163  0F1F  00A9               	movwf	___awdiv@dividend
 10164  0F20  01AA               	clrf	___awdiv@dividend+1
 10165  0F21  1BA9               	btfsc	___awdiv@dividend,7
 10166  0F22  03AA               	decf	___awdiv@dividend+1,f
 10167  0F23  3190  20BB  318D   	fcall	___awdiv
 10168  0F26  0020               	movlb	0	; select bank0
 10169  0F27  0827               	movf	?___awdiv,w
 10170  0F28  3E12               	addlw	18
 10171  0F29  00B0               	movwf	___wmul@multiplier
 10172  0F2A  3000               	movlw	0
 10173  0F2B  3D28               	addwfc	?___awdiv+1,w
 10174  0F2C  00B1               	movwf	___wmul@multiplier+1
 10175  0F2D  3003               	movlw	3
 10176  0F2E  00B2               	movwf	___wmul@multiplicand
 10177  0F2F  3000               	movlw	0
 10178  0F30  00B3               	movwf	___wmul@multiplicand+1
 10179  0F31  319D  2539  318D   	fcall	___wmul
 10180  0F34  0020               	movlb	0	; select bank0
 10181  0F35  0831               	movf	?___wmul+1,w
 10182  0F36  0085               	movwf	5
 10183  0F37  0830               	movf	?___wmul,w
 10184  0F38  0084               	movwf	4
 10185  0F39  3069               	movlw	low (__powers_| (0+32768))
 10186  0F3A  0784               	addwf	4,f
 10187  0F3B  3087               	movlw	high (__powers_| (0+32768))
 10188  0F3C  3D85               	addwfc	5,f
 10189  0F3D  3F00               	moviw [0]fsr0
 10190  0F3E  00B9               	movwf	___ftmul@f2
 10191  0F3F  3F01               	moviw [1]fsr0
 10192  0F40  00BA               	movwf	___ftmul@f2+1
 10193  0F41  3F02               	moviw [2]fsr0
 10194  0F42  00BB               	movwf	___ftmul@f2+2
 10195  0F43  3193  231D  318D   	fcall	___ftmul
 10196  0F46  0020               	movlb	0	; select bank0
 10197  0F47  0836               	movf	?___ftmul,w
 10198  0F48  00CB               	movwf	_scale$1371
 10199  0F49  0837               	movf	?___ftmul+1,w
 10200  0F4A  00CC               	movwf	_scale$1371+1
 10201  0F4B  0838               	movf	?___ftmul+2,w
 10202  0F4C  00CD               	movwf	_scale$1371+2
 10203                           
 10204                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10205  0F4D  084E               	movf	scale@scl,w
 10206  0F4E  00A2               	movwf	___awmod@dividend
 10207  0F4F  01A3               	clrf	___awmod@dividend+1
 10208  0F50  1BA2               	btfsc	___awmod@dividend,7
 10209  0F51  03A3               	decf	___awmod@dividend+1,f
 10210  0F52  300A               	movlw	10
 10211  0F53  00A0               	movwf	___awmod@divisor
 10212  0F54  3000               	movlw	0
 10213  0F55  00A1               	movwf	___awmod@divisor+1
 10214  0F56  319F  2773  318D   	fcall	___awmod
 10215  0F59  0020               	movlb	0	; select bank0
 10216  0F5A  0821               	movf	?___awmod+1,w
 10217  0F5B  00B1               	movwf	___wmul@multiplier+1
 10218  0F5C  0820               	movf	?___awmod,w
 10219  0F5D  00B0               	movwf	___wmul@multiplier
 10220  0F5E  3003               	movlw	3
 10221  0F5F  00B2               	movwf	___wmul@multiplicand
 10222  0F60  3000               	movlw	0
 10223  0F61  00B3               	movwf	___wmul@multiplicand+1
 10224  0F62  319D  2539  318D   	fcall	___wmul
 10225  0F65  0020               	movlb	0	; select bank0
 10226  0F66  0831               	movf	?___wmul+1,w
 10227  0F67  0085               	movwf	5
 10228  0F68  0830               	movf	?___wmul,w
 10229  0F69  0084               	movwf	4
 10230  0F6A  3069               	movlw	low (__powers_| (0+32768))
 10231  0F6B  0784               	addwf	4,f
 10232  0F6C  3087               	movlw	high (__powers_| (0+32768))
 10233  0F6D  3D85               	addwfc	5,f
 10234  0F6E  3F00               	moviw [0]fsr0
 10235  0F6F  00B6               	movwf	___ftmul@f1
 10236  0F70  3F01               	moviw [1]fsr0
 10237  0F71  00B7               	movwf	___ftmul@f1+1
 10238  0F72  3F02               	moviw [2]fsr0
 10239  0F73  00B8               	movwf	___ftmul@f1+2
 10240  0F74  084B               	movf	_scale$1371,w
 10241  0F75  00B9               	movwf	___ftmul@f2
 10242  0F76  084C               	movf	_scale$1371+1,w
 10243  0F77  00BA               	movwf	___ftmul@f2+1
 10244  0F78  084D               	movf	_scale$1371+2,w
 10245  0F79  00BB               	movwf	___ftmul@f2+2
 10246  0F7A  3193  231D         	fcall	___ftmul
 10247  0F7C  0020               	movlb	0	; select bank0
 10248  0F7D  0836               	movf	?___ftmul,w
 10249  0F7E  00C6               	movwf	?_scale
 10250  0F7F  0837               	movf	?___ftmul+1,w
 10251  0F80  00C7               	movwf	?_scale+1
 10252  0F81  0838               	movf	?___ftmul+2,w
 10253  0F82  00C8               	movwf	?_scale+2
 10254  0F83  0008               	return
 10255  0F84                     l4120:	
 10256                           
 10257                           ;doprnt.c: 438: else if(scl > 10)
 10258  0F84  084E               	movf	scale@scl,w
 10259  0F85  3A80               	xorlw	128
 10260  0F86  3E75               	addlw	-139
 10261  0F87  1C03               	skipc
 10262  0F88  2FE3               	goto	l4126
 10263                           
 10264                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10265  0F89  084E               	movf	scale@scl,w
 10266  0F8A  00A2               	movwf	___awmod@dividend
 10267  0F8B  01A3               	clrf	___awmod@dividend+1
 10268  0F8C  1BA2               	btfsc	___awmod@dividend,7
 10269  0F8D  03A3               	decf	___awmod@dividend+1,f
 10270  0F8E  300A               	movlw	10
 10271  0F8F  00A0               	movwf	___awmod@divisor
 10272  0F90  3000               	movlw	0
 10273  0F91  00A1               	movwf	___awmod@divisor+1
 10274  0F92  319F  2773  318D   	fcall	___awmod
 10275  0F95  0020               	movlb	0	; select bank0
 10276  0F96  0821               	movf	?___awmod+1,w
 10277  0F97  00B1               	movwf	___wmul@multiplier+1
 10278  0F98  0820               	movf	?___awmod,w
 10279  0F99  00B0               	movwf	___wmul@multiplier
 10280  0F9A  3003               	movlw	3
 10281  0F9B  00B2               	movwf	___wmul@multiplicand
 10282  0F9C  3000               	movlw	0
 10283  0F9D  00B3               	movwf	___wmul@multiplicand+1
 10284  0F9E  319D  2539  318D   	fcall	___wmul
 10285  0FA1  0020               	movlb	0	; select bank0
 10286  0FA2  0831               	movf	?___wmul+1,w
 10287  0FA3  0085               	movwf	5
 10288  0FA4  0830               	movf	?___wmul,w
 10289  0FA5  0084               	movwf	4
 10290  0FA6  3069               	movlw	low (__powers_| (0+32768))
 10291  0FA7  0784               	addwf	4,f
 10292  0FA8  3087               	movlw	high (__powers_| (0+32768))
 10293  0FA9  3D85               	addwfc	5,f
 10294  0FAA  3F00               	moviw [0]fsr0
 10295  0FAB  00B6               	movwf	___ftmul@f1
 10296  0FAC  3F01               	moviw [1]fsr0
 10297  0FAD  00B7               	movwf	___ftmul@f1+1
 10298  0FAE  3F02               	moviw [2]fsr0
 10299  0FAF  00B8               	movwf	___ftmul@f1+2
 10300  0FB0  300A               	movlw	10
 10301  0FB1  00A7               	movwf	___awdiv@divisor
 10302  0FB2  3000               	movlw	0
 10303  0FB3  00A8               	movwf	___awdiv@divisor+1
 10304  0FB4  084E               	movf	scale@scl,w
 10305  0FB5  00A9               	movwf	___awdiv@dividend
 10306  0FB6  01AA               	clrf	___awdiv@dividend+1
 10307  0FB7  1BA9               	btfsc	___awdiv@dividend,7
 10308  0FB8  03AA               	decf	___awdiv@dividend+1,f
 10309  0FB9  3190  20BB  318D   	fcall	___awdiv
 10310  0FBC  0020               	movlb	0	; select bank0
 10311  0FBD  0827               	movf	?___awdiv,w
 10312  0FBE  3E09               	addlw	9
 10313  0FBF  00B0               	movwf	___wmul@multiplier
 10314  0FC0  3000               	movlw	0
 10315  0FC1  3D28               	addwfc	?___awdiv+1,w
 10316  0FC2  00B1               	movwf	___wmul@multiplier+1
 10317  0FC3  3003               	movlw	3
 10318  0FC4  00B2               	movwf	___wmul@multiplicand
 10319  0FC5  3000               	movlw	0
 10320  0FC6  00B3               	movwf	___wmul@multiplicand+1
 10321  0FC7  319D  2539  318D   	fcall	___wmul
 10322  0FCA  0020               	movlb	0	; select bank0
 10323  0FCB  0831               	movf	?___wmul+1,w
 10324  0FCC  0085               	movwf	5
 10325  0FCD  0830               	movf	?___wmul,w
 10326  0FCE  0084               	movwf	4
 10327  0FCF  3069               	movlw	low (__powers_| (0+32768))
 10328  0FD0  0784               	addwf	4,f
 10329  0FD1  3087               	movlw	high (__powers_| (0+32768))
 10330  0FD2  3D85               	addwfc	5,f
 10331  0FD3  3F00               	moviw [0]fsr0
 10332  0FD4  00B9               	movwf	___ftmul@f2
 10333  0FD5  3F01               	moviw [1]fsr0
 10334  0FD6  00BA               	movwf	___ftmul@f2+1
 10335  0FD7  3F02               	moviw [2]fsr0
 10336  0FD8  00BB               	movwf	___ftmul@f2+2
 10337  0FD9  3193  231D         	fcall	___ftmul
 10338  0FDB  0020               	movlb	0	; select bank0
 10339  0FDC  0836               	movf	?___ftmul,w
 10340  0FDD  00C6               	movwf	?_scale
 10341  0FDE  0837               	movf	?___ftmul+1,w
 10342  0FDF  00C7               	movwf	?_scale+1
 10343  0FE0  0838               	movf	?___ftmul+2,w
 10344  0FE1  00C8               	movwf	?_scale+2
 10345  0FE2  0008               	return
 10346  0FE3                     l4126:	
 10347                           
 10348                           ;doprnt.c: 440: return _powers_[scl];
 10349  0FE3  084E               	movf	scale@scl,w
 10350  0FE4  00C9               	movwf	??_scale
 10351  0FE5  01CA               	clrf	??_scale+1
 10352  0FE6  0849               	movf	??_scale,w
 10353  0FE7  00B0               	movwf	___wmul@multiplier
 10354  0FE8  084A               	movf	??_scale+1,w
 10355  0FE9  00B1               	movwf	___wmul@multiplier+1
 10356  0FEA  3003               	movlw	3
 10357  0FEB  00B2               	movwf	___wmul@multiplicand
 10358  0FEC  3000               	movlw	0
 10359  0FED  00B3               	movwf	___wmul@multiplicand+1
 10360  0FEE  319D  2539         	fcall	___wmul
 10361  0FF0  0020               	movlb	0	; select bank0
 10362  0FF1  0831               	movf	?___wmul+1,w
 10363  0FF2  0085               	movwf	5
 10364  0FF3  0830               	movf	?___wmul,w
 10365  0FF4  0084               	movwf	4
 10366  0FF5  3069               	movlw	low (__powers_| (0+32768))
 10367  0FF6  0784               	addwf	4,f
 10368  0FF7  3087               	movlw	high (__powers_| (0+32768))
 10369  0FF8  3D85               	addwfc	5,f
 10370  0FF9  3F00               	moviw [0]fsr0
 10371  0FFA  00C6               	movwf	?_scale
 10372  0FFB  3F01               	moviw [1]fsr0
 10373  0FFC  00C7               	movwf	?_scale+1
 10374  0FFD  3F02               	moviw [2]fsr0
 10375  0FFE  00C8               	movwf	?_scale+2
 10376  0FFF  0008               	return
 10377  1000                     __end_of_scale:	
 10378                           
 10379                           	psect	text20
 10380  1C63                     __ptext20:	
 10381 ;; *************** function _putch *****************
 10382 ;; Defined at:
 10383 ;;		line 111 in file "mcc_generated_files/eusart.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  txData          1    wreg     unsigned char 
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;  txData          1    1[BANK0 ] unsigned char 
 10388 ;; Return value:  Size  Location     Type
 10389 ;;                  1    wreg      void 
 10390 ;; Registers used:
 10391 ;;		wreg, status,2, status,0, pclath, cstack
 10392 ;; Tracked objects:
 10393 ;;		On entry : 0/0
 10394 ;;		On exit  : 0/0
 10395 ;;		Unchanged: 0/0
 10396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;Total ram usage:        1 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    4
 10404 ;; This function calls:
 10405 ;;		_EUSART_Write
 10406 ;; This function is called by:
 10407 ;;		_printf
 10408 ;;		_puts
 10409 ;;		_cputs
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           
 10414                           ;psect for function _putch
 10415  1C63                     _putch:	
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 10419                           ;putch@txData stored from wreg
 10420  1C63  0020               	movlb	0	; select bank0
 10421  1C64  00A1               	movwf	putch@txData
 10422                           
 10423                           ;eusart.c: 113: EUSART_Write(txData);
 10424  1C65  0821               	movf	putch@txData,w
 10425  1C66  319C  2481         	fcall	_EUSART_Write
 10426  1C68  0008               	return
 10427  1C69                     __end_of_putch:	
 10428                           
 10429                           	psect	text21
 10430  1C81                     __ptext21:	
 10431 ;; *************** function _EUSART_Write *****************
 10432 ;; Defined at:
 10433 ;;		line 97 in file "mcc_generated_files/eusart.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;  txData          1    wreg     unsigned char 
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  txData          1    0[BANK0 ] unsigned char 
 10438 ;; Return value:  Size  Location     Type
 10439 ;;                  1    wreg      void 
 10440 ;; Registers used:
 10441 ;;		wreg
 10442 ;; Tracked objects:
 10443 ;;		On entry : 0/0
 10444 ;;		On exit  : 0/0
 10445 ;;		Unchanged: 0/0
 10446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;Total ram usage:        1 bytes
 10452 ;; Hardware stack levels used:    1
 10453 ;; Hardware stack levels required when called:    3
 10454 ;; This function calls:
 10455 ;;		Nothing
 10456 ;; This function is called by:
 10457 ;;		_putch
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           
 10462                           ;psect for function _EUSART_Write
 10463  1C81                     _EUSART_Write:	
 10464                           
 10465                           ;incstack = 0
 10466                           ; Regs used in _EUSART_Write: [wreg]
 10467                           ;EUSART_Write@txData stored from wreg
 10468  1C81  0020               	movlb	0	; select bank0
 10469  1C82  00A0               	movwf	EUSART_Write@txData
 10470  1C83                     l31:	
 10471                           ;eusart.c: 100: {
 10472                           
 10473                           ;eusart.c: 99: while(0 == PIR3bits.TXIF)
 10474                           
 10475  1C83  002E               	movlb	14	; select bank14
 10476  1C84  1E0F               	btfss	15,4	;volatile
 10477  1C85  2C83               	goto	l31
 10478                           
 10479                           ;eusart.c: 101: }
 10480                           ;eusart.c: 103: TX1REG = txData;
 10481  1C86  0020               	movlb	0	; select bank0
 10482  1C87  0820               	movf	EUSART_Write@txData,w
 10483  1C88  0022               	movlb	2	; select bank2
 10484  1C89  009A               	movwf	26	;volatile
 10485  1C8A  0008               	return
 10486  1C8B                     __end_of_EUSART_Write:	
 10487                           
 10488                           	psect	text22
 10489  1CD0                     __ptext22:	
 10490 ;; *************** function _isdigit *****************
 10491 ;; Defined at:
 10492 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
 10493 ;; Parameters:    Size  Location     Type
 10494 ;;  c               1    wreg     unsigned char 
 10495 ;; Auto vars:     Size  Location     Type
 10496 ;;  c               1    1[BANK0 ] unsigned char 
 10497 ;; Return value:  Size  Location     Type
 10498 ;;		None               void
 10499 ;; Registers used:
 10500 ;;		wreg, status,2, status,0
 10501 ;; Tracked objects:
 10502 ;;		On entry : 0/0
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;Total ram usage:        2 bytes
 10511 ;; Hardware stack levels used:    1
 10512 ;; Hardware stack levels required when called:    3
 10513 ;; This function calls:
 10514 ;;		Nothing
 10515 ;; This function is called by:
 10516 ;;		_printf
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           
 10521                           ;psect for function _isdigit
 10522  1CD0                     _isdigit:	
 10523                           
 10524                           ;incstack = 0
 10525                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10526                           ;isdigit@c stored from wreg
 10527  1CD0  0020               	movlb	0	; select bank0
 10528  1CD1  00A1               	movwf	isdigit@c
 10529  1CD2  01A0               	clrf	_isdigit$1105
 10530  1CD3  303A               	movlw	58
 10531  1CD4  0221               	subwf	isdigit@c,w
 10532  1CD5  1803               	skipnc
 10533  1CD6  2CDD               	goto	l4138
 10534  1CD7  3030               	movlw	48
 10535  1CD8  0221               	subwf	isdigit@c,w
 10536  1CD9  1C03               	skipc
 10537  1CDA  2CDD               	goto	l4138
 10538  1CDB  01A0               	clrf	_isdigit$1105
 10539  1CDC  0AA0               	incf	_isdigit$1105,f
 10540  1CDD                     l4138:	
 10541  1CDD  0C20               	rrf	_isdigit$1105,w
 10542  1CDE  0008               	return
 10543  1CDF                     __end_of_isdigit:	
 10544                           
 10545                           	psect	text23
 10546  169A                     __ptext23:	
 10547 ;; *************** function _fround *****************
 10548 ;; Defined at:
 10549 ;;		line 409 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
 10550 ;; Parameters:    Size  Location     Type
 10551 ;;  prec            1    wreg     unsigned char 
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;  prec            1   51[BANK0 ] unsigned char 
 10554 ;; Return value:  Size  Location     Type
 10555 ;;                  3   38[BANK0 ] unsigned char 
 10556 ;; Registers used:
 10557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10558 ;; Tracked objects:
 10559 ;;		On entry : 0/0
 10560 ;;		On exit  : 0/0
 10561 ;;		Unchanged: 0/0
 10562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10563 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;Total ram usage:       14 bytes
 10568 ;; Hardware stack levels used:    1
 10569 ;; Hardware stack levels required when called:    5
 10570 ;; This function calls:
 10571 ;;		___awdiv
 10572 ;;		___awmod
 10573 ;;		___ftmul
 10574 ;;		___wmul
 10575 ;; This function is called by:
 10576 ;;		_printf
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580                           
 10581                           ;psect for function _fround
 10582  169A                     _fround:	
 10583                           
 10584                           ;incstack = 0
 10585                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10586                           ;fround@prec stored from wreg
 10587  169A  0020               	movlb	0	; select bank0
 10588  169B  00D3               	movwf	fround@prec
 10589                           
 10590                           ;doprnt.c: 413: if(prec>=110)
 10591  169C  306E               	movlw	110
 10592  169D  0253               	subwf	fround@prec,w
 10593  169E  1C03               	skipc
 10594  169F  2F5B               	goto	l4078
 10595                           
 10596                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10597  16A0  300A               	movlw	10
 10598  16A1  00A7               	movwf	___awdiv@divisor
 10599  16A2  3000               	movlw	0
 10600  16A3  00A8               	movwf	___awdiv@divisor+1
 10601  16A4  0853               	movf	fround@prec,w
 10602  16A5  00C9               	movwf	??_fround
 10603  16A6  01CA               	clrf	??_fround+1
 10604  16A7  0849               	movf	??_fround,w
 10605  16A8  00A2               	movwf	___awmod@dividend
 10606  16A9  084A               	movf	??_fround+1,w
 10607  16AA  00A3               	movwf	___awmod@dividend+1
 10608  16AB  3064               	movlw	100
 10609  16AC  00A0               	movwf	___awmod@divisor
 10610  16AD  3000               	movlw	0
 10611  16AE  00A1               	movwf	___awmod@divisor+1
 10612  16AF  319F  2773  3196   	fcall	___awmod
 10613  16B2  0020               	movlb	0	; select bank0
 10614  16B3  0821               	movf	?___awmod+1,w
 10615  16B4  00AA               	movwf	___awdiv@dividend+1
 10616  16B5  0820               	movf	?___awmod,w
 10617  16B6  00A9               	movwf	___awdiv@dividend
 10618  16B7  3190  20BB  3196   	fcall	___awdiv
 10619  16BA  0020               	movlb	0	; select bank0
 10620  16BB  0827               	movf	?___awdiv,w
 10621  16BC  3E09               	addlw	9
 10622  16BD  00B0               	movwf	___wmul@multiplier
 10623  16BE  3000               	movlw	0
 10624  16BF  3D28               	addwfc	?___awdiv+1,w
 10625  16C0  00B1               	movwf	___wmul@multiplier+1
 10626  16C1  3003               	movlw	3
 10627  16C2  00B2               	movwf	___wmul@multiplicand
 10628  16C3  3000               	movlw	0
 10629  16C4  00B3               	movwf	___wmul@multiplicand+1
 10630  16C5  319D  2539  3196   	fcall	___wmul
 10631  16C8  0020               	movlb	0	; select bank0
 10632  16C9  0831               	movf	?___wmul+1,w
 10633  16CA  0085               	movwf	5
 10634  16CB  0830               	movf	?___wmul,w
 10635  16CC  0084               	movwf	4
 10636  16CD  3090               	movlw	low (__npowers_| (0+32768))
 10637  16CE  0784               	addwf	4,f
 10638  16CF  3087               	movlw	high (__npowers_| (0+32768))
 10639  16D0  3D85               	addwfc	5,f
 10640  16D1  3F00               	moviw [0]fsr0
 10641  16D2  00B6               	movwf	___ftmul@f1
 10642  16D3  3F01               	moviw [1]fsr0
 10643  16D4  00B7               	movwf	___ftmul@f1+1
 10644  16D5  3F02               	moviw [2]fsr0
 10645  16D6  00B8               	movwf	___ftmul@f1+2
 10646  16D7  3064               	movlw	100
 10647  16D8  00A7               	movwf	___awdiv@divisor
 10648  16D9  3000               	movlw	0
 10649  16DA  00A8               	movwf	___awdiv@divisor+1
 10650  16DB  0853               	movf	fround@prec,w
 10651  16DC  00CB               	movwf	??_fround+2
 10652  16DD  01CC               	clrf	??_fround+3
 10653  16DE  084B               	movf	??_fround+2,w
 10654  16DF  00A9               	movwf	___awdiv@dividend
 10655  16E0  084C               	movf	??_fround+3,w
 10656  16E1  00AA               	movwf	___awdiv@dividend+1
 10657  16E2  3190  20BB  3196   	fcall	___awdiv
 10658  16E5  0020               	movlb	0	; select bank0
 10659  16E6  0827               	movf	?___awdiv,w
 10660  16E7  3E12               	addlw	18
 10661  16E8  00B0               	movwf	___wmul@multiplier
 10662  16E9  3000               	movlw	0
 10663  16EA  3D28               	addwfc	?___awdiv+1,w
 10664  16EB  00B1               	movwf	___wmul@multiplier+1
 10665  16EC  3003               	movlw	3
 10666  16ED  00B2               	movwf	___wmul@multiplicand
 10667  16EE  3000               	movlw	0
 10668  16EF  00B3               	movwf	___wmul@multiplicand+1
 10669  16F0  319D  2539  3196   	fcall	___wmul
 10670  16F3  0020               	movlb	0	; select bank0
 10671  16F4  0831               	movf	?___wmul+1,w
 10672  16F5  0085               	movwf	5
 10673  16F6  0830               	movf	?___wmul,w
 10674  16F7  0084               	movwf	4
 10675  16F8  3090               	movlw	low (__npowers_| (0+32768))
 10676  16F9  0784               	addwf	4,f
 10677  16FA  3087               	movlw	high (__npowers_| (0+32768))
 10678  16FB  3D85               	addwfc	5,f
 10679  16FC  3F00               	moviw [0]fsr0
 10680  16FD  00B9               	movwf	___ftmul@f2
 10681  16FE  3F01               	moviw [1]fsr0
 10682  16FF  00BA               	movwf	___ftmul@f2+1
 10683  1700  3F02               	moviw [2]fsr0
 10684  1701  00BB               	movwf	___ftmul@f2+2
 10685  1702  3193  231D  3196   	fcall	___ftmul
 10686  1705  0020               	movlb	0	; select bank0
 10687  1706  0836               	movf	?___ftmul,w
 10688  1707  00D0               	movwf	_fround$1369
 10689  1708  0837               	movf	?___ftmul+1,w
 10690  1709  00D1               	movwf	_fround$1369+1
 10691  170A  0838               	movf	?___ftmul+2,w
 10692  170B  00D2               	movwf	_fround$1369+2
 10693                           
 10694                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10695  170C  0853               	movf	fround@prec,w
 10696  170D  00C9               	movwf	??_fround
 10697  170E  01CA               	clrf	??_fround+1
 10698  170F  0849               	movf	??_fround,w
 10699  1710  00A2               	movwf	___awmod@dividend
 10700  1711  084A               	movf	??_fround+1,w
 10701  1712  00A3               	movwf	___awmod@dividend+1
 10702  1713  300A               	movlw	10
 10703  1714  00A0               	movwf	___awmod@divisor
 10704  1715  3000               	movlw	0
 10705  1716  00A1               	movwf	___awmod@divisor+1
 10706  1717  319F  2773  3196   	fcall	___awmod
 10707  171A  0020               	movlb	0	; select bank0
 10708  171B  0821               	movf	?___awmod+1,w
 10709  171C  00B1               	movwf	___wmul@multiplier+1
 10710  171D  0820               	movf	?___awmod,w
 10711  171E  00B0               	movwf	___wmul@multiplier
 10712  171F  3003               	movlw	3
 10713  1720  00B2               	movwf	___wmul@multiplicand
 10714  1721  3000               	movlw	0
 10715  1722  00B3               	movwf	___wmul@multiplicand+1
 10716  1723  319D  2539  3196   	fcall	___wmul
 10717  1726  0020               	movlb	0	; select bank0
 10718  1727  0831               	movf	?___wmul+1,w
 10719  1728  0085               	movwf	5
 10720  1729  0830               	movf	?___wmul,w
 10721  172A  0084               	movwf	4
 10722  172B  3090               	movlw	low (__npowers_| (0+32768))
 10723  172C  0784               	addwf	4,f
 10724  172D  3087               	movlw	high (__npowers_| (0+32768))
 10725  172E  3D85               	addwfc	5,f
 10726  172F  3F00               	moviw [0]fsr0
 10727  1730  00B6               	movwf	___ftmul@f1
 10728  1731  3F01               	moviw [1]fsr0
 10729  1732  00B7               	movwf	___ftmul@f1+1
 10730  1733  3F02               	moviw [2]fsr0
 10731  1734  00B8               	movwf	___ftmul@f1+2
 10732  1735  0850               	movf	_fround$1369,w
 10733  1736  00B9               	movwf	___ftmul@f2
 10734  1737  0851               	movf	_fround$1369+1,w
 10735  1738  00BA               	movwf	___ftmul@f2+1
 10736  1739  0852               	movf	_fround$1369+2,w
 10737  173A  00BB               	movwf	___ftmul@f2+2
 10738  173B  3193  231D  3196   	fcall	___ftmul
 10739  173E  0020               	movlb	0	; select bank0
 10740  173F  0836               	movf	?___ftmul,w
 10741  1740  00CD               	movwf	_fround$1370
 10742  1741  0837               	movf	?___ftmul+1,w
 10743  1742  00CE               	movwf	_fround$1370+1
 10744  1743  0838               	movf	?___ftmul+2,w
 10745  1744  00CF               	movwf	_fround$1370+2
 10746                           
 10747                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10748  1745  3000               	movlw	0
 10749  1746  00B6               	movwf	___ftmul@f1
 10750  1747  3000               	movlw	0
 10751  1748  00B7               	movwf	___ftmul@f1+1
 10752  1749  303F               	movlw	63
 10753  174A  00B8               	movwf	___ftmul@f1+2
 10754  174B  084D               	movf	_fround$1370,w
 10755  174C  00B9               	movwf	___ftmul@f2
 10756  174D  084E               	movf	_fround$1370+1,w
 10757  174E  00BA               	movwf	___ftmul@f2+1
 10758  174F  084F               	movf	_fround$1370+2,w
 10759  1750  00BB               	movwf	___ftmul@f2+2
 10760  1751  3193  231D         	fcall	___ftmul
 10761  1753  0020               	movlb	0	; select bank0
 10762  1754  0836               	movf	?___ftmul,w
 10763  1755  00C6               	movwf	?_fround
 10764  1756  0837               	movf	?___ftmul+1,w
 10765  1757  00C7               	movwf	?_fround+1
 10766  1758  0838               	movf	?___ftmul+2,w
 10767  1759  00C8               	movwf	?_fround+2
 10768  175A  0008               	return
 10769  175B                     l4078:	
 10770                           
 10771                           ;doprnt.c: 415: else if(prec > 10)
 10772  175B  300B               	movlw	11
 10773  175C  0253               	subwf	fround@prec,w
 10774  175D  1C03               	skipc
 10775  175E  2FD3               	goto	l4086
 10776                           
 10777                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10778  175F  0853               	movf	fround@prec,w
 10779  1760  00C9               	movwf	??_fround
 10780  1761  01CA               	clrf	??_fround+1
 10781  1762  0849               	movf	??_fround,w
 10782  1763  00A2               	movwf	___awmod@dividend
 10783  1764  084A               	movf	??_fround+1,w
 10784  1765  00A3               	movwf	___awmod@dividend+1
 10785  1766  300A               	movlw	10
 10786  1767  00A0               	movwf	___awmod@divisor
 10787  1768  3000               	movlw	0
 10788  1769  00A1               	movwf	___awmod@divisor+1
 10789  176A  319F  2773  3196   	fcall	___awmod
 10790  176D  0020               	movlb	0	; select bank0
 10791  176E  0821               	movf	?___awmod+1,w
 10792  176F  00B1               	movwf	___wmul@multiplier+1
 10793  1770  0820               	movf	?___awmod,w
 10794  1771  00B0               	movwf	___wmul@multiplier
 10795  1772  3003               	movlw	3
 10796  1773  00B2               	movwf	___wmul@multiplicand
 10797  1774  3000               	movlw	0
 10798  1775  00B3               	movwf	___wmul@multiplicand+1
 10799  1776  319D  2539  3196   	fcall	___wmul
 10800  1779  0020               	movlb	0	; select bank0
 10801  177A  0831               	movf	?___wmul+1,w
 10802  177B  0085               	movwf	5
 10803  177C  0830               	movf	?___wmul,w
 10804  177D  0084               	movwf	4
 10805  177E  3090               	movlw	low (__npowers_| (0+32768))
 10806  177F  0784               	addwf	4,f
 10807  1780  3087               	movlw	high (__npowers_| (0+32768))
 10808  1781  3D85               	addwfc	5,f
 10809  1782  3F00               	moviw [0]fsr0
 10810  1783  00B6               	movwf	___ftmul@f1
 10811  1784  3F01               	moviw [1]fsr0
 10812  1785  00B7               	movwf	___ftmul@f1+1
 10813  1786  3F02               	moviw [2]fsr0
 10814  1787  00B8               	movwf	___ftmul@f1+2
 10815  1788  300A               	movlw	10
 10816  1789  00A7               	movwf	___awdiv@divisor
 10817  178A  3000               	movlw	0
 10818  178B  00A8               	movwf	___awdiv@divisor+1
 10819  178C  0853               	movf	fround@prec,w
 10820  178D  00CB               	movwf	??_fround+2
 10821  178E  01CC               	clrf	??_fround+3
 10822  178F  084B               	movf	??_fround+2,w
 10823  1790  00A9               	movwf	___awdiv@dividend
 10824  1791  084C               	movf	??_fround+3,w
 10825  1792  00AA               	movwf	___awdiv@dividend+1
 10826  1793  3190  20BB  3196   	fcall	___awdiv
 10827  1796  0020               	movlb	0	; select bank0
 10828  1797  0827               	movf	?___awdiv,w
 10829  1798  3E09               	addlw	9
 10830  1799  00B0               	movwf	___wmul@multiplier
 10831  179A  3000               	movlw	0
 10832  179B  3D28               	addwfc	?___awdiv+1,w
 10833  179C  00B1               	movwf	___wmul@multiplier+1
 10834  179D  3003               	movlw	3
 10835  179E  00B2               	movwf	___wmul@multiplicand
 10836  179F  3000               	movlw	0
 10837  17A0  00B3               	movwf	___wmul@multiplicand+1
 10838  17A1  319D  2539  3196   	fcall	___wmul
 10839  17A4  0020               	movlb	0	; select bank0
 10840  17A5  0831               	movf	?___wmul+1,w
 10841  17A6  0085               	movwf	5
 10842  17A7  0830               	movf	?___wmul,w
 10843  17A8  0084               	movwf	4
 10844  17A9  3090               	movlw	low (__npowers_| (0+32768))
 10845  17AA  0784               	addwf	4,f
 10846  17AB  3087               	movlw	high (__npowers_| (0+32768))
 10847  17AC  3D85               	addwfc	5,f
 10848  17AD  3F00               	moviw [0]fsr0
 10849  17AE  00B9               	movwf	___ftmul@f2
 10850  17AF  3F01               	moviw [1]fsr0
 10851  17B0  00BA               	movwf	___ftmul@f2+1
 10852  17B1  3F02               	moviw [2]fsr0
 10853  17B2  00BB               	movwf	___ftmul@f2+2
 10854  17B3  3193  231D  3196   	fcall	___ftmul
 10855  17B6  0020               	movlb	0	; select bank0
 10856  17B7  0836               	movf	?___ftmul,w
 10857  17B8  00D0               	movwf	_fround$1369
 10858  17B9  0837               	movf	?___ftmul+1,w
 10859  17BA  00D1               	movwf	_fround$1369+1
 10860  17BB  0838               	movf	?___ftmul+2,w
 10861  17BC  00D2               	movwf	_fround$1369+2
 10862                           
 10863                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10864  17BD  3000               	movlw	0
 10865  17BE  00B6               	movwf	___ftmul@f1
 10866  17BF  3000               	movlw	0
 10867  17C0  00B7               	movwf	___ftmul@f1+1
 10868  17C1  303F               	movlw	63
 10869  17C2  00B8               	movwf	___ftmul@f1+2
 10870  17C3  0850               	movf	_fround$1369,w
 10871  17C4  00B9               	movwf	___ftmul@f2
 10872  17C5  0851               	movf	_fround$1369+1,w
 10873  17C6  00BA               	movwf	___ftmul@f2+1
 10874  17C7  0852               	movf	_fround$1369+2,w
 10875  17C8  00BB               	movwf	___ftmul@f2+2
 10876  17C9  3193  231D         	fcall	___ftmul
 10877  17CB  0020               	movlb	0	; select bank0
 10878  17CC  0836               	movf	?___ftmul,w
 10879  17CD  00C6               	movwf	?_fround
 10880  17CE  0837               	movf	?___ftmul+1,w
 10881  17CF  00C7               	movwf	?_fround+1
 10882  17D0  0838               	movf	?___ftmul+2,w
 10883  17D1  00C8               	movwf	?_fround+2
 10884  17D2  0008               	return
 10885  17D3                     l4086:	
 10886                           
 10887                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10888  17D3  3000               	movlw	0
 10889  17D4  00B6               	movwf	___ftmul@f1
 10890  17D5  3000               	movlw	0
 10891  17D6  00B7               	movwf	___ftmul@f1+1
 10892  17D7  303F               	movlw	63
 10893  17D8  00B8               	movwf	___ftmul@f1+2
 10894  17D9  0853               	movf	fround@prec,w
 10895  17DA  00C9               	movwf	??_fround
 10896  17DB  01CA               	clrf	??_fround+1
 10897  17DC  0849               	movf	??_fround,w
 10898  17DD  00B0               	movwf	___wmul@multiplier
 10899  17DE  084A               	movf	??_fround+1,w
 10900  17DF  00B1               	movwf	___wmul@multiplier+1
 10901  17E0  3003               	movlw	3
 10902  17E1  00B2               	movwf	___wmul@multiplicand
 10903  17E2  3000               	movlw	0
 10904  17E3  00B3               	movwf	___wmul@multiplicand+1
 10905  17E4  319D  2539  3196   	fcall	___wmul
 10906  17E7  0020               	movlb	0	; select bank0
 10907  17E8  0831               	movf	?___wmul+1,w
 10908  17E9  0085               	movwf	5
 10909  17EA  0830               	movf	?___wmul,w
 10910  17EB  0084               	movwf	4
 10911  17EC  3090               	movlw	low (__npowers_| (0+32768))
 10912  17ED  0784               	addwf	4,f
 10913  17EE  3087               	movlw	high (__npowers_| (0+32768))
 10914  17EF  3D85               	addwfc	5,f
 10915  17F0  3F00               	moviw [0]fsr0
 10916  17F1  00B9               	movwf	___ftmul@f2
 10917  17F2  3F01               	moviw [1]fsr0
 10918  17F3  00BA               	movwf	___ftmul@f2+1
 10919  17F4  3F02               	moviw [2]fsr0
 10920  17F5  00BB               	movwf	___ftmul@f2+2
 10921  17F6  3193  231D         	fcall	___ftmul
 10922  17F8  0020               	movlb	0	; select bank0
 10923  17F9  0836               	movf	?___ftmul,w
 10924  17FA  00C6               	movwf	?_fround
 10925  17FB  0837               	movf	?___ftmul+1,w
 10926  17FC  00C7               	movwf	?_fround+1
 10927  17FD  0838               	movf	?___ftmul+2,w
 10928  17FE  00C8               	movwf	?_fround+2
 10929  17FF  0008               	return
 10930  1800                     __end_of_fround:	
 10931                           
 10932                           	psect	text24
 10933  1D39                     __ptext24:	
 10934 ;; *************** function ___wmul *****************
 10935 ;; Defined at:
 10936 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;  multiplier      2   16[BANK0 ] unsigned int 
 10939 ;;  multiplicand    2   18[BANK0 ] unsigned int 
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;  product         2   20[BANK0 ] unsigned int 
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  2   16[BANK0 ] unsigned int 
 10944 ;; Registers used:
 10945 ;;		wreg, status,2, status,0
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10951 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;Total ram usage:        6 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    3
 10958 ;; This function calls:
 10959 ;;		Nothing
 10960 ;; This function is called by:
 10961 ;;		_EMC1001_PrintInfo
 10962 ;;		_EMC1001_PrintTemp
 10963 ;;		_fround
 10964 ;;		_scale
 10965 ;;		_printf
 10966 ;; This function uses a non-reentrant model
 10967 ;;
 10968                           
 10969                           
 10970                           ;psect for function ___wmul
 10971  1D39                     ___wmul:	
 10972                           
 10973                           ;incstack = 0
 10974                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10975  1D39  0020               	movlb	0	; select bank0
 10976  1D3A  01B4               	clrf	___wmul@product
 10977  1D3B  01B5               	clrf	___wmul@product+1
 10978  1D3C                     l4054:	
 10979  1D3C  1C30               	btfss	___wmul@multiplier,0
 10980  1D3D  2D42               	goto	l658
 10981  1D3E  0832               	movf	___wmul@multiplicand,w
 10982  1D3F  07B4               	addwf	___wmul@product,f
 10983  1D40  0833               	movf	___wmul@multiplicand+1,w
 10984  1D41  3DB5               	addwfc	___wmul@product+1,f
 10985  1D42                     l658:	
 10986  1D42  3001               	movlw	1
 10987  1D43                     u5455:	
 10988  1D43  35B2               	lslf	___wmul@multiplicand,f
 10989  1D44  0DB3               	rlf	___wmul@multiplicand+1,f
 10990  1D45  0B89               	decfsz	9,f
 10991  1D46  2D43               	goto	u5455
 10992  1D47  3001               	movlw	1
 10993  1D48                     u5465:	
 10994  1D48  36B1               	lsrf	___wmul@multiplier+1,f
 10995  1D49  0CB0               	rrf	___wmul@multiplier,f
 10996  1D4A  0B89               	decfsz	9,f
 10997  1D4B  2D48               	goto	u5465
 10998  1D4C  0830               	movf	___wmul@multiplier,w
 10999  1D4D  0431               	iorwf	___wmul@multiplier+1,w
 11000  1D4E  1D03               	btfss	3,2
 11001  1D4F  2D3C               	goto	l4054
 11002  1D50  0835               	movf	___wmul@product+1,w
 11003  1D51  00B1               	movwf	?___wmul+1
 11004  1D52  0834               	movf	___wmul@product,w
 11005  1D53  00B0               	movwf	?___wmul
 11006  1D54  0008               	return
 11007  1D55                     __end_of___wmul:	
 11008                           
 11009                           	psect	text25
 11010  131D                     __ptext25:	
 11011 ;; *************** function ___ftmul *****************
 11012 ;; Defined at:
 11013 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/ftmul.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;  f1              3   22[BANK0 ] float 
 11016 ;;  f2              3   25[BANK0 ] float 
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
 11019 ;;  sign            1   37[BANK0 ] unsigned char 
 11020 ;;  cntr            1   36[BANK0 ] unsigned char 
 11021 ;;  exp             1   32[BANK0 ] unsigned char 
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  3   22[BANK0 ] float 
 11024 ;; Registers used:
 11025 ;;		wreg, status,2, status,0, pclath, cstack
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11031 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;Total ram usage:       16 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; Hardware stack levels required when called:    4
 11038 ;; This function calls:
 11039 ;;		___ftpack
 11040 ;; This function is called by:
 11041 ;;		_EMC1001_PrintInfo
 11042 ;;		_fround
 11043 ;;		_scale
 11044 ;;		_printf
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           
 11049                           ;psect for function ___ftmul
 11050  131D                     ___ftmul:	
 11051                           
 11052                           ;incstack = 0
 11053                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11054  131D  0020               	movlb	0	; select bank0
 11055  131E  0836               	movf	___ftmul@f1,w
 11056  131F  00BC               	movwf	??___ftmul
 11057  1320  0837               	movf	___ftmul@f1+1,w
 11058  1321  00BD               	movwf	??___ftmul+1
 11059  1322  0838               	movf	___ftmul@f1+2,w
 11060  1323  00BE               	movwf	??___ftmul+2
 11061  1324  1003               	clrc
 11062  1325  0D3D               	rlf	??___ftmul+1,w
 11063  1326  0D3E               	rlf	??___ftmul+2,w
 11064  1327  00BF               	movwf	??___ftmul+3
 11065  1328  083F               	movf	??___ftmul+3,w
 11066  1329  00C0               	movwf	___ftmul@exp
 11067  132A  0840               	movf	___ftmul@exp,w
 11068  132B  1D03               	btfss	3,2
 11069  132C  2B34               	goto	l2804
 11070  132D  3000               	movlw	0
 11071  132E  00B6               	movwf	?___ftmul
 11072  132F  3000               	movlw	0
 11073  1330  00B7               	movwf	?___ftmul+1
 11074  1331  3000               	movlw	0
 11075  1332  00B8               	movwf	?___ftmul+2
 11076  1333  0008               	return
 11077  1334                     l2804:	
 11078  1334  0839               	movf	___ftmul@f2,w
 11079  1335  00BC               	movwf	??___ftmul
 11080  1336  083A               	movf	___ftmul@f2+1,w
 11081  1337  00BD               	movwf	??___ftmul+1
 11082  1338  083B               	movf	___ftmul@f2+2,w
 11083  1339  00BE               	movwf	??___ftmul+2
 11084  133A  1003               	clrc
 11085  133B  0D3D               	rlf	??___ftmul+1,w
 11086  133C  0D3E               	rlf	??___ftmul+2,w
 11087  133D  00BF               	movwf	??___ftmul+3
 11088  133E  083F               	movf	??___ftmul+3,w
 11089  133F  00C5               	movwf	___ftmul@sign
 11090  1340  0845               	movf	___ftmul@sign,w
 11091  1341  1D03               	btfss	3,2
 11092  1342  2B4A               	goto	l2810
 11093  1343  3000               	movlw	0
 11094  1344  00B6               	movwf	?___ftmul
 11095  1345  3000               	movlw	0
 11096  1346  00B7               	movwf	?___ftmul+1
 11097  1347  3000               	movlw	0
 11098  1348  00B8               	movwf	?___ftmul+2
 11099  1349  0008               	return
 11100  134A                     l2810:	
 11101  134A  0845               	movf	___ftmul@sign,w
 11102  134B  3E7B               	addlw	123
 11103  134C  00BC               	movwf	??___ftmul
 11104  134D  083C               	movf	??___ftmul,w
 11105  134E  07C0               	addwf	___ftmul@exp,f
 11106  134F  0836               	movf	___ftmul@f1,w
 11107  1350  00BC               	movwf	??___ftmul
 11108  1351  0837               	movf	___ftmul@f1+1,w
 11109  1352  00BD               	movwf	??___ftmul+1
 11110  1353  0838               	movf	___ftmul@f1+2,w
 11111  1354  00BE               	movwf	??___ftmul+2
 11112  1355  3010               	movlw	16
 11113  1356                     u3345:	
 11114  1356  36BE               	lsrf	??___ftmul+2,f
 11115  1357  0CBD               	rrf	??___ftmul+1,f
 11116  1358  0CBC               	rrf	??___ftmul,f
 11117  1359  0B89               	decfsz	9,f
 11118  135A  2B56               	goto	u3345
 11119  135B  083C               	movf	??___ftmul,w
 11120  135C  00BF               	movwf	??___ftmul+3
 11121  135D  083F               	movf	??___ftmul+3,w
 11122  135E  00C5               	movwf	___ftmul@sign
 11123  135F  0839               	movf	___ftmul@f2,w
 11124  1360  00BC               	movwf	??___ftmul
 11125  1361  083A               	movf	___ftmul@f2+1,w
 11126  1362  00BD               	movwf	??___ftmul+1
 11127  1363  083B               	movf	___ftmul@f2+2,w
 11128  1364  00BE               	movwf	??___ftmul+2
 11129  1365  3010               	movlw	16
 11130  1366                     u3355:	
 11131  1366  36BE               	lsrf	??___ftmul+2,f
 11132  1367  0CBD               	rrf	??___ftmul+1,f
 11133  1368  0CBC               	rrf	??___ftmul,f
 11134  1369  0B89               	decfsz	9,f
 11135  136A  2B66               	goto	u3355
 11136  136B  083C               	movf	??___ftmul,w
 11137  136C  00BF               	movwf	??___ftmul+3
 11138  136D  083F               	movf	??___ftmul+3,w
 11139  136E  06C5               	xorwf	___ftmul@sign,f
 11140  136F  3080               	movlw	128
 11141  1370  00BC               	movwf	??___ftmul
 11142  1371  083C               	movf	??___ftmul,w
 11143  1372  05C5               	andwf	___ftmul@sign,f
 11144  1373  17B7               	bsf	___ftmul@f1+1,7
 11145  1374  17BA               	bsf	___ftmul@f2+1,7
 11146  1375  30FF               	movlw	255
 11147  1376  05B9               	andwf	___ftmul@f2,f
 11148  1377  30FF               	movlw	255
 11149  1378  05BA               	andwf	___ftmul@f2+1,f
 11150  1379  3000               	movlw	0
 11151  137A  05BB               	andwf	___ftmul@f2+2,f
 11152  137B  3000               	movlw	0
 11153  137C  00C1               	movwf	___ftmul@f3_as_product
 11154  137D  3000               	movlw	0
 11155  137E  00C2               	movwf	___ftmul@f3_as_product+1
 11156  137F  3000               	movlw	0
 11157  1380  00C3               	movwf	___ftmul@f3_as_product+2
 11158  1381  3007               	movlw	7
 11159  1382  00BC               	movwf	??___ftmul
 11160  1383  083C               	movf	??___ftmul,w
 11161  1384  00C4               	movwf	___ftmul@cntr
 11162  1385                     l2822:	
 11163  1385  1C36               	btfss	___ftmul@f1,0
 11164  1386  2B8D               	goto	l2826
 11165  1387  0839               	movf	___ftmul@f2,w
 11166  1388  07C1               	addwf	___ftmul@f3_as_product,f
 11167  1389  083A               	movf	___ftmul@f2+1,w
 11168  138A  3DC2               	addwfc	___ftmul@f3_as_product+1,f
 11169  138B  083B               	movf	___ftmul@f2+2,w
 11170  138C  3DC3               	addwfc	___ftmul@f3_as_product+2,f
 11171  138D                     l2826:	
 11172  138D  3001               	movlw	1
 11173  138E                     u3375:	
 11174  138E  36B8               	lsrf	___ftmul@f1+2,f
 11175  138F  0CB7               	rrf	___ftmul@f1+1,f
 11176  1390  0CB6               	rrf	___ftmul@f1,f
 11177  1391  0B89               	decfsz	9,f
 11178  1392  2B8E               	goto	u3375
 11179  1393  3001               	movlw	1
 11180  1394                     u3385:	
 11181  1394  35B9               	lslf	___ftmul@f2,f
 11182  1395  0DBA               	rlf	___ftmul@f2+1,f
 11183  1396  0DBB               	rlf	___ftmul@f2+2,f
 11184  1397  0B89               	decfsz	9,f
 11185  1398  2B94               	goto	u3385
 11186  1399  3001               	movlw	1
 11187  139A  02C4               	subwf	___ftmul@cntr,f
 11188  139B  1D03               	btfss	3,2
 11189  139C  2B85               	goto	l2822
 11190  139D  3009               	movlw	9
 11191  139E  00BC               	movwf	??___ftmul
 11192  139F  083C               	movf	??___ftmul,w
 11193  13A0  00C4               	movwf	___ftmul@cntr
 11194  13A1                     l2834:	
 11195  13A1  1C36               	btfss	___ftmul@f1,0
 11196  13A2  2BA9               	goto	l2838
 11197  13A3  0839               	movf	___ftmul@f2,w
 11198  13A4  07C1               	addwf	___ftmul@f3_as_product,f
 11199  13A5  083A               	movf	___ftmul@f2+1,w
 11200  13A6  3DC2               	addwfc	___ftmul@f3_as_product+1,f
 11201  13A7  083B               	movf	___ftmul@f2+2,w
 11202  13A8  3DC3               	addwfc	___ftmul@f3_as_product+2,f
 11203  13A9                     l2838:	
 11204  13A9  3001               	movlw	1
 11205  13AA                     u3415:	
 11206  13AA  36B8               	lsrf	___ftmul@f1+2,f
 11207  13AB  0CB7               	rrf	___ftmul@f1+1,f
 11208  13AC  0CB6               	rrf	___ftmul@f1,f
 11209  13AD  0B89               	decfsz	9,f
 11210  13AE  2BAA               	goto	u3415
 11211  13AF  3001               	movlw	1
 11212  13B0                     u3425:	
 11213  13B0  36C3               	lsrf	___ftmul@f3_as_product+2,f
 11214  13B1  0CC2               	rrf	___ftmul@f3_as_product+1,f
 11215  13B2  0CC1               	rrf	___ftmul@f3_as_product,f
 11216  13B3  0B89               	decfsz	9,f
 11217  13B4  2BB0               	goto	u3425
 11218  13B5  3001               	movlw	1
 11219  13B6  02C4               	subwf	___ftmul@cntr,f
 11220  13B7  1D03               	btfss	3,2
 11221  13B8  2BA1               	goto	l2834
 11222  13B9  0841               	movf	___ftmul@f3_as_product,w
 11223  13BA  00A0               	movwf	___ftpack@arg
 11224  13BB  0842               	movf	___ftmul@f3_as_product+1,w
 11225  13BC  00A1               	movwf	___ftpack@arg+1
 11226  13BD  0843               	movf	___ftmul@f3_as_product+2,w
 11227  13BE  00A2               	movwf	___ftpack@arg+2
 11228  13BF  0840               	movf	___ftmul@exp,w
 11229  13C0  00BC               	movwf	??___ftmul
 11230  13C1  083C               	movf	??___ftmul,w
 11231  13C2  00A3               	movwf	___ftpack@exp
 11232  13C3  0845               	movf	___ftmul@sign,w
 11233  13C4  00BD               	movwf	??___ftmul+1
 11234  13C5  083D               	movf	??___ftmul+1,w
 11235  13C6  00A4               	movwf	___ftpack@sign
 11236  13C7  3191  21B3         	fcall	___ftpack
 11237  13C9  0020               	movlb	0	; select bank0
 11238  13CA  0820               	movf	?___ftpack,w
 11239  13CB  00B6               	movwf	?___ftmul
 11240  13CC  0821               	movf	?___ftpack+1,w
 11241  13CD  00B7               	movwf	?___ftmul+1
 11242  13CE  0822               	movf	?___ftpack+2,w
 11243  13CF  00B8               	movwf	?___ftmul+2
 11244  13D0  0008               	return
 11245  13D1                     __end_of___ftmul:	
 11246                           
 11247                           	psect	text26
 11248  1F73                     __ptext26:	
 11249 ;; *************** function ___awmod *****************
 11250 ;; Defined at:
 11251 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;  divisor         2    0[BANK0 ] int 
 11254 ;;  dividend        2    2[BANK0 ] int 
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  sign            1    6[BANK0 ] unsigned char 
 11257 ;;  counter         1    5[BANK0 ] unsigned char 
 11258 ;; Return value:  Size  Location     Type
 11259 ;;                  2    0[BANK0 ] int 
 11260 ;; Registers used:
 11261 ;;		wreg, status,2, status,0
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;Total ram usage:        7 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    3
 11274 ;; This function calls:
 11275 ;;		Nothing
 11276 ;; This function is called by:
 11277 ;;		_fround
 11278 ;;		_scale
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           
 11283                           ;psect for function ___awmod
 11284  1F73                     ___awmod:	
 11285                           
 11286                           ;incstack = 0
 11287                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11288  1F73  0020               	movlb	0	; select bank0
 11289  1F74  01A6               	clrf	___awmod@sign
 11290  1F75  1FA3               	btfss	___awmod@dividend+1,7
 11291  1F76  2F7E               	goto	l2698
 11292  1F77  09A2               	comf	___awmod@dividend,f
 11293  1F78  09A3               	comf	___awmod@dividend+1,f
 11294  1F79  0AA2               	incf	___awmod@dividend,f
 11295  1F7A  1903               	skipnz
 11296  1F7B  0AA3               	incf	___awmod@dividend+1,f
 11297  1F7C  01A6               	clrf	___awmod@sign
 11298  1F7D  0AA6               	incf	___awmod@sign,f
 11299  1F7E                     l2698:	
 11300  1F7E  1FA1               	btfss	___awmod@divisor+1,7
 11301  1F7F  2F85               	goto	l2702
 11302  1F80  09A0               	comf	___awmod@divisor,f
 11303  1F81  09A1               	comf	___awmod@divisor+1,f
 11304  1F82  0AA0               	incf	___awmod@divisor,f
 11305  1F83  1903               	skipnz
 11306  1F84  0AA1               	incf	___awmod@divisor+1,f
 11307  1F85                     l2702:	
 11308  1F85  0820               	movf	___awmod@divisor,w
 11309  1F86  0421               	iorwf	___awmod@divisor+1,w
 11310  1F87  1903               	btfsc	3,2
 11311  1F88  2FAC               	goto	l2720
 11312  1F89  01A5               	clrf	___awmod@counter
 11313  1F8A  0AA5               	incf	___awmod@counter,f
 11314  1F8B                     l2710:	
 11315  1F8B  1BA1               	btfsc	___awmod@divisor+1,7
 11316  1F8C  2F97               	goto	l2712
 11317  1F8D  3001               	movlw	1
 11318  1F8E                     u3035:	
 11319  1F8E  35A0               	lslf	___awmod@divisor,f
 11320  1F8F  0DA1               	rlf	___awmod@divisor+1,f
 11321  1F90  0B89               	decfsz	9,f
 11322  1F91  2F8E               	goto	u3035
 11323  1F92  3001               	movlw	1
 11324  1F93  00A4               	movwf	??___awmod
 11325  1F94  0824               	movf	??___awmod,w
 11326  1F95  07A5               	addwf	___awmod@counter,f
 11327  1F96  2F8B               	goto	l2710
 11328  1F97                     l2712:	
 11329  1F97  0821               	movf	___awmod@divisor+1,w
 11330  1F98  0223               	subwf	___awmod@dividend+1,w
 11331  1F99  1D03               	skipz
 11332  1F9A  2F9D               	goto	u3055
 11333  1F9B  0820               	movf	___awmod@divisor,w
 11334  1F9C  0222               	subwf	___awmod@dividend,w
 11335  1F9D                     u3055:	
 11336  1F9D  1C03               	skipc
 11337  1F9E  2FA3               	goto	l2716
 11338  1F9F  0820               	movf	___awmod@divisor,w
 11339  1FA0  02A2               	subwf	___awmod@dividend,f
 11340  1FA1  0821               	movf	___awmod@divisor+1,w
 11341  1FA2  3BA3               	subwfb	___awmod@dividend+1,f
 11342  1FA3                     l2716:	
 11343  1FA3  3001               	movlw	1
 11344  1FA4                     u3065:	
 11345  1FA4  36A1               	lsrf	___awmod@divisor+1,f
 11346  1FA5  0CA0               	rrf	___awmod@divisor,f
 11347  1FA6  0B89               	decfsz	9,f
 11348  1FA7  2FA4               	goto	u3065
 11349  1FA8  3001               	movlw	1
 11350  1FA9  02A5               	subwf	___awmod@counter,f
 11351  1FAA  1D03               	btfss	3,2
 11352  1FAB  2F97               	goto	l2712
 11353  1FAC                     l2720:	
 11354  1FAC  0826               	movf	___awmod@sign,w
 11355  1FAD  1903               	btfsc	3,2
 11356  1FAE  2FB4               	goto	l2724
 11357  1FAF  09A2               	comf	___awmod@dividend,f
 11358  1FB0  09A3               	comf	___awmod@dividend+1,f
 11359  1FB1  0AA2               	incf	___awmod@dividend,f
 11360  1FB2  1903               	skipnz
 11361  1FB3  0AA3               	incf	___awmod@dividend+1,f
 11362  1FB4                     l2724:	
 11363  1FB4  0823               	movf	___awmod@dividend+1,w
 11364  1FB5  00A1               	movwf	?___awmod+1
 11365  1FB6  0822               	movf	___awmod@dividend,w
 11366  1FB7  00A0               	movwf	?___awmod
 11367  1FB8  0008               	return
 11368  1FB9                     __end_of___awmod:	
 11369                           
 11370                           	psect	text27
 11371  10BB                     __ptext27:	
 11372 ;; *************** function ___awdiv *****************
 11373 ;; Defined at:
 11374 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/awdiv.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;  divisor         2    7[BANK0 ] int 
 11377 ;;  dividend        2    9[BANK0 ] int 
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;  quotient        2   14[BANK0 ] int 
 11380 ;;  sign            1   13[BANK0 ] unsigned char 
 11381 ;;  counter         1   12[BANK0 ] unsigned char 
 11382 ;; Return value:  Size  Location     Type
 11383 ;;                  2    7[BANK0 ] int 
 11384 ;; Registers used:
 11385 ;;		wreg, status,2, status,0
 11386 ;; Tracked objects:
 11387 ;;		On entry : 0/0
 11388 ;;		On exit  : 0/0
 11389 ;;		Unchanged: 0/0
 11390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;Total ram usage:        9 bytes
 11396 ;; Hardware stack levels used:    1
 11397 ;; Hardware stack levels required when called:    3
 11398 ;; This function calls:
 11399 ;;		Nothing
 11400 ;; This function is called by:
 11401 ;;		_EMC1001_SetTempHighLimit
 11402 ;;		_EMC1001_SetTempLowLimit
 11403 ;;		_fround
 11404 ;;		_scale
 11405 ;;		_printf
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           
 11410                           ;psect for function ___awdiv
 11411  10BB                     ___awdiv:	
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11415  10BB  0020               	movlb	0	; select bank0
 11416  10BC  01AD               	clrf	___awdiv@sign
 11417  10BD  1FA8               	btfss	___awdiv@divisor+1,7
 11418  10BE  28C6               	goto	l2654
 11419  10BF  09A7               	comf	___awdiv@divisor,f
 11420  10C0  09A8               	comf	___awdiv@divisor+1,f
 11421  10C1  0AA7               	incf	___awdiv@divisor,f
 11422  10C2  1903               	skipnz
 11423  10C3  0AA8               	incf	___awdiv@divisor+1,f
 11424  10C4  01AD               	clrf	___awdiv@sign
 11425  10C5  0AAD               	incf	___awdiv@sign,f
 11426  10C6                     l2654:	
 11427  10C6  1FAA               	btfss	___awdiv@dividend+1,7
 11428  10C7  28D1               	goto	l2660
 11429  10C8  09A9               	comf	___awdiv@dividend,f
 11430  10C9  09AA               	comf	___awdiv@dividend+1,f
 11431  10CA  0AA9               	incf	___awdiv@dividend,f
 11432  10CB  1903               	skipnz
 11433  10CC  0AAA               	incf	___awdiv@dividend+1,f
 11434  10CD  3001               	movlw	1
 11435  10CE  00AB               	movwf	??___awdiv
 11436  10CF  082B               	movf	??___awdiv,w
 11437  10D0  06AD               	xorwf	___awdiv@sign,f
 11438  10D1                     l2660:	
 11439  10D1  01AE               	clrf	___awdiv@quotient
 11440  10D2  01AF               	clrf	___awdiv@quotient+1
 11441  10D3  0827               	movf	___awdiv@divisor,w
 11442  10D4  0428               	iorwf	___awdiv@divisor+1,w
 11443  10D5  1903               	btfsc	3,2
 11444  10D6  2900               	goto	l2682
 11445  10D7  01AC               	clrf	___awdiv@counter
 11446  10D8  0AAC               	incf	___awdiv@counter,f
 11447  10D9                     l2670:	
 11448  10D9  1BA8               	btfsc	___awdiv@divisor+1,7
 11449  10DA  28E5               	goto	l2672
 11450  10DB  3001               	movlw	1
 11451  10DC                     u2935:	
 11452  10DC  35A7               	lslf	___awdiv@divisor,f
 11453  10DD  0DA8               	rlf	___awdiv@divisor+1,f
 11454  10DE  0B89               	decfsz	9,f
 11455  10DF  28DC               	goto	u2935
 11456  10E0  3001               	movlw	1
 11457  10E1  00AB               	movwf	??___awdiv
 11458  10E2  082B               	movf	??___awdiv,w
 11459  10E3  07AC               	addwf	___awdiv@counter,f
 11460  10E4  28D9               	goto	l2670
 11461  10E5                     l2672:	
 11462  10E5  3001               	movlw	1
 11463  10E6                     u2955:	
 11464  10E6  35AE               	lslf	___awdiv@quotient,f
 11465  10E7  0DAF               	rlf	___awdiv@quotient+1,f
 11466  10E8  0B89               	decfsz	9,f
 11467  10E9  28E6               	goto	u2955
 11468  10EA  0828               	movf	___awdiv@divisor+1,w
 11469  10EB  022A               	subwf	___awdiv@dividend+1,w
 11470  10EC  1D03               	skipz
 11471  10ED  28F0               	goto	u2965
 11472  10EE  0827               	movf	___awdiv@divisor,w
 11473  10EF  0229               	subwf	___awdiv@dividend,w
 11474  10F0                     u2965:	
 11475  10F0  1C03               	skipc
 11476  10F1  28F7               	goto	l2678
 11477  10F2  0827               	movf	___awdiv@divisor,w
 11478  10F3  02A9               	subwf	___awdiv@dividend,f
 11479  10F4  0828               	movf	___awdiv@divisor+1,w
 11480  10F5  3BAA               	subwfb	___awdiv@dividend+1,f
 11481  10F6  142E               	bsf	___awdiv@quotient,0
 11482  10F7                     l2678:	
 11483  10F7  3001               	movlw	1
 11484  10F8                     u2975:	
 11485  10F8  36A8               	lsrf	___awdiv@divisor+1,f
 11486  10F9  0CA7               	rrf	___awdiv@divisor,f
 11487  10FA  0B89               	decfsz	9,f
 11488  10FB  28F8               	goto	u2975
 11489  10FC  3001               	movlw	1
 11490  10FD  02AC               	subwf	___awdiv@counter,f
 11491  10FE  1D03               	btfss	3,2
 11492  10FF  28E5               	goto	l2672
 11493  1100                     l2682:	
 11494  1100  082D               	movf	___awdiv@sign,w
 11495  1101  1903               	btfsc	3,2
 11496  1102  2908               	goto	l2686
 11497  1103  09AE               	comf	___awdiv@quotient,f
 11498  1104  09AF               	comf	___awdiv@quotient+1,f
 11499  1105  0AAE               	incf	___awdiv@quotient,f
 11500  1106  1903               	skipnz
 11501  1107  0AAF               	incf	___awdiv@quotient+1,f
 11502  1108                     l2686:	
 11503  1108  082F               	movf	___awdiv@quotient+1,w
 11504  1109  00A8               	movwf	?___awdiv+1
 11505  110A  082E               	movf	___awdiv@quotient,w
 11506  110B  00A7               	movwf	?___awdiv
 11507  110C  0008               	return
 11508  110D                     __end_of___awdiv:	
 11509                           
 11510                           	psect	text28
 11511  13D1                     __ptext28:	
 11512 ;; *************** function __tdiv_to_l_ *****************
 11513 ;; Defined at:
 11514 ;;		line 60 in file "/opt/microchip/xc8/v1.41/sources/common/ftdivl.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  f1              3    0[BANK0 ] float 
 11517 ;;  f2              3    3[BANK0 ] float 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;  quot            4   10[BANK0 ] unsigned long 
 11520 ;;  exp1            1   15[BANK0 ] unsigned char 
 11521 ;;  cntr            1   14[BANK0 ] unsigned char 
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  4    0[BANK0 ] unsigned long 
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11531 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;Total ram usage:       16 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    3
 11538 ;; This function calls:
 11539 ;;		Nothing
 11540 ;; This function is called by:
 11541 ;;		_printf
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           
 11546                           ;psect for function __tdiv_to_l_
 11547  13D1                     __tdiv_to_l_:	
 11548                           
 11549                           ;incstack = 0
 11550                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
 11551  13D1  0020               	movlb	0	; select bank0
 11552  13D2  0820               	movf	__tdiv_to_l_@f1,w
 11553  13D3  00A6               	movwf	??__tdiv_to_l_
 11554  13D4  0821               	movf	__tdiv_to_l_@f1+1,w
 11555  13D5  00A7               	movwf	??__tdiv_to_l_+1
 11556  13D6  0822               	movf	__tdiv_to_l_@f1+2,w
 11557  13D7  00A8               	movwf	??__tdiv_to_l_+2
 11558  13D8  1003               	clrc
 11559  13D9  0D27               	rlf	??__tdiv_to_l_+1,w
 11560  13DA  0D28               	rlf	??__tdiv_to_l_+2,w
 11561  13DB  00A9               	movwf	??__tdiv_to_l_+3
 11562  13DC  0829               	movf	??__tdiv_to_l_+3,w
 11563  13DD  00AF               	movwf	__tdiv_to_l_@exp1
 11564  13DE  082F               	movf	__tdiv_to_l_@exp1,w
 11565  13DF  1D03               	btfss	3,2
 11566  13E0  2BEA               	goto	l2956
 11567  13E1  3000               	movlw	0
 11568  13E2  00A3               	movwf	?__tdiv_to_l_+3
 11569  13E3  3000               	movlw	0
 11570  13E4  00A2               	movwf	?__tdiv_to_l_+2
 11571  13E5  3000               	movlw	0
 11572  13E6  00A1               	movwf	?__tdiv_to_l_+1
 11573  13E7  3000               	movlw	0
 11574  13E8  00A0               	movwf	?__tdiv_to_l_
 11575  13E9  0008               	return
 11576  13EA                     l2956:	
 11577  13EA  0823               	movf	__tdiv_to_l_@f2,w
 11578  13EB  00A6               	movwf	??__tdiv_to_l_
 11579  13EC  0824               	movf	__tdiv_to_l_@f2+1,w
 11580  13ED  00A7               	movwf	??__tdiv_to_l_+1
 11581  13EE  0825               	movf	__tdiv_to_l_@f2+2,w
 11582  13EF  00A8               	movwf	??__tdiv_to_l_+2
 11583  13F0  1003               	clrc
 11584  13F1  0D27               	rlf	??__tdiv_to_l_+1,w
 11585  13F2  0D28               	rlf	??__tdiv_to_l_+2,w
 11586  13F3  00A9               	movwf	??__tdiv_to_l_+3
 11587  13F4  0829               	movf	??__tdiv_to_l_+3,w
 11588  13F5  00AE               	movwf	__tdiv_to_l_@cntr
 11589  13F6  082E               	movf	__tdiv_to_l_@cntr,w
 11590  13F7  1D03               	btfss	3,2
 11591  13F8  2C02               	goto	l893
 11592  13F9  3000               	movlw	0
 11593  13FA  00A3               	movwf	?__tdiv_to_l_+3
 11594  13FB  3000               	movlw	0
 11595  13FC  00A2               	movwf	?__tdiv_to_l_+2
 11596  13FD  3000               	movlw	0
 11597  13FE  00A1               	movwf	?__tdiv_to_l_+1
 11598  13FF  3000               	movlw	0
 11599  1400  00A0               	movwf	?__tdiv_to_l_
 11600  1401  0008               	return
 11601  1402                     l893:	
 11602  1402  17A1               	bsf	__tdiv_to_l_@f1+1,7
 11603  1403  30FF               	movlw	255
 11604  1404  05A0               	andwf	__tdiv_to_l_@f1,f
 11605  1405  30FF               	movlw	255
 11606  1406  05A1               	andwf	__tdiv_to_l_@f1+1,f
 11607  1407  3000               	movlw	0
 11608  1408  05A2               	andwf	__tdiv_to_l_@f1+2,f
 11609  1409  17A4               	bsf	__tdiv_to_l_@f2+1,7
 11610  140A  30FF               	movlw	255
 11611  140B  05A3               	andwf	__tdiv_to_l_@f2,f
 11612  140C  30FF               	movlw	255
 11613  140D  05A4               	andwf	__tdiv_to_l_@f2+1,f
 11614  140E  3000               	movlw	0
 11615  140F  05A5               	andwf	__tdiv_to_l_@f2+2,f
 11616  1410  3000               	movlw	0
 11617  1411  00AD               	movwf	__tdiv_to_l_@quot+3
 11618  1412  3000               	movlw	0
 11619  1413  00AC               	movwf	__tdiv_to_l_@quot+2
 11620  1414  3000               	movlw	0
 11621  1415  00AB               	movwf	__tdiv_to_l_@quot+1
 11622  1416  3000               	movlw	0
 11623  1417  00AA               	movwf	__tdiv_to_l_@quot
 11624  1418  307F               	movlw	127
 11625  1419  02AF               	subwf	__tdiv_to_l_@exp1,f
 11626  141A  3098               	movlw	152
 11627  141B  072E               	addwf	__tdiv_to_l_@cntr,w
 11628  141C  00A6               	movwf	??__tdiv_to_l_
 11629  141D  0826               	movf	??__tdiv_to_l_,w
 11630  141E  02AF               	subwf	__tdiv_to_l_@exp1,f
 11631  141F  3018               	movlw	24
 11632  1420  00A6               	movwf	??__tdiv_to_l_
 11633  1421  0826               	movf	??__tdiv_to_l_,w
 11634  1422  00AE               	movwf	__tdiv_to_l_@cntr
 11635  1423                     l2970:	
 11636  1423  3001               	movlw	1
 11637  1424                     u3605:	
 11638  1424  35AA               	lslf	__tdiv_to_l_@quot,f
 11639  1425  0DAB               	rlf	__tdiv_to_l_@quot+1,f
 11640  1426  0DAC               	rlf	__tdiv_to_l_@quot+2,f
 11641  1427  0DAD               	rlf	__tdiv_to_l_@quot+3,f
 11642  1428  0B89               	decfsz	9,f
 11643  1429  2C24               	goto	u3605
 11644  142A  0825               	movf	__tdiv_to_l_@f2+2,w
 11645  142B  0222               	subwf	__tdiv_to_l_@f1+2,w
 11646  142C  1D03               	skipz
 11647  142D  2C34               	goto	u3615
 11648  142E  0824               	movf	__tdiv_to_l_@f2+1,w
 11649  142F  0221               	subwf	__tdiv_to_l_@f1+1,w
 11650  1430  1D03               	skipz
 11651  1431  2C34               	goto	u3615
 11652  1432  0823               	movf	__tdiv_to_l_@f2,w
 11653  1433  0220               	subwf	__tdiv_to_l_@f1,w
 11654  1434                     u3615:	
 11655  1434  1C03               	skipc
 11656  1435  2C3D               	goto	l2978
 11657  1436  0823               	movf	__tdiv_to_l_@f2,w
 11658  1437  02A0               	subwf	__tdiv_to_l_@f1,f
 11659  1438  0824               	movf	__tdiv_to_l_@f2+1,w
 11660  1439  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
 11661  143A  0825               	movf	__tdiv_to_l_@f2+2,w
 11662  143B  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
 11663  143C  142A               	bsf	__tdiv_to_l_@quot,0
 11664  143D                     l2978:	
 11665  143D  3001               	movlw	1
 11666  143E                     u3625:	
 11667  143E  35A0               	lslf	__tdiv_to_l_@f1,f
 11668  143F  0DA1               	rlf	__tdiv_to_l_@f1+1,f
 11669  1440  0DA2               	rlf	__tdiv_to_l_@f1+2,f
 11670  1441  0B89               	decfsz	9,f
 11671  1442  2C3E               	goto	u3625
 11672  1443  3001               	movlw	1
 11673  1444  02AE               	subwf	__tdiv_to_l_@cntr,f
 11674  1445  1D03               	btfss	3,2
 11675  1446  2C23               	goto	l2970
 11676  1447  1FAF               	btfss	__tdiv_to_l_@exp1,7
 11677  1448  2C65               	goto	l2990
 11678  1449  082F               	movf	__tdiv_to_l_@exp1,w
 11679  144A  3A80               	xorlw	128
 11680  144B  3E97               	addlw	151
 11681  144C  1803               	skipnc
 11682  144D  2C57               	goto	l2988
 11683  144E  3000               	movlw	0
 11684  144F  00A3               	movwf	?__tdiv_to_l_+3
 11685  1450  3000               	movlw	0
 11686  1451  00A2               	movwf	?__tdiv_to_l_+2
 11687  1452  3000               	movlw	0
 11688  1453  00A1               	movwf	?__tdiv_to_l_+1
 11689  1454  3000               	movlw	0
 11690  1455  00A0               	movwf	?__tdiv_to_l_
 11691  1456  0008               	return
 11692  1457                     l2988:	
 11693  1457  3001               	movlw	1
 11694  1458                     u3665:	
 11695  1458  36AD               	lsrf	__tdiv_to_l_@quot+3,f
 11696  1459  0CAC               	rrf	__tdiv_to_l_@quot+2,f
 11697  145A  0CAB               	rrf	__tdiv_to_l_@quot+1,f
 11698  145B  0CAA               	rrf	__tdiv_to_l_@quot,f
 11699  145C  0B89               	decfsz	9,f
 11700  145D  2C58               	goto	u3665
 11701  145E  3001               	movlw	1
 11702  145F  00A6               	movwf	??__tdiv_to_l_
 11703  1460  0826               	movf	??__tdiv_to_l_,w
 11704  1461  07AF               	addwf	__tdiv_to_l_@exp1,f
 11705  1462  1903               	btfsc	3,2
 11706  1463  2C7E               	goto	l2998
 11707  1464  2C57               	goto	l2988
 11708  1465                     l2990:	
 11709  1465  3018               	movlw	24
 11710  1466  022F               	subwf	__tdiv_to_l_@exp1,w
 11711  1467  1C03               	skipc
 11712  1468  2C7B               	goto	l903
 11713  1469  3000               	movlw	0
 11714  146A  00A3               	movwf	?__tdiv_to_l_+3
 11715  146B  3000               	movlw	0
 11716  146C  00A2               	movwf	?__tdiv_to_l_+2
 11717  146D  3000               	movlw	0
 11718  146E  00A1               	movwf	?__tdiv_to_l_+1
 11719  146F  3000               	movlw	0
 11720  1470  00A0               	movwf	?__tdiv_to_l_
 11721  1471  0008               	return
 11722  1472                     l2996:	
 11723  1472  3001               	movlw	1
 11724  1473                     u3695:	
 11725  1473  35AA               	lslf	__tdiv_to_l_@quot,f
 11726  1474  0DAB               	rlf	__tdiv_to_l_@quot+1,f
 11727  1475  0DAC               	rlf	__tdiv_to_l_@quot+2,f
 11728  1476  0DAD               	rlf	__tdiv_to_l_@quot+3,f
 11729  1477  0B89               	decfsz	9,f
 11730  1478  2C73               	goto	u3695
 11731  1479  3001               	movlw	1
 11732  147A  02AF               	subwf	__tdiv_to_l_@exp1,f
 11733  147B                     l903:	
 11734  147B  082F               	movf	__tdiv_to_l_@exp1,w
 11735  147C  1D03               	btfss	3,2
 11736  147D  2C72               	goto	l2996
 11737  147E                     l2998:	
 11738  147E  082D               	movf	__tdiv_to_l_@quot+3,w
 11739  147F  00A3               	movwf	?__tdiv_to_l_+3
 11740  1480  082C               	movf	__tdiv_to_l_@quot+2,w
 11741  1481  00A2               	movwf	?__tdiv_to_l_+2
 11742  1482  082B               	movf	__tdiv_to_l_@quot+1,w
 11743  1483  00A1               	movwf	?__tdiv_to_l_+1
 11744  1484  082A               	movf	__tdiv_to_l_@quot,w
 11745  1485  00A0               	movwf	?__tdiv_to_l_
 11746  1486  0008               	return
 11747  1487                     __end_of__tdiv_to_l_:	
 11748                           
 11749                           	psect	text29
 11750  157D                     __ptext29:	
 11751 ;; *************** function __div_to_l_ *****************
 11752 ;; Defined at:
 11753 ;;		line 60 in file "/opt/microchip/xc8/v1.41/sources/common/fldivl.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;  f1              3    0[BANK0 ] unsigned long 
 11756 ;;  f2              3    3[BANK0 ] unsigned long 
 11757 ;; Auto vars:     Size  Location     Type
 11758 ;;  quot            4   14[BANK0 ] unsigned long 
 11759 ;;  exp1            1   19[BANK0 ] unsigned char 
 11760 ;;  cntr            1   18[BANK0 ] unsigned char 
 11761 ;; Return value:  Size  Location     Type
 11762 ;;                  4    0[BANK0 ] unsigned long 
 11763 ;; Registers used:
 11764 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11765 ;; Tracked objects:
 11766 ;;		On entry : 0/0
 11767 ;;		On exit  : 0/0
 11768 ;;		Unchanged: 0/0
 11769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11770 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;Total ram usage:       20 bytes
 11775 ;; Hardware stack levels used:    1
 11776 ;; Hardware stack levels required when called:    3
 11777 ;; This function calls:
 11778 ;;		Nothing
 11779 ;; This function is called by:
 11780 ;;		_printf
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           
 11785                           ;psect for function __div_to_l_
 11786  157D                     __div_to_l_:	
 11787                           
 11788                           ;incstack = 0
 11789                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
 11790  157D  3020               	movlw	low (__div_to_l_@f1| 0)
 11791  157E  0086               	movwf	6
 11792  157F  0187               	clrf	7
 11793  1580  3F40               	moviw [0]fsr1
 11794  1581  0020               	movlb	0	; select bank0
 11795  1582  00A6               	movwf	??__div_to_l_
 11796  1583  3F41               	moviw [1]fsr1
 11797  1584  00A7               	movwf	??__div_to_l_+1
 11798  1585  3F42               	moviw [2]fsr1
 11799  1586  00A8               	movwf	??__div_to_l_+2
 11800  1587  3F43               	moviw [3]fsr1
 11801  1588  00A9               	movwf	??__div_to_l_+3
 11802  1589  1003               	clrc
 11803  158A  0D28               	rlf	??__div_to_l_+2,w
 11804  158B  0D29               	rlf	??__div_to_l_+3,w
 11805  158C  00AA               	movwf	??__div_to_l_+4
 11806  158D  082A               	movf	??__div_to_l_+4,w
 11807  158E  00B3               	movwf	__div_to_l_@exp1
 11808  158F  0833               	movf	__div_to_l_@exp1,w
 11809  1590  1D03               	btfss	3,2
 11810  1591  2D9B               	goto	l3008
 11811  1592  3000               	movlw	0
 11812  1593  00A3               	movwf	?__div_to_l_+3
 11813  1594  3000               	movlw	0
 11814  1595  00A2               	movwf	?__div_to_l_+2
 11815  1596  3000               	movlw	0
 11816  1597  00A1               	movwf	?__div_to_l_+1
 11817  1598  3000               	movlw	0
 11818  1599  00A0               	movwf	?__div_to_l_
 11819  159A  0008               	return
 11820  159B                     l3008:	
 11821  159B  3023               	movlw	low (__div_to_l_@f2| 0)
 11822  159C  0086               	movwf	6
 11823  159D  0187               	clrf	7
 11824  159E  3F40               	moviw [0]fsr1
 11825  159F  00A6               	movwf	??__div_to_l_
 11826  15A0  3F41               	moviw [1]fsr1
 11827  15A1  00A7               	movwf	??__div_to_l_+1
 11828  15A2  3F42               	moviw [2]fsr1
 11829  15A3  00A8               	movwf	??__div_to_l_+2
 11830  15A4  3F43               	moviw [3]fsr1
 11831  15A5  00A9               	movwf	??__div_to_l_+3
 11832  15A6  1003               	clrc
 11833  15A7  0D28               	rlf	??__div_to_l_+2,w
 11834  15A8  0D29               	rlf	??__div_to_l_+3,w
 11835  15A9  00AA               	movwf	??__div_to_l_+4
 11836  15AA  082A               	movf	??__div_to_l_+4,w
 11837  15AB  00B2               	movwf	__div_to_l_@cntr
 11838  15AC  0832               	movf	__div_to_l_@cntr,w
 11839  15AD  1D03               	btfss	3,2
 11840  15AE  2DB8               	goto	l3014
 11841  15AF  3000               	movlw	0
 11842  15B0  00A3               	movwf	?__div_to_l_+3
 11843  15B1  3000               	movlw	0
 11844  15B2  00A2               	movwf	?__div_to_l_+2
 11845  15B3  3000               	movlw	0
 11846  15B4  00A1               	movwf	?__div_to_l_+1
 11847  15B5  3000               	movlw	0
 11848  15B6  00A0               	movwf	?__div_to_l_
 11849  15B7  0008               	return
 11850  15B8                     l3014:	
 11851  15B8  3020               	movlw	low (__div_to_l_@f1| 0)
 11852  15B9  0086               	movwf	6
 11853  15BA  0187               	clrf	7
 11854  15BB  3000               	movlw	0
 11855  15BC  0481               	iorwf	1,f
 11856  15BD  3141               	addfsr 1,1
 11857  15BE  3000               	movlw	0
 11858  15BF  0481               	iorwf	1,f
 11859  15C0  3141               	addfsr 1,1
 11860  15C1  3080               	movlw	128
 11861  15C2  0481               	iorwf	1,f
 11862  15C3  3141               	addfsr 1,1
 11863  15C4  3000               	movlw	0
 11864  15C5  0481               	iorwf	1,f
 11865  15C6  3020               	movlw	low (__div_to_l_@f1| 0)
 11866  15C7  0086               	movwf	6
 11867  15C8  0187               	clrf	7
 11868  15C9  30FF               	movlw	255
 11869  15CA  0581               	andwf	1,f
 11870  15CB  3141               	addfsr 1,1
 11871  15CC  30FF               	movlw	255
 11872  15CD  0581               	andwf	1,f
 11873  15CE  3141               	addfsr 1,1
 11874  15CF  30FF               	movlw	255
 11875  15D0  0581               	andwf	1,f
 11876  15D1  3141               	addfsr 1,1
 11877  15D2  3000               	movlw	0
 11878  15D3  0581               	andwf	1,f
 11879  15D4  3023               	movlw	low (__div_to_l_@f2| 0)
 11880  15D5  0086               	movwf	6
 11881  15D6  0187               	clrf	7
 11882  15D7  3000               	movlw	0
 11883  15D8  0481               	iorwf	1,f
 11884  15D9  3141               	addfsr 1,1
 11885  15DA  3000               	movlw	0
 11886  15DB  0481               	iorwf	1,f
 11887  15DC  3141               	addfsr 1,1
 11888  15DD  3080               	movlw	128
 11889  15DE  0481               	iorwf	1,f
 11890  15DF  3141               	addfsr 1,1
 11891  15E0  3000               	movlw	0
 11892  15E1  0481               	iorwf	1,f
 11893  15E2  3023               	movlw	low (__div_to_l_@f2| 0)
 11894  15E3  0086               	movwf	6
 11895  15E4  0187               	clrf	7
 11896  15E5  30FF               	movlw	255
 11897  15E6  0581               	andwf	1,f
 11898  15E7  3141               	addfsr 1,1
 11899  15E8  30FF               	movlw	255
 11900  15E9  0581               	andwf	1,f
 11901  15EA  3141               	addfsr 1,1
 11902  15EB  30FF               	movlw	255
 11903  15EC  0581               	andwf	1,f
 11904  15ED  3141               	addfsr 1,1
 11905  15EE  3000               	movlw	0
 11906  15EF  0581               	andwf	1,f
 11907  15F0  3000               	movlw	0
 11908  15F1  00B1               	movwf	__div_to_l_@quot+3
 11909  15F2  3000               	movlw	0
 11910  15F3  00B0               	movwf	__div_to_l_@quot+2
 11911  15F4  3000               	movlw	0
 11912  15F5  00AF               	movwf	__div_to_l_@quot+1
 11913  15F6  3000               	movlw	0
 11914  15F7  00AE               	movwf	__div_to_l_@quot
 11915  15F8  307F               	movlw	127
 11916  15F9  02B3               	subwf	__div_to_l_@exp1,f
 11917  15FA  30A0               	movlw	160
 11918  15FB  0732               	addwf	__div_to_l_@cntr,w
 11919  15FC  00A6               	movwf	??__div_to_l_
 11920  15FD  0826               	movf	??__div_to_l_,w
 11921  15FE  02B3               	subwf	__div_to_l_@exp1,f
 11922  15FF  3020               	movlw	32
 11923  1600  00A6               	movwf	??__div_to_l_
 11924  1601  0826               	movf	??__div_to_l_,w
 11925  1602  00B2               	movwf	__div_to_l_@cntr
 11926  1603                     l3024:	
 11927  1603  3001               	movlw	1
 11928  1604                     u3735:	
 11929  1604  35AE               	lslf	__div_to_l_@quot,f
 11930  1605  0DAF               	rlf	__div_to_l_@quot+1,f
 11931  1606  0DB0               	rlf	__div_to_l_@quot+2,f
 11932  1607  0DB1               	rlf	__div_to_l_@quot+3,f
 11933  1608  0B89               	decfsz	9,f
 11934  1609  2E04               	goto	u3735
 11935  160A  3023               	movlw	low (__div_to_l_@f2| 0)
 11936  160B  0086               	movwf	6
 11937  160C  0187               	clrf	7
 11938  160D  3F40               	moviw [0]fsr1
 11939  160E  00A6               	movwf	??__div_to_l_
 11940  160F  3F41               	moviw [1]fsr1
 11941  1610  00A7               	movwf	??__div_to_l_+1
 11942  1611  3F42               	moviw [2]fsr1
 11943  1612  00A8               	movwf	??__div_to_l_+2
 11944  1613  3F43               	moviw [3]fsr1
 11945  1614  00A9               	movwf	??__div_to_l_+3
 11946  1615  3020               	movlw	low (__div_to_l_@f1| 0)
 11947  1616  0086               	movwf	6
 11948  1617  0187               	clrf	7
 11949  1618  3F40               	moviw [0]fsr1
 11950  1619  00AA               	movwf	??__div_to_l_+4
 11951  161A  3F41               	moviw [1]fsr1
 11952  161B  00AB               	movwf	??__div_to_l_+5
 11953  161C  3F42               	moviw [2]fsr1
 11954  161D  00AC               	movwf	??__div_to_l_+6
 11955  161E  3F43               	moviw [3]fsr1
 11956  161F  00AD               	movwf	??__div_to_l_+7
 11957  1620  0829               	movf	??__div_to_l_+3,w
 11958  1621  022D               	subwf	??__div_to_l_+7,w
 11959  1622  1D03               	skipz
 11960  1623  2E2E               	goto	u3745
 11961  1624  0828               	movf	??__div_to_l_+2,w
 11962  1625  022C               	subwf	??__div_to_l_+6,w
 11963  1626  1D03               	skipz
 11964  1627  2E2E               	goto	u3745
 11965  1628  0827               	movf	??__div_to_l_+1,w
 11966  1629  022B               	subwf	??__div_to_l_+5,w
 11967  162A  1D03               	skipz
 11968  162B  2E2E               	goto	u3745
 11969  162C  0826               	movf	??__div_to_l_,w
 11970  162D  022A               	subwf	??__div_to_l_+4,w
 11971  162E                     u3745:	
 11972  162E  1C03               	skipc
 11973  162F  2E4B               	goto	l3032
 11974  1630  3023               	movlw	low (__div_to_l_@f2| 0)
 11975  1631  0086               	movwf	6
 11976  1632  0187               	clrf	7
 11977  1633  3F40               	moviw [0]fsr1
 11978  1634  00A6               	movwf	??__div_to_l_
 11979  1635  3F41               	moviw [1]fsr1
 11980  1636  00A7               	movwf	??__div_to_l_+1
 11981  1637  3F42               	moviw [2]fsr1
 11982  1638  00A8               	movwf	??__div_to_l_+2
 11983  1639  3F43               	moviw [3]fsr1
 11984  163A  00A9               	movwf	??__div_to_l_+3
 11985  163B  3020               	movlw	low (__div_to_l_@f1| 0)
 11986  163C  0086               	movwf	6
 11987  163D  0187               	clrf	7
 11988  163E  0826               	movf	??__div_to_l_,w
 11989  163F  0281               	subwf	1,f
 11990  1640  3141               	addfsr 1,1
 11991  1641  0827               	movf	??__div_to_l_+1,w
 11992  1642  3B81               	subwfb	1,f
 11993  1643  3141               	addfsr 1,1
 11994  1644  0828               	movf	??__div_to_l_+2,w
 11995  1645  3B81               	subwfb	1,f
 11996  1646  3141               	addfsr 1,1
 11997  1647  0829               	movf	??__div_to_l_+3,w
 11998  1648  3B81               	subwfb	1,f
 11999  1649  317D               	addfsr 1,-3
 12000  164A  142E               	bsf	__div_to_l_@quot,0
 12001  164B                     l3032:	
 12002  164B  3020               	movlw	low (__div_to_l_@f1| 0)
 12003  164C  0086               	movwf	6
 12004  164D  0187               	clrf	7
 12005  164E  3581               	lslf	1,f
 12006  164F  3141               	addfsr 1,1
 12007  1650  0D81               	rlf	1,f
 12008  1651  3141               	addfsr 1,1
 12009  1652  0D81               	rlf	1,f
 12010  1653  3141               	addfsr 1,1
 12011  1654  0D81               	rlf	1,f
 12012  1655  317D               	addfsr 1,-3
 12013  1656  3001               	movlw	1
 12014  1657  02B2               	subwf	__div_to_l_@cntr,f
 12015  1658  1D03               	btfss	3,2
 12016  1659  2E03               	goto	l3024
 12017  165A  1FB3               	btfss	__div_to_l_@exp1,7
 12018  165B  2E78               	goto	l3044
 12019  165C  0833               	movf	__div_to_l_@exp1,w
 12020  165D  3A80               	xorlw	128
 12021  165E  3E9F               	addlw	159
 12022  165F  1803               	skipnc
 12023  1660  2E6A               	goto	l3042
 12024  1661  3000               	movlw	0
 12025  1662  00A3               	movwf	?__div_to_l_+3
 12026  1663  3000               	movlw	0
 12027  1664  00A2               	movwf	?__div_to_l_+2
 12028  1665  3000               	movlw	0
 12029  1666  00A1               	movwf	?__div_to_l_+1
 12030  1667  3000               	movlw	0
 12031  1668  00A0               	movwf	?__div_to_l_
 12032  1669  0008               	return
 12033  166A                     l3042:	
 12034  166A  3001               	movlw	1
 12035  166B                     u3785:	
 12036  166B  36B1               	lsrf	__div_to_l_@quot+3,f
 12037  166C  0CB0               	rrf	__div_to_l_@quot+2,f
 12038  166D  0CAF               	rrf	__div_to_l_@quot+1,f
 12039  166E  0CAE               	rrf	__div_to_l_@quot,f
 12040  166F  0B89               	decfsz	9,f
 12041  1670  2E6B               	goto	u3785
 12042  1671  3001               	movlw	1
 12043  1672  00A6               	movwf	??__div_to_l_
 12044  1673  0826               	movf	??__div_to_l_,w
 12045  1674  07B3               	addwf	__div_to_l_@exp1,f
 12046  1675  1903               	btfsc	3,2
 12047  1676  2E91               	goto	l3052
 12048  1677  2E6A               	goto	l3042
 12049  1678                     l3044:	
 12050  1678  3020               	movlw	32
 12051  1679  0233               	subwf	__div_to_l_@exp1,w
 12052  167A  1C03               	skipc
 12053  167B  2E8E               	goto	l824
 12054  167C  3000               	movlw	0
 12055  167D  00A3               	movwf	?__div_to_l_+3
 12056  167E  3000               	movlw	0
 12057  167F  00A2               	movwf	?__div_to_l_+2
 12058  1680  3000               	movlw	0
 12059  1681  00A1               	movwf	?__div_to_l_+1
 12060  1682  3000               	movlw	0
 12061  1683  00A0               	movwf	?__div_to_l_
 12062  1684  0008               	return
 12063  1685                     l3050:	
 12064  1685  3001               	movlw	1
 12065  1686                     u3815:	
 12066  1686  35AE               	lslf	__div_to_l_@quot,f
 12067  1687  0DAF               	rlf	__div_to_l_@quot+1,f
 12068  1688  0DB0               	rlf	__div_to_l_@quot+2,f
 12069  1689  0DB1               	rlf	__div_to_l_@quot+3,f
 12070  168A  0B89               	decfsz	9,f
 12071  168B  2E86               	goto	u3815
 12072  168C  3001               	movlw	1
 12073  168D  02B3               	subwf	__div_to_l_@exp1,f
 12074  168E                     l824:	
 12075  168E  0833               	movf	__div_to_l_@exp1,w
 12076  168F  1D03               	btfss	3,2
 12077  1690  2E85               	goto	l3050
 12078  1691                     l3052:	
 12079  1691  0831               	movf	__div_to_l_@quot+3,w
 12080  1692  00A3               	movwf	?__div_to_l_+3
 12081  1693  0830               	movf	__div_to_l_@quot+2,w
 12082  1694  00A2               	movwf	?__div_to_l_+2
 12083  1695  082F               	movf	__div_to_l_@quot+1,w
 12084  1696  00A1               	movwf	?__div_to_l_+1
 12085  1697  082E               	movf	__div_to_l_@quot,w
 12086  1698  00A0               	movwf	?__div_to_l_
 12087  1699  0008               	return
 12088  169A                     __end_of__div_to_l_:	
 12089                           
 12090                           	psect	text30
 12091  1DF8                     __ptext30:	
 12092 ;; *************** function ___lltoft *****************
 12093 ;; Defined at:
 12094 ;;		line 35 in file "/opt/microchip/xc8/v1.41/sources/common/lltoft.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;  c               4    8[BANK0 ] unsigned long 
 12097 ;; Auto vars:     Size  Location     Type
 12098 ;;  exp             1   13[BANK0 ] unsigned char 
 12099 ;; Return value:  Size  Location     Type
 12100 ;;                  3    8[BANK0 ] float 
 12101 ;; Registers used:
 12102 ;;		wreg, status,2, status,0, pclath, cstack
 12103 ;; Tracked objects:
 12104 ;;		On entry : 0/0
 12105 ;;		On exit  : 0/0
 12106 ;;		Unchanged: 0/0
 12107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12108 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;Total ram usage:        6 bytes
 12113 ;; Hardware stack levels used:    1
 12114 ;; Hardware stack levels required when called:    4
 12115 ;; This function calls:
 12116 ;;		___ftpack
 12117 ;; This function is called by:
 12118 ;;		_printf
 12119 ;; This function uses a non-reentrant model
 12120 ;;
 12121                           
 12122                           
 12123                           ;psect for function ___lltoft
 12124  1DF8                     ___lltoft:	
 12125                           
 12126                           ;incstack = 0
 12127                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 12128  1DF8  308E               	movlw	142
 12129  1DF9  0020               	movlb	0	; select bank0
 12130  1DFA  00AC               	movwf	??___lltoft
 12131  1DFB  082C               	movf	??___lltoft,w
 12132  1DFC  00AD               	movwf	___lltoft@exp
 12133  1DFD                     l3182:	
 12134  1DFD  30FF               	movlw	255
 12135  1DFE  052B               	andwf	___lltoft@c+3,w
 12136  1DFF  1903               	btfsc	3,2
 12137  1E00  2E0D               	goto	l3184
 12138  1E01  3001               	movlw	1
 12139  1E02                     u4115:	
 12140  1E02  36AB               	lsrf	___lltoft@c+3,f
 12141  1E03  0CAA               	rrf	___lltoft@c+2,f
 12142  1E04  0CA9               	rrf	___lltoft@c+1,f
 12143  1E05  0CA8               	rrf	___lltoft@c,f
 12144  1E06  0B89               	decfsz	9,f
 12145  1E07  2E02               	goto	u4115
 12146  1E08  3001               	movlw	1
 12147  1E09  00AC               	movwf	??___lltoft
 12148  1E0A  082C               	movf	??___lltoft,w
 12149  1E0B  07AD               	addwf	___lltoft@exp,f
 12150  1E0C  2DFD               	goto	l3182
 12151  1E0D                     l3184:	
 12152  1E0D  0828               	movf	___lltoft@c,w
 12153  1E0E  00A0               	movwf	___ftpack@arg
 12154  1E0F  0829               	movf	___lltoft@c+1,w
 12155  1E10  00A1               	movwf	___ftpack@arg+1
 12156  1E11  082A               	movf	___lltoft@c+2,w
 12157  1E12  00A2               	movwf	___ftpack@arg+2
 12158  1E13  082D               	movf	___lltoft@exp,w
 12159  1E14  00AC               	movwf	??___lltoft
 12160  1E15  082C               	movf	??___lltoft,w
 12161  1E16  00A3               	movwf	___ftpack@exp
 12162  1E17  01A4               	clrf	___ftpack@sign
 12163  1E18  3191  21B3         	fcall	___ftpack
 12164  1E1A  0020               	movlb	0	; select bank0
 12165  1E1B  0820               	movf	?___ftpack,w
 12166  1E1C  00A8               	movwf	?___lltoft
 12167  1E1D  0821               	movf	?___ftpack+1,w
 12168  1E1E  00A9               	movwf	?___lltoft+1
 12169  1E1F  0822               	movf	?___ftpack+2,w
 12170  1E20  00AA               	movwf	?___lltoft+2
 12171  1E21  0008               	return
 12172  1E22                     __end_of___lltoft:	
 12173                           
 12174                           	psect	text31
 12175  1EEA                     __ptext31:	
 12176 ;; *************** function ___llmod *****************
 12177 ;; Defined at:
 12178 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  divisor         4   14[BANK0 ] unsigned long 
 12181 ;;  dividend        4   18[BANK0 ] unsigned long 
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  counter         1   23[BANK0 ] unsigned char 
 12184 ;; Return value:  Size  Location     Type
 12185 ;;                  4   14[BANK0 ] unsigned long 
 12186 ;; Registers used:
 12187 ;;		wreg, status,2, status,0
 12188 ;; Tracked objects:
 12189 ;;		On entry : 0/0
 12190 ;;		On exit  : 0/0
 12191 ;;		Unchanged: 0/0
 12192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12193 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;Total ram usage:       10 bytes
 12198 ;; Hardware stack levels used:    1
 12199 ;; Hardware stack levels required when called:    3
 12200 ;; This function calls:
 12201 ;;		Nothing
 12202 ;; This function is called by:
 12203 ;;		_printf
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           
 12208                           ;psect for function ___llmod
 12209  1EEA                     ___llmod:	
 12210                           
 12211                           ;incstack = 0
 12212                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12213  1EEA  0020               	movlb	0	; select bank0
 12214  1EEB  0831               	movf	___llmod@divisor+3,w
 12215  1EEC  0430               	iorwf	___llmod@divisor+2,w
 12216  1EED  042F               	iorwf	___llmod@divisor+1,w
 12217  1EEE  042E               	iorwf	___llmod@divisor,w
 12218  1EEF  1903               	skipnz
 12219  1EF0  2F24               	goto	l3174
 12220  1EF1  01B7               	clrf	___llmod@counter
 12221  1EF2  0AB7               	incf	___llmod@counter,f
 12222  1EF3                     l3164:	
 12223  1EF3  1BB1               	btfsc	___llmod@divisor+3,7
 12224  1EF4  2F01               	goto	l3166
 12225  1EF5  3001               	movlw	1
 12226  1EF6                     u4065:	
 12227  1EF6  35AE               	lslf	___llmod@divisor,f
 12228  1EF7  0DAF               	rlf	___llmod@divisor+1,f
 12229  1EF8  0DB0               	rlf	___llmod@divisor+2,f
 12230  1EF9  0DB1               	rlf	___llmod@divisor+3,f
 12231  1EFA  0B89               	decfsz	9,f
 12232  1EFB  2EF6               	goto	u4065
 12233  1EFC  3001               	movlw	1
 12234  1EFD  00B6               	movwf	??___llmod
 12235  1EFE  0836               	movf	??___llmod,w
 12236  1EFF  07B7               	addwf	___llmod@counter,f
 12237  1F00  2EF3               	goto	l3164
 12238  1F01                     l3166:	
 12239  1F01  0831               	movf	___llmod@divisor+3,w
 12240  1F02  0235               	subwf	___llmod@dividend+3,w
 12241  1F03  1D03               	skipz
 12242  1F04  2F0F               	goto	u4085
 12243  1F05  0830               	movf	___llmod@divisor+2,w
 12244  1F06  0234               	subwf	___llmod@dividend+2,w
 12245  1F07  1D03               	skipz
 12246  1F08  2F0F               	goto	u4085
 12247  1F09  082F               	movf	___llmod@divisor+1,w
 12248  1F0A  0233               	subwf	___llmod@dividend+1,w
 12249  1F0B  1D03               	skipz
 12250  1F0C  2F0F               	goto	u4085
 12251  1F0D  082E               	movf	___llmod@divisor,w
 12252  1F0E  0232               	subwf	___llmod@dividend,w
 12253  1F0F                     u4085:	
 12254  1F0F  1C03               	skipc
 12255  1F10  2F19               	goto	l3170
 12256  1F11  082E               	movf	___llmod@divisor,w
 12257  1F12  02B2               	subwf	___llmod@dividend,f
 12258  1F13  082F               	movf	___llmod@divisor+1,w
 12259  1F14  3BB3               	subwfb	___llmod@dividend+1,f
 12260  1F15  0830               	movf	___llmod@divisor+2,w
 12261  1F16  3BB4               	subwfb	___llmod@dividend+2,f
 12262  1F17  0831               	movf	___llmod@divisor+3,w
 12263  1F18  3BB5               	subwfb	___llmod@dividend+3,f
 12264  1F19                     l3170:	
 12265  1F19  3001               	movlw	1
 12266  1F1A                     u4095:	
 12267  1F1A  36B1               	lsrf	___llmod@divisor+3,f
 12268  1F1B  0CB0               	rrf	___llmod@divisor+2,f
 12269  1F1C  0CAF               	rrf	___llmod@divisor+1,f
 12270  1F1D  0CAE               	rrf	___llmod@divisor,f
 12271  1F1E  0B89               	decfsz	9,f
 12272  1F1F  2F1A               	goto	u4095
 12273  1F20  3001               	movlw	1
 12274  1F21  02B7               	subwf	___llmod@counter,f
 12275  1F22  1D03               	btfss	3,2
 12276  1F23  2F01               	goto	l3166
 12277  1F24                     l3174:	
 12278  1F24  0835               	movf	___llmod@dividend+3,w
 12279  1F25  00B1               	movwf	?___llmod+3
 12280  1F26  0834               	movf	___llmod@dividend+2,w
 12281  1F27  00B0               	movwf	?___llmod+2
 12282  1F28  0833               	movf	___llmod@dividend+1,w
 12283  1F29  00AF               	movwf	?___llmod+1
 12284  1F2A  0832               	movf	___llmod@dividend,w
 12285  1F2B  00AE               	movwf	?___llmod
 12286  1F2C  0008               	return
 12287  1F2D                     __end_of___llmod:	
 12288                           
 12289                           	psect	text32
 12290  110D                     __ptext32:	
 12291 ;; *************** function ___lldiv *****************
 12292 ;; Defined at:
 12293 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;  divisor         4    0[BANK0 ] unsigned long 
 12296 ;;  dividend        4    4[BANK0 ] unsigned long 
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;  quotient        4    9[BANK0 ] unsigned long 
 12299 ;;  counter         1   13[BANK0 ] unsigned char 
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  4    0[BANK0 ] unsigned long 
 12302 ;; Registers used:
 12303 ;;		wreg, status,2, status,0
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:       14 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    3
 12316 ;; This function calls:
 12317 ;;		Nothing
 12318 ;; This function is called by:
 12319 ;;		_printf
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           
 12324                           ;psect for function ___lldiv
 12325  110D                     ___lldiv:	
 12326                           
 12327                           ;incstack = 0
 12328                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 12329  110D  3000               	movlw	0
 12330  110E  0020               	movlb	0	; select bank0
 12331  110F  00AC               	movwf	___lldiv@quotient+3
 12332  1110  3000               	movlw	0
 12333  1111  00AB               	movwf	___lldiv@quotient+2
 12334  1112  3000               	movlw	0
 12335  1113  00AA               	movwf	___lldiv@quotient+1
 12336  1114  3000               	movlw	0
 12337  1115  00A9               	movwf	___lldiv@quotient
 12338  1116  0823               	movf	___lldiv@divisor+3,w
 12339  1117  0422               	iorwf	___lldiv@divisor+2,w
 12340  1118  0421               	iorwf	___lldiv@divisor+1,w
 12341  1119  0420               	iorwf	___lldiv@divisor,w
 12342  111A  1903               	skipnz
 12343  111B  2957               	goto	l3154
 12344  111C  01AD               	clrf	___lldiv@counter
 12345  111D  0AAD               	incf	___lldiv@counter,f
 12346  111E                     l3140:	
 12347  111E  1BA3               	btfsc	___lldiv@divisor+3,7
 12348  111F  292C               	goto	l3142
 12349  1120  3001               	movlw	1
 12350  1121                     u3995:	
 12351  1121  35A0               	lslf	___lldiv@divisor,f
 12352  1122  0DA1               	rlf	___lldiv@divisor+1,f
 12353  1123  0DA2               	rlf	___lldiv@divisor+2,f
 12354  1124  0DA3               	rlf	___lldiv@divisor+3,f
 12355  1125  0B89               	decfsz	9,f
 12356  1126  2921               	goto	u3995
 12357  1127  3001               	movlw	1
 12358  1128  00A8               	movwf	??___lldiv
 12359  1129  0828               	movf	??___lldiv,w
 12360  112A  07AD               	addwf	___lldiv@counter,f
 12361  112B  291E               	goto	l3140
 12362  112C                     l3142:	
 12363  112C  3001               	movlw	1
 12364  112D                     u4015:	
 12365  112D  35A9               	lslf	___lldiv@quotient,f
 12366  112E  0DAA               	rlf	___lldiv@quotient+1,f
 12367  112F  0DAB               	rlf	___lldiv@quotient+2,f
 12368  1130  0DAC               	rlf	___lldiv@quotient+3,f
 12369  1131  0B89               	decfsz	9,f
 12370  1132  292D               	goto	u4015
 12371  1133  0823               	movf	___lldiv@divisor+3,w
 12372  1134  0227               	subwf	___lldiv@dividend+3,w
 12373  1135  1D03               	skipz
 12374  1136  2941               	goto	u4025
 12375  1137  0822               	movf	___lldiv@divisor+2,w
 12376  1138  0226               	subwf	___lldiv@dividend+2,w
 12377  1139  1D03               	skipz
 12378  113A  2941               	goto	u4025
 12379  113B  0821               	movf	___lldiv@divisor+1,w
 12380  113C  0225               	subwf	___lldiv@dividend+1,w
 12381  113D  1D03               	skipz
 12382  113E  2941               	goto	u4025
 12383  113F  0820               	movf	___lldiv@divisor,w
 12384  1140  0224               	subwf	___lldiv@dividend,w
 12385  1141                     u4025:	
 12386  1141  1C03               	skipc
 12387  1142  294C               	goto	l3150
 12388  1143  0820               	movf	___lldiv@divisor,w
 12389  1144  02A4               	subwf	___lldiv@dividend,f
 12390  1145  0821               	movf	___lldiv@divisor+1,w
 12391  1146  3BA5               	subwfb	___lldiv@dividend+1,f
 12392  1147  0822               	movf	___lldiv@divisor+2,w
 12393  1148  3BA6               	subwfb	___lldiv@dividend+2,f
 12394  1149  0823               	movf	___lldiv@divisor+3,w
 12395  114A  3BA7               	subwfb	___lldiv@dividend+3,f
 12396  114B  1429               	bsf	___lldiv@quotient,0
 12397  114C                     l3150:	
 12398  114C  3001               	movlw	1
 12399  114D                     u4035:	
 12400  114D  36A3               	lsrf	___lldiv@divisor+3,f
 12401  114E  0CA2               	rrf	___lldiv@divisor+2,f
 12402  114F  0CA1               	rrf	___lldiv@divisor+1,f
 12403  1150  0CA0               	rrf	___lldiv@divisor,f
 12404  1151  0B89               	decfsz	9,f
 12405  1152  294D               	goto	u4035
 12406  1153  3001               	movlw	1
 12407  1154  02AD               	subwf	___lldiv@counter,f
 12408  1155  1D03               	btfss	3,2
 12409  1156  292C               	goto	l3142
 12410  1157                     l3154:	
 12411  1157  082C               	movf	___lldiv@quotient+3,w
 12412  1158  00A3               	movwf	?___lldiv+3
 12413  1159  082B               	movf	___lldiv@quotient+2,w
 12414  115A  00A2               	movwf	?___lldiv+2
 12415  115B  082A               	movf	___lldiv@quotient+1,w
 12416  115C  00A1               	movwf	?___lldiv+1
 12417  115D  0829               	movf	___lldiv@quotient,w
 12418  115E  00A0               	movwf	?___lldiv
 12419  115F  0008               	return
 12420  1160                     __end_of___lldiv:	
 12421                           
 12422                           	psect	text33
 12423  1296                     __ptext33:	
 12424 ;; *************** function ___fttol *****************
 12425 ;; Defined at:
 12426 ;;		line 44 in file "/opt/microchip/xc8/v1.41/sources/common/fttol.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  f1              3   47[BANK0 ] float 
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;  lval            4   56[BANK0 ] unsigned long 
 12431 ;;  exp1            1   60[BANK0 ] unsigned char 
 12432 ;;  sign1           1   55[BANK0 ] unsigned char 
 12433 ;; Return value:  Size  Location     Type
 12434 ;;                  4   47[BANK0 ] long 
 12435 ;; Registers used:
 12436 ;;		wreg, status,2, status,0
 12437 ;; Tracked objects:
 12438 ;;		On entry : 0/0
 12439 ;;		On exit  : 0/0
 12440 ;;		Unchanged: 0/0
 12441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12442 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;Total ram usage:       14 bytes
 12447 ;; Hardware stack levels used:    1
 12448 ;; Hardware stack levels required when called:    3
 12449 ;; This function calls:
 12450 ;;		Nothing
 12451 ;; This function is called by:
 12452 ;;		_printf
 12453 ;; This function uses a non-reentrant model
 12454 ;;
 12455                           
 12456                           
 12457                           ;psect for function ___fttol
 12458  1296                     ___fttol:	
 12459                           
 12460                           ;incstack = 0
 12461                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12462  1296  0020               	movlb	0	; select bank0
 12463  1297  084F               	movf	___fttol@f1,w
 12464  1298  00D3               	movwf	??___fttol
 12465  1299  0850               	movf	___fttol@f1+1,w
 12466  129A  00D4               	movwf	??___fttol+1
 12467  129B  0851               	movf	___fttol@f1+2,w
 12468  129C  00D5               	movwf	??___fttol+2
 12469  129D  1003               	clrc
 12470  129E  0D54               	rlf	??___fttol+1,w
 12471  129F  0D55               	rlf	??___fttol+2,w
 12472  12A0  00D6               	movwf	??___fttol+3
 12473  12A1  0856               	movf	??___fttol+3,w
 12474  12A2  00DC               	movwf	___fttol@exp1
 12475  12A3  085C               	movf	___fttol@exp1,w
 12476  12A4  1D03               	btfss	3,2
 12477  12A5  2AAF               	goto	l3098
 12478  12A6  3000               	movlw	0
 12479  12A7  00D2               	movwf	?___fttol+3
 12480  12A8  3000               	movlw	0
 12481  12A9  00D1               	movwf	?___fttol+2
 12482  12AA  3000               	movlw	0
 12483  12AB  00D0               	movwf	?___fttol+1
 12484  12AC  3000               	movlw	0
 12485  12AD  00CF               	movwf	?___fttol
 12486  12AE  0008               	return
 12487  12AF                     l3098:	
 12488  12AF  084F               	movf	___fttol@f1,w
 12489  12B0  00D3               	movwf	??___fttol
 12490  12B1  0850               	movf	___fttol@f1+1,w
 12491  12B2  00D4               	movwf	??___fttol+1
 12492  12B3  0851               	movf	___fttol@f1+2,w
 12493  12B4  00D5               	movwf	??___fttol+2
 12494  12B5  3017               	movlw	23
 12495  12B6                     u3895:	
 12496  12B6  36D5               	lsrf	??___fttol+2,f
 12497  12B7  0CD4               	rrf	??___fttol+1,f
 12498  12B8  0CD3               	rrf	??___fttol,f
 12499  12B9  0B89               	decfsz	9,f
 12500  12BA  2AB6               	goto	u3895
 12501  12BB  0853               	movf	??___fttol,w
 12502  12BC  00D6               	movwf	??___fttol+3
 12503  12BD  0856               	movf	??___fttol+3,w
 12504  12BE  00D7               	movwf	___fttol@sign1
 12505  12BF  17D0               	bsf	___fttol@f1+1,7
 12506  12C0  30FF               	movlw	255
 12507  12C1  05CF               	andwf	___fttol@f1,f
 12508  12C2  30FF               	movlw	255
 12509  12C3  05D0               	andwf	___fttol@f1+1,f
 12510  12C4  3000               	movlw	0
 12511  12C5  05D1               	andwf	___fttol@f1+2,f
 12512  12C6  084F               	movf	___fttol@f1,w
 12513  12C7  00D8               	movwf	___fttol@lval
 12514  12C8  0850               	movf	___fttol@f1+1,w
 12515  12C9  00D9               	movwf	___fttol@lval+1
 12516  12CA  0851               	movf	___fttol@f1+2,w
 12517  12CB  00DA               	movwf	___fttol@lval+2
 12518  12CC  01DB               	clrf	___fttol@lval+3
 12519  12CD  308E               	movlw	142
 12520  12CE  02DC               	subwf	___fttol@exp1,f
 12521  12CF  1FDC               	btfss	___fttol@exp1,7
 12522  12D0  2AED               	goto	l3118
 12523  12D1  085C               	movf	___fttol@exp1,w
 12524  12D2  3A80               	xorlw	128
 12525  12D3  3E8F               	addlw	143
 12526  12D4  1803               	skipnc
 12527  12D5  2ADF               	goto	l3116
 12528  12D6  3000               	movlw	0
 12529  12D7  00D2               	movwf	?___fttol+3
 12530  12D8  3000               	movlw	0
 12531  12D9  00D1               	movwf	?___fttol+2
 12532  12DA  3000               	movlw	0
 12533  12DB  00D0               	movwf	?___fttol+1
 12534  12DC  3000               	movlw	0
 12535  12DD  00CF               	movwf	?___fttol
 12536  12DE  0008               	return
 12537  12DF                     l3116:	
 12538  12DF  3001               	movlw	1
 12539  12E0                     u3925:	
 12540  12E0  36DB               	lsrf	___fttol@lval+3,f
 12541  12E1  0CDA               	rrf	___fttol@lval+2,f
 12542  12E2  0CD9               	rrf	___fttol@lval+1,f
 12543  12E3  0CD8               	rrf	___fttol@lval,f
 12544  12E4  0B89               	decfsz	9,f
 12545  12E5  2AE0               	goto	u3925
 12546  12E6  3001               	movlw	1
 12547  12E7  00D3               	movwf	??___fttol
 12548  12E8  0853               	movf	??___fttol,w
 12549  12E9  07DC               	addwf	___fttol@exp1,f
 12550  12EA  1903               	btfsc	3,2
 12551  12EB  2B06               	goto	l3126
 12552  12EC  2ADF               	goto	l3116
 12553  12ED                     l3118:	
 12554  12ED  3018               	movlw	24
 12555  12EE  025C               	subwf	___fttol@exp1,w
 12556  12EF  1C03               	skipc
 12557  12F0  2B03               	goto	l944
 12558  12F1  3000               	movlw	0
 12559  12F2  00D2               	movwf	?___fttol+3
 12560  12F3  3000               	movlw	0
 12561  12F4  00D1               	movwf	?___fttol+2
 12562  12F5  3000               	movlw	0
 12563  12F6  00D0               	movwf	?___fttol+1
 12564  12F7  3000               	movlw	0
 12565  12F8  00CF               	movwf	?___fttol
 12566  12F9  0008               	return
 12567  12FA                     l3124:	
 12568  12FA  3001               	movlw	1
 12569  12FB                     u3955:	
 12570  12FB  35D8               	lslf	___fttol@lval,f
 12571  12FC  0DD9               	rlf	___fttol@lval+1,f
 12572  12FD  0DDA               	rlf	___fttol@lval+2,f
 12573  12FE  0DDB               	rlf	___fttol@lval+3,f
 12574  12FF  0B89               	decfsz	9,f
 12575  1300  2AFB               	goto	u3955
 12576  1301  3001               	movlw	1
 12577  1302  02DC               	subwf	___fttol@exp1,f
 12578  1303                     l944:	
 12579  1303  085C               	movf	___fttol@exp1,w
 12580  1304  1D03               	btfss	3,2
 12581  1305  2AFA               	goto	l3124
 12582  1306                     l3126:	
 12583  1306  0857               	movf	___fttol@sign1,w
 12584  1307  1903               	btfsc	3,2
 12585  1308  2B14               	goto	l3130
 12586  1309  09D8               	comf	___fttol@lval,f
 12587  130A  09D9               	comf	___fttol@lval+1,f
 12588  130B  09DA               	comf	___fttol@lval+2,f
 12589  130C  09DB               	comf	___fttol@lval+3,f
 12590  130D  0AD8               	incf	___fttol@lval,f
 12591  130E  1903               	skipnz
 12592  130F  0AD9               	incf	___fttol@lval+1,f
 12593  1310  1903               	skipnz
 12594  1311  0ADA               	incf	___fttol@lval+2,f
 12595  1312  1903               	skipnz
 12596  1313  0ADB               	incf	___fttol@lval+3,f
 12597  1314                     l3130:	
 12598  1314  085B               	movf	___fttol@lval+3,w
 12599  1315  00D2               	movwf	?___fttol+3
 12600  1316  085A               	movf	___fttol@lval+2,w
 12601  1317  00D1               	movwf	?___fttol+2
 12602  1318  0859               	movf	___fttol@lval+1,w
 12603  1319  00D0               	movwf	?___fttol+1
 12604  131A  0858               	movf	___fttol@lval,w
 12605  131B  00CF               	movwf	?___fttol
 12606  131C  0008               	return
 12607  131D                     __end_of___fttol:	
 12608                           
 12609                           	psect	text34
 12610  1D55                     __ptext34:	
 12611 ;; *************** function ___ftsub *****************
 12612 ;; Defined at:
 12613 ;;		line 18 in file "/opt/microchip/xc8/v1.41/sources/common/ftsub.c"
 12614 ;; Parameters:    Size  Location     Type
 12615 ;;  f2              3   65[BANK0 ] float 
 12616 ;;  f1              3   68[BANK0 ] float 
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;		None
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  3   65[BANK0 ] float 
 12621 ;; Registers used:
 12622 ;;		wreg, status,2, status,0, pclath, cstack
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12628 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;Total ram usage:        6 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    5
 12635 ;; This function calls:
 12636 ;;		___ftadd
 12637 ;; This function is called by:
 12638 ;;		_printf
 12639 ;; This function uses a non-reentrant model
 12640 ;;
 12641                           
 12642                           
 12643                           ;psect for function ___ftsub
 12644  1D55                     ___ftsub:	
 12645                           
 12646                           ;incstack = 0
 12647                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12648  1D55  0020               	movlb	0	; select bank0
 12649  1D56  0863               	movf	___ftsub@f2+2,w
 12650  1D57  0462               	iorwf	___ftsub@f2+1,w
 12651  1D58  0461               	iorwf	___ftsub@f2,w
 12652  1D59  1903               	skipnz
 12653  1D5A  2D5D               	goto	l4154
 12654  1D5B  3080               	movlw	128
 12655  1D5C  06E3               	xorwf	___ftsub@f2+2,f
 12656  1D5D                     l4154:	
 12657  1D5D  0864               	movf	___ftsub@f1,w
 12658  1D5E  00D4               	movwf	___ftadd@f1
 12659  1D5F  0865               	movf	___ftsub@f1+1,w
 12660  1D60  00D5               	movwf	___ftadd@f1+1
 12661  1D61  0866               	movf	___ftsub@f1+2,w
 12662  1D62  00D6               	movwf	___ftadd@f1+2
 12663  1D63  0861               	movf	___ftsub@f2,w
 12664  1D64  00D7               	movwf	___ftadd@f2
 12665  1D65  0862               	movf	___ftsub@f2+1,w
 12666  1D66  00D8               	movwf	___ftadd@f2+1
 12667  1D67  0863               	movf	___ftsub@f2+2,w
 12668  1D68  00D9               	movwf	___ftadd@f2+2
 12669  1D69  3194  2487         	fcall	___ftadd
 12670  1D6B  0020               	movlb	0	; select bank0
 12671  1D6C  0854               	movf	?___ftadd,w
 12672  1D6D  00E1               	movwf	?___ftsub
 12673  1D6E  0855               	movf	?___ftadd+1,w
 12674  1D6F  00E2               	movwf	?___ftsub+1
 12675  1D70  0856               	movf	?___ftadd+2,w
 12676  1D71  00E3               	movwf	?___ftsub+2
 12677  1D72  0008               	return
 12678  1D73                     __end_of___ftsub:	
 12679                           
 12680                           	psect	text35
 12681  1487                     __ptext35:	
 12682 ;; *************** function ___ftadd *****************
 12683 ;; Defined at:
 12684 ;;		line 86 in file "/opt/microchip/xc8/v1.41/sources/common/ftadd.c"
 12685 ;; Parameters:    Size  Location     Type
 12686 ;;  f1              3   52[BANK0 ] float 
 12687 ;;  f2              3   55[BANK0 ] float 
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  exp1            1   64[BANK0 ] unsigned char 
 12690 ;;  exp2            1   63[BANK0 ] unsigned char 
 12691 ;;  sign            1   62[BANK0 ] unsigned char 
 12692 ;; Return value:  Size  Location     Type
 12693 ;;                  3   52[BANK0 ] float 
 12694 ;; Registers used:
 12695 ;;		wreg, status,2, status,0, pclath, cstack
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12701 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;Total ram usage:       13 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; Hardware stack levels required when called:    4
 12708 ;; This function calls:
 12709 ;;		___ftpack
 12710 ;; This function is called by:
 12711 ;;		_printf
 12712 ;;		___ftsub
 12713 ;; This function uses a non-reentrant model
 12714 ;;
 12715                           
 12716                           
 12717                           ;psect for function ___ftadd
 12718  1487                     ___ftadd:	
 12719                           
 12720                           ;incstack = 0
 12721                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12722  1487  0020               	movlb	0	; select bank0
 12723  1488  0854               	movf	___ftadd@f1,w
 12724  1489  00DA               	movwf	??___ftadd
 12725  148A  0855               	movf	___ftadd@f1+1,w
 12726  148B  00DB               	movwf	??___ftadd+1
 12727  148C  0856               	movf	___ftadd@f1+2,w
 12728  148D  00DC               	movwf	??___ftadd+2
 12729  148E  1003               	clrc
 12730  148F  0D5B               	rlf	??___ftadd+1,w
 12731  1490  0D5C               	rlf	??___ftadd+2,w
 12732  1491  00DD               	movwf	??___ftadd+3
 12733  1492  085D               	movf	??___ftadd+3,w
 12734  1493  00E0               	movwf	___ftadd@exp1
 12735  1494  0857               	movf	___ftadd@f2,w
 12736  1495  00DA               	movwf	??___ftadd
 12737  1496  0858               	movf	___ftadd@f2+1,w
 12738  1497  00DB               	movwf	??___ftadd+1
 12739  1498  0859               	movf	___ftadd@f2+2,w
 12740  1499  00DC               	movwf	??___ftadd+2
 12741  149A  1003               	clrc
 12742  149B  0D5B               	rlf	??___ftadd+1,w
 12743  149C  0D5C               	rlf	??___ftadd+2,w
 12744  149D  00DD               	movwf	??___ftadd+3
 12745  149E  085D               	movf	??___ftadd+3,w
 12746  149F  00DF               	movwf	___ftadd@exp2
 12747  14A0  0860               	movf	___ftadd@exp1,w
 12748  14A1  1903               	btfsc	3,2
 12749  14A2  2CAF               	goto	l2734
 12750  14A3  085F               	movf	___ftadd@exp2,w
 12751  14A4  0260               	subwf	___ftadd@exp1,w
 12752  14A5  1803               	skipnc
 12753  14A6  2CB6               	goto	l2738
 12754  14A7  0360               	decf	___ftadd@exp1,w
 12755  14A8  3AFF               	xorlw	255
 12756  14A9  075F               	addwf	___ftadd@exp2,w
 12757  14AA  00DA               	movwf	??___ftadd
 12758  14AB  3019               	movlw	25
 12759  14AC  025A               	subwf	??___ftadd,w
 12760  14AD  1C03               	skipc
 12761  14AE  2CB6               	goto	l2738
 12762  14AF                     l2734:	
 12763  14AF  0857               	movf	___ftadd@f2,w
 12764  14B0  00D4               	movwf	?___ftadd
 12765  14B1  0858               	movf	___ftadd@f2+1,w
 12766  14B2  00D5               	movwf	?___ftadd+1
 12767  14B3  0859               	movf	___ftadd@f2+2,w
 12768  14B4  00D6               	movwf	?___ftadd+2
 12769  14B5  0008               	return
 12770  14B6                     l2738:	
 12771  14B6  085F               	movf	___ftadd@exp2,w
 12772  14B7  1903               	btfsc	3,2
 12773  14B8  0008               	return
 12774  14B9  0860               	movf	___ftadd@exp1,w
 12775  14BA  025F               	subwf	___ftadd@exp2,w
 12776  14BB  1803               	skipnc
 12777  14BC  2CC5               	goto	l2744
 12778  14BD  035F               	decf	___ftadd@exp2,w
 12779  14BE  3AFF               	xorlw	255
 12780  14BF  0760               	addwf	___ftadd@exp1,w
 12781  14C0  00DA               	movwf	??___ftadd
 12782  14C1  3019               	movlw	25
 12783  14C2  025A               	subwf	??___ftadd,w
 12784  14C3  1803               	btfsc	3,0
 12785  14C4  0008               	return
 12786  14C5                     l2744:	
 12787  14C5  3006               	movlw	6
 12788  14C6  00DA               	movwf	??___ftadd
 12789  14C7  085A               	movf	??___ftadd,w
 12790  14C8  00DE               	movwf	___ftadd@sign
 12791  14C9  1BD6               	btfsc	___ftadd@f1+2,7
 12792  14CA  17DE               	bsf	___ftadd@sign,7
 12793  14CB  1BD9               	btfsc	___ftadd@f2+2,7
 12794  14CC  175E               	bsf	___ftadd@sign,6
 12795  14CD  17D5               	bsf	___ftadd@f1+1,7
 12796  14CE  30FF               	movlw	255
 12797  14CF  05D4               	andwf	___ftadd@f1,f
 12798  14D0  30FF               	movlw	255
 12799  14D1  05D5               	andwf	___ftadd@f1+1,f
 12800  14D2  3000               	movlw	0
 12801  14D3  05D6               	andwf	___ftadd@f1+2,f
 12802  14D4  17D8               	bsf	___ftadd@f2+1,7
 12803  14D5  30FF               	movlw	255
 12804  14D6  05D7               	andwf	___ftadd@f2,f
 12805  14D7  30FF               	movlw	255
 12806  14D8  05D8               	andwf	___ftadd@f2+1,f
 12807  14D9  3000               	movlw	0
 12808  14DA  05D9               	andwf	___ftadd@f2+2,f
 12809  14DB  085F               	movf	___ftadd@exp2,w
 12810  14DC  0260               	subwf	___ftadd@exp1,w
 12811  14DD  1803               	skipnc
 12812  14DE  2D01               	goto	l2766
 12813  14DF                     l2756:	
 12814  14DF  3001               	movlw	1
 12815  14E0                     u3185:	
 12816  14E0  35D7               	lslf	___ftadd@f2,f
 12817  14E1  0DD8               	rlf	___ftadd@f2+1,f
 12818  14E2  0DD9               	rlf	___ftadd@f2+2,f
 12819  14E3  0B89               	decfsz	9,f
 12820  14E4  2CE0               	goto	u3185
 12821  14E5  3001               	movlw	1
 12822  14E6  02DF               	subwf	___ftadd@exp2,f
 12823  14E7  085F               	movf	___ftadd@exp2,w
 12824  14E8  0660               	xorwf	___ftadd@exp1,w
 12825  14E9  1903               	skipnz
 12826  14EA  2CFC               	goto	l2764
 12827  14EB  3001               	movlw	1
 12828  14EC  02DE               	subwf	___ftadd@sign,f
 12829  14ED  085E               	movf	___ftadd@sign,w
 12830  14EE  3907               	andlw	7
 12831  14EF  1903               	btfsc	3,2
 12832  14F0  2CFC               	goto	l2764
 12833  14F1  2CDF               	goto	l2756
 12834  14F2                     l2762:	
 12835  14F2  3001               	movlw	1
 12836  14F3                     u3215:	
 12837  14F3  36D6               	lsrf	___ftadd@f1+2,f
 12838  14F4  0CD5               	rrf	___ftadd@f1+1,f
 12839  14F5  0CD4               	rrf	___ftadd@f1,f
 12840  14F6  0B89               	decfsz	9,f
 12841  14F7  2CF3               	goto	u3215
 12842  14F8  3001               	movlw	1
 12843  14F9  00DA               	movwf	??___ftadd
 12844  14FA  085A               	movf	??___ftadd,w
 12845  14FB  07E0               	addwf	___ftadd@exp1,f
 12846  14FC                     l2764:	
 12847  14FC  0860               	movf	___ftadd@exp1,w
 12848  14FD  065F               	xorwf	___ftadd@exp2,w
 12849  14FE  1903               	btfsc	3,2
 12850  14FF  2D26               	goto	l867
 12851  1500  2CF2               	goto	l2762
 12852  1501                     l2766:	
 12853  1501  0860               	movf	___ftadd@exp1,w
 12854  1502  025F               	subwf	___ftadd@exp2,w
 12855  1503  1803               	skipnc
 12856  1504  2D26               	goto	l867
 12857  1505                     l2768:	
 12858  1505  3001               	movlw	1
 12859  1506                     u3245:	
 12860  1506  35D4               	lslf	___ftadd@f1,f
 12861  1507  0DD5               	rlf	___ftadd@f1+1,f
 12862  1508  0DD6               	rlf	___ftadd@f1+2,f
 12863  1509  0B89               	decfsz	9,f
 12864  150A  2D06               	goto	u3245
 12865  150B  3001               	movlw	1
 12866  150C  02E0               	subwf	___ftadd@exp1,f
 12867  150D  085F               	movf	___ftadd@exp2,w
 12868  150E  0660               	xorwf	___ftadd@exp1,w
 12869  150F  1903               	skipnz
 12870  1510  2D22               	goto	l2776
 12871  1511  3001               	movlw	1
 12872  1512  02DE               	subwf	___ftadd@sign,f
 12873  1513  085E               	movf	___ftadd@sign,w
 12874  1514  3907               	andlw	7
 12875  1515  1903               	btfsc	3,2
 12876  1516  2D22               	goto	l2776
 12877  1517  2D05               	goto	l2768
 12878  1518                     l2774:	
 12879  1518  3001               	movlw	1
 12880  1519                     u3275:	
 12881  1519  36D9               	lsrf	___ftadd@f2+2,f
 12882  151A  0CD8               	rrf	___ftadd@f2+1,f
 12883  151B  0CD7               	rrf	___ftadd@f2,f
 12884  151C  0B89               	decfsz	9,f
 12885  151D  2D19               	goto	u3275
 12886  151E  3001               	movlw	1
 12887  151F  00DA               	movwf	??___ftadd
 12888  1520  085A               	movf	??___ftadd,w
 12889  1521  07DF               	addwf	___ftadd@exp2,f
 12890  1522                     l2776:	
 12891  1522  0860               	movf	___ftadd@exp1,w
 12892  1523  065F               	xorwf	___ftadd@exp2,w
 12893  1524  1D03               	skipz
 12894  1525  2D18               	goto	l2774
 12895  1526                     l867:	
 12896  1526  1FDE               	btfss	___ftadd@sign,7
 12897  1527  2D38               	goto	l2780
 12898  1528  30FF               	movlw	255
 12899  1529  06D4               	xorwf	___ftadd@f1,f
 12900  152A  30FF               	movlw	255
 12901  152B  06D5               	xorwf	___ftadd@f1+1,f
 12902  152C  30FF               	movlw	255
 12903  152D  06D6               	xorwf	___ftadd@f1+2,f
 12904  152E  3001               	movlw	1
 12905  152F  07D4               	addwf	___ftadd@f1,f
 12906  1530  3000               	movlw	0
 12907  1531  1803               	skipnc
 12908  1532  3001               	movlw	1
 12909  1533  07D5               	addwf	___ftadd@f1+1,f
 12910  1534  3000               	movlw	0
 12911  1535  1803               	skipnc
 12912  1536  3001               	movlw	1
 12913  1537  07D6               	addwf	___ftadd@f1+2,f
 12914  1538                     l2780:	
 12915  1538  1F5E               	btfss	___ftadd@sign,6
 12916  1539  2D4A               	goto	l2784
 12917  153A  30FF               	movlw	255
 12918  153B  06D7               	xorwf	___ftadd@f2,f
 12919  153C  30FF               	movlw	255
 12920  153D  06D8               	xorwf	___ftadd@f2+1,f
 12921  153E  30FF               	movlw	255
 12922  153F  06D9               	xorwf	___ftadd@f2+2,f
 12923  1540  3001               	movlw	1
 12924  1541  07D7               	addwf	___ftadd@f2,f
 12925  1542  3000               	movlw	0
 12926  1543  1803               	skipnc
 12927  1544  3001               	movlw	1
 12928  1545  07D8               	addwf	___ftadd@f2+1,f
 12929  1546  3000               	movlw	0
 12930  1547  1803               	skipnc
 12931  1548  3001               	movlw	1
 12932  1549  07D9               	addwf	___ftadd@f2+2,f
 12933  154A                     l2784:	
 12934  154A  01DE               	clrf	___ftadd@sign
 12935  154B  0854               	movf	___ftadd@f1,w
 12936  154C  07D7               	addwf	___ftadd@f2,f
 12937  154D  0855               	movf	___ftadd@f1+1,w
 12938  154E  3DD8               	addwfc	___ftadd@f2+1,f
 12939  154F  0856               	movf	___ftadd@f1+2,w
 12940  1550  3DD9               	addwfc	___ftadd@f2+2,f
 12941  1551  1FD9               	btfss	___ftadd@f2+2,7
 12942  1552  2D65               	goto	l2794
 12943  1553  30FF               	movlw	255
 12944  1554  06D7               	xorwf	___ftadd@f2,f
 12945  1555  30FF               	movlw	255
 12946  1556  06D8               	xorwf	___ftadd@f2+1,f
 12947  1557  30FF               	movlw	255
 12948  1558  06D9               	xorwf	___ftadd@f2+2,f
 12949  1559  3001               	movlw	1
 12950  155A  07D7               	addwf	___ftadd@f2,f
 12951  155B  3000               	movlw	0
 12952  155C  1803               	skipnc
 12953  155D  3001               	movlw	1
 12954  155E  07D8               	addwf	___ftadd@f2+1,f
 12955  155F  3000               	movlw	0
 12956  1560  1803               	skipnc
 12957  1561  3001               	movlw	1
 12958  1562  07D9               	addwf	___ftadd@f2+2,f
 12959  1563  01DE               	clrf	___ftadd@sign
 12960  1564  0ADE               	incf	___ftadd@sign,f
 12961  1565                     l2794:	
 12962  1565  0857               	movf	___ftadd@f2,w
 12963  1566  00A0               	movwf	___ftpack@arg
 12964  1567  0858               	movf	___ftadd@f2+1,w
 12965  1568  00A1               	movwf	___ftpack@arg+1
 12966  1569  0859               	movf	___ftadd@f2+2,w
 12967  156A  00A2               	movwf	___ftpack@arg+2
 12968  156B  0860               	movf	___ftadd@exp1,w
 12969  156C  00DA               	movwf	??___ftadd
 12970  156D  085A               	movf	??___ftadd,w
 12971  156E  00A3               	movwf	___ftpack@exp
 12972  156F  085E               	movf	___ftadd@sign,w
 12973  1570  00DB               	movwf	??___ftadd+1
 12974  1571  085B               	movf	??___ftadd+1,w
 12975  1572  00A4               	movwf	___ftpack@sign
 12976  1573  3191  21B3         	fcall	___ftpack
 12977  1575  0020               	movlb	0	; select bank0
 12978  1576  0820               	movf	?___ftpack,w
 12979  1577  00D4               	movwf	?___ftadd
 12980  1578  0821               	movf	?___ftpack+1,w
 12981  1579  00D5               	movwf	?___ftadd+1
 12982  157A  0822               	movf	?___ftpack+2,w
 12983  157B  00D6               	movwf	?___ftadd+2
 12984  157C  0008               	return
 12985  157D                     __end_of___ftadd:	
 12986                           
 12987                           	psect	text36
 12988  1C6F                     __ptext36:	
 12989 ;; *************** function ___ftneg *****************
 12990 ;; Defined at:
 12991 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/ftneg.c"
 12992 ;; Parameters:    Size  Location     Type
 12993 ;;  f1              3    0[BANK0 ] float 
 12994 ;; Auto vars:     Size  Location     Type
 12995 ;;		None
 12996 ;; Return value:  Size  Location     Type
 12997 ;;                  3    0[BANK0 ] float 
 12998 ;; Registers used:
 12999 ;;		wreg
 13000 ;; Tracked objects:
 13001 ;;		On entry : 0/0
 13002 ;;		On exit  : 0/0
 13003 ;;		Unchanged: 0/0
 13004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13005 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13009 ;;Total ram usage:        3 bytes
 13010 ;; Hardware stack levels used:    1
 13011 ;; Hardware stack levels required when called:    3
 13012 ;; This function calls:
 13013 ;;		Nothing
 13014 ;; This function is called by:
 13015 ;;		_printf
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           
 13020                           ;psect for function ___ftneg
 13021  1C6F                     ___ftneg:	
 13022                           
 13023                           ;incstack = 0
 13024                           ; Regs used in ___ftneg: [wreg]
 13025  1C6F  0020               	movlb	0	; select bank0
 13026  1C70  0822               	movf	___ftneg@f1+2,w
 13027  1C71  0421               	iorwf	___ftneg@f1+1,w
 13028  1C72  0420               	iorwf	___ftneg@f1,w
 13029  1C73  1903               	skipnz
 13030  1C74  0008               	return
 13031  1C75  3080               	movlw	128
 13032  1C76  06A2               	xorwf	___ftneg@f1+2,f
 13033  1C77  0008               	return
 13034  1C78                     __end_of___ftneg:	
 13035                           
 13036                           	psect	text37
 13037  1EAE                     __ptext37:	
 13038 ;; *************** function ___ftge *****************
 13039 ;; Defined at:
 13040 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/ftge.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;  ff1             3    0[BANK0 ] float 
 13043 ;;  ff2             3    3[BANK0 ] float 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;		None
 13046 ;; Return value:  Size  Location     Type
 13047 ;;		None               void
 13048 ;; Registers used:
 13049 ;;		wreg, status,2, status,0
 13050 ;; Tracked objects:
 13051 ;;		On entry : 0/0
 13052 ;;		On exit  : 0/0
 13053 ;;		Unchanged: 0/0
 13054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13055 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;Total ram usage:        9 bytes
 13060 ;; Hardware stack levels used:    1
 13061 ;; Hardware stack levels required when called:    3
 13062 ;; This function calls:
 13063 ;;		Nothing
 13064 ;; This function is called by:
 13065 ;;		_printf
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           
 13070                           ;psect for function ___ftge
 13071  1EAE                     ___ftge:	
 13072                           
 13073                           ;incstack = 0
 13074                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 13075  1EAE  0020               	movlb	0	; select bank0
 13076  1EAF  1FA2               	btfss	___ftge@ff1+2,7
 13077  1EB0  2EC5               	goto	l3060
 13078  1EB1  0920               	comf	___ftge@ff1,w
 13079  1EB2  00A6               	movwf	??___ftge
 13080  1EB3  0921               	comf	___ftge@ff1+1,w
 13081  1EB4  00A7               	movwf	??___ftge+1
 13082  1EB5  0922               	comf	___ftge@ff1+2,w
 13083  1EB6  00A8               	movwf	??___ftge+2
 13084  1EB7  0AA6               	incf	??___ftge,f
 13085  1EB8  1903               	skipnz
 13086  1EB9  0AA7               	incf	??___ftge+1,f
 13087  1EBA  1903               	skipnz
 13088  1EBB  0AA8               	incf	??___ftge+2,f
 13089  1EBC  3000               	movlw	0
 13090  1EBD  0726               	addwf	??___ftge,w
 13091  1EBE  00A0               	movwf	___ftge@ff1
 13092  1EBF  3000               	movlw	0
 13093  1EC0  3D27               	addwfc	??___ftge+1,w
 13094  1EC1  00A1               	movwf	___ftge@ff1+1
 13095  1EC2  3080               	movlw	128
 13096  1EC3  3D28               	addwfc	??___ftge+2,w
 13097  1EC4  00A2               	movwf	___ftge@ff1+2
 13098  1EC5                     l3060:	
 13099  1EC5  1FA5               	btfss	___ftge@ff2+2,7
 13100  1EC6  2EDB               	goto	l3064
 13101  1EC7  0923               	comf	___ftge@ff2,w
 13102  1EC8  00A6               	movwf	??___ftge
 13103  1EC9  0924               	comf	___ftge@ff2+1,w
 13104  1ECA  00A7               	movwf	??___ftge+1
 13105  1ECB  0925               	comf	___ftge@ff2+2,w
 13106  1ECC  00A8               	movwf	??___ftge+2
 13107  1ECD  0AA6               	incf	??___ftge,f
 13108  1ECE  1903               	skipnz
 13109  1ECF  0AA7               	incf	??___ftge+1,f
 13110  1ED0  1903               	skipnz
 13111  1ED1  0AA8               	incf	??___ftge+2,f
 13112  1ED2  3000               	movlw	0
 13113  1ED3  0726               	addwf	??___ftge,w
 13114  1ED4  00A3               	movwf	___ftge@ff2
 13115  1ED5  3000               	movlw	0
 13116  1ED6  3D27               	addwfc	??___ftge+1,w
 13117  1ED7  00A4               	movwf	___ftge@ff2+1
 13118  1ED8  3080               	movlw	128
 13119  1ED9  3D28               	addwfc	??___ftge+2,w
 13120  1EDA  00A5               	movwf	___ftge@ff2+2
 13121  1EDB                     l3064:	
 13122  1EDB  3080               	movlw	128
 13123  1EDC  06A2               	xorwf	___ftge@ff1+2,f
 13124  1EDD  3080               	movlw	128
 13125  1EDE  06A5               	xorwf	___ftge@ff2+2,f
 13126  1EDF  0825               	movf	___ftge@ff2+2,w
 13127  1EE0  0222               	subwf	___ftge@ff1+2,w
 13128  1EE1  1D03               	skipz
 13129  1EE2  0008               	return
 13130  1EE3  0824               	movf	___ftge@ff2+1,w
 13131  1EE4  0221               	subwf	___ftge@ff1+1,w
 13132  1EE5  1D03               	skipz
 13133  1EE6  0008               	return
 13134  1EE7  0823               	movf	___ftge@ff2,w
 13135  1EE8  0220               	subwf	___ftge@ff1,w
 13136  1EE9  0008               	return
 13137  1EEA                     __end_of___ftge:	
 13138                           
 13139                           	psect	text38
 13140  1DD6                     __ptext38:	
 13141 ;; *************** function ___awtoft *****************
 13142 ;; Defined at:
 13143 ;;		line 32 in file "/opt/microchip/xc8/v1.41/sources/common/awtoft.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  c               2    8[BANK0 ] int 
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  sign            1   13[BANK0 ] unsigned char 
 13148 ;; Return value:  Size  Location     Type
 13149 ;;                  3    8[BANK0 ] float 
 13150 ;; Registers used:
 13151 ;;		wreg, status,2, status,0, pclath, cstack
 13152 ;; Tracked objects:
 13153 ;;		On entry : 0/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13157 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;Total ram usage:        6 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; Hardware stack levels required when called:    4
 13164 ;; This function calls:
 13165 ;;		___ftpack
 13166 ;; This function is called by:
 13167 ;;		_EMC1001_PrintInfo
 13168 ;; This function uses a non-reentrant model
 13169 ;;
 13170                           
 13171                           
 13172                           ;psect for function ___awtoft
 13173  1DD6                     ___awtoft:	
 13174                           
 13175                           ;incstack = 0
 13176                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13177  1DD6  0020               	movlb	0	; select bank0
 13178  1DD7  01AD               	clrf	___awtoft@sign
 13179  1DD8  1FA9               	btfss	___awtoft@c+1,7
 13180  1DD9  2DE1               	goto	l3604
 13181  1DDA  09A8               	comf	___awtoft@c,f
 13182  1DDB  09A9               	comf	___awtoft@c+1,f
 13183  1DDC  0AA8               	incf	___awtoft@c,f
 13184  1DDD  1903               	skipnz
 13185  1DDE  0AA9               	incf	___awtoft@c+1,f
 13186  1DDF  01AD               	clrf	___awtoft@sign
 13187  1DE0  0AAD               	incf	___awtoft@sign,f
 13188  1DE1                     l3604:	
 13189  1DE1  0828               	movf	___awtoft@c,w
 13190  1DE2  00A0               	movwf	___ftpack@arg
 13191  1DE3  0829               	movf	___awtoft@c+1,w
 13192  1DE4  00A1               	movwf	___ftpack@arg+1
 13193  1DE5  01A2               	clrf	___ftpack@arg+2
 13194  1DE6  308E               	movlw	142
 13195  1DE7  00AB               	movwf	??___awtoft
 13196  1DE8  082B               	movf	??___awtoft,w
 13197  1DE9  00A3               	movwf	___ftpack@exp
 13198  1DEA  082D               	movf	___awtoft@sign,w
 13199  1DEB  00AC               	movwf	??___awtoft+1
 13200  1DEC  082C               	movf	??___awtoft+1,w
 13201  1DED  00A4               	movwf	___ftpack@sign
 13202  1DEE  3191  21B3         	fcall	___ftpack
 13203  1DF0  0020               	movlb	0	; select bank0
 13204  1DF1  0820               	movf	?___ftpack,w
 13205  1DF2  00A8               	movwf	?___awtoft
 13206  1DF3  0821               	movf	?___ftpack+1,w
 13207  1DF4  00A9               	movwf	?___awtoft+1
 13208  1DF5  0822               	movf	?___ftpack+2,w
 13209  1DF6  00AA               	movwf	?___awtoft+2
 13210  1DF7  0008               	return
 13211  1DF8                     __end_of___awtoft:	
 13212                           
 13213                           	psect	text39
 13214  11B3                     __ptext39:	
 13215 ;; *************** function ___ftpack *****************
 13216 ;; Defined at:
 13217 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/float.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;  arg             3    0[BANK0 ] unsigned um
 13220 ;;  exp             1    3[BANK0 ] unsigned char 
 13221 ;;  sign            1    4[BANK0 ] unsigned char 
 13222 ;; Auto vars:     Size  Location     Type
 13223 ;;		None
 13224 ;; Return value:  Size  Location     Type
 13225 ;;                  3    0[BANK0 ] float 
 13226 ;; Registers used:
 13227 ;;		wreg, status,2, status,0
 13228 ;; Tracked objects:
 13229 ;;		On entry : 0/0
 13230 ;;		On exit  : 0/0
 13231 ;;		Unchanged: 0/0
 13232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13233 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;Total ram usage:        8 bytes
 13238 ;; Hardware stack levels used:    1
 13239 ;; Hardware stack levels required when called:    3
 13240 ;; This function calls:
 13241 ;;		Nothing
 13242 ;; This function is called by:
 13243 ;;		___awtoft
 13244 ;;		___ftadd
 13245 ;;		___ftmul
 13246 ;;		___lltoft
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250                           
 13251                           ;psect for function ___ftpack
 13252  11B3                     ___ftpack:	
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13256  11B3  0020               	movlb	0	; select bank0
 13257  11B4  0823               	movf	___ftpack@exp,w
 13258  11B5  1903               	btfsc	3,2
 13259  11B6  29BC               	goto	l2600
 13260  11B7  0822               	movf	___ftpack@arg+2,w
 13261  11B8  0421               	iorwf	___ftpack@arg+1,w
 13262  11B9  0420               	iorwf	___ftpack@arg,w
 13263  11BA  1D03               	skipz
 13264  11BB  29CD               	goto	l2606
 13265  11BC                     l2600:	
 13266  11BC  3000               	movlw	0
 13267  11BD  00A0               	movwf	?___ftpack
 13268  11BE  3000               	movlw	0
 13269  11BF  00A1               	movwf	?___ftpack+1
 13270  11C0  3000               	movlw	0
 13271  11C1  00A2               	movwf	?___ftpack+2
 13272  11C2  0008               	return
 13273  11C3                     l2604:	
 13274  11C3  3001               	movlw	1
 13275  11C4  00A5               	movwf	??___ftpack
 13276  11C5  0825               	movf	??___ftpack,w
 13277  11C6  07A3               	addwf	___ftpack@exp,f
 13278  11C7  3001               	movlw	1
 13279  11C8                     u2755:	
 13280  11C8  36A2               	lsrf	___ftpack@arg+2,f
 13281  11C9  0CA1               	rrf	___ftpack@arg+1,f
 13282  11CA  0CA0               	rrf	___ftpack@arg,f
 13283  11CB  0B89               	decfsz	9,f
 13284  11CC  29C8               	goto	u2755
 13285  11CD                     l2606:	
 13286  11CD  30FE               	movlw	254
 13287  11CE  0522               	andwf	___ftpack@arg+2,w
 13288  11CF  1903               	btfsc	3,2
 13289  11D0  29E6               	goto	l836
 13290  11D1  29C3               	goto	l2604
 13291  11D2                     l2608:	
 13292  11D2  3001               	movlw	1
 13293  11D3  00A5               	movwf	??___ftpack
 13294  11D4  0825               	movf	??___ftpack,w
 13295  11D5  07A3               	addwf	___ftpack@exp,f
 13296  11D6  3001               	movlw	1
 13297  11D7  07A0               	addwf	___ftpack@arg,f
 13298  11D8  3000               	movlw	0
 13299  11D9  1803               	skipnc
 13300  11DA  3001               	movlw	1
 13301  11DB  07A1               	addwf	___ftpack@arg+1,f
 13302  11DC  3000               	movlw	0
 13303  11DD  1803               	skipnc
 13304  11DE  3001               	movlw	1
 13305  11DF  07A2               	addwf	___ftpack@arg+2,f
 13306  11E0  3001               	movlw	1
 13307  11E1                     u2775:	
 13308  11E1  36A2               	lsrf	___ftpack@arg+2,f
 13309  11E2  0CA1               	rrf	___ftpack@arg+1,f
 13310  11E3  0CA0               	rrf	___ftpack@arg,f
 13311  11E4  0B89               	decfsz	9,f
 13312  11E5  29E1               	goto	u2775
 13313  11E6                     l836:	
 13314  11E6  30FF               	movlw	255
 13315  11E7  0522               	andwf	___ftpack@arg+2,w
 13316  11E8  1903               	btfsc	3,2
 13317  11E9  29F3               	goto	l2616
 13318  11EA  29D2               	goto	l2608
 13319  11EB                     l2614:	
 13320  11EB  3001               	movlw	1
 13321  11EC  02A3               	subwf	___ftpack@exp,f
 13322  11ED  3001               	movlw	1
 13323  11EE                     u2795:	
 13324  11EE  35A0               	lslf	___ftpack@arg,f
 13325  11EF  0DA1               	rlf	___ftpack@arg+1,f
 13326  11F0  0DA2               	rlf	___ftpack@arg+2,f
 13327  11F1  0B89               	decfsz	9,f
 13328  11F2  29EE               	goto	u2795
 13329  11F3                     l2616:	
 13330  11F3  1BA1               	btfsc	___ftpack@arg+1,7
 13331  11F4  29F9               	goto	l843
 13332  11F5  3002               	movlw	2
 13333  11F6  0223               	subwf	___ftpack@exp,w
 13334  11F7  1803               	skipnc
 13335  11F8  29EB               	goto	l2614
 13336  11F9                     l843:	
 13337  11F9  1823               	btfsc	___ftpack@exp,0
 13338  11FA  2A01               	goto	l844
 13339  11FB  30FF               	movlw	255
 13340  11FC  05A0               	andwf	___ftpack@arg,f
 13341  11FD  307F               	movlw	127
 13342  11FE  05A1               	andwf	___ftpack@arg+1,f
 13343  11FF  30FF               	movlw	255
 13344  1200  05A2               	andwf	___ftpack@arg+2,f
 13345  1201                     l844:	
 13346  1201  1003               	clrc
 13347  1202  0CA3               	rrf	___ftpack@exp,f
 13348  1203  0823               	movf	___ftpack@exp,w
 13349  1204  00A5               	movwf	??___ftpack
 13350  1205  01A6               	clrf	??___ftpack+1
 13351  1206  01A7               	clrf	??___ftpack+2
 13352  1207  3010               	movlw	16
 13353  1208                     u2835:	
 13354  1208  35A5               	lslf	??___ftpack,f
 13355  1209  0DA6               	rlf	??___ftpack+1,f
 13356  120A  0DA7               	rlf	??___ftpack+2,f
 13357  120B  0B89               	decfsz	9,f
 13358  120C  2A08               	goto	u2835
 13359  120D  0825               	movf	??___ftpack,w
 13360  120E  04A0               	iorwf	___ftpack@arg,f
 13361  120F  0826               	movf	??___ftpack+1,w
 13362  1210  04A1               	iorwf	___ftpack@arg+1,f
 13363  1211  0827               	movf	??___ftpack+2,w
 13364  1212  04A2               	iorwf	___ftpack@arg+2,f
 13365  1213  0824               	movf	___ftpack@sign,w
 13366  1214  1903               	btfsc	3,2
 13367  1215  0008               	return
 13368  1216  17A2               	bsf	___ftpack@arg+2,7
 13369  1217  0008               	return
 13370  1218                     __end_of___ftpack:	
 13371                           
 13372                           	psect	text40
 13373  1D73                     __ptext40:	
 13374 ;; *************** function _EMC1001_MASK1 *****************
 13375 ;; Defined at:
 13376 ;;		line 155 in file "EMC1001.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;  enable          1    wreg     unsigned char 
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  enable          1   16[BANK0 ] unsigned char 
 13381 ;;  data            1   17[BANK0 ] unsigned char 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      unsigned char 
 13384 ;; Registers used:
 13385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;Total ram usage:        3 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    5
 13398 ;; This function calls:
 13399 ;;		_EMC1001_Read
 13400 ;;		_EMC1001_Write
 13401 ;; This function is called by:
 13402 ;;		_main
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           
 13407                           ;psect for function _EMC1001_MASK1
 13408  1D73                     _EMC1001_MASK1:	
 13409                           
 13410                           ;incstack = 0
 13411                           ; Regs used in _EMC1001_MASK1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13412                           ;EMC1001_MASK1@enable stored from wreg
 13413  1D73  0020               	movlb	0	; select bank0
 13414  1D74  00B0               	movwf	EMC1001_MASK1@enable
 13415                           
 13416                           ;EMC1001.c: 157: uint8_t data;
 13417                           ;EMC1001.c: 158: EMC1001_Read(0x03,&data);
 13418  1D75  3031               	movlw	(low (EMC1001_MASK1@data| 0))& (0+255)
 13419  1D76  00AF               	movwf	??_EMC1001_MASK1
 13420  1D77  082F               	movf	??_EMC1001_MASK1,w
 13421  1D78  00A7               	movwf	EMC1001_Read@pData
 13422  1D79  3003               	movlw	3
 13423  1D7A  3190  206E  319D   	fcall	_EMC1001_Read
 13424                           
 13425                           ;EMC1001.c: 160: if (enable)
 13426  1D7D  0020               	movlb	0	; select bank0
 13427  1D7E  0830               	movf	EMC1001_MASK1@enable,w
 13428  1D7F  1903               	btfsc	3,2
 13429  1D80  2D8A               	goto	l3800
 13430                           
 13431                           ;EMC1001.c: 161: return EMC1001_Write(0x03,data|0b10000000);
 13432                           ;	Return value of _EMC1001_MASK1 is never used
 13433  1D81  0831               	movf	EMC1001_MASK1@data,w
 13434  1D82  3880               	iorlw	128
 13435  1D83  00AF               	movwf	??_EMC1001_MASK1
 13436  1D84  082F               	movf	??_EMC1001_MASK1,w
 13437  1D85  00A7               	movwf	EMC1001_Write@data
 13438  1D86  3003               	movlw	3
 13439  1D87  3190  2026         	fcall	_EMC1001_Write
 13440  1D89  0008               	return
 13441  1D8A                     l3800:	
 13442                           
 13443                           ;EMC1001.c: 162: else
 13444                           ;EMC1001.c: 163: return EMC1001_Write(0x03,data&0b01111111);
 13445                           ;	Return value of _EMC1001_MASK1 is never used
 13446  1D8A  0020               	movlb	0	; select bank0
 13447  1D8B  0831               	movf	EMC1001_MASK1@data,w
 13448  1D8C  397F               	andlw	127
 13449  1D8D  00AF               	movwf	??_EMC1001_MASK1
 13450  1D8E  082F               	movf	??_EMC1001_MASK1,w
 13451  1D8F  00A7               	movwf	EMC1001_Write@data
 13452  1D90  3003               	movlw	3
 13453  1D91  3190  2026         	fcall	_EMC1001_Write
 13454  1D93  0008               	return
 13455  1D94                     __end_of_EMC1001_MASK1:	
 13456                           
 13457                           	psect	text41
 13458  1026                     __ptext41:	
 13459 ;; *************** function _EMC1001_Write *****************
 13460 ;; Defined at:
 13461 ;;		line 46 in file "EMC1001.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;  reg             1    wreg     unsigned char 
 13464 ;;  data            1    7[BANK0 ] unsigned char 
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;  reg             1   10[BANK0 ] unsigned char 
 13467 ;;  buffer          2   11[BANK0 ] unsigned char [2]
 13468 ;;  status          1   14[BANK0 ] enum E14267
 13469 ;;  timeOut         1   13[BANK0 ] unsigned char 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      unsigned char 
 13472 ;; Registers used:
 13473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13479 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;Total ram usage:        8 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    4
 13486 ;; This function calls:
 13487 ;;		_I2C2_MasterTRBInsert
 13488 ;;		_I2C2_MasterWriteTRBBuild
 13489 ;; This function is called by:
 13490 ;;		_EMC1001_SetConversionRate
 13491 ;;		_EMC1001_SetTempHighLimit
 13492 ;;		_EMC1001_SetTempLowLimit
 13493 ;;		_EMC1001_SetThermLimit
 13494 ;;		_EMC1001_SetThermHysteresis
 13495 ;;		_EMC1001_SMBusTimeout
 13496 ;;		_EMC1001_MASK1
 13497 ;;		_EMC1001_StandbyMode
 13498 ;;		_EMC1001_THERM2
 13499 ;;		_EMC1001_OneShot
 13500 ;; This function uses a non-reentrant model
 13501 ;;
 13502                           
 13503                           
 13504                           ;psect for function _EMC1001_Write
 13505  1026                     _EMC1001_Write:	
 13506                           
 13507                           ;incstack = 0
 13508                           ; Regs used in _EMC1001_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13509                           ;EMC1001_Write@reg stored from wreg
 13510  1026  0020               	movlb	0	; select bank0
 13511  1027  00AA               	movwf	EMC1001_Write@reg
 13512                           
 13513                           ;EMC1001.c: 48: static I2C2_TRANSACTION_REQUEST_BLOCK trb;
 13514                           ;EMC1001.c: 49: I2C2_MESSAGE_STATUS status = I2C2_MESSAGE_PENDING;
 13515  1028  3002               	movlw	2
 13516  1029  00A8               	movwf	??_EMC1001_Write
 13517  102A  0828               	movf	??_EMC1001_Write,w
 13518  102B  00AE               	movwf	EMC1001_Write@status
 13519                           
 13520                           ;EMC1001.c: 50: uint8_t timeOut=0;
 13521  102C  01AD               	clrf	EMC1001_Write@timeOut
 13522                           
 13523                           ;EMC1001.c: 51: uint8_t buffer[2];
 13524                           ;EMC1001.c: 52: buffer[0] = reg; buffer[1] = data;
 13525  102D  082A               	movf	EMC1001_Write@reg,w
 13526  102E  00A8               	movwf	??_EMC1001_Write
 13527  102F  0828               	movf	??_EMC1001_Write,w
 13528  1030  00AB               	movwf	EMC1001_Write@buffer
 13529  1031  0827               	movf	EMC1001_Write@data,w
 13530  1032  00A8               	movwf	??_EMC1001_Write
 13531  1033  0828               	movf	??_EMC1001_Write,w
 13532  1034  00AC               	movwf	EMC1001_Write@buffer+1
 13533                           
 13534                           ;EMC1001.c: 54: I2C2_MasterWriteTRBBuild(&trb, buffer, 2, 0x38);
 13535  1035  302B               	movlw	(low (EMC1001_Write@buffer| 0))& (0+255)
 13536  1036  00A8               	movwf	??_EMC1001_Write
 13537  1037  0828               	movf	??_EMC1001_Write,w
 13538  1038  00A0               	movwf	I2C2_MasterWriteTRBBuild@pdata
 13539  1039  3002               	movlw	2
 13540  103A  00A9               	movwf	??_EMC1001_Write+1
 13541  103B  0829               	movf	??_EMC1001_Write+1,w
 13542  103C  00A1               	movwf	I2C2_MasterWriteTRBBuild@length
 13543  103D  3038               	movlw	56
 13544  103E  00A2               	movwf	I2C2_MasterWriteTRBBuild@address
 13545  103F  3000               	movlw	0
 13546  1040  00A3               	movwf	I2C2_MasterWriteTRBBuild@address+1
 13547  1041  3028               	movlw	(low (EMC1001_Write@trb| (0+256)))& (0+255)
 13548  1042  3190  2003  3190   	fcall	_I2C2_MasterWriteTRBBuild
 13549  1045                     l363:	
 13550                           ;EMC1001.c: 56: while(status != I2C2_MESSAGE_FAIL)
 13551                           
 13552  1045  0020               	movlb	0	; select bank0
 13553  1046  032E               	decf	EMC1001_Write@status,w
 13554  1047  1903               	btfsc	3,2
 13555  1048  2867               	goto	l3592
 13556                           
 13557                           ;EMC1001.c: 57: {
 13558                           ;EMC1001.c: 58: I2C2_MasterTRBInsert(1, &trb, &status);
 13559  1049  3028               	movlw	(low (EMC1001_Write@trb| (0+256)))& (0+255)
 13560  104A  0020               	movlb	0	; select bank0
 13561  104B  00A8               	movwf	??_EMC1001_Write
 13562  104C  0828               	movf	??_EMC1001_Write,w
 13563  104D  00A0               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13564  104E  302E               	movlw	(low (EMC1001_Write@status| 0))& (0+255)
 13565  104F  00A9               	movwf	??_EMC1001_Write+1
 13566  1050  0829               	movf	??_EMC1001_Write+1,w
 13567  1051  00A1               	movwf	I2C2_MasterTRBInsert@pflag
 13568  1052  3001               	movlw	1
 13569  1053  319F  272D  3190   	fcall	_I2C2_MasterTRBInsert
 13570  1056                     l3578:	
 13571                           ;EMC1001.c: 59: while(status == I2C2_MESSAGE_PENDING);
 13572                           
 13573  1056  3002               	movlw	2
 13574  1057  0020               	movlb	0	; select bank0
 13575  1058  062E               	xorwf	EMC1001_Write@status,w
 13576  1059  1903               	btfsc	3,2
 13577  105A  2856               	goto	l3578
 13578                           
 13579                           ;EMC1001.c: 61: if (status == I2C2_MESSAGE_COMPLETE) break;
 13580  105B  082E               	movf	EMC1001_Write@status,w
 13581  105C  1903               	btfsc	3,2
 13582  105D  2867               	goto	l3592
 13583                           
 13584                           ;EMC1001.c: 66: if (timeOut == 100)
 13585  105E  3064               	movlw	100
 13586  105F  062D               	xorwf	EMC1001_Write@timeOut,w
 13587  1060  1903               	btfsc	3,2
 13588  1061  2867               	goto	l3592
 13589                           
 13590                           ;EMC1001.c: 68: else
 13591                           ;EMC1001.c: 69: timeOut++;
 13592                           
 13593                           ;EMC1001.c: 67: break;
 13594  1062  3001               	movlw	1
 13595  1063  00A8               	movwf	??_EMC1001_Write
 13596  1064  0828               	movf	??_EMC1001_Write,w
 13597  1065  07AD               	addwf	EMC1001_Write@timeOut,f
 13598  1066  2845               	goto	l363
 13599  1067                     l3592:	
 13600                           
 13601                           ;EMC1001.c: 70: }
 13602                           ;EMC1001.c: 72: return (status == I2C2_MESSAGE_COMPLETE);
 13603  1067  082E               	movf	EMC1001_Write@status,w
 13604  1068  1D03               	btfss	3,2
 13605  1069  286C               	goto	u4750
 13606  106A  3001               	movlw	1
 13607  106B  0008               	return
 13608  106C                     u4750:	
 13609  106C  3000               	movlw	0
 13610  106D  0008               	return
 13611  106E                     __end_of_EMC1001_Write:	
 13612                           
 13613                           	psect	text42
 13614  106E                     __ptext42:	
 13615 ;; *************** function _EMC1001_Read *****************
 13616 ;; Defined at:
 13617 ;;		line 13 in file "EMC1001.c"
 13618 ;; Parameters:    Size  Location     Type
 13619 ;;  reg             1    wreg     unsigned char 
 13620 ;;  pData           1    7[BANK0 ] PTR unsigned char 
 13621 ;;		 -> EMC1001_PrintTemp@templo(1), EMC1001_PrintTemp@temp(1), EMC1001_PrintInfo@templo(1), EMC1001_PrintInfo@temp(1), 
 13622 ;;		 -> EMC1001_PrintInfo@data(1), EMC1001_THERM2@data(1), EMC1001_StandbyMode@data(1), EMC1001_MASK1@data(1), 
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;  reg             1   11[BANK0 ] unsigned char 
 13625 ;;  status          1   12[BANK0 ] enum E14267
 13626 ;;  timeOut         1   10[BANK0 ] unsigned char 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      unsigned char 
 13629 ;; Registers used:
 13630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/0
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13636 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;Total ram usage:        6 bytes
 13641 ;; Hardware stack levels used:    1
 13642 ;; Hardware stack levels required when called:    4
 13643 ;; This function calls:
 13644 ;;		_I2C2_MasterReadTRBBuild
 13645 ;;		_I2C2_MasterTRBInsert
 13646 ;;		_I2C2_MasterWriteTRBBuild
 13647 ;; This function is called by:
 13648 ;;		_EMC1001_MASK1
 13649 ;;		_EMC1001_StandbyMode
 13650 ;;		_EMC1001_THERM2
 13651 ;;		_EMC1001_PrintInfo
 13652 ;;		_EMC1001_PrintTemp
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           
 13657                           ;psect for function _EMC1001_Read
 13658  106E                     _EMC1001_Read:	
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _EMC1001_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13662                           ;EMC1001_Read@reg stored from wreg
 13663  106E  0020               	movlb	0	; select bank0
 13664  106F  00AB               	movwf	EMC1001_Read@reg
 13665                           
 13666                           ;EMC1001.c: 15: uint8_t timeOut=0;
 13667  1070  01AA               	clrf	EMC1001_Read@timeOut
 13668                           
 13669                           ;EMC1001.c: 17: I2C2_MESSAGE_STATUS status = I2C2_MESSAGE_PENDING;
 13670  1071  3002               	movlw	2
 13671  1072  00A8               	movwf	??_EMC1001_Read
 13672  1073  0828               	movf	??_EMC1001_Read,w
 13673  1074  00AC               	movwf	EMC1001_Read@status
 13674                           
 13675                           ;EMC1001.c: 18: static I2C2_TRANSACTION_REQUEST_BLOCK trb[2];
 13676                           ;EMC1001.c: 20: I2C2_MasterWriteTRBBuild(&trb[0], &reg, 1, 0x38);
 13677  1075  302B               	movlw	(low (EMC1001_Read@reg| 0))& (0+255)
 13678  1076  00A8               	movwf	??_EMC1001_Read
 13679  1077  0828               	movf	??_EMC1001_Read,w
 13680  1078  00A0               	movwf	I2C2_MasterWriteTRBBuild@pdata
 13681  1079  01A1               	clrf	I2C2_MasterWriteTRBBuild@length
 13682  107A  0AA1               	incf	I2C2_MasterWriteTRBBuild@length,f
 13683  107B  3038               	movlw	56
 13684  107C  00A2               	movwf	I2C2_MasterWriteTRBBuild@address
 13685  107D  3000               	movlw	0
 13686  107E  00A3               	movwf	I2C2_MasterWriteTRBBuild@address+1
 13687  107F  3020               	movlw	(low (EMC1001_Read@trb| (0+256)))& (0+255)
 13688  1080  3190  2003  3190   	fcall	_I2C2_MasterWriteTRBBuild
 13689                           
 13690                           ;EMC1001.c: 21: I2C2_MasterReadTRBBuild(&trb[1], pData, 1, 0x38);
 13691  1083  0020               	movlb	0	; select bank0
 13692  1084  0827               	movf	EMC1001_Read@pData,w
 13693  1085  00A8               	movwf	??_EMC1001_Read
 13694  1086  0828               	movf	??_EMC1001_Read,w
 13695  1087  00A0               	movwf	I2C2_MasterReadTRBBuild@pdata
 13696  1088  01A1               	clrf	I2C2_MasterReadTRBBuild@length
 13697  1089  0AA1               	incf	I2C2_MasterReadTRBBuild@length,f
 13698  108A  3038               	movlw	56
 13699  108B  00A2               	movwf	I2C2_MasterReadTRBBuild@address
 13700  108C  3000               	movlw	0
 13701  108D  00A3               	movwf	I2C2_MasterReadTRBBuild@address+1
 13702  108E  3024               	movlw	(low ((EMC1001_Read@trb| (0+256)+4)))& (0+255)
 13703  108F  319E  2622  3190   	fcall	_I2C2_MasterReadTRBBuild
 13704  1092                     l349:	
 13705                           ;EMC1001.c: 23: while(status != I2C2_MESSAGE_FAIL)
 13706                           
 13707  1092  0020               	movlb	0	; select bank0
 13708  1093  032C               	decf	EMC1001_Read@status,w
 13709  1094  1903               	btfsc	3,2
 13710  1095  28B4               	goto	l3562
 13711                           
 13712                           ;EMC1001.c: 24: {
 13713                           ;EMC1001.c: 25: I2C2_MasterTRBInsert(2, &trb[0], &status);
 13714  1096  3020               	movlw	(low (EMC1001_Read@trb| (0+256)))& (0+255)
 13715  1097  0020               	movlb	0	; select bank0
 13716  1098  00A8               	movwf	??_EMC1001_Read
 13717  1099  0828               	movf	??_EMC1001_Read,w
 13718  109A  00A0               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13719  109B  302C               	movlw	(low (EMC1001_Read@status| 0))& (0+255)
 13720  109C  00A9               	movwf	??_EMC1001_Read+1
 13721  109D  0829               	movf	??_EMC1001_Read+1,w
 13722  109E  00A1               	movwf	I2C2_MasterTRBInsert@pflag
 13723  109F  3002               	movlw	2
 13724  10A0  319F  272D  3190   	fcall	_I2C2_MasterTRBInsert
 13725  10A3                     l3548:	
 13726                           ;EMC1001.c: 27: while(status == I2C2_MESSAGE_PENDING);
 13727                           
 13728  10A3  3002               	movlw	2
 13729  10A4  0020               	movlb	0	; select bank0
 13730  10A5  062C               	xorwf	EMC1001_Read@status,w
 13731  10A6  1903               	btfsc	3,2
 13732  10A7  28A3               	goto	l3548
 13733                           
 13734                           ;EMC1001.c: 29: if (status == I2C2_MESSAGE_COMPLETE) break;
 13735  10A8  082C               	movf	EMC1001_Read@status,w
 13736  10A9  1903               	btfsc	3,2
 13737  10AA  28B4               	goto	l3562
 13738                           
 13739                           ;EMC1001.c: 34: if (timeOut == 100)
 13740  10AB  3064               	movlw	100
 13741  10AC  062A               	xorwf	EMC1001_Read@timeOut,w
 13742  10AD  1903               	btfsc	3,2
 13743  10AE  28B4               	goto	l3562
 13744                           
 13745                           ;EMC1001.c: 36: else
 13746                           ;EMC1001.c: 37: timeOut++;
 13747                           
 13748                           ;EMC1001.c: 35: break;
 13749  10AF  3001               	movlw	1
 13750  10B0  00A8               	movwf	??_EMC1001_Read
 13751  10B1  0828               	movf	??_EMC1001_Read,w
 13752  10B2  07AA               	addwf	EMC1001_Read@timeOut,f
 13753  10B3  2892               	goto	l349
 13754  10B4                     l3562:	
 13755                           
 13756                           ;EMC1001.c: 39: }
 13757                           ;EMC1001.c: 40: return (status == I2C2_MESSAGE_COMPLETE);
 13758  10B4  082C               	movf	EMC1001_Read@status,w
 13759  10B5  1D03               	btfss	3,2
 13760  10B6  28B9               	goto	u4690
 13761  10B7  3001               	movlw	1
 13762  10B8  0008               	return
 13763  10B9                     u4690:	
 13764  10B9  3000               	movlw	0
 13765  10BA  0008               	return
 13766  10BB                     __end_of_EMC1001_Read:	
 13767                           
 13768                           	psect	text43
 13769  1003                     __ptext43:	
 13770 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 13771 ;; Defined at:
 13772 ;;		line 707 in file "mcc_generated_files/i2c2.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  ptrb            1    wreg     PTR struct .
 13775 ;;		 -> EMC1001_Write@trb(4), EMC1001_Read@trb(8), I2C2_MasterWrite@trBlock(4), 
 13776 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
 13777 ;;		 -> EMC1001_Write@buffer(2), EMC1001_Read@reg(1), 
 13778 ;;  length          1    1[BANK0 ] unsigned char 
 13779 ;;  address         2    2[BANK0 ] unsigned int 
 13780 ;; Auto vars:     Size  Location     Type
 13781 ;;  ptrb            1    6[BANK0 ] PTR struct .
 13782 ;;		 -> EMC1001_Write@trb(4), EMC1001_Read@trb(8), I2C2_MasterWrite@trBlock(4), 
 13783 ;; Return value:  Size  Location     Type
 13784 ;;                  1    wreg      void 
 13785 ;; Registers used:
 13786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13787 ;; Tracked objects:
 13788 ;;		On entry : 0/0
 13789 ;;		On exit  : 0/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13792 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;Total ram usage:        7 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    3
 13799 ;; This function calls:
 13800 ;;		Nothing
 13801 ;; This function is called by:
 13802 ;;		_EMC1001_Read
 13803 ;;		_EMC1001_Write
 13804 ;;		_I2C2_MasterWrite
 13805 ;; This function uses a non-reentrant model
 13806 ;;
 13807                           
 13808                           
 13809                           ;psect for function _I2C2_MasterWriteTRBBuild
 13810  1003                     _I2C2_MasterWriteTRBBuild:	
 13811                           
 13812                           ;incstack = 0
 13813                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 13814                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 13815  1003  0020               	movlb	0	; select bank0
 13816  1004  00A6               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 13817                           
 13818                           ;i2c2.c: 713: ptrb->address = address << 1;
 13819  1005  0823               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 13820  1006  00A5               	movwf	??_I2C2_MasterWriteTRBBuild+1
 13821  1007  0822               	movf	I2C2_MasterWriteTRBBuild@address,w
 13822  1008  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
 13823  1009  35A4               	lslf	??_I2C2_MasterWriteTRBBuild,f
 13824  100A  0DA5               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 13825  100B  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13826  100C  0086               	movwf	6
 13827  100D  3001               	movlw	1	; select bank2/3
 13828  100E  0087               	movwf	7
 13829  100F  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
 13830  1010  3FC0               	movwi [0]fsr1
 13831  1011  0825               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 13832  1012  3FC1               	movwi [1]fsr1
 13833                           
 13834                           ;i2c2.c: 714: ptrb->length = length;
 13835  1013  0821               	movf	I2C2_MasterWriteTRBBuild@length,w
 13836  1014  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
 13837  1015  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13838  1016  3E02               	addlw	2
 13839  1017  0086               	movwf	6
 13840  1018  3001               	movlw	1	; select bank2/3
 13841  1019  0087               	movwf	7
 13842  101A  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
 13843  101B  0081               	movwf	1
 13844                           
 13845                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
 13846  101C  0820               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 13847  101D  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
 13848  101E  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13849  101F  3E03               	addlw	3
 13850  1020  0086               	movwf	6
 13851  1021  3001               	movlw	1	; select bank2/3
 13852  1022  0087               	movwf	7
 13853  1023  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
 13854  1024  0081               	movwf	1
 13855  1025  0008               	return
 13856  1026                     __end_of_I2C2_MasterWriteTRBBuild:	
 13857                           
 13858                           	psect	text44
 13859  1F2D                     __ptext44:	
 13860 ;; *************** function _I2C2_MasterTRBInsert *****************
 13861 ;; Defined at:
 13862 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  count           1    wreg     unsigned char 
 13865 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
 13866 ;;		 -> EMC1001_Write@trb(4), EMC1001_Read@trb(8), I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
 13867 ;;  pflag           1    1[BANK0 ] PTR enum E14260
 13868 ;;		 -> EMC1001_Write@status(1), EMC1001_Read@status(1), 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;  count           1    3[BANK0 ] unsigned char 
 13871 ;; Return value:  Size  Location     Type
 13872 ;;                  1    wreg      void 
 13873 ;; Registers used:
 13874 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;Total ram usage:        4 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; Hardware stack levels required when called:    3
 13887 ;; This function calls:
 13888 ;;		Nothing
 13889 ;; This function is called by:
 13890 ;;		_EMC1001_Read
 13891 ;;		_EMC1001_Write
 13892 ;;		_I2C2_MasterWrite
 13893 ;;		_I2C2_MasterRead
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           
 13898                           ;psect for function _I2C2_MasterTRBInsert
 13899  1F2D                     _I2C2_MasterTRBInsert:	
 13900                           
 13901                           ;incstack = 0
 13902                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 13903                           ;I2C2_MasterTRBInsert@count stored from wreg
 13904  1F2D  0020               	movlb	0	; select bank0
 13905  1F2E  00A3               	movwf	I2C2_MasterTRBInsert@count
 13906                           
 13907                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 13908  1F2F  1872               	btfsc	_i2c2_object+2,0
 13909  1F30  2F61               	goto	l2866
 13910                           
 13911                           ;i2c2.c: 649: {
 13912                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 13913  1F31  3002               	movlw	2
 13914  1F32  00A2               	movwf	??_I2C2_MasterTRBInsert
 13915  1F33  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 13916  1F34  0086               	movwf	6
 13917  1F35  0187               	clrf	7
 13918  1F36  0822               	movf	??_I2C2_MasterTRBInsert,w
 13919  1F37  0081               	movwf	1
 13920                           
 13921                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 13922  1F38  0820               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 13923  1F39  00A2               	movwf	??_I2C2_MasterTRBInsert
 13924  1F3A  0A70               	incf	_i2c2_object,w
 13925  1F3B  0086               	movwf	6
 13926  1F3C  0187               	clrf	7
 13927  1F3D  0822               	movf	??_I2C2_MasterTRBInsert,w
 13928  1F3E  0081               	movwf	1
 13929                           
 13930                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 13931  1F3F  0823               	movf	I2C2_MasterTRBInsert@count,w
 13932  1F40  00A2               	movwf	??_I2C2_MasterTRBInsert
 13933  1F41  0870               	movf	_i2c2_object,w
 13934  1F42  0086               	movwf	6
 13935  1F43  0187               	clrf	7
 13936  1F44  0822               	movf	??_I2C2_MasterTRBInsert,w
 13937  1F45  0081               	movwf	1
 13938                           
 13939                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 13940  1F46  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 13941  1F47  00A2               	movwf	??_I2C2_MasterTRBInsert
 13942  1F48  0870               	movf	_i2c2_object,w
 13943  1F49  3E02               	addlw	2
 13944  1F4A  0086               	movwf	6
 13945  1F4B  0187               	clrf	7
 13946  1F4C  0822               	movf	??_I2C2_MasterTRBInsert,w
 13947  1F4D  0081               	movwf	1
 13948                           
 13949                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 13950  1F4E  3003               	movlw	3
 13951  1F4F  00A2               	movwf	??_I2C2_MasterTRBInsert
 13952  1F50  0822               	movf	??_I2C2_MasterTRBInsert,w
 13953  1F51  07F0               	addwf	_i2c2_object,f
 13954                           
 13955                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 13956  1F52  0870               	movf	_i2c2_object,w
 13957  1F53  3AEB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
 13958  1F54  1D03               	skipz
 13959  1F55  2F5A               	goto	l2862
 13960                           
 13961                           ;i2c2.c: 659: {
 13962                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 13963  1F56  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
 13964  1F57  00A2               	movwf	??_I2C2_MasterTRBInsert
 13965  1F58  0822               	movf	??_I2C2_MasterTRBInsert,w
 13966  1F59  00F0               	movwf	_i2c2_object
 13967  1F5A                     l2862:	
 13968                           
 13969                           ;i2c2.c: 662: }
 13970                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 13971  1F5A  10F2               	bcf	_i2c2_object+2,1
 13972                           
 13973                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 13974  1F5B  0871               	movf	_i2c2_object+1,w
 13975  1F5C  0670               	xorwf	_i2c2_object,w
 13976  1F5D  1D03               	skipz
 13977  1F5E  2F66               	goto	l2868
 13978                           
 13979                           ;i2c2.c: 670: {
 13980                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 13981  1F5F  1472               	bsf	_i2c2_object+2,0
 13982                           
 13983                           ;i2c2.c: 673: }
 13984                           ;i2c2.c: 675: }
 13985  1F60  2F66               	goto	l2868
 13986  1F61                     l2866:	
 13987                           
 13988                           ;i2c2.c: 676: else
 13989                           ;i2c2.c: 677: {
 13990                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 13991  1F61  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 13992  1F62  0086               	movwf	6
 13993  1F63  0187               	clrf	7
 13994  1F64  0181               	clrf	1
 13995  1F65  0A81               	incf	1,f
 13996  1F66                     l2868:	
 13997                           
 13998                           ;i2c2.c: 679: }
 13999                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14000  1F66  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 14001  1F67  0086               	movwf	6
 14002  1F68  0187               	clrf	7
 14003  1F69  3002               	movlw	2
 14004  1F6A  0601               	xorwf	1,w
 14005  1F6B  1D03               	btfss	3,2
 14006  1F6C  0008               	return
 14007  1F6D                     l2872:	
 14008                           ;i2c2.c: 683: {
 14009                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
 14010                           
 14011  1F6D  086F               	movf	_i2c2_state,w
 14012  1F6E  1D03               	btfss	3,2
 14013  1F6F  2F6D               	goto	l2872
 14014                           
 14015                           ;i2c2.c: 685: {
 14016                           ;i2c2.c: 688: PIR3bits.SSP2IF = 1;
 14017  1F70  002E               	movlb	14	; select bank14
 14018  1F71  150F               	bsf	15,2	;volatile
 14019  1F72  0008               	return
 14020  1F73                     __end_of_I2C2_MasterTRBInsert:	
 14021                           
 14022                           	psect	text45
 14023  1E22                     __ptext45:	
 14024 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14025 ;; Defined at:
 14026 ;;		line 694 in file "mcc_generated_files/i2c2.c"
 14027 ;; Parameters:    Size  Location     Type
 14028 ;;  ptrb            1    wreg     PTR struct .
 14029 ;;		 -> EMC1001_Read@trb(8), I2C2_MasterRead@trBlock(4), 
 14030 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
 14031 ;;		 -> EMC1001_PrintTemp@templo(1), EMC1001_PrintTemp@temp(1), EMC1001_PrintInfo@templo(1), EMC1001_PrintInfo@temp(1), 
 14032 ;;		 -> EMC1001_PrintInfo@data(1), EMC1001_THERM2@data(1), EMC1001_StandbyMode@data(1), EMC1001_MASK1@data(1), 
 14033 ;;  length          1    1[BANK0 ] unsigned char 
 14034 ;;  address         2    2[BANK0 ] unsigned int 
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;  ptrb            1    6[BANK0 ] PTR struct .
 14037 ;;		 -> EMC1001_Read@trb(8), I2C2_MasterRead@trBlock(4), 
 14038 ;; Return value:  Size  Location     Type
 14039 ;;                  1    wreg      void 
 14040 ;; Registers used:
 14041 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14042 ;; Tracked objects:
 14043 ;;		On entry : 0/0
 14044 ;;		On exit  : 0/0
 14045 ;;		Unchanged: 0/0
 14046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14047 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;Total ram usage:        7 bytes
 14052 ;; Hardware stack levels used:    1
 14053 ;; Hardware stack levels required when called:    3
 14054 ;; This function calls:
 14055 ;;		Nothing
 14056 ;; This function is called by:
 14057 ;;		_EMC1001_Read
 14058 ;;		_I2C2_MasterRead
 14059 ;; This function uses a non-reentrant model
 14060 ;;
 14061                           
 14062                           
 14063                           ;psect for function _I2C2_MasterReadTRBBuild
 14064  1E22                     _I2C2_MasterReadTRBBuild:	
 14065                           
 14066                           ;incstack = 0
 14067                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14068                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14069  1E22  0020               	movlb	0	; select bank0
 14070  1E23  00A6               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14071                           
 14072                           ;i2c2.c: 700: ptrb->address = address << 1;
 14073  1E24  0823               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14074  1E25  00A5               	movwf	??_I2C2_MasterReadTRBBuild+1
 14075  1E26  0822               	movf	I2C2_MasterReadTRBBuild@address,w
 14076  1E27  00A4               	movwf	??_I2C2_MasterReadTRBBuild
 14077  1E28  35A4               	lslf	??_I2C2_MasterReadTRBBuild,f
 14078  1E29  0DA5               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14079  1E2A  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14080  1E2B  0086               	movwf	6
 14081  1E2C  3001               	movlw	1	; select bank2/3
 14082  1E2D  0087               	movwf	7
 14083  1E2E  0824               	movf	??_I2C2_MasterReadTRBBuild,w
 14084  1E2F  3FC0               	movwi [0]fsr1
 14085  1E30  0825               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14086  1E31  3FC1               	movwi [1]fsr1
 14087                           
 14088                           ;i2c2.c: 702: ptrb->address |= 0x01;
 14089  1E32  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14090  1E33  0086               	movwf	6
 14091  1E34  3001               	movlw	1	; select bank2/3
 14092  1E35  0087               	movwf	7
 14093  1E36  3001               	movlw	1
 14094  1E37  0481               	iorwf	1,f
 14095  1E38  3141               	addfsr 1,1
 14096  1E39  3000               	movlw	0
 14097  1E3A  0481               	iorwf	1,f
 14098                           
 14099                           ;i2c2.c: 703: ptrb->length = length;
 14100  1E3B  0821               	movf	I2C2_MasterReadTRBBuild@length,w
 14101  1E3C  00A4               	movwf	??_I2C2_MasterReadTRBBuild
 14102  1E3D  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14103  1E3E  3E02               	addlw	2
 14104  1E3F  0086               	movwf	6
 14105  1E40  3001               	movlw	1	; select bank2/3
 14106  1E41  0087               	movwf	7
 14107  1E42  0824               	movf	??_I2C2_MasterReadTRBBuild,w
 14108  1E43  0081               	movwf	1
 14109                           
 14110                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
 14111  1E44  0820               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14112  1E45  00A4               	movwf	??_I2C2_MasterReadTRBBuild
 14113  1E46  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14114  1E47  3E03               	addlw	3
 14115  1E48  0086               	movwf	6
 14116  1E49  3001               	movlw	1	; select bank2/3
 14117  1E4A  0087               	movwf	7
 14118  1E4B  0824               	movf	??_I2C2_MasterReadTRBBuild,w
 14119  1E4C  0081               	movwf	1
 14120  1E4D  0008               	return
 14121  1E4E                     __end_of_I2C2_MasterReadTRBBuild:	
 14122                           
 14123                           	psect	intentry
 14124  0004                     __pintentry:	
 14125 ;; *************** function _INTERRUPT_InterruptManager *****************
 14126 ;; Defined at:
 14127 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;		None
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;		None
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;Total ram usage:        1 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    2
 14148 ;; This function calls:
 14149 ;;		_I2C2_BusCollisionISR
 14150 ;;		_I2C2_ISR
 14151 ;; This function is called by:
 14152 ;;		Interrupt level 1
 14153 ;; This function uses a non-reentrant model
 14154 ;;
 14155                           
 14156  0004                     _INTERRUPT_InterruptManager:	
 14157                           
 14158                           ;incstack = 0
 14159  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14160                           
 14161                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14162  0005  3180               	pagesel	$
 14163  0006  0020               	movlb	0	; select bank0
 14164  0007  087F               	movf	127,w
 14165  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 14166                           
 14167                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.BCL2IE == 1 && PIR3bits.BC
      +                          L2IF == 1)
 14168  0009  1F0B               	btfss	11,6	;volatile
 14169  000A  2813               	goto	i1l200
 14170  000B  002E               	movlb	14	; select bank14
 14171  000C  1999               	btfsc	25,3	;volatile
 14172  000D  1D8F               	btfss	15,3	;volatile
 14173  000E  2813               	goto	i1l200
 14174                           
 14175                           ;interrupt_manager.c: 55: {
 14176                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 14177  000F  3180  2003  3180   	fcall	_I2C2_BusCollisionISR
 14178                           
 14179                           ;interrupt_manager.c: 57: }
 14180  0012  281B               	goto	i1l204
 14181  0013                     i1l200:	
 14182                           
 14183                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP2IE == 1 && PIR3bi
      +                          ts.SSP2IF == 1)
 14184  0013  1F0B               	btfss	11,6	;volatile
 14185  0014  281B               	goto	i1l204
 14186  0015  002E               	movlb	14	; select bank14
 14187  0016  1919               	btfsc	25,2	;volatile
 14188  0017  1D0F               	btfss	15,2	;volatile
 14189  0018  281B               	goto	i1l204
 14190                           
 14191                           ;interrupt_manager.c: 59: {
 14192                           ;interrupt_manager.c: 60: I2C2_ISR();
 14193  0019  318A  2230         	fcall	_I2C2_ISR
 14194  001B                     i1l204:	
 14195                           ;interrupt_manager.c: 62: else
 14196                           ;interrupt_manager.c: 63: {
 14197                           
 14198                           ;interrupt_manager.c: 61: }
 14199                           
 14200  001B  087D               	movf	??_INTERRUPT_InterruptManager,w
 14201  001C  0020               	movlb	0	; select bank0
 14202  001D  00FF               	movwf	127
 14203  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14204  001F  0009               	retfie
 14205  0020                     __end_of_INTERRUPT_InterruptManager:	
 14206                           
 14207                           	psect	text47
 14208  0A30                     __ptext47:	
 14209 ;; *************** function _I2C2_ISR *****************
 14210 ;; Defined at:
 14211 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 14212 ;; Parameters:    Size  Location     Type
 14213 ;;		None
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;		None
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      void 
 14218 ;; Registers used:
 14219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;Total ram usage:        4 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    1
 14232 ;; This function calls:
 14233 ;;		_I2C2_FunctionComplete
 14234 ;;		_I2C2_Stop
 14235 ;; This function is called by:
 14236 ;;		_INTERRUPT_InterruptManager
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           
 14241                           ;psect for function _I2C2_ISR
 14242  0A30                     _I2C2_ISR:	
 14243                           
 14244                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 14245                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 14246                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 14247                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 14248                           ;i2c2.c: 241: PIR3bits.SSP2IF = 0;
 14249                           
 14250                           ;incstack = 0
 14251                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14252  0A30  002E               	movlb	14	; select bank14
 14253  0A31  110F               	bcf	15,2	;volatile
 14254                           
 14255                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 14256  0A32  0023               	movlb	3	; select bank3
 14257  0A33  1F9A               	btfss	26,7	;volatile
 14258  0A34  2B6A               	goto	i1l3752
 14259                           
 14260                           ;i2c2.c: 246: {
 14261                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 14262  0A35  139A               	bcf	26,7	;volatile
 14263                           
 14264                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 14265  0A36  0020               	movlb	0	; select bank0
 14266  0A37  01EF               	clrf	_i2c2_state
 14267                           
 14268                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 14269  0A38  0875               	movf	_p_i2c2_current,w
 14270  0A39  3E02               	addlw	2
 14271  0A3A  0086               	movwf	6
 14272  0A3B  0187               	clrf	7
 14273  0A3C  0801               	movf	1,w
 14274  0A3D  0086               	movwf	6
 14275  0A3E  0187               	clrf	7
 14276  0A3F  0181               	clrf	1
 14277  0A40  0A81               	incf	1,f
 14278                           
 14279                           ;i2c2.c: 253: p_i2c2_current = (0);
 14280  0A41  01F5               	clrf	_p_i2c2_current
 14281                           
 14282                           ;i2c2.c: 255: return;
 14283  0A42  0008               	return
 14284  0A43                     i1l100:	
 14285                           ;i2c2.c: 260: {
 14286                           ;i2c2.c: 261: case S_MASTER_IDLE:
 14287                           
 14288                           ;i2c2.c: 256: }
 14289                           ;i2c2.c: 259: switch(i2c2_state)
 14290                           
 14291                           
 14292                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 14293  0A43  18F2               	btfsc	_i2c2_object+2,1
 14294  0A44  0008               	return
 14295                           
 14296                           ;i2c2.c: 264: {
 14297                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 14298  0A45  0871               	movf	_i2c2_object+1,w
 14299  0A46  00F9               	movwf	??_I2C2_ISR
 14300  0A47  0879               	movf	??_I2C2_ISR,w
 14301  0A48  00F5               	movwf	_p_i2c2_current
 14302                           
 14303                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 14304  0A49  0871               	movf	_i2c2_object+1,w
 14305  0A4A  0086               	movwf	6
 14306  0A4B  0187               	clrf	7
 14307  0A4C  0801               	movf	1,w
 14308  0A4D  00F9               	movwf	??_I2C2_ISR
 14309  0A4E  0879               	movf	??_I2C2_ISR,w
 14310  0A4F  0021               	movlb	1	; select bank1
 14311  0A50  00E7               	movwf	_i2c2_trb_count^(0+128)
 14312                           
 14313                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 14314  0A51  0871               	movf	_i2c2_object+1,w
 14315  0A52  0086               	movwf	6
 14316  0A53  0187               	clrf	7
 14317  0A54  3F41               	moviw [1]fsr1
 14318  0A55  00F6               	movwf	_p_i2c2_trb_current
 14319                           
 14320                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 14321  0A56  3003               	movlw	3
 14322  0A57  00F9               	movwf	??_I2C2_ISR
 14323  0A58  0879               	movf	??_I2C2_ISR,w
 14324  0A59  07F1               	addwf	_i2c2_object+1,f
 14325                           
 14326                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 14327  0A5A  0871               	movf	_i2c2_object+1,w
 14328  0A5B  3AEB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
 14329  0A5C  1D03               	skipz
 14330  0A5D  2A62               	goto	i1l3640
 14331                           
 14332                           ;i2c2.c: 274: {
 14333                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 14334  0A5E  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
 14335  0A5F  00F9               	movwf	??_I2C2_ISR
 14336  0A60  0879               	movf	??_I2C2_ISR,w
 14337  0A61  00F1               	movwf	_i2c2_object+1
 14338  0A62                     i1l3640:	
 14339                           
 14340                           ;i2c2.c: 277: }
 14341                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 14342  0A62  1072               	bcf	_i2c2_object+2,0
 14343                           
 14344                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 14345  0A63  0871               	movf	_i2c2_object+1,w
 14346  0A64  0670               	xorwf	_i2c2_object,w
 14347  0A65  1903               	btfsc	3,2
 14348                           
 14349                           ;i2c2.c: 285: {
 14350                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 14351  0A66  14F2               	bsf	_i2c2_object+2,1
 14352                           
 14353                           ;i2c2.c: 288: }
 14354                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 14355  0A67  0023               	movlb	3	; select bank3
 14356  0A68  141B               	bsf	27,0	;volatile
 14357                           
 14358                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 14359  0A69  3002               	movlw	2
 14360  0A6A  00F9               	movwf	??_I2C2_ISR
 14361  0A6B  0879               	movf	??_I2C2_ISR,w
 14362  0A6C  0020               	movlb	0	; select bank0
 14363  0A6D  00EF               	movwf	_i2c2_state
 14364                           
 14365                           ;i2c2.c: 295: }
 14366                           ;i2c2.c: 297: break;
 14367  0A6E  0008               	return
 14368  0A6F                     i1l105:	
 14369                           ;i2c2.c: 299: case S_MASTER_RESTART:
 14370                           
 14371                           
 14372                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 14373  0A6F  0023               	movlb	3	; select bank3
 14374  0A70  149B               	bsf	27,1	;volatile
 14375                           
 14376                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 14377  0A71  3002               	movlw	2
 14378  0A72  00F9               	movwf	??_I2C2_ISR
 14379  0A73  0879               	movf	??_I2C2_ISR,w
 14380  0A74  0020               	movlb	0	; select bank0
 14381  0A75  00EF               	movwf	_i2c2_state
 14382                           
 14383                           ;i2c2.c: 309: break;
 14384  0A76  0008               	return
 14385  0A77                     i1l106:	
 14386                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 14387                           
 14388                           
 14389                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 14390  0A77  0023               	movlb	3	; select bank3
 14391  0A78  1F1B               	btfss	27,6	;volatile
 14392  0A79  2A82               	goto	i1l3652
 14393                           
 14394                           ;i2c2.c: 314: {
 14395                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 14396  0A7A  3001               	movlw	1
 14397  0A7B  00F9               	movwf	??_I2C2_ISR
 14398  0A7C  0879               	movf	??_I2C2_ISR,w
 14399  0A7D  07F4               	addwf	_i2c2_object+4,f
 14400                           
 14401                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14402  0A7E  3004               	movlw	4
 14403  0A7F  319D  2509         	fcall	_I2C2_Stop
 14404                           
 14405                           ;i2c2.c: 317: }
 14406  0A81  0008               	return
 14407  0A82                     i1l3652:	
 14408                           
 14409                           ;i2c2.c: 318: else
 14410                           ;i2c2.c: 319: {
 14411                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 14412  0A82  0021               	movlb	1	; select bank1
 14413  0A83  086C               	movf	(I2C2_ISR@i2c_address+1)^(0+128),w
 14414  0A84  00FA               	movwf	??_I2C2_ISR+1
 14415  0A85  086B               	movf	I2C2_ISR@i2c_address^(0+128),w
 14416  0A86  00F9               	movwf	??_I2C2_ISR
 14417  0A87  36FA               	lsrf	??_I2C2_ISR+1,f
 14418  0A88  0CF9               	rrf	??_I2C2_ISR,f
 14419  0A89  0879               	movf	??_I2C2_ISR,w
 14420  0A8A  0023               	movlb	3	; select bank3
 14421  0A8B  0096               	movwf	22	;volatile
 14422                           
 14423                           ;i2c2.c: 324: if(i2c_address & 0x01)
 14424  0A8C  0021               	movlb	1	; select bank1
 14425  0A8D  1C6B               	btfss	I2C2_ISR@i2c_address^(0+128),0
 14426  0A8E  2A95               	goto	i1l3658
 14427                           
 14428                           ;i2c2.c: 325: {
 14429                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 14430  0A8F  300B               	movlw	11
 14431  0A90  00F9               	movwf	??_I2C2_ISR
 14432  0A91  0879               	movf	??_I2C2_ISR,w
 14433  0A92  0020               	movlb	0	; select bank0
 14434  0A93  00EF               	movwf	_i2c2_state
 14435                           
 14436                           ;i2c2.c: 329: }
 14437  0A94  0008               	return
 14438  0A95                     i1l3658:	
 14439                           
 14440                           ;i2c2.c: 330: else
 14441                           ;i2c2.c: 331: {
 14442                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 14443  0A95  3003               	movlw	3
 14444  0A96  00F9               	movwf	??_I2C2_ISR
 14445  0A97  0879               	movf	??_I2C2_ISR,w
 14446  0A98  0020               	movlb	0	; select bank0
 14447  0A99  00EF               	movwf	_i2c2_state
 14448                           
 14449                           ;i2c2.c: 334: }
 14450                           ;i2c2.c: 335: }
 14451                           ;i2c2.c: 337: break;
 14452  0A9A  0008               	return
 14453  0A9B                     i1l111:	
 14454                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 14455                           
 14456                           
 14457                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 14458  0A9B  0023               	movlb	3	; select bank3
 14459  0A9C  1F1B               	btfss	27,6	;volatile
 14460  0A9D  2AA6               	goto	i1l112
 14461                           
 14462                           ;i2c2.c: 342: {
 14463                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 14464  0A9E  3001               	movlw	1
 14465  0A9F  00F9               	movwf	??_I2C2_ISR
 14466  0AA0  0879               	movf	??_I2C2_ISR,w
 14467  0AA1  07F4               	addwf	_i2c2_object+4,f
 14468                           
 14469                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14470  0AA2  3004               	movlw	4
 14471  0AA3  319D  2509         	fcall	_I2C2_Stop
 14472                           
 14473                           ;i2c2.c: 345: }
 14474  0AA5  0008               	return
 14475  0AA6                     i1l112:	
 14476                           
 14477                           ;i2c2.c: 346: else
 14478                           ;i2c2.c: 347: {
 14479                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 14480  0AA6  149B               	bsf	27,1	;volatile
 14481                           
 14482                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 14483  0AA7  0021               	movlb	1	; select bank1
 14484  0AA8  086C               	movf	(I2C2_ISR@i2c_address+1)^(0+128),w
 14485  0AA9  00FA               	movwf	??_I2C2_ISR+1
 14486  0AAA  086B               	movf	I2C2_ISR@i2c_address^(0+128),w
 14487  0AAB  00F9               	movwf	??_I2C2_ISR
 14488  0AAC  087A               	movf	??_I2C2_ISR+1,w
 14489  0AAD  00F9               	movwf	??_I2C2_ISR
 14490  0AAE  01FA               	clrf	??_I2C2_ISR+1
 14491  0AAF  3006               	movlw	6
 14492  0AB0  0579               	andwf	??_I2C2_ISR,w
 14493  0AB1  00FB               	movwf	??_I2C2_ISR+2
 14494  0AB2  3000               	movlw	0
 14495  0AB3  057A               	andwf	??_I2C2_ISR+1,w
 14496  0AB4  00FC               	movwf	??_I2C2_ISR+3
 14497  0AB5  30F0               	movlw	240
 14498  0AB6  047B               	iorwf	??_I2C2_ISR+2,w
 14499  0AB7  00EB               	movwf	I2C2_ISR@i2c_address^(0+128)
 14500  0AB8  3000               	movlw	0
 14501  0AB9  047C               	iorwf	??_I2C2_ISR+3,w
 14502  0ABA  00EC               	movwf	(I2C2_ISR@i2c_address+1)^(0+128)
 14503                           
 14504                           ;i2c2.c: 357: i2c_address |= 0x0001;
 14505  0ABB  146B               	bsf	I2C2_ISR@i2c_address^(0+128),0
 14506                           
 14507                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 14508  0ABC  01E4               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 14509  0ABD  0AE4               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 14510                           
 14511                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 14512  0ABE  3002               	movlw	2
 14513  0ABF  00F9               	movwf	??_I2C2_ISR
 14514  0AC0  0879               	movf	??_I2C2_ISR,w
 14515  0AC1  0020               	movlb	0	; select bank0
 14516  0AC2  00EF               	movwf	_i2c2_state
 14517                           
 14518                           ;i2c2.c: 364: }
 14519                           ;i2c2.c: 366: break;
 14520  0AC3  0008               	return
 14521  0AC4                     i1l3672:	
 14522                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 14523                           
 14524                           
 14525                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 14526  0AC4  0021               	movlb	1	; select bank1
 14527  0AC5  0364               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 14528  0AC6  1903               	btfsc	3,2
 14529  0AC7  2ADE               	goto	i1l3692
 14530                           
 14531                           ;i2c2.c: 382: {
 14532                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 14533  0AC8  0876               	movf	_p_i2c2_trb_current,w
 14534  0AC9  0086               	movwf	6
 14535  0ACA  3001               	movlw	1	; select bank2/3
 14536  0ACB  0087               	movwf	7
 14537  0ACC  3F40               	moviw [0]fsr1
 14538  0ACD  00EB               	movwf	I2C2_ISR@i2c_address^(0+128)
 14539  0ACE  3F41               	moviw [1]fsr1
 14540  0ACF  00EC               	movwf	(I2C2_ISR@i2c_address+1)^(0+128)
 14541                           
 14542                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 14543  0AD0  0876               	movf	_p_i2c2_trb_current,w
 14544  0AD1  0086               	movwf	6
 14545  0AD2  3001               	movlw	1	; select bank2/3
 14546  0AD3  0087               	movwf	7
 14547  0AD4  3001               	movlw	1	; select bank2/3
 14548  0AD5  3F43               	moviw [3]fsr1
 14549  0AD6  00E6               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 14550                           
 14551                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 14552  0AD7  0876               	movf	_p_i2c2_trb_current,w
 14553  0AD8  0086               	movwf	6
 14554  0AD9  3001               	movlw	1	; select bank2/3
 14555  0ADA  0087               	movwf	7
 14556  0ADB  3001               	movlw	1	; select bank2/3
 14557  0ADC  3F42               	moviw [2]fsr1
 14558  0ADD  00E5               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 14559  0ADE                     i1l3692:	
 14560                           ;i2c2.c: 407: }
 14561                           ;i2c2.c: 408: }
 14562                           
 14563                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 14564                           
 14565                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 14566                           
 14567                           ;i2c2.c: 400: else
 14568                           ;i2c2.c: 401: {
 14569                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 14570                           
 14571                           ;i2c2.c: 399: }
 14572                           
 14573                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 14574                           
 14575                           ;i2c2.c: 393: {
 14576                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 14577                           
 14578                           ;i2c2.c: 391: {
 14579                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 14580                           
 14581                           ;i2c2.c: 387: }
 14582                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 14583                           
 14584                           
 14585                           ;i2c2.c: 409: else
 14586                           ;i2c2.c: 410: {
 14587                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 14588  0ADE  086B               	movf	I2C2_ISR@i2c_address^(0+128),w
 14589  0ADF  0023               	movlb	3	; select bank3
 14590  0AE0  0096               	movwf	22	;volatile
 14591                           
 14592                           ;i2c2.c: 413: if(i2c_address & 0x01)
 14593  0AE1  0021               	movlb	1	; select bank1
 14594  0AE2  1C6B               	btfss	I2C2_ISR@i2c_address^(0+128),0
 14595  0AE3  2AEA               	goto	i1l3698
 14596                           
 14597                           ;i2c2.c: 414: {
 14598                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 14599  0AE4  3005               	movlw	5
 14600  0AE5  00F9               	movwf	??_I2C2_ISR
 14601  0AE6  0879               	movf	??_I2C2_ISR,w
 14602  0AE7  0020               	movlb	0	; select bank0
 14603  0AE8  00EF               	movwf	_i2c2_state
 14604                           
 14605                           ;i2c2.c: 417: }
 14606  0AE9  0008               	return
 14607  0AEA                     i1l3698:	
 14608                           
 14609                           ;i2c2.c: 418: else
 14610                           ;i2c2.c: 419: {
 14611                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 14612  0AEA  3003               	movlw	3
 14613  0AEB  00F9               	movwf	??_I2C2_ISR
 14614  0AEC  0879               	movf	??_I2C2_ISR,w
 14615  0AED  0020               	movlb	0	; select bank0
 14616  0AEE  00EF               	movwf	_i2c2_state
 14617                           
 14618                           ;i2c2.c: 422: }
 14619                           ;i2c2.c: 423: }
 14620                           ;i2c2.c: 424: break;
 14621  0AEF  0008               	return
 14622  0AF0                     i1l122:	
 14623                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 14624                           
 14625                           
 14626                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 14627  0AF0  0023               	movlb	3	; select bank3
 14628  0AF1  1F1B               	btfss	27,6	;volatile
 14629  0AF2  2AFC               	goto	i1l3706
 14630                           
 14631                           ;i2c2.c: 430: {
 14632                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 14633  0AF3  3001               	movlw	1
 14634  0AF4  00F9               	movwf	??_I2C2_ISR
 14635  0AF5  0879               	movf	??_I2C2_ISR,w
 14636  0AF6  07F4               	addwf	_i2c2_object+4,f
 14637                           
 14638                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 14639  0AF7  131B               	bcf	27,6	;volatile
 14640                           
 14641                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 14642  0AF8  3005               	movlw	5
 14643  0AF9  319D  2509         	fcall	_I2C2_Stop
 14644                           
 14645                           ;i2c2.c: 440: }
 14646  0AFB  0008               	return
 14647  0AFC                     i1l3706:	
 14648                           
 14649                           ;i2c2.c: 441: else
 14650                           ;i2c2.c: 442: {
 14651                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 14652  0AFC  3001               	movlw	1
 14653  0AFD  0021               	movlb	1	; select bank1
 14654  0AFE  02E5               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 14655  0AFF  0A65               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 14656  0B00  1D03               	btfss	3,2
 14657  0B01  2B16               	goto	i1l3714
 14658                           
 14659                           ;i2c2.c: 445: {
 14660                           ;i2c2.c: 449: p_i2c2_trb_current++;
 14661  0B02  3004               	movlw	4
 14662  0B03  00F9               	movwf	??_I2C2_ISR
 14663  0B04  0879               	movf	??_I2C2_ISR,w
 14664  0B05  07F6               	addwf	_p_i2c2_trb_current,f
 14665                           
 14666                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 14667  0B06  3001               	movlw	1
 14668  0B07  02E7               	subwf	_i2c2_trb_count^(0+128),f
 14669  0B08  1D03               	btfss	3,2
 14670  0B09  2B0E               	goto	i1l126
 14671                           
 14672                           ;i2c2.c: 453: {
 14673                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 14674  0B0A  3000               	movlw	0
 14675  0B0B  319D  2509         	fcall	_I2C2_Stop
 14676                           
 14677                           ;i2c2.c: 455: }
 14678  0B0D  0008               	return
 14679  0B0E                     i1l126:	
 14680                           
 14681                           ;i2c2.c: 456: else
 14682                           ;i2c2.c: 457: {
 14683                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 14684  0B0E  0023               	movlb	3	; select bank3
 14685  0B0F  149B               	bsf	27,1	;volatile
 14686                           
 14687                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 14688  0B10  3002               	movlw	2
 14689  0B11  00F9               	movwf	??_I2C2_ISR
 14690  0B12  0879               	movf	??_I2C2_ISR,w
 14691  0B13  0020               	movlb	0	; select bank0
 14692  0B14  00EF               	movwf	_i2c2_state
 14693                           
 14694                           ;i2c2.c: 469: }
 14695                           ;i2c2.c: 470: }
 14696  0B15  0008               	return
 14697  0B16                     i1l3714:	
 14698                           
 14699                           ;i2c2.c: 471: else
 14700                           ;i2c2.c: 472: {
 14701                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 14702  0B16  0021               	movlb	1	; select bank1
 14703  0B17  0866               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 14704  0B18  0086               	movwf	6
 14705  0B19  0187               	clrf	7
 14706  0B1A  0801               	movf	1,w
 14707  0B1B  0023               	movlb	3	; select bank3
 14708  0B1C  0096               	movwf	22	;volatile
 14709  0B1D  3001               	movlw	1
 14710  0B1E  00F9               	movwf	??_I2C2_ISR
 14711  0B1F  0879               	movf	??_I2C2_ISR,w
 14712  0B20  0021               	movlb	1	; select bank1
 14713  0B21  07E6               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 14714                           
 14715                           ;i2c2.c: 475: }
 14716                           ;i2c2.c: 476: }
 14717                           ;i2c2.c: 477: break;
 14718  0B22  0008               	return
 14719  0B23                     i1l129:	
 14720                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 14721                           
 14722                           
 14723                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 14724  0B23  0023               	movlb	3	; select bank3
 14725  0B24  1F1B               	btfss	27,6	;volatile
 14726  0B25  2B30               	goto	i1l130
 14727                           
 14728                           ;i2c2.c: 483: {
 14729                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 14730  0B26  3001               	movlw	1
 14731  0B27  00F9               	movwf	??_I2C2_ISR
 14732  0B28  0879               	movf	??_I2C2_ISR,w
 14733  0B29  07F4               	addwf	_i2c2_object+4,f
 14734                           
 14735                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14736  0B2A  3004               	movlw	4
 14737  0B2B  319D  2509         	fcall	_I2C2_Stop
 14738                           
 14739                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 14740  0B2D  0023               	movlb	3	; select bank3
 14741  0B2E  131B               	bcf	27,6	;volatile
 14742                           
 14743                           ;i2c2.c: 493: }
 14744  0B2F  0008               	return
 14745  0B30                     i1l130:	
 14746                           
 14747                           ;i2c2.c: 494: else
 14748                           ;i2c2.c: 495: {
 14749                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 14750  0B30  159B               	bsf	27,3	;volatile
 14751                           
 14752                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 14753  0B31  3008               	movlw	8
 14754  0B32  00F9               	movwf	??_I2C2_ISR
 14755  0B33  0879               	movf	??_I2C2_ISR,w
 14756  0B34  0020               	movlb	0	; select bank0
 14757  0B35  00EF               	movwf	_i2c2_state
 14758                           
 14759                           ;i2c2.c: 498: }
 14760                           ;i2c2.c: 499: break;
 14761  0B36  0008               	return
 14762  0B37                     i1l3726:	
 14763                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 14764                           
 14765                           
 14766                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 14767  0B37  3008               	movlw	8
 14768  0B38  00F9               	movwf	??_I2C2_ISR
 14769  0B39  0879               	movf	??_I2C2_ISR,w
 14770  0B3A  00EF               	movwf	_i2c2_state
 14771                           
 14772                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 14773  0B3B  0023               	movlb	3	; select bank3
 14774  0B3C  159B               	bsf	27,3	;volatile
 14775                           
 14776                           ;i2c2.c: 511: break;
 14777  0B3D  0008               	return
 14778  0B3E                     i1l3730:	
 14779                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 14780                           
 14781                           
 14782                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 14783  0B3E  0023               	movlb	3	; select bank3
 14784  0B3F  0816               	movf	22,w	;volatile
 14785  0B40  00F9               	movwf	??_I2C2_ISR
 14786  0B41  0021               	movlb	1	; select bank1
 14787  0B42  0866               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 14788  0B43  0086               	movwf	6
 14789  0B44  0187               	clrf	7
 14790  0B45  0879               	movf	??_I2C2_ISR,w
 14791  0B46  0081               	movwf	1
 14792  0B47  3001               	movlw	1
 14793  0B48  00F9               	movwf	??_I2C2_ISR
 14794  0B49  0879               	movf	??_I2C2_ISR,w
 14795  0B4A  07E6               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 14796                           
 14797                           ;i2c2.c: 519: if(--i2c_bytes_left)
 14798  0B4B  3001               	movlw	1
 14799  0B4C  02E5               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 14800  0B4D  1903               	btfsc	3,2
 14801  0B4E  2B57               	goto	i1l134
 14802                           
 14803                           ;i2c2.c: 520: {
 14804                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 14805  0B4F  0023               	movlb	3	; select bank3
 14806  0B50  129B               	bcf	27,5	;volatile
 14807                           
 14808                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 14809  0B51  3006               	movlw	6
 14810  0B52  00F9               	movwf	??_I2C2_ISR
 14811  0B53  0879               	movf	??_I2C2_ISR,w
 14812  0B54  0020               	movlb	0	; select bank0
 14813  0B55  00EF               	movwf	_i2c2_state
 14814                           
 14815                           ;i2c2.c: 530: }
 14816  0B56  2B5B               	goto	i1l3742
 14817  0B57                     i1l134:	
 14818                           
 14819                           ;i2c2.c: 531: else
 14820                           ;i2c2.c: 532: {
 14821                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 14822  0B57  0023               	movlb	3	; select bank3
 14823  0B58  169B               	bsf	27,5	;volatile
 14824                           
 14825                           ;i2c2.c: 538: I2C2_FunctionComplete();
 14826  0B59  319C  24DF         	fcall	_I2C2_FunctionComplete
 14827  0B5B                     i1l3742:	
 14828                           
 14829                           ;i2c2.c: 539: }
 14830                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 14831  0B5B  0023               	movlb	3	; select bank3
 14832  0B5C  161B               	bsf	27,4	;volatile
 14833                           
 14834                           ;i2c2.c: 543: break;
 14835  0B5D  0008               	return
 14836  0B5E                     i1l3744:	
 14837                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 14838                           
 14839                           
 14840                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 14841                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 14842  0B5E  3000               	movlw	0
 14843  0B5F  319D  2509         	fcall	_I2C2_Stop
 14844                           
 14845                           ;i2c2.c: 550: break;
 14846  0B61  0008               	return
 14847  0B62                     i1l3746:	
 14848                           ;i2c2.c: 552: default:
 14849                           
 14850                           
 14851                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 14852  0B62  3001               	movlw	1
 14853  0B63  00F9               	movwf	??_I2C2_ISR
 14854  0B64  0879               	movf	??_I2C2_ISR,w
 14855  0B65  07F4               	addwf	_i2c2_object+4,f
 14856                           
 14857                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 14858  0B66  3006               	movlw	6
 14859  0B67  319D  2509         	fcall	_I2C2_Stop
 14860                           
 14861                           ;i2c2.c: 560: }
 14862                           
 14863                           ;i2c2.c: 558: break;
 14864  0B69  0008               	return
 14865  0B6A                     i1l3752:	
 14866  0B6A  0020               	movlb	0	; select bank0
 14867  0B6B  086F               	movf	_i2c2_state,w
 14868                           
 14869                           ; Switch size 1, requested type "space"
 14870                           ; Number of cases is 11, Range of values is 0 to 11
 14871                           ; switch strategies available:
 14872                           ; Name         Instructions Cycles
 14873                           ; direct_byte           30     6 (fixed)
 14874                           ; simple_byte           34    18 (average)
 14875                           ; jumptable            260     6 (fixed)
 14876                           ;	Chosen strategy is direct_byte
 14877  0B6C  0084               	movwf	4
 14878  0B6D  300C               	movlw	12
 14879  0B6E  0204               	subwf	4,w
 14880  0B6F  1803               	skipnc
 14881  0B70  2B62               	goto	i1l3746
 14882  0B71  3198               	movlp	high i1S4670
 14883  0B72  3504               	lslf	4,w
 14884  0B73  3E00               	addlw	low i1S4670
 14885  0B74  0082               	movwf	2
 14886  0B75  0008               	return
 14887  0B76                     __end_of_I2C2_ISR:	
 14888                           
 14889                           	psect	swtext1
 14890  1800                     __pswtext1:	
 14891  1800                     i1S4670:	
 14892  1800  318A  2A43         	ljmp	i1l100
 14893  1802  318A  2A6F         	ljmp	i1l105
 14894  1804  318A  2AC4         	ljmp	i1l3672
 14895  1806  318A  2AF0         	ljmp	i1l122
 14896  1808  318B  2B5E         	ljmp	i1l3744
 14897  180A  318B  2B23         	ljmp	i1l129
 14898  180C  318B  2B37         	ljmp	i1l3726
 14899  180E  318B  2B5E         	ljmp	i1l3744
 14900  1810  318B  2B3E         	ljmp	i1l3730
 14901  1812  318B  2B62         	ljmp	i1l3746
 14902  1814  318A  2A77         	ljmp	i1l106
 14903  1816  318A  2A9B         	ljmp	i1l111
 14904                           
 14905                           	psect	text48
 14906  1D09                     __ptext48:	
 14907 ;; *************** function _I2C2_Stop *****************
 14908 ;; Defined at:
 14909 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 14910 ;; Parameters:    Size  Location     Type
 14911 ;;  completion_c    1    wreg     enum E14260
 14912 ;; Auto vars:     Size  Location     Type
 14913 ;;  completion_c    1    1[COMMON] enum E14260
 14914 ;; Return value:  Size  Location     Type
 14915 ;;                  1    wreg      void 
 14916 ;; Registers used:
 14917 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14918 ;; Tracked objects:
 14919 ;;		On entry : 0/0
 14920 ;;		On exit  : 0/0
 14921 ;;		Unchanged: 0/0
 14922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;Total ram usage:        2 bytes
 14928 ;; Hardware stack levels used:    1
 14929 ;; This function calls:
 14930 ;;		Nothing
 14931 ;; This function is called by:
 14932 ;;		_I2C2_ISR
 14933 ;; This function uses a non-reentrant model
 14934 ;;
 14935                           
 14936                           
 14937                           ;psect for function _I2C2_Stop
 14938  1D09                     _I2C2_Stop:	
 14939                           
 14940                           ;incstack = 0
 14941                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 14942                           ;I2C2_Stop@completion_code stored from wreg
 14943  1D09  00F8               	movwf	I2C2_Stop@completion_code
 14944                           
 14945                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 14946  1D0A  0023               	movlb	3	; select bank3
 14947  1D0B  151B               	bsf	27,2	;volatile
 14948                           
 14949                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 14950  1D0C  0875               	movf	_p_i2c2_current,w
 14951  1D0D  3E02               	addlw	2
 14952  1D0E  0086               	movwf	6
 14953  1D0F  0187               	clrf	7
 14954  1D10  0801               	movf	1,w
 14955  1D11  1903               	btfsc	3,2
 14956  1D12  2D1E               	goto	i1l3212
 14957                           
 14958                           ;i2c2.c: 588: {
 14959                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 14960  1D13  0878               	movf	I2C2_Stop@completion_code,w
 14961  1D14  00F7               	movwf	??_I2C2_Stop
 14962  1D15  0875               	movf	_p_i2c2_current,w
 14963  1D16  3E02               	addlw	2
 14964  1D17  0086               	movwf	6
 14965  1D18  0187               	clrf	7
 14966  1D19  0801               	movf	1,w
 14967  1D1A  0086               	movwf	6
 14968  1D1B  0187               	clrf	7
 14969  1D1C  0877               	movf	??_I2C2_Stop,w
 14970  1D1D  0081               	movwf	1
 14971  1D1E                     i1l3212:	
 14972                           
 14973                           ;i2c2.c: 591: }
 14974                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 14975  1D1E  0020               	movlb	0	; select bank0
 14976  1D1F  01EF               	clrf	_i2c2_state
 14977  1D20  0008               	return
 14978  1D21                     __end_of_I2C2_Stop:	
 14979                           
 14980                           	psect	text49
 14981  1CDF                     __ptext49:	
 14982 ;; *************** function _I2C2_FunctionComplete *****************
 14983 ;; Defined at:
 14984 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 14985 ;; Parameters:    Size  Location     Type
 14986 ;;		None
 14987 ;; Auto vars:     Size  Location     Type
 14988 ;;		None
 14989 ;; Return value:  Size  Location     Type
 14990 ;;                  1    wreg      void 
 14991 ;; Registers used:
 14992 ;;		wreg, status,2, status,0
 14993 ;; Tracked objects:
 14994 ;;		On entry : 0/0
 14995 ;;		On exit  : 0/0
 14996 ;;		Unchanged: 0/0
 14997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;Total ram usage:        1 bytes
 15003 ;; Hardware stack levels used:    1
 15004 ;; This function calls:
 15005 ;;		Nothing
 15006 ;; This function is called by:
 15007 ;;		_I2C2_ISR
 15008 ;; This function uses a non-reentrant model
 15009 ;;
 15010                           
 15011                           
 15012                           ;psect for function _I2C2_FunctionComplete
 15013  1CDF                     _I2C2_FunctionComplete:	
 15014                           
 15015                           ;i2c2.c: 567: p_i2c2_trb_current++;
 15016                           
 15017                           ;incstack = 0
 15018                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 15019  1CDF  3004               	movlw	4
 15020  1CE0  00F7               	movwf	??_I2C2_FunctionComplete
 15021  1CE1  0877               	movf	??_I2C2_FunctionComplete,w
 15022  1CE2  07F6               	addwf	_p_i2c2_trb_current,f
 15023                           
 15024                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 15025  1CE3  3001               	movlw	1
 15026  1CE4  0021               	movlb	1	; select bank1
 15027  1CE5  02E7               	subwf	_i2c2_trb_count^(0+128),f
 15028  1CE6  1D03               	btfss	3,2
 15029  1CE7  2CEE               	goto	i1l141
 15030                           
 15031                           ;i2c2.c: 571: {
 15032                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 15033  1CE8  3004               	movlw	4
 15034  1CE9  00F7               	movwf	??_I2C2_FunctionComplete
 15035  1CEA  0877               	movf	??_I2C2_FunctionComplete,w
 15036  1CEB  0020               	movlb	0	; select bank0
 15037  1CEC  00EF               	movwf	_i2c2_state
 15038                           
 15039                           ;i2c2.c: 573: }
 15040  1CED  0008               	return
 15041  1CEE                     i1l141:	
 15042                           
 15043                           ;i2c2.c: 574: else
 15044                           ;i2c2.c: 575: {
 15045                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 15046  1CEE  0020               	movlb	0	; select bank0
 15047  1CEF  01EF               	clrf	_i2c2_state
 15048  1CF0  0AEF               	incf	_i2c2_state,f
 15049  1CF1  0008               	return
 15050  1CF2                     __end_of_I2C2_FunctionComplete:	
 15051                           
 15052                           	psect	text50
 15053  0003                     __ptext50:	
 15054 ;; *************** function _I2C2_BusCollisionISR *****************
 15055 ;; Defined at:
 15056 ;;		line 728 in file "mcc_generated_files/i2c2.c"
 15057 ;; Parameters:    Size  Location     Type
 15058 ;;		None
 15059 ;; Auto vars:     Size  Location     Type
 15060 ;;		None
 15061 ;; Return value:  Size  Location     Type
 15062 ;;                  1    wreg      void 
 15063 ;; Registers used:
 15064 ;;		None
 15065 ;; Tracked objects:
 15066 ;;		On entry : 0/0
 15067 ;;		On exit  : 0/0
 15068 ;;		Unchanged: 0/0
 15069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15074 ;;Total ram usage:        0 bytes
 15075 ;; Hardware stack levels used:    1
 15076 ;; This function calls:
 15077 ;;		Nothing
 15078 ;; This function is called by:
 15079 ;;		_INTERRUPT_InterruptManager
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083                           
 15084                           ;psect for function _I2C2_BusCollisionISR
 15085  0003                     _I2C2_BusCollisionISR:	
 15086                           
 15087                           ;incstack = 0
 15088                           ; Regs used in _I2C2_BusCollisionISR: []
 15089  0003  0008               	return
 15090  0004                     __end_of_I2C2_BusCollisionISR:	
 15091  007E                     btemp	set	126	;btemp
 15092  007E                     int$flags	set	126
 15093  007E                     wtemp0	set	126


Data Sizes:
    Strings     580
    Constant    150
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      80
    BANK1            80     68      77
    BANK2            80      0      20
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    EMC1001_Read@trb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    i2c2_tr_queue.pTrFlag	PTR enum E14260 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 75
		 -> STR_3(CODE[75]), STR_2(CODE[42]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 75
		 -> STR_3(CODE[75]), STR_2(CODE[42]), 

    printf$850	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_20(CODE[7]), STR_14(CODE[9]), STR_13(CODE[8]), STR_6(CODE[1]), 
		 -> STR_5(CODE[3]), EMC1001_PrintInfo@data(BANK1[1]), I2C2_ISR@i2c_address(BANK1[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 65
		 -> STR_19(CODE[30]), STR_18(CODE[27]), STR_17(CODE[22]), STR_16(CODE[32]), 
		 -> STR_15(CODE[33]), STR_12(CODE[20]), STR_11(CODE[53]), STR_10(CODE[65]), 
		 -> STR_9(CODE[55]), STR_8(CODE[16]), STR_7(CODE[23]), STR_4(CODE[24]), 
		 -> STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    EMC1001_PrintInfo$777	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_14(CODE[9]), STR_13(CODE[8]), 

    EMC1001_PrintInfo$767	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[1]), STR_5(CODE[3]), 

    F14425.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    EMC1001_Read@pData	PTR unsigned char  size(1) Largest target is 1
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E14260 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E14260 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    F14372.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    F14367.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), I2C2_ISR@i2c_address(BANK1[2]), NULL(NULL[0]), 

    S87$pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 
		 -> NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E14260 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    S99$pTrFlag	PTR enum E14260 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E14260 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    S99$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S110$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S110$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _main->_EMC1001_PrintTemp
    _puts->_cputs
    _cputs->_putch
    _SYSTEM_Initialize->_I2C2_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _EMC1001_THERM2->_EMC1001_Write
    _EMC1001_StandbyMode->_EMC1001_Write
    _EMC1001_SetThermLimit->_EMC1001_Write
    _EMC1001_SetThermHysteresis->_EMC1001_Write
    _EMC1001_SetTempLowLimit->___awdiv
    _EMC1001_SetTempHighLimit->___awdiv
    _EMC1001_SetConversionRate->_EMC1001_Write
    _EMC1001_SMBusTimeout->_EMC1001_Write
    _EMC1001_PrintTemp->_printf
    _EMC1001_PrintInfo->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_EUSART_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _EMC1001_MASK1->_EMC1001_Write
    _EMC1001_Write->_I2C2_MasterWriteTRBBuild
    _EMC1001_Read->_I2C2_MasterReadTRBBuild
    _EMC1001_Read->_I2C2_MasterWriteTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_EMC1001_PrintInfo
    _EMC1001_PrintTemp->_printf
    _EMC1001_PrintInfo->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  213553
                                             66 BANK1      2     2      0
                      _EMC1001_MASK1
                  _EMC1001_PrintInfo
                  _EMC1001_PrintTemp
               _EMC1001_SMBusTimeout
          _EMC1001_SetConversionRate
           _EMC1001_SetTempHighLimit
            _EMC1001_SetTempLowLimit
         _EMC1001_SetThermHysteresis
              _EMC1001_SetThermLimit
                _EMC1001_StandbyMode
                     _EMC1001_THERM2
                  _SYSTEM_Initialize
                             _printf
                               _puts
 ---------------------------------------------------------------------------------
 (1) _puts                                                 2     0      2     451
                                              5 BANK0      2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (2) _cputs                                                3     1      2     204
                                              2 BANK0      3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                  _EUSART_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EMC1001_THERM2                                       3     3      0    6178
                                             15 BANK0      3     3      0
                       _EMC1001_Read
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_StandbyMode                                  3     3      0    6178
                                             15 BANK0      3     3      0
                       _EMC1001_Read
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetThermLimit                                2     2      0    2726
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetThermHysteresis                           2     2      0    2726
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetTempLowLimit                              6     5      1    4693
                                             16 BANK0      6     5      1
                      _EMC1001_Write
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetTempHighLimit                             6     5      1    4693
                                             16 BANK0      6     5      1
                      _EMC1001_Write
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetConversionRate                            2     2      0    2748
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SMBusTimeout                                 2     2      0    2726
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_PrintTemp                                    6     6      0   57953
                                             77 BANK0      2     2      0
                                             41 BANK1      4     4      0
                       _EMC1001_Read
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _EMC1001_PrintInfo                                   27    27      0   65652
                                             41 BANK1     25    25      0
                       _EMC1001_Read
                           ___awtoft
                            ___ftmul
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              50    38     12   50617
                                             71 BANK0      6     6      0
                                              0 BANK1     41    29     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3   11975
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3   11696
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3678
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4316
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1836
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     431
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2203
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     671
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     674
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     444
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3416
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3166
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2225
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _EMC1001_MASK1                                        3     3      0    6178
                                             15 BANK0      3     3      0
                       _EMC1001_Read
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (2) _EMC1001_Write                                        8     7      1    2704
                                              7 BANK0      8     7      1
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (2) _EMC1001_Read                                         6     5      1    3383
                                              7 BANK0      6     5      1
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWriteTRBBuild                             7     3      4     798
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterTRBInsert                                 4     2      2     644
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterReadTRBBuild                              7     3      4     598
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EMC1001_MASK1
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_PrintInfo
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _EMC1001_PrintTemp
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _EMC1001_SMBusTimeout
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_SetConversionRate
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_SetTempHighLimit
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___awdiv
       ___awmod (ARG)
   _EMC1001_SetTempLowLimit
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___awdiv
       ___awmod (ARG)
   _EMC1001_SetThermHysteresis
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_SetThermLimit
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_StandbyMode
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_THERM2
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _puts
     _cputs
       _putch
         _EUSART_Write
     _putch
       _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      4D       7       96.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      14       9       25.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BF      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BF      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Apr 29 03:11:47 2017

                                  pc 0002                          __CFG_CP$OFF 0000  
              ?_I2C2_MasterTRBInsert 0020                                   l31 1C83  
                       ___awdiv@sign 002D    __size_of_EMC1001_SetTempHighLimit 0030  
                ___wmul@multiplicand 0032            ?_EMC1001_SetTempHighLimit 0030  
       ??_EMC1001_SetThermHysteresis 002F       I2C2_MasterReadTRBBuild@address 0022  
                       ___ftadd@exp1 0060                         ___ftadd@exp2 005F  
                        __CFG_LVP$ON 0000                          __CFG_ZCD$ON 0000  
                       ___ftadd@sign 005E                                  l511 0259  
                                l363 1045                                  l508 0579  
                                l349 1092                                  l551 05CE  
                                l561 0685                                  l556 0608  
                                l492 00B4                                  l903 147B  
                                l824 168E                                  l496 00B6  
                                l576 0740                                  l497 00B7  
                                l658 1D42                                  l843 11F9  
                                l844 1201                                  l836 11E6  
                                l944 1303                                  l867 1526  
                                l893 1402                                  _GIE 005F  
                       __CFG_CPD$OFF 0000                    EMC1001_Read@pData 0027  
              __size_of_EMC1001_Read 004D          __end_of_EMC1001_StandbyMode 1DB5  
                EMC1001_MASK1@enable 0030     __size_of_EMC1001_SetTempLowLimit 0030  
                       ___awmod@sign 0026                         __CFG_BORV$LO 0000  
                                wreg 0009               __size_of_EMC1001_MASK1 0021  
                   __end_of_I2C2_ISR 0B76                                 l3014 15B8  
                               l3032 164B                                 l3024 1603  
                               l3008 159B                                 l3130 1314  
                               l3050 1685                                 l3042 166A  
                               l3060 1EC5                                 l3124 12FA  
                               l3116 12DF                                 l3140 111E  
                               l3052 1691                                 l3044 1678  
                               l3126 1306                                 l3118 12ED  
                               l3150 114C                                 l3142 112C  
                               l4102 0E64                                 l2600 11BC  
                               l3064 1EDB                                 l4120 0F84  
                               l4112 0EE0                                 l3154 1157  
                               l3170 1F19                                 l2604 11C3  
                               l3164 1EF3                                 l4108 0EC3  
                               l4300 0187                                 l2614 11EB  
                               l2606 11CD                                 l3166 1F01  
                               l3174 1F24                                 l3182 1DFD  
                               l2710 1F8B                                 l2702 1F85  
                               l4054 1D3C                                 l4126 0FE3  
                               l2616 11F3                                 l2608 11D2  
                               l3184 1E0D                                 l2712 1F97  
                               l2720 1FAC                                 l4154 1D5D  
                               l3098 12AF                                 l2810 134A  
                               l4138 1CDD                                 l4330 028E  
                               l4250 00AF                                 l4234 0066  
                               l3604 1DE1                                 l2660 10D1  
                               l2724 1FB4                                 l2716 1FA3  
                               l2804 1334                                 l4412 0574  
                               l4324 023D                                 l4316 01EB  
                               l2734 14AF                                 l2670 10D9  
                               l2654 10C6                                 l2822 1385  
                               l4086 17D3                                 l4078 175B  
                               l4342 02DE                                 l4262 00CE  
                               l4254 00B9                                 l3800 1D8A  
                               l2744 14C5                                 l2672 10E5  
                               l4424 05A8                                 l4408 056B  
                               l4352 0324                                 l4248 0078  
                               l4520 0BBC                                 l4512 0B91  
                               l3562 10B4                                 l2762 14F2  
                               l2738 14B6                                 l2682 1100  
                               l2834 13A1                                 l2826 138D  
                               l4362 037F                                 l4338 02C5  
                               l4290 0143                                 l4266 00D0  
                               l4282 0105                                 l3548 10A3  
                               l2780 1538                                 l2764 14FC  
                               l2756 14DF                                 l4428 05BF  
                               l4380 0439                                 l4356 0379  
                               l4268 00DE                                 l4284 012F  
                               l4540 0CC2                                 l4532 0C6A  
                               l4524 0BD8                                 l4516 0BA0  
                               l2862 1F5A                                 l2774 1518  
                               l2766 1501                                 l2686 1108  
                               l2678 10F7                                 l2838 13A9  
                               l4470 06D9                                 l4462 0669  
                               l4390 045F                                 l4278 00EE  
                               l4550 0CEC                                 l3814 1DAB  
                               l2872 1F6D                                 l3592 1067  
                               l2784 154A                                 l2776 1522  
                               l2768 1505                                 l4456 0642  
                               l4384 0442                                 l4368 03B6  
                               l4560 0D37                                 l4528 0C25  
                               l4624 1252                                 l2866 1F61  
                               l3578 1056                                 l2794 1565  
                               l2970 1423                                 l2698 1F7E  
                               l4458 064B                                 l4378 03C7  
                               l4570 0D82                                 l4546 0CDD  
                               l4538 0CAE                                 l2868 1F66  
                               l2956 13EA                                 l4476 070E  
                               l4484 0727                                 l4468 0695  
                               l4396 047A                                 l3828 1DCC  
                               l4636 127E                                 l2990 1465  
                               l4486 072B                                 l4574 0D9E  
                               l3838 1E76                                 l4638 1288  
                               l4488 0044                                 l3848 1EA6  
                               l4496 1CF2                                 l2978 143D  
                               l3786 0A2A                                 l2996 1472  
                               l2988 1457                                 l4588 118C  
                               l2998 147E                                 STR_1 0A19  
                               STR_2 08CF                                 STR_3 07D7  
                               STR_4 0973                                 STR_5 0A16  
                               STR_6 0972                                 STR_7 098B  
                               STR_8 09EE                                 STR_9 0863  
                               _LATA 0016                                 _LATB 0017  
                               _LATC 0018                                 u3035 1F8E  
                               u3215 14F3                                 u4015 112D  
                               u3055 1F9D                                 u4025 1141  
                               u3065 1FA4                                 u4035 114D  
                               u4115 1E02                                 u3245 1506  
                               u3415 13AA                                 u5015 1E6E  
                               u3185 14E0                                 u4065 1EF6  
                               u3425 13B0                                 u3345 1356  
                               u3275 1519                                 u3355 1366  
                               u5035 1E9E                         printf@tmpval 00BB  
                               u4085 1F0F                                 u3605 1424  
                               u4095 1F1A                                 u3615 1434  
                               u3375 138E                                 u6015 0639  
                               u3625 143E                                 u3385 1394  
                               u2835 1208                                 u2755 11C8  
                               u6035 065F                                 u6045 067D  
                               u6205 0C4E                                 u2775 11E1  
                               u3815 1686                                 u3735 1604  
                               u2935 10DC                                 u6215 0C5C  
                               u3745 162E                                 u3665 1458  
                               u2795 11EE                                 u2955 10E6  
                               u6315 0D52                                 u6155 0BF4  
                               u6244 0C8C                                 u3925 12E0  
                               u2965 10F0                                 u6245 0C8A  
                               u6165 0C01                                 u4750 106C  
                               u3695 1473                                 u2975 10F8  
                               u5455 1D43                                 u6175 0C0F  
                               u3785 166B                                 u5465 1D48  
                               u6265 0CD3                                 u6417 128E  
                               u4690 10B9                                 u6370 127C  
                               u3955 12FB                                 u6195 0C41  
                               u6355 117A                                 u5590 1FFE  
                               u6390 1286                                 u3895 12B6  
                               u5815 02C3                                 u5735 019C  
                               u6295 0D07                                 u3995 1121  
                               u5675 00E8                                 u5845 03AA  
                               u5775 0265                                 u5785 029A  
                               u5885 044D                                 u5895 045B  
                               u5985 05FF                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 1218  
             __size_of_EMC1001_Write 0048                         ___ftpack@arg 0020  
                       ___ftpack@exp 0023                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               _puts 1CB6          I2C2_MasterReadTRBBuild@ptrb 0026  
                      __CFG_BOREN$ON 0000                                 start 0020  
                 EMC1001_Read@status 002C                _EMC1001_SetThermLimit 1C95  
__size_of_EMC1001_SetThermHysteresis 000A                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0044  
                       ___ftmul@sign 0045                         _EMC1001_Read 106E  
                       ___fttol@exp1 005C                         ___fttol@lval 0058  
                         _i2c2_state 006F                        ?_EUSART_Write 0077  
     __size_of_OSCILLATOR_Initialize 0009        __end_of_OSCILLATOR_Initialize 1C81  
            _I2C2_MasterReadTRBBuild 1E22              __size_of_EMC1001_THERM2 0021  
                              ?_main 0077                      __end_of___awdiv 110D  
                    __end_of___ftadd 157D                                STR_10 0822  
                              STR_11 089A                                STR_20 0A0F  
                              STR_12 09B8                                STR_13 0A07  
                              STR_21 09CC                                STR_14 09FE  
                              STR_22 09DD                                STR_15 08F9  
                              STR_16 091A                                STR_17 09A2  
                      __CFG_WDTE$OFF 0000                                STR_18 0958  
                              STR_19 093A                      __end_of___awmod 1FB9  
                  __end_of_I2C2_Stop 1D21                      __end_of___ftneg 1C78  
                              ?_puts 0025                      __end_of___lldiv 1160  
                    __end_of___ftmul 13D1                      ___awdiv@divisor 0027  
                    __end_of___llmod 1F2D                      __end_of___ftsub 1D73  
                    __end_of___fttol 131D                                i1l100 0A43  
                              i1l111 0A9B                                i1l112 0AA6  
                              i1l200 0013                                i1l105 0A6F  
                              i1l130 0B30                                i1l122 0AF0  
                              i1l106 0A77                                i1l204 001B  
                              i1l141 1CEE       __size_of_I2C2_FunctionComplete 0013  
                              i1l134 0B57                                i1l126 0B0E  
                              i1l129 0B23                      ___awdiv@counter 002C  
      __end_of_I2C2_FunctionComplete 1CF2                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013              EMC1001_StandbyMode@data 0031  
                       ___lltoft@exp 002D                        ___awtoft@sign 002D  
                    __end_of_dpowers 0769                                _cputs 1CF2  
                              _scale 0DBA                      __end_of_isdigit 1CDF  
                      ___ftpack@sign 0024                                _putch 1C63  
       I2C2_MasterReadTRBBuild@pdata 0020       EMC1001_SetThermHysteresis@data 0030  
                EMC1001_Read@timeOut 002A                                puts@s 0025  
                              status 0003                                wtemp0 007E  
            EMC1001_PrintInfo@templo 00E0                    ??_I2C2_Initialize 0020  
                    __initialization 0022          ??_EMC1001_SetConversionRate 002F  
                       __end_of_main 1296               ??_I2C2_MasterTRBInsert 0022  
                      _EMC1001_MASK1 1D73                         __end_of_puts 1CC2  
                     ??_EUSART_Write 0020          ?_INTERRUPT_InterruptManager 0077  
                      _EMC1001_Write 1026     __end_of_I2C2_MasterWriteTRBBuild 1026  
                             ??_main 00E2                        ___fttol@sign1 0057  
                        _i2c2_object 0070                               ??_puts 0027  
               __size_of__tdiv_to_l_ 00B6                    EMC1001_Write@data 0027  
                             ?_cputs 0022                               i1S4670 1800  
                   ___llmod@dividend 0032                               ?_scale 0046  
       __end_of_EMC1001_SMBusTimeout 0A30                     ___awdiv@dividend 0029  
                   __end_of___awtoft 1DF8                               _ANSELA 0F38  
                             ?_putch 0077                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 1218  
                 __CFG_RSTOSC$HFINT1 0000                               _RC1REG 0119  
                             _RC0PPS 0F20                               _RC1STA 011D  
                   __end_of___lltoft 1E22                               _RC3PPS 0F23  
                             _RC4PPS 0F24         __end_of_I2C2_BusCollisionISR 0004  
                             _ODCONA 0F3A                               _ODCONB 0F45  
                             _ODCONC 0F50                               i1l3212 1D1E  
                             i1l3640 0A62                               i1l3730 0B3E  
                             i1l3714 0B16                               i1l3706 0AFC  
                             i1l3652 0A82                               i1l3742 0B5B  
                             i1l3726 0B37                               i1l3744 0B5E  
                             i1l3672 0AC4                               i1l3752 0B6A  
                     __CFG_WDTCCS$SC 0000                               i1l3746 0B62  
                             i1l3658 0A95                               i1l3692 0ADE  
                             i1l3698 0AEA                               _OSCFRQ 0893  
                             _TX1REG 011A                               _TX1STA 011E  
             ?_EMC1001_SetThermLimit 0077                       __CFG_PWRTE$OFF 0000  
                   __end_of__powers_ 0790                       ?_EMC1001_MASK1 0077  
                             ___ftge 1EAE                               ___wmul 1D39  
                          ??___awdiv 002B                            ??___ftadd 005A  
                     _p_i2c2_current 0075                       __CFG_STVREN$ON 0000  
                          ??___awmod 0024            ??_I2C2_MasterReadTRBBuild 0024  
                          ??___ftneg 0023                            ??___lldiv 0028  
                          ??___ftmul 003C                            ??___llmod 0036  
                          ??___ftsub 0067                            ??___fttol 0053  
 __end_of_EMC1001_SetThermHysteresis 1C95           _EMC1001_SetThermHysteresis 1C8B  
                             _fround 169A                            ?_I2C2_ISR 0077  
                     ?_EMC1001_Write 0027                     ___awdiv@quotient 002E  
                    ___awmod@divisor 0020             I2C2_Stop@completion_code 0078  
                    ___awmod@counter 0025                               _printf 003E  
      I2C2_MasterReadTRBBuild@length 0021              _EMC1001_SetTempLowLimit 1E7E  
              ___ftmul@f3_as_product 0041                               cputs@s 0022  
                          ??_isdigit 0020            _EMC1001_SetConversionRate 1CC2  
                  _SYSTEM_Initialize 1CAA              __end_of__initialization 003A  
                         ___ftadd@f1 0054                           ___ftadd@f2 0057  
                         ___ftge@ff1 0020                           ___ftge@ff2 0023  
   __end_of_EMC1001_SetTempHighLimit 1E7E                   ?_SYSTEM_Initialize 0077  
                    EMC1001_Read@reg 002B                      EMC1001_Read@trb 0120  
                         ___ftneg@f1 0020                           ___awtoft@c 0028  
                         ___ftmul@f1 0036                           ___ftmul@f2 0039  
                         ___ftsub@f1 0064                           ___ftsub@f2 0061  
            EMC1001_PrintTemp@templo 00CC                           ___fttol@f1 004F  
                     __pcstackCOMMON 0077                  ??_SYSTEM_Initialize 0021  
                         ___lltoft@c 0028                        __end_of_cputs 1D09  
                      __end_of_scale 1000                       _i2c2_trb_count 00E7  
                      __end_of_putch 1C69                           ??_I2C2_ISR 0079  
                     _EMC1001_THERM2 1DB5                           __div_to_l_ 157D  
           _I2C2_MasterWriteTRBBuild 1003         I2C2_MasterWriteTRBBuild@ptrb 0026  
                    __div_to_l_@exp1 0033                      __div_to_l_@cntr 0032  
                            ??_cputs 0024                              ??_scale 0049  
          __end_of_SYSTEM_Initialize 1CB6                      __div_to_l_@quot 002E  
                            ??_putch 0021                _EMC1001_PrintInfo$767 00D9  
              _EMC1001_PrintInfo$777 00DB                           __pbssBANK0 006F  
                         __pbssBANK1 00E4                           __pbssBANK2 0120  
               __end_of_EUSART_Write 1C8B                        __div_to_l_@f1 0020  
                      __div_to_l_@f2 0023                      ??_EMC1001_MASK1 002F  
                         __pmaintext 1218                              ?___ftge 0020  
                            ?___wmul 0030                      __CFG_PPS1WAY$ON 0000  
             __end_of_EMC1001_THERM2 1DD6                      ??_EMC1001_Write 0028  
                         __pintentry 0004                 EMC1001_Write@timeOut 002D  
          ??_EMC1001_SetTempLowLimit 0031                 _EMC1001_SMBusTimeout 0A1D  
                            ?_fround 0046                       _SSP2DATPPSbits 0EC9  
                          ?___awtoft 0028                            ?___ftpack 0020  
               _I2C2_BusCollisionISR 0003                              ?_printf 00A0  
                          ?___lltoft 0028                              _SP1BRGH 011C  
                            _SP1BRGL 011B    I2C2_ISR@i2c_10bit_address_restart 00E4  
                            _OSCCON1 088D                              _OSCCON3 088F  
                          _I2C2_Stop 1D09                       _SSP2CLKPPSbits 0EC8  
                            _OSCTUNE 0892                              _SSP2ADD 0197  
                            _PPSLOCK 0E8F                              _SSP2BUF 0196  
       __size_of_EMC1001_StandbyMode 0021                      _I2C2_Initialize 1D21  
             I2C2_MasterRead@trBlock 012C                    _EMC1001_PrintInfo 0B76  
                  __end_of__npowers_ 07B7                    _EMC1001_PrintTemp 1160  
                         _scale$1371 004B             _EMC1001_SetTempHighLimit 1E4E  
                 ?_EMC1001_PrintInfo 0077                   ?_EMC1001_PrintTemp 0077  
               __CFG_SCANE$available 0000                      __size_of___ftge 003C  
                            ___awdiv 10BB                              ___ftadd 1487  
                            ___awmod 1F73                      ?_EMC1001_THERM2 0077  
                            ___ftneg 1C6F                              ___lldiv 110D  
                    __size_of___wmul 001C                              ___ftmul 131D  
                            ___llmod 1EEA                              ___ftsub 1D55  
                            ___fttol 1296                ?_EMC1001_SMBusTimeout 0077  
              ?_I2C2_BusCollisionISR 0077                           ??___awtoft 002B  
                         ??___ftpack 0025                      __size_of_fround 0166  
          I2C2_MasterTRBInsert@count 0023                           ??___lltoft 002C  
                            __ptext1 1CB6                              __ptext2 1CF2  
                            __ptext3 1CAA                              __ptext4 1FB9  
                            __ptext5 1C78                              __ptext6 1D21  
                            __ptext7 1C9F                              __ptext8 1DB5  
                            __ptext9 1D94                  ??_EMC1001_PrintInfo 00C9  
          I2C2_MasterTRBInsert@pflag 0021                  ??_EMC1001_PrintTemp 006D  
                    __size_of_printf 0703                    __end_of_hexpowers 07D7  
                        ?__div_to_l_ 0020                              _dpowers 0741  
              _OSCILLATOR_Initialize 1C78                              _isdigit 1CD0  
                   ___awmod@dividend 0022             ??_PIN_MANAGER_Initialize 0020  
                         ?_I2C2_Stop 0077                _I2C2_FunctionComplete 1CDF  
         __size_of_SYSTEM_Initialize 000C                              clrloop0 1C6A  
               end_of_initialization 003A                  EMC1001_PrintInfo@cr 00D6  
            ??_EMC1001_SetThermLimit 002F            __end_of_EMC1001_PrintInfo 0DBA  
          __end_of_EMC1001_PrintTemp 11B3                    _EUSART_Initialize 1C9F  
                    ___lldiv@divisor 0020                      ___lldiv@counter 002D  
                 ?_EUSART_Initialize 0077                   _p_i2c2_trb_current 0076  
                            printf@c 00C8                              printf@f 00A0  
             I2C2_ISR@i2c_bytes_left 00E5                         __pstringtext 0741  
                     __tdiv_to_l_@f1 0020                       __tdiv_to_l_@f2 0023  
                         _printf$850 00B0        __size_of_I2C2_MasterTRBInsert 0046  
              __CFG_WDTCPS$WDTCPS_31 0000          ?_EMC1001_SetThermHysteresis 0077  
                      ??__tdiv_to_l_ 0026                  ??_EUSART_Initialize 0020  
                          _PORTAbits 000C                    __size_of_I2C2_ISR 0146  
            __end_of_I2C2_Initialize 1D39                __size_of_EUSART_Write 000A  
                   __CFG_FEXTOSC$OFF 0000            __end_of_EUSART_Initialize 1CAA  
                __size_of__div_to_l_ 011D                          ___ftmul@exp 0040  
             ??_EMC1001_SMBusTimeout 002F               ??_I2C2_BusCollisionISR 0077  
                     __end_of___ftge 1EEA           ??_I2C2_MasterWriteTRBBuild 0024  
                     __end_of___wmul 1D55                         _EUSART_Write 1C81  
             ?_OSCILLATOR_Initialize 0077                       __end_of_fround 1800  
                     __end_of_printf 0741               ?_I2C2_FunctionComplete 0077  
                start_initialization 0022                          ??_I2C2_Stop 0077  
    __size_of_PIN_MANAGER_Initialize 0047                  __end_of__tdiv_to_l_ 1487  
                        putch@txData 0021                     EMC1001_Write@reg 002A  
                   EMC1001_Write@trb 0128        EMC1001_SetConversionRate@data 0030  
         __size_of_EMC1001_PrintInfo 0244           __size_of_EMC1001_PrintTemp 0053  
                    ___llmod@divisor 002E                      ___llmod@counter 0037  
    I2C2_MasterWriteTRBBuild@address 0022             ?_I2C2_MasterReadTRBBuild 0020  
                   __CFG_LPBOREN$OFF 0000                             ??___ftge 0026  
                      ?_EMC1001_Read 0027                             ??___wmul 0034  
      I2C2_MasterWriteTRBBuild@pdata 0020                 I2C2_ISR@pi2c_buf_ptr 00E6  
          EMC1001_SetTempLowLimit@HB 0035            EMC1001_SetTempLowLimit@LB 0030  
                _EMC1001_StandbyMode 1D94                             ??_fround 0049  
                           ??_printf 0067               _EMC1001_PrintInfo$1367 00DD  
                         fround@prec 0053                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065                    __size_of___lltoft 002A  
                        __pbssCOMMON 0070                     ?_I2C2_Initialize 0077  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                 EMC1001_THERM2@enable 0030  
                       _isdigit$1105 0020                 ?_EMC1001_StandbyMode 0077  
                      _i2c2_tr_queue 00E8           ??_EMC1001_SetTempHighLimit 0031  
         __size_of_EUSART_Initialize 000B               _EMC1001_PrintTemp$1368 00C9  
                 EMC1001_THERM2@data 0031                     ??_EMC1001_THERM2 002F  
             _PIN_MANAGER_Initialize 1FB9                  EMC1001_Write@buffer 002B  
              __end_of_EMC1001_MASK1 1D94                       ??_EMC1001_Read 0028  
                           ?___awdiv 0027                             ?___ftadd 0054  
                           ?___awmod 0020                  EMC1001_Write@status 002E  
                           ?___ftneg 0020                             ?___lldiv 0020  
                           ?___ftmul 0036                             ?___llmod 002E  
                           ?___ftsub 0061                            __npowers_ 0790  
                           ?___fttol 004F                __end_of_EMC1001_Write 106E  
                           _I2C2_ISR 0A30         ??_INTERRUPT_InterruptManager 007D  
                        __tdiv_to_l_ 13D1                            __pswtext1 1800  
                       ??__div_to_l_ 0026                             _BAUD1CON 011F  
                           ?_isdigit 0077                            _hexpowers 07B7  
              ??_EMC1001_StandbyMode 002F                       __size_of_cputs 0017  
                     __size_of_scale 0246                       __size_of_putch 0006  
    __end_of_I2C2_MasterReadTRBBuild 1E4E       __size_of_EMC1001_SetThermLimit 000A  
      __end_of_EMC1001_SetThermLimit 1C9F                       ___wmul@product 0034  
                           _LATAbits 0016                            clear_ram0 1C69  
                           _PIE3bits 0719  __size_of_INTERRUPT_InterruptManager 001C  
                 __end_of__div_to_l_ 169A             ?_EMC1001_SetTempLowLimit 0030  
                           _PIR3bits 070F                             _SSP2CON1 019A  
                           _SSP2CON3 019C                             _SSP2STAT 0199  
      I2C2_MasterTRBInsert@ptrb_list 0020                    ___wmul@multiplier 0030  
                  EMC1001_MASK1@data 0031                           printf@flag 00B7  
                         printf@fval 00C3                           printf@prec 00C6  
       __end_of_I2C2_MasterTRBInsert 1F73                EMC1001_PrintInfo@data 00E1  
              EMC1001_PrintInfo@temp 00DF       I2C2_MasterWriteTRBBuild@length 0021  
          EMC1001_SetThermLimit@data 0030              ??_OSCILLATOR_Initialize 0020  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___awmod 0046                     __size_of___ftneg 0009  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                             ___awtoft 1DD6  
                           ___ftpack 11B3                EMC1001_PrintTemp@temp 00CB  
            ??_I2C2_FunctionComplete 0077                          _fround$1370 004D  
                        _fround$1369 0050                             ___lltoft 1DF8  
                   __size_of_isdigit 000F                             __ptext10 1C95  
                           __ptext11 1C8B                             __ptext20 1C63  
                           __ptext12 1E7E                             __ptext21 1C81  
                           __ptext13 1E4E                             __ptext30 1DF8  
                           __ptext22 1CD0                             __ptext14 1CC2  
                           __ptext31 1EEA                             __ptext23 169A  
                           __ptext15 0A1D                             __ptext40 1D73  
                           __ptext32 110D                             __ptext24 1D39  
                           __ptext16 1160                             __ptext41 1026  
                           __ptext33 1296                             __ptext25 131D  
                           __ptext17 0B76                             __ptext50 0003  
                           __ptext42 106E                             __ptext34 1D55  
                           __ptext26 1F73                             __ptext18 003E  
                           __ptext43 1003                             __ptext35 1487  
                           __ptext27 10BB                             __ptext19 0DBA  
                           __ptext44 1F2D                             __ptext36 1C6F  
                           __ptext28 13D1                             __ptext45 1E22  
                           __ptext37 1EAE                             __ptext29 157D  
                           __ptext38 1DD6                             __ptext47 0A30  
                           __ptext39 11B3                             __ptext48 1D09  
                           __ptext49 1CDF                 __end_of_EMC1001_Read 10BB  
                           __powers_ 0769                         _SSP2CON1bits 019A  
                       _SSP2CON2bits 019B      __end_of_EMC1001_SetTempLowLimit 1EAE  
                      __size_of_main 007E                        __size_of_puts 000C  
               __CFG_WDTCWS$WDTCWS_7 0000   __size_of_EMC1001_SetConversionRate 000E  
                         _RC1STAbits 011D           ?_EMC1001_SetConversionRate 0077  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0020  
         _INTERRUPT_InterruptManager 0004        __size_of_EMC1001_SMBusTimeout 0013  
                          printf@idx 00AF                            printf@len 00B2  
                          printf@exp 00B9                            printf@val 00BF  
            I2C2_MasterWrite@trBlock 0130        __size_of_I2C2_BusCollisionISR 0001  
        PIN_MANAGER_Initialize@state 0020           EMC1001_SMBusTimeout@enable 0030  
   __size_of_I2C2_MasterReadTRBBuild 002C                           _INTCONbits 000B  
         EMC1001_SetTempHighLimit@HB 0035           EMC1001_SetTempHighLimit@LB 0030  
                           isdigit@c 0021                             scale@scl 004E  
  __size_of_I2C2_MasterWriteTRBBuild 0023            ?_I2C2_MasterWriteTRBBuild 0020  
                           intlevel1 0000                     __tdiv_to_l_@exp1 002F  
                   __tdiv_to_l_@cntr 002E                     __tdiv_to_l_@quot 002A  
                I2C2_ISR@i2c_address 00EB                     ___lldiv@dividend 0024  
            ?_PIN_MANAGER_Initialize 0077                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F    __end_of_EMC1001_SetConversionRate 1CD0  
                           printf@ap 00B6                             printf@cp 00B4  
               _I2C2_MasterTRBInsert 1F2D                         ?__tdiv_to_l_ 0020  
                        _printf$1372 00AC                     ___lldiv@quotient 0029  
          EMC1001_StandbyMode@enable 0030                   EUSART_Write@txData 0020  
     __end_of_PIN_MANAGER_Initialize 2000             __size_of_I2C2_Initialize 0018  
                 __size_of_I2C2_Stop 0018  
