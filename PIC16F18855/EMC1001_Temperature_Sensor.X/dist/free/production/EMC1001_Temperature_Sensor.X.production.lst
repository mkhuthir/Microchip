

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jun 27 09:20:50 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	stringtext7,global,class=STRCODE,delta=2
    11                           	psect	stringtext8,global,class=STRCODE,delta=2
    12                           	psect	stringtext9,global,class=STRCODE,delta=2
    13                           	psect	stringtext10,global,class=STRCODE,delta=2
    14                           	psect	stringtext11,global,class=STRCODE,delta=2
    15                           	psect	stringtext12,global,class=STRCODE,delta=2
    16                           	psect	stringtext13,global,class=STRCODE,delta=2
    17                           	psect	stringtext14,global,class=STRCODE,delta=2
    18                           	psect	stringtext15,global,class=STRCODE,delta=2
    19                           	psect	stringtext16,global,class=STRCODE,delta=2
    20                           	psect	stringtext17,global,class=STRCODE,delta=2
    21                           	psect	stringtext18,global,class=STRCODE,delta=2
    22                           	psect	stringtext19,global,class=STRCODE,delta=2
    23                           	psect	stringtext20,global,class=STRCODE,delta=2
    24                           	psect	stringtext21,global,class=STRCODE,delta=2
    25                           	psect	stringtext22,global,class=STRCODE,delta=2
    26                           	psect	stringtext23,global,class=STRCODE,delta=2
    27                           	psect	stringtext24,global,class=STRCODE,delta=2
    28                           	psect	stringtext25,global,class=STRCODE,delta=2
    29                           	psect	cinit,global,class=CODE,merge=1,delta=2
    30                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    34                           	psect	clrtext,global,class=CODE,delta=2
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext1,local,class=CONST,delta=2
    87                           	psect	text48,local,class=CODE,merge=1,delta=2
    88                           	psect	text49,local,class=CODE,merge=1,delta=2
    89                           	psect	text50,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     
    92                           ; Version 1.42
    93                           ; Generated 13/04/2017 GMT
    94                           ; 
    95                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC16F18855 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  001C                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  008C                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  008E                     	;# 
   159  008F                     	;# 
   160  0090                     	;# 
   161  0090                     	;# 
   162  0091                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  0110                     	;# 
   181  0110                     	;# 
   182  0111                     	;# 
   183  0112                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0114                     	;# 
   188  0115                     	;# 
   189  0116                     	;# 
   190  0116                     	;# 
   191  0117                     	;# 
   192  0119                     	;# 
   193  0119                     	;# 
   194  0119                     	;# 
   195  011A                     	;# 
   196  011A                     	;# 
   197  011A                     	;# 
   198  011B                     	;# 
   199  011B                     	;# 
   200  011B                     	;# 
   201  011B                     	;# 
   202  011B                     	;# 
   203  011C                     	;# 
   204  011C                     	;# 
   205  011C                     	;# 
   206  011D                     	;# 
   207  011D                     	;# 
   208  011D                     	;# 
   209  011E                     	;# 
   210  011E                     	;# 
   211  011E                     	;# 
   212  011F                     	;# 
   213  011F                     	;# 
   214  011F                     	;# 
   215  011F                     	;# 
   216  011F                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  018F                     	;# 
   221  0190                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0198                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  020C                     	;# 
   232  020C                     	;# 
   233  020D                     	;# 
   234  020E                     	;# 
   235  020F                     	;# 
   236  020F                     	;# 
   237  0210                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  0218                     	;# 
   252  0218                     	;# 
   253  0219                     	;# 
   254  021A                     	;# 
   255  021B                     	;# 
   256  021B                     	;# 
   257  021C                     	;# 
   258  021C                     	;# 
   259  021D                     	;# 
   260  021D                     	;# 
   261  021E                     	;# 
   262  021F                     	;# 
   263  028C                     	;# 
   264  028C                     	;# 
   265  028D                     	;# 
   266  028D                     	;# 
   267  028E                     	;# 
   268  028F                     	;# 
   269  0290                     	;# 
   270  0290                     	;# 
   271  0291                     	;# 
   272  0292                     	;# 
   273  0292                     	;# 
   274  0293                     	;# 
   275  0293                     	;# 
   276  0294                     	;# 
   277  0295                     	;# 
   278  0296                     	;# 
   279  0296                     	;# 
   280  0297                     	;# 
   281  0298                     	;# 
   282  0298                     	;# 
   283  0299                     	;# 
   284  0299                     	;# 
   285  029A                     	;# 
   286  029B                     	;# 
   287  029C                     	;# 
   288  029C                     	;# 
   289  029D                     	;# 
   290  030C                     	;# 
   291  030C                     	;# 
   292  030D                     	;# 
   293  030E                     	;# 
   294  030F                     	;# 
   295  0310                     	;# 
   296  0310                     	;# 
   297  0311                     	;# 
   298  0312                     	;# 
   299  0313                     	;# 
   300  0314                     	;# 
   301  0314                     	;# 
   302  0315                     	;# 
   303  0316                     	;# 
   304  0317                     	;# 
   305  0318                     	;# 
   306  0318                     	;# 
   307  0319                     	;# 
   308  031A                     	;# 
   309  031B                     	;# 
   310  031C                     	;# 
   311  031C                     	;# 
   312  031D                     	;# 
   313  031E                     	;# 
   314  031F                     	;# 
   315  038C                     	;# 
   316  038D                     	;# 
   317  038E                     	;# 
   318  0390                     	;# 
   319  0391                     	;# 
   320  0392                     	;# 
   321  040C                     	;# 
   322  040D                     	;# 
   323  040E                     	;# 
   324  040F                     	;# 
   325  0410                     	;# 
   326  0411                     	;# 
   327  0416                     	;# 
   328  0416                     	;# 
   329  0417                     	;# 
   330  0418                     	;# 
   331  0418                     	;# 
   332  0419                     	;# 
   333  041A                     	;# 
   334  041A                     	;# 
   335  041B                     	;# 
   336  041C                     	;# 
   337  041C                     	;# 
   338  041D                     	;# 
   339  041E                     	;# 
   340  041F                     	;# 
   341  048C                     	;# 
   342  048C                     	;# 
   343  048D                     	;# 
   344  048E                     	;# 
   345  048F                     	;# 
   346  048F                     	;# 
   347  0490                     	;# 
   348  0491                     	;# 
   349  0492                     	;# 
   350  0492                     	;# 
   351  0493                     	;# 
   352  0494                     	;# 
   353  0495                     	;# 
   354  0495                     	;# 
   355  0496                     	;# 
   356  0497                     	;# 
   357  0498                     	;# 
   358  0499                     	;# 
   359  049A                     	;# 
   360  049B                     	;# 
   361  049C                     	;# 
   362  049D                     	;# 
   363  050C                     	;# 
   364  050C                     	;# 
   365  050D                     	;# 
   366  050E                     	;# 
   367  050F                     	;# 
   368  050F                     	;# 
   369  0510                     	;# 
   370  0511                     	;# 
   371  0512                     	;# 
   372  0512                     	;# 
   373  0513                     	;# 
   374  0514                     	;# 
   375  0515                     	;# 
   376  0515                     	;# 
   377  0516                     	;# 
   378  0517                     	;# 
   379  0518                     	;# 
   380  0519                     	;# 
   381  051A                     	;# 
   382  051B                     	;# 
   383  051C                     	;# 
   384  051D                     	;# 
   385  058C                     	;# 
   386  058C                     	;# 
   387  058D                     	;# 
   388  058E                     	;# 
   389  058F                     	;# 
   390  058F                     	;# 
   391  0590                     	;# 
   392  0591                     	;# 
   393  0592                     	;# 
   394  0593                     	;# 
   395  060C                     	;# 
   396  060D                     	;# 
   397  060E                     	;# 
   398  060F                     	;# 
   399  0610                     	;# 
   400  0611                     	;# 
   401  0612                     	;# 
   402  0613                     	;# 
   403  0614                     	;# 
   404  0616                     	;# 
   405  0617                     	;# 
   406  0618                     	;# 
   407  0619                     	;# 
   408  061A                     	;# 
   409  061B                     	;# 
   410  061C                     	;# 
   411  061D                     	;# 
   412  061E                     	;# 
   413  068C                     	;# 
   414  068D                     	;# 
   415  068E                     	;# 
   416  068F                     	;# 
   417  0690                     	;# 
   418  0691                     	;# 
   419  0692                     	;# 
   420  0693                     	;# 
   421  0694                     	;# 
   422  070C                     	;# 
   423  070D                     	;# 
   424  070E                     	;# 
   425  070F                     	;# 
   426  0710                     	;# 
   427  0711                     	;# 
   428  0712                     	;# 
   429  0713                     	;# 
   430  0714                     	;# 
   431  0716                     	;# 
   432  0717                     	;# 
   433  0718                     	;# 
   434  0719                     	;# 
   435  071A                     	;# 
   436  071B                     	;# 
   437  071C                     	;# 
   438  071D                     	;# 
   439  071E                     	;# 
   440  0796                     	;# 
   441  0797                     	;# 
   442  0798                     	;# 
   443  0799                     	;# 
   444  079A                     	;# 
   445  079B                     	;# 
   446  080C                     	;# 
   447  080D                     	;# 
   448  080E                     	;# 
   449  080F                     	;# 
   450  0810                     	;# 
   451  0811                     	;# 
   452  0812                     	;# 
   453  0813                     	;# 
   454  0814                     	;# 
   455  081A                     	;# 
   456  081B                     	;# 
   457  081C                     	;# 
   458  081D                     	;# 
   459  081E                     	;# 
   460  081F                     	;# 
   461  088C                     	;# 
   462  088D                     	;# 
   463  088E                     	;# 
   464  088F                     	;# 
   465  0890                     	;# 
   466  0891                     	;# 
   467  0892                     	;# 
   468  0893                     	;# 
   469  0895                     	;# 
   470  0896                     	;# 
   471  0897                     	;# 
   472  0898                     	;# 
   473  0899                     	;# 
   474  089A                     	;# 
   475  089B                     	;# 
   476  090C                     	;# 
   477  090E                     	;# 
   478  090F                     	;# 
   479  091F                     	;# 
   480  091F                     	;# 
   481  098F                     	;# 
   482  098F                     	;# 
   483  0990                     	;# 
   484  0991                     	;# 
   485  0992                     	;# 
   486  0993                     	;# 
   487  0994                     	;# 
   488  0995                     	;# 
   489  0996                     	;# 
   490  0997                     	;# 
   491  0E0F                     	;# 
   492  0E10                     	;# 
   493  0E11                     	;# 
   494  0E12                     	;# 
   495  0E13                     	;# 
   496  0E14                     	;# 
   497  0E15                     	;# 
   498  0E16                     	;# 
   499  0E17                     	;# 
   500  0E18                     	;# 
   501  0E19                     	;# 
   502  0E1A                     	;# 
   503  0E1B                     	;# 
   504  0E1C                     	;# 
   505  0E1D                     	;# 
   506  0E1E                     	;# 
   507  0E1F                     	;# 
   508  0E20                     	;# 
   509  0E21                     	;# 
   510  0E22                     	;# 
   511  0E23                     	;# 
   512  0E24                     	;# 
   513  0E25                     	;# 
   514  0E26                     	;# 
   515  0E27                     	;# 
   516  0E28                     	;# 
   517  0E29                     	;# 
   518  0E2A                     	;# 
   519  0E2B                     	;# 
   520  0E2C                     	;# 
   521  0E2D                     	;# 
   522  0E2E                     	;# 
   523  0E2F                     	;# 
   524  0E30                     	;# 
   525  0E31                     	;# 
   526  0E32                     	;# 
   527  0E33                     	;# 
   528  0E34                     	;# 
   529  0E35                     	;# 
   530  0E36                     	;# 
   531  0E37                     	;# 
   532  0E8F                     	;# 
   533  0E90                     	;# 
   534  0E91                     	;# 
   535  0E92                     	;# 
   536  0E93                     	;# 
   537  0E94                     	;# 
   538  0E95                     	;# 
   539  0E96                     	;# 
   540  0E97                     	;# 
   541  0E9C                     	;# 
   542  0E9D                     	;# 
   543  0E9E                     	;# 
   544  0EA1                     	;# 
   545  0EA2                     	;# 
   546  0EA3                     	;# 
   547  0EA4                     	;# 
   548  0EA5                     	;# 
   549  0EA9                     	;# 
   550  0EAA                     	;# 
   551  0EAB                     	;# 
   552  0EAC                     	;# 
   553  0EB1                     	;# 
   554  0EB2                     	;# 
   555  0EB3                     	;# 
   556  0EB8                     	;# 
   557  0EB9                     	;# 
   558  0EBA                     	;# 
   559  0EBB                     	;# 
   560  0EBC                     	;# 
   561  0EBD                     	;# 
   562  0EBE                     	;# 
   563  0EC3                     	;# 
   564  0EC5                     	;# 
   565  0EC6                     	;# 
   566  0EC7                     	;# 
   567  0EC8                     	;# 
   568  0EC9                     	;# 
   569  0ECA                     	;# 
   570  0ECB                     	;# 
   571  0ECC                     	;# 
   572  0F10                     	;# 
   573  0F11                     	;# 
   574  0F12                     	;# 
   575  0F13                     	;# 
   576  0F14                     	;# 
   577  0F15                     	;# 
   578  0F16                     	;# 
   579  0F17                     	;# 
   580  0F18                     	;# 
   581  0F19                     	;# 
   582  0F1A                     	;# 
   583  0F1B                     	;# 
   584  0F1C                     	;# 
   585  0F1D                     	;# 
   586  0F1E                     	;# 
   587  0F1F                     	;# 
   588  0F20                     	;# 
   589  0F21                     	;# 
   590  0F22                     	;# 
   591  0F23                     	;# 
   592  0F24                     	;# 
   593  0F25                     	;# 
   594  0F26                     	;# 
   595  0F27                     	;# 
   596  0F38                     	;# 
   597  0F39                     	;# 
   598  0F3A                     	;# 
   599  0F3B                     	;# 
   600  0F3C                     	;# 
   601  0F3D                     	;# 
   602  0F3E                     	;# 
   603  0F3F                     	;# 
   604  0F40                     	;# 
   605  0F41                     	;# 
   606  0F43                     	;# 
   607  0F44                     	;# 
   608  0F45                     	;# 
   609  0F46                     	;# 
   610  0F47                     	;# 
   611  0F48                     	;# 
   612  0F49                     	;# 
   613  0F4A                     	;# 
   614  0F4B                     	;# 
   615  0F4C                     	;# 
   616  0F4E                     	;# 
   617  0F4F                     	;# 
   618  0F50                     	;# 
   619  0F51                     	;# 
   620  0F52                     	;# 
   621  0F53                     	;# 
   622  0F54                     	;# 
   623  0F55                     	;# 
   624  0F56                     	;# 
   625  0F57                     	;# 
   626  0F65                     	;# 
   627  0F68                     	;# 
   628  0F69                     	;# 
   629  0F6A                     	;# 
   630  0F6B                     	;# 
   631  0FE4                     	;# 
   632  0FE5                     	;# 
   633  0FE6                     	;# 
   634  0FE7                     	;# 
   635  0FE8                     	;# 
   636  0FE9                     	;# 
   637  0FEA                     	;# 
   638  0FEB                     	;# 
   639  0FED                     	;# 
   640  0FEE                     	;# 
   641  0FEF                     	;# 
   642  0000                     	;# 
   643  0001                     	;# 
   644  0002                     	;# 
   645  0003                     	;# 
   646  0004                     	;# 
   647  0005                     	;# 
   648  0006                     	;# 
   649  0007                     	;# 
   650  0008                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  0010                     	;# 
   658  0011                     	;# 
   659  0012                     	;# 
   660  0013                     	;# 
   661  0016                     	;# 
   662  0017                     	;# 
   663  0018                     	;# 
   664  001C                     	;# 
   665  001C                     	;# 
   666  001D                     	;# 
   667  001D                     	;# 
   668  001E                     	;# 
   669  001F                     	;# 
   670  008C                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  008E                     	;# 
   675  008F                     	;# 
   676  0090                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0093                     	;# 
   680  0094                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0097                     	;# 
   684  0098                     	;# 
   685  0099                     	;# 
   686  009A                     	;# 
   687  009B                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009E                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010E                     	;# 
   694  010E                     	;# 
   695  010F                     	;# 
   696  0110                     	;# 
   697  0110                     	;# 
   698  0111                     	;# 
   699  0112                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0114                     	;# 
   704  0115                     	;# 
   705  0116                     	;# 
   706  0116                     	;# 
   707  0117                     	;# 
   708  0119                     	;# 
   709  0119                     	;# 
   710  0119                     	;# 
   711  011A                     	;# 
   712  011A                     	;# 
   713  011A                     	;# 
   714  011B                     	;# 
   715  011B                     	;# 
   716  011B                     	;# 
   717  011B                     	;# 
   718  011B                     	;# 
   719  011C                     	;# 
   720  011C                     	;# 
   721  011C                     	;# 
   722  011D                     	;# 
   723  011D                     	;# 
   724  011D                     	;# 
   725  011E                     	;# 
   726  011E                     	;# 
   727  011E                     	;# 
   728  011F                     	;# 
   729  011F                     	;# 
   730  011F                     	;# 
   731  011F                     	;# 
   732  011F                     	;# 
   733  018C                     	;# 
   734  018D                     	;# 
   735  018E                     	;# 
   736  018F                     	;# 
   737  0190                     	;# 
   738  0191                     	;# 
   739  0192                     	;# 
   740  0196                     	;# 
   741  0197                     	;# 
   742  0198                     	;# 
   743  0199                     	;# 
   744  019A                     	;# 
   745  019B                     	;# 
   746  019C                     	;# 
   747  020C                     	;# 
   748  020C                     	;# 
   749  020D                     	;# 
   750  020E                     	;# 
   751  020F                     	;# 
   752  020F                     	;# 
   753  0210                     	;# 
   754  0210                     	;# 
   755  0211                     	;# 
   756  0211                     	;# 
   757  0212                     	;# 
   758  0212                     	;# 
   759  0213                     	;# 
   760  0214                     	;# 
   761  0215                     	;# 
   762  0215                     	;# 
   763  0216                     	;# 
   764  0216                     	;# 
   765  0217                     	;# 
   766  0217                     	;# 
   767  0218                     	;# 
   768  0218                     	;# 
   769  0219                     	;# 
   770  021A                     	;# 
   771  021B                     	;# 
   772  021B                     	;# 
   773  021C                     	;# 
   774  021C                     	;# 
   775  021D                     	;# 
   776  021D                     	;# 
   777  021E                     	;# 
   778  021F                     	;# 
   779  028C                     	;# 
   780  028C                     	;# 
   781  028D                     	;# 
   782  028D                     	;# 
   783  028E                     	;# 
   784  028F                     	;# 
   785  0290                     	;# 
   786  0290                     	;# 
   787  0291                     	;# 
   788  0292                     	;# 
   789  0292                     	;# 
   790  0293                     	;# 
   791  0293                     	;# 
   792  0294                     	;# 
   793  0295                     	;# 
   794  0296                     	;# 
   795  0296                     	;# 
   796  0297                     	;# 
   797  0298                     	;# 
   798  0298                     	;# 
   799  0299                     	;# 
   800  0299                     	;# 
   801  029A                     	;# 
   802  029B                     	;# 
   803  029C                     	;# 
   804  029C                     	;# 
   805  029D                     	;# 
   806  030C                     	;# 
   807  030C                     	;# 
   808  030D                     	;# 
   809  030E                     	;# 
   810  030F                     	;# 
   811  0310                     	;# 
   812  0310                     	;# 
   813  0311                     	;# 
   814  0312                     	;# 
   815  0313                     	;# 
   816  0314                     	;# 
   817  0314                     	;# 
   818  0315                     	;# 
   819  0316                     	;# 
   820  0317                     	;# 
   821  0318                     	;# 
   822  0318                     	;# 
   823  0319                     	;# 
   824  031A                     	;# 
   825  031B                     	;# 
   826  031C                     	;# 
   827  031C                     	;# 
   828  031D                     	;# 
   829  031E                     	;# 
   830  031F                     	;# 
   831  038C                     	;# 
   832  038D                     	;# 
   833  038E                     	;# 
   834  0390                     	;# 
   835  0391                     	;# 
   836  0392                     	;# 
   837  040C                     	;# 
   838  040D                     	;# 
   839  040E                     	;# 
   840  040F                     	;# 
   841  0410                     	;# 
   842  0411                     	;# 
   843  0416                     	;# 
   844  0416                     	;# 
   845  0417                     	;# 
   846  0418                     	;# 
   847  0418                     	;# 
   848  0419                     	;# 
   849  041A                     	;# 
   850  041A                     	;# 
   851  041B                     	;# 
   852  041C                     	;# 
   853  041C                     	;# 
   854  041D                     	;# 
   855  041E                     	;# 
   856  041F                     	;# 
   857  048C                     	;# 
   858  048C                     	;# 
   859  048D                     	;# 
   860  048E                     	;# 
   861  048F                     	;# 
   862  048F                     	;# 
   863  0490                     	;# 
   864  0491                     	;# 
   865  0492                     	;# 
   866  0492                     	;# 
   867  0493                     	;# 
   868  0494                     	;# 
   869  0495                     	;# 
   870  0495                     	;# 
   871  0496                     	;# 
   872  0497                     	;# 
   873  0498                     	;# 
   874  0499                     	;# 
   875  049A                     	;# 
   876  049B                     	;# 
   877  049C                     	;# 
   878  049D                     	;# 
   879  050C                     	;# 
   880  050C                     	;# 
   881  050D                     	;# 
   882  050E                     	;# 
   883  050F                     	;# 
   884  050F                     	;# 
   885  0510                     	;# 
   886  0511                     	;# 
   887  0512                     	;# 
   888  0512                     	;# 
   889  0513                     	;# 
   890  0514                     	;# 
   891  0515                     	;# 
   892  0515                     	;# 
   893  0516                     	;# 
   894  0517                     	;# 
   895  0518                     	;# 
   896  0519                     	;# 
   897  051A                     	;# 
   898  051B                     	;# 
   899  051C                     	;# 
   900  051D                     	;# 
   901  058C                     	;# 
   902  058C                     	;# 
   903  058D                     	;# 
   904  058E                     	;# 
   905  058F                     	;# 
   906  058F                     	;# 
   907  0590                     	;# 
   908  0591                     	;# 
   909  0592                     	;# 
   910  0593                     	;# 
   911  060C                     	;# 
   912  060D                     	;# 
   913  060E                     	;# 
   914  060F                     	;# 
   915  0610                     	;# 
   916  0611                     	;# 
   917  0612                     	;# 
   918  0613                     	;# 
   919  0614                     	;# 
   920  0616                     	;# 
   921  0617                     	;# 
   922  0618                     	;# 
   923  0619                     	;# 
   924  061A                     	;# 
   925  061B                     	;# 
   926  061C                     	;# 
   927  061D                     	;# 
   928  061E                     	;# 
   929  068C                     	;# 
   930  068D                     	;# 
   931  068E                     	;# 
   932  068F                     	;# 
   933  0690                     	;# 
   934  0691                     	;# 
   935  0692                     	;# 
   936  0693                     	;# 
   937  0694                     	;# 
   938  070C                     	;# 
   939  070D                     	;# 
   940  070E                     	;# 
   941  070F                     	;# 
   942  0710                     	;# 
   943  0711                     	;# 
   944  0712                     	;# 
   945  0713                     	;# 
   946  0714                     	;# 
   947  0716                     	;# 
   948  0717                     	;# 
   949  0718                     	;# 
   950  0719                     	;# 
   951  071A                     	;# 
   952  071B                     	;# 
   953  071C                     	;# 
   954  071D                     	;# 
   955  071E                     	;# 
   956  0796                     	;# 
   957  0797                     	;# 
   958  0798                     	;# 
   959  0799                     	;# 
   960  079A                     	;# 
   961  079B                     	;# 
   962  080C                     	;# 
   963  080D                     	;# 
   964  080E                     	;# 
   965  080F                     	;# 
   966  0810                     	;# 
   967  0811                     	;# 
   968  0812                     	;# 
   969  0813                     	;# 
   970  0814                     	;# 
   971  081A                     	;# 
   972  081B                     	;# 
   973  081C                     	;# 
   974  081D                     	;# 
   975  081E                     	;# 
   976  081F                     	;# 
   977  088C                     	;# 
   978  088D                     	;# 
   979  088E                     	;# 
   980  088F                     	;# 
   981  0890                     	;# 
   982  0891                     	;# 
   983  0892                     	;# 
   984  0893                     	;# 
   985  0895                     	;# 
   986  0896                     	;# 
   987  0897                     	;# 
   988  0898                     	;# 
   989  0899                     	;# 
   990  089A                     	;# 
   991  089B                     	;# 
   992  090C                     	;# 
   993  090E                     	;# 
   994  090F                     	;# 
   995  091F                     	;# 
   996  091F                     	;# 
   997  098F                     	;# 
   998  098F                     	;# 
   999  0990                     	;# 
  1000  0991                     	;# 
  1001  0992                     	;# 
  1002  0993                     	;# 
  1003  0994                     	;# 
  1004  0995                     	;# 
  1005  0996                     	;# 
  1006  0997                     	;# 
  1007  0E0F                     	;# 
  1008  0E10                     	;# 
  1009  0E11                     	;# 
  1010  0E12                     	;# 
  1011  0E13                     	;# 
  1012  0E14                     	;# 
  1013  0E15                     	;# 
  1014  0E16                     	;# 
  1015  0E17                     	;# 
  1016  0E18                     	;# 
  1017  0E19                     	;# 
  1018  0E1A                     	;# 
  1019  0E1B                     	;# 
  1020  0E1C                     	;# 
  1021  0E1D                     	;# 
  1022  0E1E                     	;# 
  1023  0E1F                     	;# 
  1024  0E20                     	;# 
  1025  0E21                     	;# 
  1026  0E22                     	;# 
  1027  0E23                     	;# 
  1028  0E24                     	;# 
  1029  0E25                     	;# 
  1030  0E26                     	;# 
  1031  0E27                     	;# 
  1032  0E28                     	;# 
  1033  0E29                     	;# 
  1034  0E2A                     	;# 
  1035  0E2B                     	;# 
  1036  0E2C                     	;# 
  1037  0E2D                     	;# 
  1038  0E2E                     	;# 
  1039  0E2F                     	;# 
  1040  0E30                     	;# 
  1041  0E31                     	;# 
  1042  0E32                     	;# 
  1043  0E33                     	;# 
  1044  0E34                     	;# 
  1045  0E35                     	;# 
  1046  0E36                     	;# 
  1047  0E37                     	;# 
  1048  0E8F                     	;# 
  1049  0E90                     	;# 
  1050  0E91                     	;# 
  1051  0E92                     	;# 
  1052  0E93                     	;# 
  1053  0E94                     	;# 
  1054  0E95                     	;# 
  1055  0E96                     	;# 
  1056  0E97                     	;# 
  1057  0E9C                     	;# 
  1058  0E9D                     	;# 
  1059  0E9E                     	;# 
  1060  0EA1                     	;# 
  1061  0EA2                     	;# 
  1062  0EA3                     	;# 
  1063  0EA4                     	;# 
  1064  0EA5                     	;# 
  1065  0EA9                     	;# 
  1066  0EAA                     	;# 
  1067  0EAB                     	;# 
  1068  0EAC                     	;# 
  1069  0EB1                     	;# 
  1070  0EB2                     	;# 
  1071  0EB3                     	;# 
  1072  0EB8                     	;# 
  1073  0EB9                     	;# 
  1074  0EBA                     	;# 
  1075  0EBB                     	;# 
  1076  0EBC                     	;# 
  1077  0EBD                     	;# 
  1078  0EBE                     	;# 
  1079  0EC3                     	;# 
  1080  0EC5                     	;# 
  1081  0EC6                     	;# 
  1082  0EC7                     	;# 
  1083  0EC8                     	;# 
  1084  0EC9                     	;# 
  1085  0ECA                     	;# 
  1086  0ECB                     	;# 
  1087  0ECC                     	;# 
  1088  0F10                     	;# 
  1089  0F11                     	;# 
  1090  0F12                     	;# 
  1091  0F13                     	;# 
  1092  0F14                     	;# 
  1093  0F15                     	;# 
  1094  0F16                     	;# 
  1095  0F17                     	;# 
  1096  0F18                     	;# 
  1097  0F19                     	;# 
  1098  0F1A                     	;# 
  1099  0F1B                     	;# 
  1100  0F1C                     	;# 
  1101  0F1D                     	;# 
  1102  0F1E                     	;# 
  1103  0F1F                     	;# 
  1104  0F20                     	;# 
  1105  0F21                     	;# 
  1106  0F22                     	;# 
  1107  0F23                     	;# 
  1108  0F24                     	;# 
  1109  0F25                     	;# 
  1110  0F26                     	;# 
  1111  0F27                     	;# 
  1112  0F38                     	;# 
  1113  0F39                     	;# 
  1114  0F3A                     	;# 
  1115  0F3B                     	;# 
  1116  0F3C                     	;# 
  1117  0F3D                     	;# 
  1118  0F3E                     	;# 
  1119  0F3F                     	;# 
  1120  0F40                     	;# 
  1121  0F41                     	;# 
  1122  0F43                     	;# 
  1123  0F44                     	;# 
  1124  0F45                     	;# 
  1125  0F46                     	;# 
  1126  0F47                     	;# 
  1127  0F48                     	;# 
  1128  0F49                     	;# 
  1129  0F4A                     	;# 
  1130  0F4B                     	;# 
  1131  0F4C                     	;# 
  1132  0F4E                     	;# 
  1133  0F4F                     	;# 
  1134  0F50                     	;# 
  1135  0F51                     	;# 
  1136  0F52                     	;# 
  1137  0F53                     	;# 
  1138  0F54                     	;# 
  1139  0F55                     	;# 
  1140  0F56                     	;# 
  1141  0F57                     	;# 
  1142  0F65                     	;# 
  1143  0F68                     	;# 
  1144  0F69                     	;# 
  1145  0F6A                     	;# 
  1146  0F6B                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0013                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  001C                     	;# 
  1181  001C                     	;# 
  1182  001D                     	;# 
  1183  001D                     	;# 
  1184  001E                     	;# 
  1185  001F                     	;# 
  1186  008C                     	;# 
  1187  008C                     	;# 
  1188  008D                     	;# 
  1189  008E                     	;# 
  1190  008E                     	;# 
  1191  008F                     	;# 
  1192  0090                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0093                     	;# 
  1196  0094                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0098                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  010E                     	;# 
  1211  010F                     	;# 
  1212  0110                     	;# 
  1213  0110                     	;# 
  1214  0111                     	;# 
  1215  0112                     	;# 
  1216  0112                     	;# 
  1217  0113                     	;# 
  1218  0114                     	;# 
  1219  0114                     	;# 
  1220  0115                     	;# 
  1221  0116                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  0119                     	;# 
  1225  0119                     	;# 
  1226  0119                     	;# 
  1227  011A                     	;# 
  1228  011A                     	;# 
  1229  011A                     	;# 
  1230  011B                     	;# 
  1231  011B                     	;# 
  1232  011B                     	;# 
  1233  011B                     	;# 
  1234  011B                     	;# 
  1235  011C                     	;# 
  1236  011C                     	;# 
  1237  011C                     	;# 
  1238  011D                     	;# 
  1239  011D                     	;# 
  1240  011D                     	;# 
  1241  011E                     	;# 
  1242  011E                     	;# 
  1243  011E                     	;# 
  1244  011F                     	;# 
  1245  011F                     	;# 
  1246  011F                     	;# 
  1247  011F                     	;# 
  1248  011F                     	;# 
  1249  018C                     	;# 
  1250  018D                     	;# 
  1251  018E                     	;# 
  1252  018F                     	;# 
  1253  0190                     	;# 
  1254  0191                     	;# 
  1255  0192                     	;# 
  1256  0196                     	;# 
  1257  0197                     	;# 
  1258  0198                     	;# 
  1259  0199                     	;# 
  1260  019A                     	;# 
  1261  019B                     	;# 
  1262  019C                     	;# 
  1263  020C                     	;# 
  1264  020C                     	;# 
  1265  020D                     	;# 
  1266  020E                     	;# 
  1267  020F                     	;# 
  1268  020F                     	;# 
  1269  0210                     	;# 
  1270  0210                     	;# 
  1271  0211                     	;# 
  1272  0211                     	;# 
  1273  0212                     	;# 
  1274  0212                     	;# 
  1275  0213                     	;# 
  1276  0214                     	;# 
  1277  0215                     	;# 
  1278  0215                     	;# 
  1279  0216                     	;# 
  1280  0216                     	;# 
  1281  0217                     	;# 
  1282  0217                     	;# 
  1283  0218                     	;# 
  1284  0218                     	;# 
  1285  0219                     	;# 
  1286  021A                     	;# 
  1287  021B                     	;# 
  1288  021B                     	;# 
  1289  021C                     	;# 
  1290  021C                     	;# 
  1291  021D                     	;# 
  1292  021D                     	;# 
  1293  021E                     	;# 
  1294  021F                     	;# 
  1295  028C                     	;# 
  1296  028C                     	;# 
  1297  028D                     	;# 
  1298  028D                     	;# 
  1299  028E                     	;# 
  1300  028F                     	;# 
  1301  0290                     	;# 
  1302  0290                     	;# 
  1303  0291                     	;# 
  1304  0292                     	;# 
  1305  0292                     	;# 
  1306  0293                     	;# 
  1307  0293                     	;# 
  1308  0294                     	;# 
  1309  0295                     	;# 
  1310  0296                     	;# 
  1311  0296                     	;# 
  1312  0297                     	;# 
  1313  0298                     	;# 
  1314  0298                     	;# 
  1315  0299                     	;# 
  1316  0299                     	;# 
  1317  029A                     	;# 
  1318  029B                     	;# 
  1319  029C                     	;# 
  1320  029C                     	;# 
  1321  029D                     	;# 
  1322  030C                     	;# 
  1323  030C                     	;# 
  1324  030D                     	;# 
  1325  030E                     	;# 
  1326  030F                     	;# 
  1327  0310                     	;# 
  1328  0310                     	;# 
  1329  0311                     	;# 
  1330  0312                     	;# 
  1331  0313                     	;# 
  1332  0314                     	;# 
  1333  0314                     	;# 
  1334  0315                     	;# 
  1335  0316                     	;# 
  1336  0317                     	;# 
  1337  0318                     	;# 
  1338  0318                     	;# 
  1339  0319                     	;# 
  1340  031A                     	;# 
  1341  031B                     	;# 
  1342  031C                     	;# 
  1343  031C                     	;# 
  1344  031D                     	;# 
  1345  031E                     	;# 
  1346  031F                     	;# 
  1347  038C                     	;# 
  1348  038D                     	;# 
  1349  038E                     	;# 
  1350  0390                     	;# 
  1351  0391                     	;# 
  1352  0392                     	;# 
  1353  040C                     	;# 
  1354  040D                     	;# 
  1355  040E                     	;# 
  1356  040F                     	;# 
  1357  0410                     	;# 
  1358  0411                     	;# 
  1359  0416                     	;# 
  1360  0416                     	;# 
  1361  0417                     	;# 
  1362  0418                     	;# 
  1363  0418                     	;# 
  1364  0419                     	;# 
  1365  041A                     	;# 
  1366  041A                     	;# 
  1367  041B                     	;# 
  1368  041C                     	;# 
  1369  041C                     	;# 
  1370  041D                     	;# 
  1371  041E                     	;# 
  1372  041F                     	;# 
  1373  048C                     	;# 
  1374  048C                     	;# 
  1375  048D                     	;# 
  1376  048E                     	;# 
  1377  048F                     	;# 
  1378  048F                     	;# 
  1379  0490                     	;# 
  1380  0491                     	;# 
  1381  0492                     	;# 
  1382  0492                     	;# 
  1383  0493                     	;# 
  1384  0494                     	;# 
  1385  0495                     	;# 
  1386  0495                     	;# 
  1387  0496                     	;# 
  1388  0497                     	;# 
  1389  0498                     	;# 
  1390  0499                     	;# 
  1391  049A                     	;# 
  1392  049B                     	;# 
  1393  049C                     	;# 
  1394  049D                     	;# 
  1395  050C                     	;# 
  1396  050C                     	;# 
  1397  050D                     	;# 
  1398  050E                     	;# 
  1399  050F                     	;# 
  1400  050F                     	;# 
  1401  0510                     	;# 
  1402  0511                     	;# 
  1403  0512                     	;# 
  1404  0512                     	;# 
  1405  0513                     	;# 
  1406  0514                     	;# 
  1407  0515                     	;# 
  1408  0515                     	;# 
  1409  0516                     	;# 
  1410  0517                     	;# 
  1411  0518                     	;# 
  1412  0519                     	;# 
  1413  051A                     	;# 
  1414  051B                     	;# 
  1415  051C                     	;# 
  1416  051D                     	;# 
  1417  058C                     	;# 
  1418  058C                     	;# 
  1419  058D                     	;# 
  1420  058E                     	;# 
  1421  058F                     	;# 
  1422  058F                     	;# 
  1423  0590                     	;# 
  1424  0591                     	;# 
  1425  0592                     	;# 
  1426  0593                     	;# 
  1427  060C                     	;# 
  1428  060D                     	;# 
  1429  060E                     	;# 
  1430  060F                     	;# 
  1431  0610                     	;# 
  1432  0611                     	;# 
  1433  0612                     	;# 
  1434  0613                     	;# 
  1435  0614                     	;# 
  1436  0616                     	;# 
  1437  0617                     	;# 
  1438  0618                     	;# 
  1439  0619                     	;# 
  1440  061A                     	;# 
  1441  061B                     	;# 
  1442  061C                     	;# 
  1443  061D                     	;# 
  1444  061E                     	;# 
  1445  068C                     	;# 
  1446  068D                     	;# 
  1447  068E                     	;# 
  1448  068F                     	;# 
  1449  0690                     	;# 
  1450  0691                     	;# 
  1451  0692                     	;# 
  1452  0693                     	;# 
  1453  0694                     	;# 
  1454  070C                     	;# 
  1455  070D                     	;# 
  1456  070E                     	;# 
  1457  070F                     	;# 
  1458  0710                     	;# 
  1459  0711                     	;# 
  1460  0712                     	;# 
  1461  0713                     	;# 
  1462  0714                     	;# 
  1463  0716                     	;# 
  1464  0717                     	;# 
  1465  0718                     	;# 
  1466  0719                     	;# 
  1467  071A                     	;# 
  1468  071B                     	;# 
  1469  071C                     	;# 
  1470  071D                     	;# 
  1471  071E                     	;# 
  1472  0796                     	;# 
  1473  0797                     	;# 
  1474  0798                     	;# 
  1475  0799                     	;# 
  1476  079A                     	;# 
  1477  079B                     	;# 
  1478  080C                     	;# 
  1479  080D                     	;# 
  1480  080E                     	;# 
  1481  080F                     	;# 
  1482  0810                     	;# 
  1483  0811                     	;# 
  1484  0812                     	;# 
  1485  0813                     	;# 
  1486  0814                     	;# 
  1487  081A                     	;# 
  1488  081B                     	;# 
  1489  081C                     	;# 
  1490  081D                     	;# 
  1491  081E                     	;# 
  1492  081F                     	;# 
  1493  088C                     	;# 
  1494  088D                     	;# 
  1495  088E                     	;# 
  1496  088F                     	;# 
  1497  0890                     	;# 
  1498  0891                     	;# 
  1499  0892                     	;# 
  1500  0893                     	;# 
  1501  0895                     	;# 
  1502  0896                     	;# 
  1503  0897                     	;# 
  1504  0898                     	;# 
  1505  0899                     	;# 
  1506  089A                     	;# 
  1507  089B                     	;# 
  1508  090C                     	;# 
  1509  090E                     	;# 
  1510  090F                     	;# 
  1511  091F                     	;# 
  1512  091F                     	;# 
  1513  098F                     	;# 
  1514  098F                     	;# 
  1515  0990                     	;# 
  1516  0991                     	;# 
  1517  0992                     	;# 
  1518  0993                     	;# 
  1519  0994                     	;# 
  1520  0995                     	;# 
  1521  0996                     	;# 
  1522  0997                     	;# 
  1523  0E0F                     	;# 
  1524  0E10                     	;# 
  1525  0E11                     	;# 
  1526  0E12                     	;# 
  1527  0E13                     	;# 
  1528  0E14                     	;# 
  1529  0E15                     	;# 
  1530  0E16                     	;# 
  1531  0E17                     	;# 
  1532  0E18                     	;# 
  1533  0E19                     	;# 
  1534  0E1A                     	;# 
  1535  0E1B                     	;# 
  1536  0E1C                     	;# 
  1537  0E1D                     	;# 
  1538  0E1E                     	;# 
  1539  0E1F                     	;# 
  1540  0E20                     	;# 
  1541  0E21                     	;# 
  1542  0E22                     	;# 
  1543  0E23                     	;# 
  1544  0E24                     	;# 
  1545  0E25                     	;# 
  1546  0E26                     	;# 
  1547  0E27                     	;# 
  1548  0E28                     	;# 
  1549  0E29                     	;# 
  1550  0E2A                     	;# 
  1551  0E2B                     	;# 
  1552  0E2C                     	;# 
  1553  0E2D                     	;# 
  1554  0E2E                     	;# 
  1555  0E2F                     	;# 
  1556  0E30                     	;# 
  1557  0E31                     	;# 
  1558  0E32                     	;# 
  1559  0E33                     	;# 
  1560  0E34                     	;# 
  1561  0E35                     	;# 
  1562  0E36                     	;# 
  1563  0E37                     	;# 
  1564  0E8F                     	;# 
  1565  0E90                     	;# 
  1566  0E91                     	;# 
  1567  0E92                     	;# 
  1568  0E93                     	;# 
  1569  0E94                     	;# 
  1570  0E95                     	;# 
  1571  0E96                     	;# 
  1572  0E97                     	;# 
  1573  0E9C                     	;# 
  1574  0E9D                     	;# 
  1575  0E9E                     	;# 
  1576  0EA1                     	;# 
  1577  0EA2                     	;# 
  1578  0EA3                     	;# 
  1579  0EA4                     	;# 
  1580  0EA5                     	;# 
  1581  0EA9                     	;# 
  1582  0EAA                     	;# 
  1583  0EAB                     	;# 
  1584  0EAC                     	;# 
  1585  0EB1                     	;# 
  1586  0EB2                     	;# 
  1587  0EB3                     	;# 
  1588  0EB8                     	;# 
  1589  0EB9                     	;# 
  1590  0EBA                     	;# 
  1591  0EBB                     	;# 
  1592  0EBC                     	;# 
  1593  0EBD                     	;# 
  1594  0EBE                     	;# 
  1595  0EC3                     	;# 
  1596  0EC5                     	;# 
  1597  0EC6                     	;# 
  1598  0EC7                     	;# 
  1599  0EC8                     	;# 
  1600  0EC9                     	;# 
  1601  0ECA                     	;# 
  1602  0ECB                     	;# 
  1603  0ECC                     	;# 
  1604  0F10                     	;# 
  1605  0F11                     	;# 
  1606  0F12                     	;# 
  1607  0F13                     	;# 
  1608  0F14                     	;# 
  1609  0F15                     	;# 
  1610  0F16                     	;# 
  1611  0F17                     	;# 
  1612  0F18                     	;# 
  1613  0F19                     	;# 
  1614  0F1A                     	;# 
  1615  0F1B                     	;# 
  1616  0F1C                     	;# 
  1617  0F1D                     	;# 
  1618  0F1E                     	;# 
  1619  0F1F                     	;# 
  1620  0F20                     	;# 
  1621  0F21                     	;# 
  1622  0F22                     	;# 
  1623  0F23                     	;# 
  1624  0F24                     	;# 
  1625  0F25                     	;# 
  1626  0F26                     	;# 
  1627  0F27                     	;# 
  1628  0F38                     	;# 
  1629  0F39                     	;# 
  1630  0F3A                     	;# 
  1631  0F3B                     	;# 
  1632  0F3C                     	;# 
  1633  0F3D                     	;# 
  1634  0F3E                     	;# 
  1635  0F3F                     	;# 
  1636  0F40                     	;# 
  1637  0F41                     	;# 
  1638  0F43                     	;# 
  1639  0F44                     	;# 
  1640  0F45                     	;# 
  1641  0F46                     	;# 
  1642  0F47                     	;# 
  1643  0F48                     	;# 
  1644  0F49                     	;# 
  1645  0F4A                     	;# 
  1646  0F4B                     	;# 
  1647  0F4C                     	;# 
  1648  0F4E                     	;# 
  1649  0F4F                     	;# 
  1650  0F50                     	;# 
  1651  0F51                     	;# 
  1652  0F52                     	;# 
  1653  0F53                     	;# 
  1654  0F54                     	;# 
  1655  0F55                     	;# 
  1656  0F56                     	;# 
  1657  0F57                     	;# 
  1658  0F65                     	;# 
  1659  0F68                     	;# 
  1660  0F69                     	;# 
  1661  0F6A                     	;# 
  1662  0F6B                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  0000                     	;# 
  1675  0001                     	;# 
  1676  0002                     	;# 
  1677  0003                     	;# 
  1678  0004                     	;# 
  1679  0005                     	;# 
  1680  0006                     	;# 
  1681  0007                     	;# 
  1682  0008                     	;# 
  1683  0009                     	;# 
  1684  000A                     	;# 
  1685  000B                     	;# 
  1686  000C                     	;# 
  1687  000D                     	;# 
  1688  000E                     	;# 
  1689  0010                     	;# 
  1690  0011                     	;# 
  1691  0012                     	;# 
  1692  0013                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  001C                     	;# 
  1697  001C                     	;# 
  1698  001D                     	;# 
  1699  001D                     	;# 
  1700  001E                     	;# 
  1701  001F                     	;# 
  1702  008C                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  008E                     	;# 
  1707  008F                     	;# 
  1708  0090                     	;# 
  1709  0090                     	;# 
  1710  0091                     	;# 
  1711  0093                     	;# 
  1712  0094                     	;# 
  1713  0095                     	;# 
  1714  0096                     	;# 
  1715  0097                     	;# 
  1716  0098                     	;# 
  1717  0099                     	;# 
  1718  009A                     	;# 
  1719  009B                     	;# 
  1720  009C                     	;# 
  1721  009D                     	;# 
  1722  009E                     	;# 
  1723  010C                     	;# 
  1724  010D                     	;# 
  1725  010E                     	;# 
  1726  010E                     	;# 
  1727  010F                     	;# 
  1728  0110                     	;# 
  1729  0110                     	;# 
  1730  0111                     	;# 
  1731  0112                     	;# 
  1732  0112                     	;# 
  1733  0113                     	;# 
  1734  0114                     	;# 
  1735  0114                     	;# 
  1736  0115                     	;# 
  1737  0116                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  0119                     	;# 
  1741  0119                     	;# 
  1742  0119                     	;# 
  1743  011A                     	;# 
  1744  011A                     	;# 
  1745  011A                     	;# 
  1746  011B                     	;# 
  1747  011B                     	;# 
  1748  011B                     	;# 
  1749  011B                     	;# 
  1750  011B                     	;# 
  1751  011C                     	;# 
  1752  011C                     	;# 
  1753  011C                     	;# 
  1754  011D                     	;# 
  1755  011D                     	;# 
  1756  011D                     	;# 
  1757  011E                     	;# 
  1758  011E                     	;# 
  1759  011E                     	;# 
  1760  011F                     	;# 
  1761  011F                     	;# 
  1762  011F                     	;# 
  1763  011F                     	;# 
  1764  011F                     	;# 
  1765  018C                     	;# 
  1766  018D                     	;# 
  1767  018E                     	;# 
  1768  018F                     	;# 
  1769  0190                     	;# 
  1770  0191                     	;# 
  1771  0192                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0198                     	;# 
  1775  0199                     	;# 
  1776  019A                     	;# 
  1777  019B                     	;# 
  1778  019C                     	;# 
  1779  020C                     	;# 
  1780  020C                     	;# 
  1781  020D                     	;# 
  1782  020E                     	;# 
  1783  020F                     	;# 
  1784  020F                     	;# 
  1785  0210                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0214                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0218                     	;# 
  1800  0218                     	;# 
  1801  0219                     	;# 
  1802  021A                     	;# 
  1803  021B                     	;# 
  1804  021B                     	;# 
  1805  021C                     	;# 
  1806  021C                     	;# 
  1807  021D                     	;# 
  1808  021D                     	;# 
  1809  021E                     	;# 
  1810  021F                     	;# 
  1811  028C                     	;# 
  1812  028C                     	;# 
  1813  028D                     	;# 
  1814  028D                     	;# 
  1815  028E                     	;# 
  1816  028F                     	;# 
  1817  0290                     	;# 
  1818  0290                     	;# 
  1819  0291                     	;# 
  1820  0292                     	;# 
  1821  0292                     	;# 
  1822  0293                     	;# 
  1823  0293                     	;# 
  1824  0294                     	;# 
  1825  0295                     	;# 
  1826  0296                     	;# 
  1827  0296                     	;# 
  1828  0297                     	;# 
  1829  0298                     	;# 
  1830  0298                     	;# 
  1831  0299                     	;# 
  1832  0299                     	;# 
  1833  029A                     	;# 
  1834  029B                     	;# 
  1835  029C                     	;# 
  1836  029C                     	;# 
  1837  029D                     	;# 
  1838  030C                     	;# 
  1839  030C                     	;# 
  1840  030D                     	;# 
  1841  030E                     	;# 
  1842  030F                     	;# 
  1843  0310                     	;# 
  1844  0310                     	;# 
  1845  0311                     	;# 
  1846  0312                     	;# 
  1847  0313                     	;# 
  1848  0314                     	;# 
  1849  0314                     	;# 
  1850  0315                     	;# 
  1851  0316                     	;# 
  1852  0317                     	;# 
  1853  0318                     	;# 
  1854  0318                     	;# 
  1855  0319                     	;# 
  1856  031A                     	;# 
  1857  031B                     	;# 
  1858  031C                     	;# 
  1859  031C                     	;# 
  1860  031D                     	;# 
  1861  031E                     	;# 
  1862  031F                     	;# 
  1863  038C                     	;# 
  1864  038D                     	;# 
  1865  038E                     	;# 
  1866  0390                     	;# 
  1867  0391                     	;# 
  1868  0392                     	;# 
  1869  040C                     	;# 
  1870  040D                     	;# 
  1871  040E                     	;# 
  1872  040F                     	;# 
  1873  0410                     	;# 
  1874  0411                     	;# 
  1875  0416                     	;# 
  1876  0416                     	;# 
  1877  0417                     	;# 
  1878  0418                     	;# 
  1879  0418                     	;# 
  1880  0419                     	;# 
  1881  041A                     	;# 
  1882  041A                     	;# 
  1883  041B                     	;# 
  1884  041C                     	;# 
  1885  041C                     	;# 
  1886  041D                     	;# 
  1887  041E                     	;# 
  1888  041F                     	;# 
  1889  048C                     	;# 
  1890  048C                     	;# 
  1891  048D                     	;# 
  1892  048E                     	;# 
  1893  048F                     	;# 
  1894  048F                     	;# 
  1895  0490                     	;# 
  1896  0491                     	;# 
  1897  0492                     	;# 
  1898  0492                     	;# 
  1899  0493                     	;# 
  1900  0494                     	;# 
  1901  0495                     	;# 
  1902  0495                     	;# 
  1903  0496                     	;# 
  1904  0497                     	;# 
  1905  0498                     	;# 
  1906  0499                     	;# 
  1907  049A                     	;# 
  1908  049B                     	;# 
  1909  049C                     	;# 
  1910  049D                     	;# 
  1911  050C                     	;# 
  1912  050C                     	;# 
  1913  050D                     	;# 
  1914  050E                     	;# 
  1915  050F                     	;# 
  1916  050F                     	;# 
  1917  0510                     	;# 
  1918  0511                     	;# 
  1919  0512                     	;# 
  1920  0512                     	;# 
  1921  0513                     	;# 
  1922  0514                     	;# 
  1923  0515                     	;# 
  1924  0515                     	;# 
  1925  0516                     	;# 
  1926  0517                     	;# 
  1927  0518                     	;# 
  1928  0519                     	;# 
  1929  051A                     	;# 
  1930  051B                     	;# 
  1931  051C                     	;# 
  1932  051D                     	;# 
  1933  058C                     	;# 
  1934  058C                     	;# 
  1935  058D                     	;# 
  1936  058E                     	;# 
  1937  058F                     	;# 
  1938  058F                     	;# 
  1939  0590                     	;# 
  1940  0591                     	;# 
  1941  0592                     	;# 
  1942  0593                     	;# 
  1943  060C                     	;# 
  1944  060D                     	;# 
  1945  060E                     	;# 
  1946  060F                     	;# 
  1947  0610                     	;# 
  1948  0611                     	;# 
  1949  0612                     	;# 
  1950  0613                     	;# 
  1951  0614                     	;# 
  1952  0616                     	;# 
  1953  0617                     	;# 
  1954  0618                     	;# 
  1955  0619                     	;# 
  1956  061A                     	;# 
  1957  061B                     	;# 
  1958  061C                     	;# 
  1959  061D                     	;# 
  1960  061E                     	;# 
  1961  068C                     	;# 
  1962  068D                     	;# 
  1963  068E                     	;# 
  1964  068F                     	;# 
  1965  0690                     	;# 
  1966  0691                     	;# 
  1967  0692                     	;# 
  1968  0693                     	;# 
  1969  0694                     	;# 
  1970  070C                     	;# 
  1971  070D                     	;# 
  1972  070E                     	;# 
  1973  070F                     	;# 
  1974  0710                     	;# 
  1975  0711                     	;# 
  1976  0712                     	;# 
  1977  0713                     	;# 
  1978  0714                     	;# 
  1979  0716                     	;# 
  1980  0717                     	;# 
  1981  0718                     	;# 
  1982  0719                     	;# 
  1983  071A                     	;# 
  1984  071B                     	;# 
  1985  071C                     	;# 
  1986  071D                     	;# 
  1987  071E                     	;# 
  1988  0796                     	;# 
  1989  0797                     	;# 
  1990  0798                     	;# 
  1991  0799                     	;# 
  1992  079A                     	;# 
  1993  079B                     	;# 
  1994  080C                     	;# 
  1995  080D                     	;# 
  1996  080E                     	;# 
  1997  080F                     	;# 
  1998  0810                     	;# 
  1999  0811                     	;# 
  2000  0812                     	;# 
  2001  0813                     	;# 
  2002  0814                     	;# 
  2003  081A                     	;# 
  2004  081B                     	;# 
  2005  081C                     	;# 
  2006  081D                     	;# 
  2007  081E                     	;# 
  2008  081F                     	;# 
  2009  088C                     	;# 
  2010  088D                     	;# 
  2011  088E                     	;# 
  2012  088F                     	;# 
  2013  0890                     	;# 
  2014  0891                     	;# 
  2015  0892                     	;# 
  2016  0893                     	;# 
  2017  0895                     	;# 
  2018  0896                     	;# 
  2019  0897                     	;# 
  2020  0898                     	;# 
  2021  0899                     	;# 
  2022  089A                     	;# 
  2023  089B                     	;# 
  2024  090C                     	;# 
  2025  090E                     	;# 
  2026  090F                     	;# 
  2027  091F                     	;# 
  2028  091F                     	;# 
  2029  098F                     	;# 
  2030  098F                     	;# 
  2031  0990                     	;# 
  2032  0991                     	;# 
  2033  0992                     	;# 
  2034  0993                     	;# 
  2035  0994                     	;# 
  2036  0995                     	;# 
  2037  0996                     	;# 
  2038  0997                     	;# 
  2039  0E0F                     	;# 
  2040  0E10                     	;# 
  2041  0E11                     	;# 
  2042  0E12                     	;# 
  2043  0E13                     	;# 
  2044  0E14                     	;# 
  2045  0E15                     	;# 
  2046  0E16                     	;# 
  2047  0E17                     	;# 
  2048  0E18                     	;# 
  2049  0E19                     	;# 
  2050  0E1A                     	;# 
  2051  0E1B                     	;# 
  2052  0E1C                     	;# 
  2053  0E1D                     	;# 
  2054  0E1E                     	;# 
  2055  0E1F                     	;# 
  2056  0E20                     	;# 
  2057  0E21                     	;# 
  2058  0E22                     	;# 
  2059  0E23                     	;# 
  2060  0E24                     	;# 
  2061  0E25                     	;# 
  2062  0E26                     	;# 
  2063  0E27                     	;# 
  2064  0E28                     	;# 
  2065  0E29                     	;# 
  2066  0E2A                     	;# 
  2067  0E2B                     	;# 
  2068  0E2C                     	;# 
  2069  0E2D                     	;# 
  2070  0E2E                     	;# 
  2071  0E2F                     	;# 
  2072  0E30                     	;# 
  2073  0E31                     	;# 
  2074  0E32                     	;# 
  2075  0E33                     	;# 
  2076  0E34                     	;# 
  2077  0E35                     	;# 
  2078  0E36                     	;# 
  2079  0E37                     	;# 
  2080  0E8F                     	;# 
  2081  0E90                     	;# 
  2082  0E91                     	;# 
  2083  0E92                     	;# 
  2084  0E93                     	;# 
  2085  0E94                     	;# 
  2086  0E95                     	;# 
  2087  0E96                     	;# 
  2088  0E97                     	;# 
  2089  0E9C                     	;# 
  2090  0E9D                     	;# 
  2091  0E9E                     	;# 
  2092  0EA1                     	;# 
  2093  0EA2                     	;# 
  2094  0EA3                     	;# 
  2095  0EA4                     	;# 
  2096  0EA5                     	;# 
  2097  0EA9                     	;# 
  2098  0EAA                     	;# 
  2099  0EAB                     	;# 
  2100  0EAC                     	;# 
  2101  0EB1                     	;# 
  2102  0EB2                     	;# 
  2103  0EB3                     	;# 
  2104  0EB8                     	;# 
  2105  0EB9                     	;# 
  2106  0EBA                     	;# 
  2107  0EBB                     	;# 
  2108  0EBC                     	;# 
  2109  0EBD                     	;# 
  2110  0EBE                     	;# 
  2111  0EC3                     	;# 
  2112  0EC5                     	;# 
  2113  0EC6                     	;# 
  2114  0EC7                     	;# 
  2115  0EC8                     	;# 
  2116  0EC9                     	;# 
  2117  0ECA                     	;# 
  2118  0ECB                     	;# 
  2119  0ECC                     	;# 
  2120  0F10                     	;# 
  2121  0F11                     	;# 
  2122  0F12                     	;# 
  2123  0F13                     	;# 
  2124  0F14                     	;# 
  2125  0F15                     	;# 
  2126  0F16                     	;# 
  2127  0F17                     	;# 
  2128  0F18                     	;# 
  2129  0F19                     	;# 
  2130  0F1A                     	;# 
  2131  0F1B                     	;# 
  2132  0F1C                     	;# 
  2133  0F1D                     	;# 
  2134  0F1E                     	;# 
  2135  0F1F                     	;# 
  2136  0F20                     	;# 
  2137  0F21                     	;# 
  2138  0F22                     	;# 
  2139  0F23                     	;# 
  2140  0F24                     	;# 
  2141  0F25                     	;# 
  2142  0F26                     	;# 
  2143  0F27                     	;# 
  2144  0F38                     	;# 
  2145  0F39                     	;# 
  2146  0F3A                     	;# 
  2147  0F3B                     	;# 
  2148  0F3C                     	;# 
  2149  0F3D                     	;# 
  2150  0F3E                     	;# 
  2151  0F3F                     	;# 
  2152  0F40                     	;# 
  2153  0F41                     	;# 
  2154  0F43                     	;# 
  2155  0F44                     	;# 
  2156  0F45                     	;# 
  2157  0F46                     	;# 
  2158  0F47                     	;# 
  2159  0F48                     	;# 
  2160  0F49                     	;# 
  2161  0F4A                     	;# 
  2162  0F4B                     	;# 
  2163  0F4C                     	;# 
  2164  0F4E                     	;# 
  2165  0F4F                     	;# 
  2166  0F50                     	;# 
  2167  0F51                     	;# 
  2168  0F52                     	;# 
  2169  0F53                     	;# 
  2170  0F54                     	;# 
  2171  0F55                     	;# 
  2172  0F56                     	;# 
  2173  0F57                     	;# 
  2174  0F65                     	;# 
  2175  0F68                     	;# 
  2176  0F69                     	;# 
  2177  0F6A                     	;# 
  2178  0F6B                     	;# 
  2179  0FE4                     	;# 
  2180  0FE5                     	;# 
  2181  0FE6                     	;# 
  2182  0FE7                     	;# 
  2183  0FE8                     	;# 
  2184  0FE9                     	;# 
  2185  0FEA                     	;# 
  2186  0FEB                     	;# 
  2187  0FED                     	;# 
  2188  0FEE                     	;# 
  2189  0FEF                     	;# 
  2190  0000                     	;# 
  2191  0001                     	;# 
  2192  0002                     	;# 
  2193  0003                     	;# 
  2194  0004                     	;# 
  2195  0005                     	;# 
  2196  0006                     	;# 
  2197  0007                     	;# 
  2198  0008                     	;# 
  2199  0009                     	;# 
  2200  000A                     	;# 
  2201  000B                     	;# 
  2202  000C                     	;# 
  2203  000D                     	;# 
  2204  000E                     	;# 
  2205  0010                     	;# 
  2206  0011                     	;# 
  2207  0012                     	;# 
  2208  0013                     	;# 
  2209  0016                     	;# 
  2210  0017                     	;# 
  2211  0018                     	;# 
  2212  001C                     	;# 
  2213  001C                     	;# 
  2214  001D                     	;# 
  2215  001D                     	;# 
  2216  001E                     	;# 
  2217  001F                     	;# 
  2218  008C                     	;# 
  2219  008C                     	;# 
  2220  008D                     	;# 
  2221  008E                     	;# 
  2222  008E                     	;# 
  2223  008F                     	;# 
  2224  0090                     	;# 
  2225  0090                     	;# 
  2226  0091                     	;# 
  2227  0093                     	;# 
  2228  0094                     	;# 
  2229  0095                     	;# 
  2230  0096                     	;# 
  2231  0097                     	;# 
  2232  0098                     	;# 
  2233  0099                     	;# 
  2234  009A                     	;# 
  2235  009B                     	;# 
  2236  009C                     	;# 
  2237  009D                     	;# 
  2238  009E                     	;# 
  2239  010C                     	;# 
  2240  010D                     	;# 
  2241  010E                     	;# 
  2242  010E                     	;# 
  2243  010F                     	;# 
  2244  0110                     	;# 
  2245  0110                     	;# 
  2246  0111                     	;# 
  2247  0112                     	;# 
  2248  0112                     	;# 
  2249  0113                     	;# 
  2250  0114                     	;# 
  2251  0114                     	;# 
  2252  0115                     	;# 
  2253  0116                     	;# 
  2254  0116                     	;# 
  2255  0117                     	;# 
  2256  0119                     	;# 
  2257  0119                     	;# 
  2258  0119                     	;# 
  2259  011A                     	;# 
  2260  011A                     	;# 
  2261  011A                     	;# 
  2262  011B                     	;# 
  2263  011B                     	;# 
  2264  011B                     	;# 
  2265  011B                     	;# 
  2266  011B                     	;# 
  2267  011C                     	;# 
  2268  011C                     	;# 
  2269  011C                     	;# 
  2270  011D                     	;# 
  2271  011D                     	;# 
  2272  011D                     	;# 
  2273  011E                     	;# 
  2274  011E                     	;# 
  2275  011E                     	;# 
  2276  011F                     	;# 
  2277  011F                     	;# 
  2278  011F                     	;# 
  2279  011F                     	;# 
  2280  011F                     	;# 
  2281  018C                     	;# 
  2282  018D                     	;# 
  2283  018E                     	;# 
  2284  018F                     	;# 
  2285  0190                     	;# 
  2286  0191                     	;# 
  2287  0192                     	;# 
  2288  0196                     	;# 
  2289  0197                     	;# 
  2290  0198                     	;# 
  2291  0199                     	;# 
  2292  019A                     	;# 
  2293  019B                     	;# 
  2294  019C                     	;# 
  2295  020C                     	;# 
  2296  020C                     	;# 
  2297  020D                     	;# 
  2298  020E                     	;# 
  2299  020F                     	;# 
  2300  020F                     	;# 
  2301  0210                     	;# 
  2302  0210                     	;# 
  2303  0211                     	;# 
  2304  0211                     	;# 
  2305  0212                     	;# 
  2306  0212                     	;# 
  2307  0213                     	;# 
  2308  0214                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0216                     	;# 
  2312  0216                     	;# 
  2313  0217                     	;# 
  2314  0217                     	;# 
  2315  0218                     	;# 
  2316  0218                     	;# 
  2317  0219                     	;# 
  2318  021A                     	;# 
  2319  021B                     	;# 
  2320  021B                     	;# 
  2321  021C                     	;# 
  2322  021C                     	;# 
  2323  021D                     	;# 
  2324  021D                     	;# 
  2325  021E                     	;# 
  2326  021F                     	;# 
  2327  028C                     	;# 
  2328  028C                     	;# 
  2329  028D                     	;# 
  2330  028D                     	;# 
  2331  028E                     	;# 
  2332  028F                     	;# 
  2333  0290                     	;# 
  2334  0290                     	;# 
  2335  0291                     	;# 
  2336  0292                     	;# 
  2337  0292                     	;# 
  2338  0293                     	;# 
  2339  0293                     	;# 
  2340  0294                     	;# 
  2341  0295                     	;# 
  2342  0296                     	;# 
  2343  0296                     	;# 
  2344  0297                     	;# 
  2345  0298                     	;# 
  2346  0298                     	;# 
  2347  0299                     	;# 
  2348  0299                     	;# 
  2349  029A                     	;# 
  2350  029B                     	;# 
  2351  029C                     	;# 
  2352  029C                     	;# 
  2353  029D                     	;# 
  2354  030C                     	;# 
  2355  030C                     	;# 
  2356  030D                     	;# 
  2357  030E                     	;# 
  2358  030F                     	;# 
  2359  0310                     	;# 
  2360  0310                     	;# 
  2361  0311                     	;# 
  2362  0312                     	;# 
  2363  0313                     	;# 
  2364  0314                     	;# 
  2365  0314                     	;# 
  2366  0315                     	;# 
  2367  0316                     	;# 
  2368  0317                     	;# 
  2369  0318                     	;# 
  2370  0318                     	;# 
  2371  0319                     	;# 
  2372  031A                     	;# 
  2373  031B                     	;# 
  2374  031C                     	;# 
  2375  031C                     	;# 
  2376  031D                     	;# 
  2377  031E                     	;# 
  2378  031F                     	;# 
  2379  038C                     	;# 
  2380  038D                     	;# 
  2381  038E                     	;# 
  2382  0390                     	;# 
  2383  0391                     	;# 
  2384  0392                     	;# 
  2385  040C                     	;# 
  2386  040D                     	;# 
  2387  040E                     	;# 
  2388  040F                     	;# 
  2389  0410                     	;# 
  2390  0411                     	;# 
  2391  0416                     	;# 
  2392  0416                     	;# 
  2393  0417                     	;# 
  2394  0418                     	;# 
  2395  0418                     	;# 
  2396  0419                     	;# 
  2397  041A                     	;# 
  2398  041A                     	;# 
  2399  041B                     	;# 
  2400  041C                     	;# 
  2401  041C                     	;# 
  2402  041D                     	;# 
  2403  041E                     	;# 
  2404  041F                     	;# 
  2405  048C                     	;# 
  2406  048C                     	;# 
  2407  048D                     	;# 
  2408  048E                     	;# 
  2409  048F                     	;# 
  2410  048F                     	;# 
  2411  0490                     	;# 
  2412  0491                     	;# 
  2413  0492                     	;# 
  2414  0492                     	;# 
  2415  0493                     	;# 
  2416  0494                     	;# 
  2417  0495                     	;# 
  2418  0495                     	;# 
  2419  0496                     	;# 
  2420  0497                     	;# 
  2421  0498                     	;# 
  2422  0499                     	;# 
  2423  049A                     	;# 
  2424  049B                     	;# 
  2425  049C                     	;# 
  2426  049D                     	;# 
  2427  050C                     	;# 
  2428  050C                     	;# 
  2429  050D                     	;# 
  2430  050E                     	;# 
  2431  050F                     	;# 
  2432  050F                     	;# 
  2433  0510                     	;# 
  2434  0511                     	;# 
  2435  0512                     	;# 
  2436  0512                     	;# 
  2437  0513                     	;# 
  2438  0514                     	;# 
  2439  0515                     	;# 
  2440  0515                     	;# 
  2441  0516                     	;# 
  2442  0517                     	;# 
  2443  0518                     	;# 
  2444  0519                     	;# 
  2445  051A                     	;# 
  2446  051B                     	;# 
  2447  051C                     	;# 
  2448  051D                     	;# 
  2449  058C                     	;# 
  2450  058C                     	;# 
  2451  058D                     	;# 
  2452  058E                     	;# 
  2453  058F                     	;# 
  2454  058F                     	;# 
  2455  0590                     	;# 
  2456  0591                     	;# 
  2457  0592                     	;# 
  2458  0593                     	;# 
  2459  060C                     	;# 
  2460  060D                     	;# 
  2461  060E                     	;# 
  2462  060F                     	;# 
  2463  0610                     	;# 
  2464  0611                     	;# 
  2465  0612                     	;# 
  2466  0613                     	;# 
  2467  0614                     	;# 
  2468  0616                     	;# 
  2469  0617                     	;# 
  2470  0618                     	;# 
  2471  0619                     	;# 
  2472  061A                     	;# 
  2473  061B                     	;# 
  2474  061C                     	;# 
  2475  061D                     	;# 
  2476  061E                     	;# 
  2477  068C                     	;# 
  2478  068D                     	;# 
  2479  068E                     	;# 
  2480  068F                     	;# 
  2481  0690                     	;# 
  2482  0691                     	;# 
  2483  0692                     	;# 
  2484  0693                     	;# 
  2485  0694                     	;# 
  2486  070C                     	;# 
  2487  070D                     	;# 
  2488  070E                     	;# 
  2489  070F                     	;# 
  2490  0710                     	;# 
  2491  0711                     	;# 
  2492  0712                     	;# 
  2493  0713                     	;# 
  2494  0714                     	;# 
  2495  0716                     	;# 
  2496  0717                     	;# 
  2497  0718                     	;# 
  2498  0719                     	;# 
  2499  071A                     	;# 
  2500  071B                     	;# 
  2501  071C                     	;# 
  2502  071D                     	;# 
  2503  071E                     	;# 
  2504  0796                     	;# 
  2505  0797                     	;# 
  2506  0798                     	;# 
  2507  0799                     	;# 
  2508  079A                     	;# 
  2509  079B                     	;# 
  2510  080C                     	;# 
  2511  080D                     	;# 
  2512  080E                     	;# 
  2513  080F                     	;# 
  2514  0810                     	;# 
  2515  0811                     	;# 
  2516  0812                     	;# 
  2517  0813                     	;# 
  2518  0814                     	;# 
  2519  081A                     	;# 
  2520  081B                     	;# 
  2521  081C                     	;# 
  2522  081D                     	;# 
  2523  081E                     	;# 
  2524  081F                     	;# 
  2525  088C                     	;# 
  2526  088D                     	;# 
  2527  088E                     	;# 
  2528  088F                     	;# 
  2529  0890                     	;# 
  2530  0891                     	;# 
  2531  0892                     	;# 
  2532  0893                     	;# 
  2533  0895                     	;# 
  2534  0896                     	;# 
  2535  0897                     	;# 
  2536  0898                     	;# 
  2537  0899                     	;# 
  2538  089A                     	;# 
  2539  089B                     	;# 
  2540  090C                     	;# 
  2541  090E                     	;# 
  2542  090F                     	;# 
  2543  091F                     	;# 
  2544  091F                     	;# 
  2545  098F                     	;# 
  2546  098F                     	;# 
  2547  0990                     	;# 
  2548  0991                     	;# 
  2549  0992                     	;# 
  2550  0993                     	;# 
  2551  0994                     	;# 
  2552  0995                     	;# 
  2553  0996                     	;# 
  2554  0997                     	;# 
  2555  0E0F                     	;# 
  2556  0E10                     	;# 
  2557  0E11                     	;# 
  2558  0E12                     	;# 
  2559  0E13                     	;# 
  2560  0E14                     	;# 
  2561  0E15                     	;# 
  2562  0E16                     	;# 
  2563  0E17                     	;# 
  2564  0E18                     	;# 
  2565  0E19                     	;# 
  2566  0E1A                     	;# 
  2567  0E1B                     	;# 
  2568  0E1C                     	;# 
  2569  0E1D                     	;# 
  2570  0E1E                     	;# 
  2571  0E1F                     	;# 
  2572  0E20                     	;# 
  2573  0E21                     	;# 
  2574  0E22                     	;# 
  2575  0E23                     	;# 
  2576  0E24                     	;# 
  2577  0E25                     	;# 
  2578  0E26                     	;# 
  2579  0E27                     	;# 
  2580  0E28                     	;# 
  2581  0E29                     	;# 
  2582  0E2A                     	;# 
  2583  0E2B                     	;# 
  2584  0E2C                     	;# 
  2585  0E2D                     	;# 
  2586  0E2E                     	;# 
  2587  0E2F                     	;# 
  2588  0E30                     	;# 
  2589  0E31                     	;# 
  2590  0E32                     	;# 
  2591  0E33                     	;# 
  2592  0E34                     	;# 
  2593  0E35                     	;# 
  2594  0E36                     	;# 
  2595  0E37                     	;# 
  2596  0E8F                     	;# 
  2597  0E90                     	;# 
  2598  0E91                     	;# 
  2599  0E92                     	;# 
  2600  0E93                     	;# 
  2601  0E94                     	;# 
  2602  0E95                     	;# 
  2603  0E96                     	;# 
  2604  0E97                     	;# 
  2605  0E9C                     	;# 
  2606  0E9D                     	;# 
  2607  0E9E                     	;# 
  2608  0EA1                     	;# 
  2609  0EA2                     	;# 
  2610  0EA3                     	;# 
  2611  0EA4                     	;# 
  2612  0EA5                     	;# 
  2613  0EA9                     	;# 
  2614  0EAA                     	;# 
  2615  0EAB                     	;# 
  2616  0EAC                     	;# 
  2617  0EB1                     	;# 
  2618  0EB2                     	;# 
  2619  0EB3                     	;# 
  2620  0EB8                     	;# 
  2621  0EB9                     	;# 
  2622  0EBA                     	;# 
  2623  0EBB                     	;# 
  2624  0EBC                     	;# 
  2625  0EBD                     	;# 
  2626  0EBE                     	;# 
  2627  0EC3                     	;# 
  2628  0EC5                     	;# 
  2629  0EC6                     	;# 
  2630  0EC7                     	;# 
  2631  0EC8                     	;# 
  2632  0EC9                     	;# 
  2633  0ECA                     	;# 
  2634  0ECB                     	;# 
  2635  0ECC                     	;# 
  2636  0F10                     	;# 
  2637  0F11                     	;# 
  2638  0F12                     	;# 
  2639  0F13                     	;# 
  2640  0F14                     	;# 
  2641  0F15                     	;# 
  2642  0F16                     	;# 
  2643  0F17                     	;# 
  2644  0F18                     	;# 
  2645  0F19                     	;# 
  2646  0F1A                     	;# 
  2647  0F1B                     	;# 
  2648  0F1C                     	;# 
  2649  0F1D                     	;# 
  2650  0F1E                     	;# 
  2651  0F1F                     	;# 
  2652  0F20                     	;# 
  2653  0F21                     	;# 
  2654  0F22                     	;# 
  2655  0F23                     	;# 
  2656  0F24                     	;# 
  2657  0F25                     	;# 
  2658  0F26                     	;# 
  2659  0F27                     	;# 
  2660  0F38                     	;# 
  2661  0F39                     	;# 
  2662  0F3A                     	;# 
  2663  0F3B                     	;# 
  2664  0F3C                     	;# 
  2665  0F3D                     	;# 
  2666  0F3E                     	;# 
  2667  0F3F                     	;# 
  2668  0F40                     	;# 
  2669  0F41                     	;# 
  2670  0F43                     	;# 
  2671  0F44                     	;# 
  2672  0F45                     	;# 
  2673  0F46                     	;# 
  2674  0F47                     	;# 
  2675  0F48                     	;# 
  2676  0F49                     	;# 
  2677  0F4A                     	;# 
  2678  0F4B                     	;# 
  2679  0F4C                     	;# 
  2680  0F4E                     	;# 
  2681  0F4F                     	;# 
  2682  0F50                     	;# 
  2683  0F51                     	;# 
  2684  0F52                     	;# 
  2685  0F53                     	;# 
  2686  0F54                     	;# 
  2687  0F55                     	;# 
  2688  0F56                     	;# 
  2689  0F57                     	;# 
  2690  0F65                     	;# 
  2691  0F68                     	;# 
  2692  0F69                     	;# 
  2693  0F6A                     	;# 
  2694  0F6B                     	;# 
  2695  0FE4                     	;# 
  2696  0FE5                     	;# 
  2697  0FE6                     	;# 
  2698  0FE7                     	;# 
  2699  0FE8                     	;# 
  2700  0FE9                     	;# 
  2701  0FEA                     	;# 
  2702  0FEB                     	;# 
  2703  0FED                     	;# 
  2704  0FEE                     	;# 
  2705  0FEF                     	;# 
  2706  0000                     	;# 
  2707  0001                     	;# 
  2708  0002                     	;# 
  2709  0003                     	;# 
  2710  0004                     	;# 
  2711  0005                     	;# 
  2712  0006                     	;# 
  2713  0007                     	;# 
  2714  0008                     	;# 
  2715  0009                     	;# 
  2716  000A                     	;# 
  2717  000B                     	;# 
  2718  000C                     	;# 
  2719  000D                     	;# 
  2720  000E                     	;# 
  2721  0010                     	;# 
  2722  0011                     	;# 
  2723  0012                     	;# 
  2724  0013                     	;# 
  2725  0016                     	;# 
  2726  0017                     	;# 
  2727  0018                     	;# 
  2728  001C                     	;# 
  2729  001C                     	;# 
  2730  001D                     	;# 
  2731  001D                     	;# 
  2732  001E                     	;# 
  2733  001F                     	;# 
  2734  008C                     	;# 
  2735  008C                     	;# 
  2736  008D                     	;# 
  2737  008E                     	;# 
  2738  008E                     	;# 
  2739  008F                     	;# 
  2740  0090                     	;# 
  2741  0090                     	;# 
  2742  0091                     	;# 
  2743  0093                     	;# 
  2744  0094                     	;# 
  2745  0095                     	;# 
  2746  0096                     	;# 
  2747  0097                     	;# 
  2748  0098                     	;# 
  2749  0099                     	;# 
  2750  009A                     	;# 
  2751  009B                     	;# 
  2752  009C                     	;# 
  2753  009D                     	;# 
  2754  009E                     	;# 
  2755  010C                     	;# 
  2756  010D                     	;# 
  2757  010E                     	;# 
  2758  010E                     	;# 
  2759  010F                     	;# 
  2760  0110                     	;# 
  2761  0110                     	;# 
  2762  0111                     	;# 
  2763  0112                     	;# 
  2764  0112                     	;# 
  2765  0113                     	;# 
  2766  0114                     	;# 
  2767  0114                     	;# 
  2768  0115                     	;# 
  2769  0116                     	;# 
  2770  0116                     	;# 
  2771  0117                     	;# 
  2772  0119                     	;# 
  2773  0119                     	;# 
  2774  0119                     	;# 
  2775  011A                     	;# 
  2776  011A                     	;# 
  2777  011A                     	;# 
  2778  011B                     	;# 
  2779  011B                     	;# 
  2780  011B                     	;# 
  2781  011B                     	;# 
  2782  011B                     	;# 
  2783  011C                     	;# 
  2784  011C                     	;# 
  2785  011C                     	;# 
  2786  011D                     	;# 
  2787  011D                     	;# 
  2788  011D                     	;# 
  2789  011E                     	;# 
  2790  011E                     	;# 
  2791  011E                     	;# 
  2792  011F                     	;# 
  2793  011F                     	;# 
  2794  011F                     	;# 
  2795  011F                     	;# 
  2796  011F                     	;# 
  2797  018C                     	;# 
  2798  018D                     	;# 
  2799  018E                     	;# 
  2800  018F                     	;# 
  2801  0190                     	;# 
  2802  0191                     	;# 
  2803  0192                     	;# 
  2804  0196                     	;# 
  2805  0197                     	;# 
  2806  0198                     	;# 
  2807  0199                     	;# 
  2808  019A                     	;# 
  2809  019B                     	;# 
  2810  019C                     	;# 
  2811  020C                     	;# 
  2812  020C                     	;# 
  2813  020D                     	;# 
  2814  020E                     	;# 
  2815  020F                     	;# 
  2816  020F                     	;# 
  2817  0210                     	;# 
  2818  0210                     	;# 
  2819  0211                     	;# 
  2820  0211                     	;# 
  2821  0212                     	;# 
  2822  0212                     	;# 
  2823  0213                     	;# 
  2824  0214                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  0218                     	;# 
  2832  0218                     	;# 
  2833  0219                     	;# 
  2834  021A                     	;# 
  2835  021B                     	;# 
  2836  021B                     	;# 
  2837  021C                     	;# 
  2838  021C                     	;# 
  2839  021D                     	;# 
  2840  021D                     	;# 
  2841  021E                     	;# 
  2842  021F                     	;# 
  2843  028C                     	;# 
  2844  028C                     	;# 
  2845  028D                     	;# 
  2846  028D                     	;# 
  2847  028E                     	;# 
  2848  028F                     	;# 
  2849  0290                     	;# 
  2850  0290                     	;# 
  2851  0291                     	;# 
  2852  0292                     	;# 
  2853  0292                     	;# 
  2854  0293                     	;# 
  2855  0293                     	;# 
  2856  0294                     	;# 
  2857  0295                     	;# 
  2858  0296                     	;# 
  2859  0296                     	;# 
  2860  0297                     	;# 
  2861  0298                     	;# 
  2862  0298                     	;# 
  2863  0299                     	;# 
  2864  0299                     	;# 
  2865  029A                     	;# 
  2866  029B                     	;# 
  2867  029C                     	;# 
  2868  029C                     	;# 
  2869  029D                     	;# 
  2870  030C                     	;# 
  2871  030C                     	;# 
  2872  030D                     	;# 
  2873  030E                     	;# 
  2874  030F                     	;# 
  2875  0310                     	;# 
  2876  0310                     	;# 
  2877  0311                     	;# 
  2878  0312                     	;# 
  2879  0313                     	;# 
  2880  0314                     	;# 
  2881  0314                     	;# 
  2882  0315                     	;# 
  2883  0316                     	;# 
  2884  0317                     	;# 
  2885  0318                     	;# 
  2886  0318                     	;# 
  2887  0319                     	;# 
  2888  031A                     	;# 
  2889  031B                     	;# 
  2890  031C                     	;# 
  2891  031C                     	;# 
  2892  031D                     	;# 
  2893  031E                     	;# 
  2894  031F                     	;# 
  2895  038C                     	;# 
  2896  038D                     	;# 
  2897  038E                     	;# 
  2898  0390                     	;# 
  2899  0391                     	;# 
  2900  0392                     	;# 
  2901  040C                     	;# 
  2902  040D                     	;# 
  2903  040E                     	;# 
  2904  040F                     	;# 
  2905  0410                     	;# 
  2906  0411                     	;# 
  2907  0416                     	;# 
  2908  0416                     	;# 
  2909  0417                     	;# 
  2910  0418                     	;# 
  2911  0418                     	;# 
  2912  0419                     	;# 
  2913  041A                     	;# 
  2914  041A                     	;# 
  2915  041B                     	;# 
  2916  041C                     	;# 
  2917  041C                     	;# 
  2918  041D                     	;# 
  2919  041E                     	;# 
  2920  041F                     	;# 
  2921  048C                     	;# 
  2922  048C                     	;# 
  2923  048D                     	;# 
  2924  048E                     	;# 
  2925  048F                     	;# 
  2926  048F                     	;# 
  2927  0490                     	;# 
  2928  0491                     	;# 
  2929  0492                     	;# 
  2930  0492                     	;# 
  2931  0493                     	;# 
  2932  0494                     	;# 
  2933  0495                     	;# 
  2934  0495                     	;# 
  2935  0496                     	;# 
  2936  0497                     	;# 
  2937  0498                     	;# 
  2938  0499                     	;# 
  2939  049A                     	;# 
  2940  049B                     	;# 
  2941  049C                     	;# 
  2942  049D                     	;# 
  2943  050C                     	;# 
  2944  050C                     	;# 
  2945  050D                     	;# 
  2946  050E                     	;# 
  2947  050F                     	;# 
  2948  050F                     	;# 
  2949  0510                     	;# 
  2950  0511                     	;# 
  2951  0512                     	;# 
  2952  0512                     	;# 
  2953  0513                     	;# 
  2954  0514                     	;# 
  2955  0515                     	;# 
  2956  0515                     	;# 
  2957  0516                     	;# 
  2958  0517                     	;# 
  2959  0518                     	;# 
  2960  0519                     	;# 
  2961  051A                     	;# 
  2962  051B                     	;# 
  2963  051C                     	;# 
  2964  051D                     	;# 
  2965  058C                     	;# 
  2966  058C                     	;# 
  2967  058D                     	;# 
  2968  058E                     	;# 
  2969  058F                     	;# 
  2970  058F                     	;# 
  2971  0590                     	;# 
  2972  0591                     	;# 
  2973  0592                     	;# 
  2974  0593                     	;# 
  2975  060C                     	;# 
  2976  060D                     	;# 
  2977  060E                     	;# 
  2978  060F                     	;# 
  2979  0610                     	;# 
  2980  0611                     	;# 
  2981  0612                     	;# 
  2982  0613                     	;# 
  2983  0614                     	;# 
  2984  0616                     	;# 
  2985  0617                     	;# 
  2986  0618                     	;# 
  2987  0619                     	;# 
  2988  061A                     	;# 
  2989  061B                     	;# 
  2990  061C                     	;# 
  2991  061D                     	;# 
  2992  061E                     	;# 
  2993  068C                     	;# 
  2994  068D                     	;# 
  2995  068E                     	;# 
  2996  068F                     	;# 
  2997  0690                     	;# 
  2998  0691                     	;# 
  2999  0692                     	;# 
  3000  0693                     	;# 
  3001  0694                     	;# 
  3002  070C                     	;# 
  3003  070D                     	;# 
  3004  070E                     	;# 
  3005  070F                     	;# 
  3006  0710                     	;# 
  3007  0711                     	;# 
  3008  0712                     	;# 
  3009  0713                     	;# 
  3010  0714                     	;# 
  3011  0716                     	;# 
  3012  0717                     	;# 
  3013  0718                     	;# 
  3014  0719                     	;# 
  3015  071A                     	;# 
  3016  071B                     	;# 
  3017  071C                     	;# 
  3018  071D                     	;# 
  3019  071E                     	;# 
  3020  0796                     	;# 
  3021  0797                     	;# 
  3022  0798                     	;# 
  3023  0799                     	;# 
  3024  079A                     	;# 
  3025  079B                     	;# 
  3026  080C                     	;# 
  3027  080D                     	;# 
  3028  080E                     	;# 
  3029  080F                     	;# 
  3030  0810                     	;# 
  3031  0811                     	;# 
  3032  0812                     	;# 
  3033  0813                     	;# 
  3034  0814                     	;# 
  3035  081A                     	;# 
  3036  081B                     	;# 
  3037  081C                     	;# 
  3038  081D                     	;# 
  3039  081E                     	;# 
  3040  081F                     	;# 
  3041  088C                     	;# 
  3042  088D                     	;# 
  3043  088E                     	;# 
  3044  088F                     	;# 
  3045  0890                     	;# 
  3046  0891                     	;# 
  3047  0892                     	;# 
  3048  0893                     	;# 
  3049  0895                     	;# 
  3050  0896                     	;# 
  3051  0897                     	;# 
  3052  0898                     	;# 
  3053  0899                     	;# 
  3054  089A                     	;# 
  3055  089B                     	;# 
  3056  090C                     	;# 
  3057  090E                     	;# 
  3058  090F                     	;# 
  3059  091F                     	;# 
  3060  091F                     	;# 
  3061  098F                     	;# 
  3062  098F                     	;# 
  3063  0990                     	;# 
  3064  0991                     	;# 
  3065  0992                     	;# 
  3066  0993                     	;# 
  3067  0994                     	;# 
  3068  0995                     	;# 
  3069  0996                     	;# 
  3070  0997                     	;# 
  3071  0E0F                     	;# 
  3072  0E10                     	;# 
  3073  0E11                     	;# 
  3074  0E12                     	;# 
  3075  0E13                     	;# 
  3076  0E14                     	;# 
  3077  0E15                     	;# 
  3078  0E16                     	;# 
  3079  0E17                     	;# 
  3080  0E18                     	;# 
  3081  0E19                     	;# 
  3082  0E1A                     	;# 
  3083  0E1B                     	;# 
  3084  0E1C                     	;# 
  3085  0E1D                     	;# 
  3086  0E1E                     	;# 
  3087  0E1F                     	;# 
  3088  0E20                     	;# 
  3089  0E21                     	;# 
  3090  0E22                     	;# 
  3091  0E23                     	;# 
  3092  0E24                     	;# 
  3093  0E25                     	;# 
  3094  0E26                     	;# 
  3095  0E27                     	;# 
  3096  0E28                     	;# 
  3097  0E29                     	;# 
  3098  0E2A                     	;# 
  3099  0E2B                     	;# 
  3100  0E2C                     	;# 
  3101  0E2D                     	;# 
  3102  0E2E                     	;# 
  3103  0E2F                     	;# 
  3104  0E30                     	;# 
  3105  0E31                     	;# 
  3106  0E32                     	;# 
  3107  0E33                     	;# 
  3108  0E34                     	;# 
  3109  0E35                     	;# 
  3110  0E36                     	;# 
  3111  0E37                     	;# 
  3112  0E8F                     	;# 
  3113  0E90                     	;# 
  3114  0E91                     	;# 
  3115  0E92                     	;# 
  3116  0E93                     	;# 
  3117  0E94                     	;# 
  3118  0E95                     	;# 
  3119  0E96                     	;# 
  3120  0E97                     	;# 
  3121  0E9C                     	;# 
  3122  0E9D                     	;# 
  3123  0E9E                     	;# 
  3124  0EA1                     	;# 
  3125  0EA2                     	;# 
  3126  0EA3                     	;# 
  3127  0EA4                     	;# 
  3128  0EA5                     	;# 
  3129  0EA9                     	;# 
  3130  0EAA                     	;# 
  3131  0EAB                     	;# 
  3132  0EAC                     	;# 
  3133  0EB1                     	;# 
  3134  0EB2                     	;# 
  3135  0EB3                     	;# 
  3136  0EB8                     	;# 
  3137  0EB9                     	;# 
  3138  0EBA                     	;# 
  3139  0EBB                     	;# 
  3140  0EBC                     	;# 
  3141  0EBD                     	;# 
  3142  0EBE                     	;# 
  3143  0EC3                     	;# 
  3144  0EC5                     	;# 
  3145  0EC6                     	;# 
  3146  0EC7                     	;# 
  3147  0EC8                     	;# 
  3148  0EC9                     	;# 
  3149  0ECA                     	;# 
  3150  0ECB                     	;# 
  3151  0ECC                     	;# 
  3152  0F10                     	;# 
  3153  0F11                     	;# 
  3154  0F12                     	;# 
  3155  0F13                     	;# 
  3156  0F14                     	;# 
  3157  0F15                     	;# 
  3158  0F16                     	;# 
  3159  0F17                     	;# 
  3160  0F18                     	;# 
  3161  0F19                     	;# 
  3162  0F1A                     	;# 
  3163  0F1B                     	;# 
  3164  0F1C                     	;# 
  3165  0F1D                     	;# 
  3166  0F1E                     	;# 
  3167  0F1F                     	;# 
  3168  0F20                     	;# 
  3169  0F21                     	;# 
  3170  0F22                     	;# 
  3171  0F23                     	;# 
  3172  0F24                     	;# 
  3173  0F25                     	;# 
  3174  0F26                     	;# 
  3175  0F27                     	;# 
  3176  0F38                     	;# 
  3177  0F39                     	;# 
  3178  0F3A                     	;# 
  3179  0F3B                     	;# 
  3180  0F3C                     	;# 
  3181  0F3D                     	;# 
  3182  0F3E                     	;# 
  3183  0F3F                     	;# 
  3184  0F40                     	;# 
  3185  0F41                     	;# 
  3186  0F43                     	;# 
  3187  0F44                     	;# 
  3188  0F45                     	;# 
  3189  0F46                     	;# 
  3190  0F47                     	;# 
  3191  0F48                     	;# 
  3192  0F49                     	;# 
  3193  0F4A                     	;# 
  3194  0F4B                     	;# 
  3195  0F4C                     	;# 
  3196  0F4E                     	;# 
  3197  0F4F                     	;# 
  3198  0F50                     	;# 
  3199  0F51                     	;# 
  3200  0F52                     	;# 
  3201  0F53                     	;# 
  3202  0F54                     	;# 
  3203  0F55                     	;# 
  3204  0F56                     	;# 
  3205  0F57                     	;# 
  3206  0F65                     	;# 
  3207  0F68                     	;# 
  3208  0F69                     	;# 
  3209  0F6A                     	;# 
  3210  0F6B                     	;# 
  3211  0FE4                     	;# 
  3212  0FE5                     	;# 
  3213  0FE6                     	;# 
  3214  0FE7                     	;# 
  3215  0FE8                     	;# 
  3216  0FE9                     	;# 
  3217  0FEA                     	;# 
  3218  0FEB                     	;# 
  3219  0FED                     	;# 
  3220  0FEE                     	;# 
  3221  0FEF                     	;# 
  3222  0000                     	;# 
  3223  0001                     	;# 
  3224  0002                     	;# 
  3225  0003                     	;# 
  3226  0004                     	;# 
  3227  0005                     	;# 
  3228  0006                     	;# 
  3229  0007                     	;# 
  3230  0008                     	;# 
  3231  0009                     	;# 
  3232  000A                     	;# 
  3233  000B                     	;# 
  3234  000C                     	;# 
  3235  000D                     	;# 
  3236  000E                     	;# 
  3237  0010                     	;# 
  3238  0011                     	;# 
  3239  0012                     	;# 
  3240  0013                     	;# 
  3241  0016                     	;# 
  3242  0017                     	;# 
  3243  0018                     	;# 
  3244  001C                     	;# 
  3245  001C                     	;# 
  3246  001D                     	;# 
  3247  001D                     	;# 
  3248  001E                     	;# 
  3249  001F                     	;# 
  3250  008C                     	;# 
  3251  008C                     	;# 
  3252  008D                     	;# 
  3253  008E                     	;# 
  3254  008E                     	;# 
  3255  008F                     	;# 
  3256  0090                     	;# 
  3257  0090                     	;# 
  3258  0091                     	;# 
  3259  0093                     	;# 
  3260  0094                     	;# 
  3261  0095                     	;# 
  3262  0096                     	;# 
  3263  0097                     	;# 
  3264  0098                     	;# 
  3265  0099                     	;# 
  3266  009A                     	;# 
  3267  009B                     	;# 
  3268  009C                     	;# 
  3269  009D                     	;# 
  3270  009E                     	;# 
  3271  010C                     	;# 
  3272  010D                     	;# 
  3273  010E                     	;# 
  3274  010E                     	;# 
  3275  010F                     	;# 
  3276  0110                     	;# 
  3277  0110                     	;# 
  3278  0111                     	;# 
  3279  0112                     	;# 
  3280  0112                     	;# 
  3281  0113                     	;# 
  3282  0114                     	;# 
  3283  0114                     	;# 
  3284  0115                     	;# 
  3285  0116                     	;# 
  3286  0116                     	;# 
  3287  0117                     	;# 
  3288  0119                     	;# 
  3289  0119                     	;# 
  3290  0119                     	;# 
  3291  011A                     	;# 
  3292  011A                     	;# 
  3293  011A                     	;# 
  3294  011B                     	;# 
  3295  011B                     	;# 
  3296  011B                     	;# 
  3297  011B                     	;# 
  3298  011B                     	;# 
  3299  011C                     	;# 
  3300  011C                     	;# 
  3301  011C                     	;# 
  3302  011D                     	;# 
  3303  011D                     	;# 
  3304  011D                     	;# 
  3305  011E                     	;# 
  3306  011E                     	;# 
  3307  011E                     	;# 
  3308  011F                     	;# 
  3309  011F                     	;# 
  3310  011F                     	;# 
  3311  011F                     	;# 
  3312  011F                     	;# 
  3313  018C                     	;# 
  3314  018D                     	;# 
  3315  018E                     	;# 
  3316  018F                     	;# 
  3317  0190                     	;# 
  3318  0191                     	;# 
  3319  0192                     	;# 
  3320  0196                     	;# 
  3321  0197                     	;# 
  3322  0198                     	;# 
  3323  0199                     	;# 
  3324  019A                     	;# 
  3325  019B                     	;# 
  3326  019C                     	;# 
  3327  020C                     	;# 
  3328  020C                     	;# 
  3329  020D                     	;# 
  3330  020E                     	;# 
  3331  020F                     	;# 
  3332  020F                     	;# 
  3333  0210                     	;# 
  3334  0210                     	;# 
  3335  0211                     	;# 
  3336  0211                     	;# 
  3337  0212                     	;# 
  3338  0212                     	;# 
  3339  0213                     	;# 
  3340  0214                     	;# 
  3341  0215                     	;# 
  3342  0215                     	;# 
  3343  0216                     	;# 
  3344  0216                     	;# 
  3345  0217                     	;# 
  3346  0217                     	;# 
  3347  0218                     	;# 
  3348  0218                     	;# 
  3349  0219                     	;# 
  3350  021A                     	;# 
  3351  021B                     	;# 
  3352  021B                     	;# 
  3353  021C                     	;# 
  3354  021C                     	;# 
  3355  021D                     	;# 
  3356  021D                     	;# 
  3357  021E                     	;# 
  3358  021F                     	;# 
  3359  028C                     	;# 
  3360  028C                     	;# 
  3361  028D                     	;# 
  3362  028D                     	;# 
  3363  028E                     	;# 
  3364  028F                     	;# 
  3365  0290                     	;# 
  3366  0290                     	;# 
  3367  0291                     	;# 
  3368  0292                     	;# 
  3369  0292                     	;# 
  3370  0293                     	;# 
  3371  0293                     	;# 
  3372  0294                     	;# 
  3373  0295                     	;# 
  3374  0296                     	;# 
  3375  0296                     	;# 
  3376  0297                     	;# 
  3377  0298                     	;# 
  3378  0298                     	;# 
  3379  0299                     	;# 
  3380  0299                     	;# 
  3381  029A                     	;# 
  3382  029B                     	;# 
  3383  029C                     	;# 
  3384  029C                     	;# 
  3385  029D                     	;# 
  3386  030C                     	;# 
  3387  030C                     	;# 
  3388  030D                     	;# 
  3389  030E                     	;# 
  3390  030F                     	;# 
  3391  0310                     	;# 
  3392  0310                     	;# 
  3393  0311                     	;# 
  3394  0312                     	;# 
  3395  0313                     	;# 
  3396  0314                     	;# 
  3397  0314                     	;# 
  3398  0315                     	;# 
  3399  0316                     	;# 
  3400  0317                     	;# 
  3401  0318                     	;# 
  3402  0318                     	;# 
  3403  0319                     	;# 
  3404  031A                     	;# 
  3405  031B                     	;# 
  3406  031C                     	;# 
  3407  031C                     	;# 
  3408  031D                     	;# 
  3409  031E                     	;# 
  3410  031F                     	;# 
  3411  038C                     	;# 
  3412  038D                     	;# 
  3413  038E                     	;# 
  3414  0390                     	;# 
  3415  0391                     	;# 
  3416  0392                     	;# 
  3417  040C                     	;# 
  3418  040D                     	;# 
  3419  040E                     	;# 
  3420  040F                     	;# 
  3421  0410                     	;# 
  3422  0411                     	;# 
  3423  0416                     	;# 
  3424  0416                     	;# 
  3425  0417                     	;# 
  3426  0418                     	;# 
  3427  0418                     	;# 
  3428  0419                     	;# 
  3429  041A                     	;# 
  3430  041A                     	;# 
  3431  041B                     	;# 
  3432  041C                     	;# 
  3433  041C                     	;# 
  3434  041D                     	;# 
  3435  041E                     	;# 
  3436  041F                     	;# 
  3437  048C                     	;# 
  3438  048C                     	;# 
  3439  048D                     	;# 
  3440  048E                     	;# 
  3441  048F                     	;# 
  3442  048F                     	;# 
  3443  0490                     	;# 
  3444  0491                     	;# 
  3445  0492                     	;# 
  3446  0492                     	;# 
  3447  0493                     	;# 
  3448  0494                     	;# 
  3449  0495                     	;# 
  3450  0495                     	;# 
  3451  0496                     	;# 
  3452  0497                     	;# 
  3453  0498                     	;# 
  3454  0499                     	;# 
  3455  049A                     	;# 
  3456  049B                     	;# 
  3457  049C                     	;# 
  3458  049D                     	;# 
  3459  050C                     	;# 
  3460  050C                     	;# 
  3461  050D                     	;# 
  3462  050E                     	;# 
  3463  050F                     	;# 
  3464  050F                     	;# 
  3465  0510                     	;# 
  3466  0511                     	;# 
  3467  0512                     	;# 
  3468  0512                     	;# 
  3469  0513                     	;# 
  3470  0514                     	;# 
  3471  0515                     	;# 
  3472  0515                     	;# 
  3473  0516                     	;# 
  3474  0517                     	;# 
  3475  0518                     	;# 
  3476  0519                     	;# 
  3477  051A                     	;# 
  3478  051B                     	;# 
  3479  051C                     	;# 
  3480  051D                     	;# 
  3481  058C                     	;# 
  3482  058C                     	;# 
  3483  058D                     	;# 
  3484  058E                     	;# 
  3485  058F                     	;# 
  3486  058F                     	;# 
  3487  0590                     	;# 
  3488  0591                     	;# 
  3489  0592                     	;# 
  3490  0593                     	;# 
  3491  060C                     	;# 
  3492  060D                     	;# 
  3493  060E                     	;# 
  3494  060F                     	;# 
  3495  0610                     	;# 
  3496  0611                     	;# 
  3497  0612                     	;# 
  3498  0613                     	;# 
  3499  0614                     	;# 
  3500  0616                     	;# 
  3501  0617                     	;# 
  3502  0618                     	;# 
  3503  0619                     	;# 
  3504  061A                     	;# 
  3505  061B                     	;# 
  3506  061C                     	;# 
  3507  061D                     	;# 
  3508  061E                     	;# 
  3509  068C                     	;# 
  3510  068D                     	;# 
  3511  068E                     	;# 
  3512  068F                     	;# 
  3513  0690                     	;# 
  3514  0691                     	;# 
  3515  0692                     	;# 
  3516  0693                     	;# 
  3517  0694                     	;# 
  3518  070C                     	;# 
  3519  070D                     	;# 
  3520  070E                     	;# 
  3521  070F                     	;# 
  3522  0710                     	;# 
  3523  0711                     	;# 
  3524  0712                     	;# 
  3525  0713                     	;# 
  3526  0714                     	;# 
  3527  0716                     	;# 
  3528  0717                     	;# 
  3529  0718                     	;# 
  3530  0719                     	;# 
  3531  071A                     	;# 
  3532  071B                     	;# 
  3533  071C                     	;# 
  3534  071D                     	;# 
  3535  071E                     	;# 
  3536  0796                     	;# 
  3537  0797                     	;# 
  3538  0798                     	;# 
  3539  0799                     	;# 
  3540  079A                     	;# 
  3541  079B                     	;# 
  3542  080C                     	;# 
  3543  080D                     	;# 
  3544  080E                     	;# 
  3545  080F                     	;# 
  3546  0810                     	;# 
  3547  0811                     	;# 
  3548  0812                     	;# 
  3549  0813                     	;# 
  3550  0814                     	;# 
  3551  081A                     	;# 
  3552  081B                     	;# 
  3553  081C                     	;# 
  3554  081D                     	;# 
  3555  081E                     	;# 
  3556  081F                     	;# 
  3557  088C                     	;# 
  3558  088D                     	;# 
  3559  088E                     	;# 
  3560  088F                     	;# 
  3561  0890                     	;# 
  3562  0891                     	;# 
  3563  0892                     	;# 
  3564  0893                     	;# 
  3565  0895                     	;# 
  3566  0896                     	;# 
  3567  0897                     	;# 
  3568  0898                     	;# 
  3569  0899                     	;# 
  3570  089A                     	;# 
  3571  089B                     	;# 
  3572  090C                     	;# 
  3573  090E                     	;# 
  3574  090F                     	;# 
  3575  091F                     	;# 
  3576  091F                     	;# 
  3577  098F                     	;# 
  3578  098F                     	;# 
  3579  0990                     	;# 
  3580  0991                     	;# 
  3581  0992                     	;# 
  3582  0993                     	;# 
  3583  0994                     	;# 
  3584  0995                     	;# 
  3585  0996                     	;# 
  3586  0997                     	;# 
  3587  0E0F                     	;# 
  3588  0E10                     	;# 
  3589  0E11                     	;# 
  3590  0E12                     	;# 
  3591  0E13                     	;# 
  3592  0E14                     	;# 
  3593  0E15                     	;# 
  3594  0E16                     	;# 
  3595  0E17                     	;# 
  3596  0E18                     	;# 
  3597  0E19                     	;# 
  3598  0E1A                     	;# 
  3599  0E1B                     	;# 
  3600  0E1C                     	;# 
  3601  0E1D                     	;# 
  3602  0E1E                     	;# 
  3603  0E1F                     	;# 
  3604  0E20                     	;# 
  3605  0E21                     	;# 
  3606  0E22                     	;# 
  3607  0E23                     	;# 
  3608  0E24                     	;# 
  3609  0E25                     	;# 
  3610  0E26                     	;# 
  3611  0E27                     	;# 
  3612  0E28                     	;# 
  3613  0E29                     	;# 
  3614  0E2A                     	;# 
  3615  0E2B                     	;# 
  3616  0E2C                     	;# 
  3617  0E2D                     	;# 
  3618  0E2E                     	;# 
  3619  0E2F                     	;# 
  3620  0E30                     	;# 
  3621  0E31                     	;# 
  3622  0E32                     	;# 
  3623  0E33                     	;# 
  3624  0E34                     	;# 
  3625  0E35                     	;# 
  3626  0E36                     	;# 
  3627  0E37                     	;# 
  3628  0E8F                     	;# 
  3629  0E90                     	;# 
  3630  0E91                     	;# 
  3631  0E92                     	;# 
  3632  0E93                     	;# 
  3633  0E94                     	;# 
  3634  0E95                     	;# 
  3635  0E96                     	;# 
  3636  0E97                     	;# 
  3637  0E9C                     	;# 
  3638  0E9D                     	;# 
  3639  0E9E                     	;# 
  3640  0EA1                     	;# 
  3641  0EA2                     	;# 
  3642  0EA3                     	;# 
  3643  0EA4                     	;# 
  3644  0EA5                     	;# 
  3645  0EA9                     	;# 
  3646  0EAA                     	;# 
  3647  0EAB                     	;# 
  3648  0EAC                     	;# 
  3649  0EB1                     	;# 
  3650  0EB2                     	;# 
  3651  0EB3                     	;# 
  3652  0EB8                     	;# 
  3653  0EB9                     	;# 
  3654  0EBA                     	;# 
  3655  0EBB                     	;# 
  3656  0EBC                     	;# 
  3657  0EBD                     	;# 
  3658  0EBE                     	;# 
  3659  0EC3                     	;# 
  3660  0EC5                     	;# 
  3661  0EC6                     	;# 
  3662  0EC7                     	;# 
  3663  0EC8                     	;# 
  3664  0EC9                     	;# 
  3665  0ECA                     	;# 
  3666  0ECB                     	;# 
  3667  0ECC                     	;# 
  3668  0F10                     	;# 
  3669  0F11                     	;# 
  3670  0F12                     	;# 
  3671  0F13                     	;# 
  3672  0F14                     	;# 
  3673  0F15                     	;# 
  3674  0F16                     	;# 
  3675  0F17                     	;# 
  3676  0F18                     	;# 
  3677  0F19                     	;# 
  3678  0F1A                     	;# 
  3679  0F1B                     	;# 
  3680  0F1C                     	;# 
  3681  0F1D                     	;# 
  3682  0F1E                     	;# 
  3683  0F1F                     	;# 
  3684  0F20                     	;# 
  3685  0F21                     	;# 
  3686  0F22                     	;# 
  3687  0F23                     	;# 
  3688  0F24                     	;# 
  3689  0F25                     	;# 
  3690  0F26                     	;# 
  3691  0F27                     	;# 
  3692  0F38                     	;# 
  3693  0F39                     	;# 
  3694  0F3A                     	;# 
  3695  0F3B                     	;# 
  3696  0F3C                     	;# 
  3697  0F3D                     	;# 
  3698  0F3E                     	;# 
  3699  0F3F                     	;# 
  3700  0F40                     	;# 
  3701  0F41                     	;# 
  3702  0F43                     	;# 
  3703  0F44                     	;# 
  3704  0F45                     	;# 
  3705  0F46                     	;# 
  3706  0F47                     	;# 
  3707  0F48                     	;# 
  3708  0F49                     	;# 
  3709  0F4A                     	;# 
  3710  0F4B                     	;# 
  3711  0F4C                     	;# 
  3712  0F4E                     	;# 
  3713  0F4F                     	;# 
  3714  0F50                     	;# 
  3715  0F51                     	;# 
  3716  0F52                     	;# 
  3717  0F53                     	;# 
  3718  0F54                     	;# 
  3719  0F55                     	;# 
  3720  0F56                     	;# 
  3721  0F57                     	;# 
  3722  0F65                     	;# 
  3723  0F68                     	;# 
  3724  0F69                     	;# 
  3725  0F6A                     	;# 
  3726  0F6B                     	;# 
  3727  0FE4                     	;# 
  3728  0FE5                     	;# 
  3729  0FE6                     	;# 
  3730  0FE7                     	;# 
  3731  0FE8                     	;# 
  3732  0FE9                     	;# 
  3733  0FEA                     	;# 
  3734  0FEB                     	;# 
  3735  0FED                     	;# 
  3736  0FEE                     	;# 
  3737  0FEF                     	;# 
  3738                           
  3739                           	psect	stringtext1
  3740  1942                     __pstringtext1:	
  3741  1942                     _dpowers:	
  3742  1942  3401               	retlw	1
  3743  1943  3400               	retlw	0
  3744  1944  3400               	retlw	0
  3745  1945  3400               	retlw	0
  3746  1946  340A               	retlw	10
  3747  1947  3400               	retlw	0
  3748  1948  3400               	retlw	0
  3749  1949  3400               	retlw	0
  3750  194A  3464               	retlw	100
  3751  194B  3400               	retlw	0
  3752  194C  3400               	retlw	0
  3753  194D  3400               	retlw	0
  3754  194E  34E8               	retlw	232
  3755  194F  3403               	retlw	3
  3756  1950  3400               	retlw	0
  3757  1951  3400               	retlw	0
  3758  1952  3410               	retlw	16
  3759  1953  3427               	retlw	39
  3760  1954  3400               	retlw	0
  3761  1955  3400               	retlw	0
  3762  1956  34A0               	retlw	160
  3763  1957  3486               	retlw	134
  3764  1958  3401               	retlw	1
  3765  1959  3400               	retlw	0
  3766  195A  3440               	retlw	64
  3767  195B  3442               	retlw	66
  3768  195C  340F               	retlw	15
  3769  195D  3400               	retlw	0
  3770  195E  3480               	retlw	128
  3771  195F  3496               	retlw	150
  3772  1960  3498               	retlw	152
  3773  1961  3400               	retlw	0
  3774  1962  3400               	retlw	0
  3775  1963  34E1               	retlw	225
  3776  1964  34F5               	retlw	245
  3777  1965  3405               	retlw	5
  3778  1966  3400               	retlw	0
  3779  1967  34CA               	retlw	202
  3780  1968  349A               	retlw	154
  3781  1969  343B               	retlw	59
  3782  196A                     __end_of_dpowers:	
  3783                           
  3784                           	psect	stringtext2
  3785  196A                     __pstringtext2:	
  3786  196A                     __powers_:	
  3787  196A  3400               	retlw	0
  3788  196B  3480               	retlw	128
  3789  196C  343F               	retlw	63
  3790  196D  3400               	retlw	0
  3791  196E  3420               	retlw	32
  3792  196F  3441               	retlw	65
  3793  1970  3400               	retlw	0
  3794  1971  34C8               	retlw	200
  3795  1972  3442               	retlw	66
  3796  1973  3400               	retlw	0
  3797  1974  347A               	retlw	122
  3798  1975  3444               	retlw	68
  3799  1976  3440               	retlw	64
  3800  1977  341C               	retlw	28
  3801  1978  3446               	retlw	70
  3802  1979  3450               	retlw	80
  3803  197A  34C3               	retlw	195
  3804  197B  3447               	retlw	71
  3805  197C  3424               	retlw	36
  3806  197D  3474               	retlw	116
  3807  197E  3449               	retlw	73
  3808  197F  3497               	retlw	151
  3809  1980  3418               	retlw	24
  3810  1981  344B               	retlw	75
  3811  1982  34BC               	retlw	188
  3812  1983  34BE               	retlw	190
  3813  1984  344C               	retlw	76
  3814  1985  346B               	retlw	107
  3815  1986  346E               	retlw	110
  3816  1987  344E               	retlw	78
  3817  1988  3403               	retlw	3
  3818  1989  3415               	retlw	21
  3819  198A  3450               	retlw	80
  3820  198B  3479               	retlw	121
  3821  198C  34AD               	retlw	173
  3822  198D  3460               	retlw	96
  3823  198E  34F3               	retlw	243
  3824  198F  3449               	retlw	73
  3825  1990  3471               	retlw	113
  3826  1991                     __end_of__powers_:	
  3827                           
  3828                           	psect	stringtext3
  3829  1991                     __pstringtext3:	
  3830  1991                     __npowers_:	
  3831  1991  3400               	retlw	0
  3832  1992  3480               	retlw	128
  3833  1993  343F               	retlw	63
  3834  1994  34CD               	retlw	205
  3835  1995  34CC               	retlw	204
  3836  1996  343D               	retlw	61
  3837  1997  34D7               	retlw	215
  3838  1998  3423               	retlw	35
  3839  1999  343C               	retlw	60
  3840  199A  3412               	retlw	18
  3841  199B  3483               	retlw	131
  3842  199C  343A               	retlw	58
  3843  199D  34B7               	retlw	183
  3844  199E  34D1               	retlw	209
  3845  199F  3438               	retlw	56
  3846  19A0  34C6               	retlw	198
  3847  19A1  3427               	retlw	39
  3848  19A2  3437               	retlw	55
  3849  19A3  3438               	retlw	56
  3850  19A4  3486               	retlw	134
  3851  19A5  3435               	retlw	53
  3852  19A6  34C0               	retlw	192
  3853  19A7  34D6               	retlw	214
  3854  19A8  3433               	retlw	51
  3855  19A9  34CC               	retlw	204
  3856  19AA  342B               	retlw	43
  3857  19AB  3432               	retlw	50
  3858  19AC  3470               	retlw	112
  3859  19AD  3489               	retlw	137
  3860  19AE  3430               	retlw	48
  3861  19AF  34E7               	retlw	231
  3862  19B0  34DB               	retlw	219
  3863  19B1  342E               	retlw	46
  3864  19B2  34E5               	retlw	229
  3865  19B3  343C               	retlw	60
  3866  19B4  341E               	retlw	30
  3867  19B5  3442               	retlw	66
  3868  19B6  34A2               	retlw	162
  3869  19B7  340D               	retlw	13
  3870  19B8                     __end_of__npowers_:	
  3871                           
  3872                           	psect	stringtext4
  3873  1800                     __pstringtext4:	
  3874  1800                     _hexpowers:	
  3875  1800  3401               	retlw	1
  3876  1801  3400               	retlw	0
  3877  1802  3400               	retlw	0
  3878  1803  3400               	retlw	0
  3879  1804  3410               	retlw	16
  3880  1805  3400               	retlw	0
  3881  1806  3400               	retlw	0
  3882  1807  3400               	retlw	0
  3883  1808  3400               	retlw	0
  3884  1809  3401               	retlw	1
  3885  180A  3400               	retlw	0
  3886  180B  3400               	retlw	0
  3887  180C  3400               	retlw	0
  3888  180D  3410               	retlw	16
  3889  180E  3400               	retlw	0
  3890  180F  3400               	retlw	0
  3891  1810  3400               	retlw	0
  3892  1811  3400               	retlw	0
  3893  1812  3401               	retlw	1
  3894  1813  3400               	retlw	0
  3895  1814  3400               	retlw	0
  3896  1815  3400               	retlw	0
  3897  1816  3410               	retlw	16
  3898  1817  3400               	retlw	0
  3899  1818  3400               	retlw	0
  3900  1819  3400               	retlw	0
  3901  181A  3400               	retlw	0
  3902  181B  3401               	retlw	1
  3903  181C  3400               	retlw	0
  3904  181D  3400               	retlw	0
  3905  181E  3400               	retlw	0
  3906  181F  3410               	retlw	16
  3907  1820                     __end_of_hexpowers:	
  3908  000C                     _PORTAbits	set	12
  3909  0016                     _LATAbits	set	22
  3910  0013                     _TRISC	set	19
  3911  0012                     _TRISB	set	18
  3912  0011                     _TRISA	set	17
  3913  0018                     _LATC	set	24
  3914  0017                     _LATB	set	23
  3915  0016                     _LATA	set	22
  3916  000B                     _INTCONbits	set	11
  3917  005F                     _GIE	set	95
  3918  011A                     _TX1REG	set	282
  3919  0119                     _RC1REG	set	281
  3920  011D                     _RC1STAbits	set	285
  3921  011C                     _SP1BRGH	set	284
  3922  011B                     _SP1BRGL	set	283
  3923  011E                     _TX1STA	set	286
  3924  011D                     _RC1STA	set	285
  3925  011F                     _BAUD1CON	set	287
  3926  0196                     _SSP2BUF	set	406
  3927  019B                     _SSP2CON2bits	set	411
  3928  019A                     _SSP2CON1bits	set	410
  3929  0197                     _SSP2ADD	set	407
  3930  019C                     _SSP2CON3	set	412
  3931  019A                     _SSP2CON1	set	410
  3932  0199                     _SSP2STAT	set	409
  3933  0719                     _PIE3bits	set	1817
  3934  070F                     _PIR3bits	set	1807
  3935  0892                     _OSCTUNE	set	2194
  3936  0893                     _OSCFRQ	set	2195
  3937  0891                     _OSCEN	set	2193
  3938  088F                     _OSCCON3	set	2191
  3939  088D                     _OSCCON1	set	2189
  3940  0EC8                     _SSP2CLKPPSbits	set	3784
  3941  0EC9                     _SSP2DATPPSbits	set	3785
  3942  0E8F                     _PPSLOCKbits	set	3727
  3943  0E8F                     _PPSLOCK	set	3727
  3944  0F24                     _RC4PPS	set	3876
  3945  0F23                     _RC3PPS	set	3875
  3946  0F20                     _RC0PPS	set	3872
  3947  0F50                     _ODCONC	set	3920
  3948  0F45                     _ODCONB	set	3909
  3949  0F3A                     _ODCONA	set	3898
  3950  0F4F                     _WPUC	set	3919
  3951  0F39                     _WPUA	set	3897
  3952  0F44                     _WPUB	set	3908
  3953  0F65                     _WPUE	set	3941
  3954  0F38                     _ANSELA	set	3896
  3955  0F43                     _ANSELB	set	3907
  3956  0F4E                     _ANSELC	set	3918
  3957  1820                     STR_3:	
  3958  1820  344D               	retlw	77	;'M'
  3959  1821  3450               	retlw	80	;'P'
  3960  1822  344C               	retlw	76	;'L'
  3961  1823  3441               	retlw	65	;'A'
  3962  1824  3442               	retlw	66	;'B'
  3963  1825  3458               	retlw	88	;'X'
  3964  1826  3470               	retlw	112	;'p'
  3965  1827  3472               	retlw	114	;'r'
  3966  1828  3465               	retlw	101	;'e'
  3967  1829  3473               	retlw	115	;'s'
  3968  182A  3473               	retlw	115	;'s'
  3969  182B  3420               	retlw	32	;' '
  3970  182C  344C               	retlw	76	;'L'
  3971  182D  3445               	retlw	69	;'E'
  3972  182E  3444               	retlw	68	;'D'
  3973  182F  3432               	retlw	50	;'2'
  3974  1830  343D               	retlw	61	;'='
  3975  1831  3472               	retlw	114	;'r'
  3976  1832  3465               	retlw	101	;'e'
  3977  1833  3461               	retlw	97	;'a'
  3978  1834  3464               	retlw	100	;'d'
  3979  1835  3420               	retlw	32	;' '
  3980  1836  3469               	retlw	105	;'i'
  3981  1837  346E               	retlw	110	;'n'
  3982  1838  3464               	retlw	100	;'d'
  3983  1839  3469               	retlw	105	;'i'
  3984  183A  3463               	retlw	99	;'c'
  3985  183B  3461               	retlw	97	;'a'
  3986  183C  3474               	retlw	116	;'t'
  3987  183D  346F               	retlw	111	;'o'
  3988  183E  3472               	retlw	114	;'r'
  3989  183F  342C               	retlw	44	;','
  3990  1840  3420               	retlw	32	;' '
  3991  1841  344C               	retlw	76	;'L'
  3992  1842  3445               	retlw	69	;'E'
  3993  1843  3444               	retlw	68	;'D'
  3994  1844  3433               	retlw	51	;'3'
  3995  1845  343D               	retlw	61	;'='
  3996  1846  3445               	retlw	69	;'E'
  3997  1847  344D               	retlw	77	;'M'
  3998  1848  3443               	retlw	67	;'C'
  3999  1849  3431               	retlw	49	;'1'
  4000  184A  3430               	retlw	48	;'0'
  4001  184B  3430               	retlw	48	;'0'
  4002  184C  3431               	retlw	49	;'1'
  4003  184D  3420               	retlw	32	;' '
  4004  184E  3441               	retlw	65	;'A'
  4005  184F  344C               	retlw	76	;'L'
  4006  1850  3441               	retlw	65	;'A'
  4007  1851  3452               	retlw	82	;'R'
  4008  1852  344D               	retlw	77	;'M'
  4009  1853  3431               	retlw	49	;'1'
  4010  1854  342C               	retlw	44	;','
  4011  1855  3420               	retlw	32	;' '
  4012  1856  344C               	retlw	76	;'L'
  4013  1857  3445               	retlw	69	;'E'
  4014  1858  3444               	retlw	68	;'D'
  4015  1859  3434               	retlw	52	;'4'
  4016  185A  343D               	retlw	61	;'='
  4017  185B  3445               	retlw	69	;'E'
  4018  185C  344D               	retlw	77	;'M'
  4019  185D  3443               	retlw	67	;'C'
  4020  185E  3431               	retlw	49	;'1'
  4021  185F  3430               	retlw	48	;'0'
  4022  1860  3430               	retlw	48	;'0'
  4023  1861  3431               	retlw	49	;'1'
  4024  1862  3420               	retlw	32	;' '
  4025  1863  3441               	retlw	65	;'A'
  4026  1864  344C               	retlw	76	;'L'
  4027  1865  3441               	retlw	65	;'A'
  4028  1866  3452               	retlw	82	;'R'
  4029  1867  344D               	retlw	77	;'M'
  4030  1868  3432               	retlw	50	;'2'
  4031  1869  340A               	retlw	10
  4032  186A  3400               	retlw	0
  4033                           
  4034                           	psect	stringtext5
  4035  186B                     __pstringtext5:	
  4036  186B                     STR_10:	
  4037  186B  3443               	retlw	67	;'C'
  4038  186C  346F               	retlw	111	;'o'
  4039  186D  346E               	retlw	110	;'n'
  4040  186E  3466               	retlw	102	;'f'
  4041  186F  3469               	retlw	105	;'i'
  4042  1870  3467               	retlw	103	;'g'
  4043  1871  3475               	retlw	117	;'u'
  4044  1872  3472               	retlw	114	;'r'
  4045  1873  3461               	retlw	97	;'a'
  4046  1874  3474               	retlw	116	;'t'
  4047  1875  3469               	retlw	105	;'i'
  4048  1876  346F               	retlw	111	;'o'
  4049  1877  346E               	retlw	110	;'n'
  4050  1878  3420               	retlw	32	;' '
  4051  1879  3452               	retlw	82	;'R'
  4052  187A  3465               	retlw	101	;'e'
  4053  187B  3467               	retlw	103	;'g'
  4054  187C  343A               	retlw	58	;':'
  4055  187D  3420               	retlw	32	;' '
  4056  187E  3409               	retlw	9
  4057  187F  3430               	retlw	48	;'0'
  4058  1880  3478               	retlw	120	;'x'
  4059  1881  3425               	retlw	37	;'%'
  4060  1882  3458               	retlw	88	;'X'
  4061  1883  3420               	retlw	32	;' '
  4062  1884  3428               	retlw	40	;'('
  4063  1885  344D               	retlw	77	;'M'
  4064  1886  3441               	retlw	65	;'A'
  4065  1887  3453               	retlw	83	;'S'
  4066  1888  344B               	retlw	75	;'K'
  4067  1889  3431               	retlw	49	;'1'
  4068  188A  343D               	retlw	61	;'='
  4069  188B  3425               	retlw	37	;'%'
  4070  188C  3464               	retlw	100	;'d'
  4071  188D  3420               	retlw	32	;' '
  4072  188E  3452               	retlw	82	;'R'
  4073  188F  3455               	retlw	85	;'U'
  4074  1890  344E               	retlw	78	;'N'
  4075  1891  342F               	retlw	47	;'/'
  4076  1892  3453               	retlw	83	;'S'
  4077  1893  3454               	retlw	84	;'T'
  4078  1894  344F               	retlw	79	;'O'
  4079  1895  3450               	retlw	80	;'P'
  4080  1896  343D               	retlw	61	;'='
  4081  1897  3425               	retlw	37	;'%'
  4082  1898  3464               	retlw	100	;'d'
  4083  1899  3420               	retlw	32	;' '
  4084  189A  3441               	retlw	65	;'A'
  4085  189B  344C               	retlw	76	;'L'
  4086  189C  3445               	retlw	69	;'E'
  4087  189D  3452               	retlw	82	;'R'
  4088  189E  3454               	retlw	84	;'T'
  4089  189F  342F               	retlw	47	;'/'
  4090  18A0  3454               	retlw	84	;'T'
  4091  18A1  3448               	retlw	72	;'H'
  4092  18A2  3445               	retlw	69	;'E'
  4093  18A3  3452               	retlw	82	;'R'
  4094  18A4  344D               	retlw	77	;'M'
  4095  18A5  3432               	retlw	50	;'2'
  4096  18A6  343D               	retlw	61	;'='
  4097  18A7  3425               	retlw	37	;'%'
  4098  18A8  3464               	retlw	100	;'d'
  4099  18A9  3429               	retlw	41	;')'
  4100  18AA  340A               	retlw	10
  4101  18AB  3400               	retlw	0
  4102                           
  4103                           	psect	stringtext6
  4104  18AC                     __pstringtext6:	
  4105  18AC                     STR_9:	
  4106  18AC  3453               	retlw	83	;'S'
  4107  18AD  3474               	retlw	116	;'t'
  4108  18AE  3461               	retlw	97	;'a'
  4109  18AF  3474               	retlw	116	;'t'
  4110  18B0  3475               	retlw	117	;'u'
  4111  18B1  3473               	retlw	115	;'s'
  4112  18B2  3420               	retlw	32	;' '
  4113  18B3  3452               	retlw	82	;'R'
  4114  18B4  3465               	retlw	101	;'e'
  4115  18B5  3467               	retlw	103	;'g'
  4116  18B6  343A               	retlw	58	;':'
  4117  18B7  3420               	retlw	32	;' '
  4118  18B8  3409               	retlw	9
  4119  18B9  3409               	retlw	9
  4120  18BA  3430               	retlw	48	;'0'
  4121  18BB  3478               	retlw	120	;'x'
  4122  18BC  3425               	retlw	37	;'%'
  4123  18BD  3458               	retlw	88	;'X'
  4124  18BE  3420               	retlw	32	;' '
  4125  18BF  3428               	retlw	40	;'('
  4126  18C0  3442               	retlw	66	;'B'
  4127  18C1  3455               	retlw	85	;'U'
  4128  18C2  3453               	retlw	83	;'S'
  4129  18C3  3459               	retlw	89	;'Y'
  4130  18C4  343D               	retlw	61	;'='
  4131  18C5  3425               	retlw	37	;'%'
  4132  18C6  3464               	retlw	100	;'d'
  4133  18C7  3420               	retlw	32	;' '
  4134  18C8  3454               	retlw	84	;'T'
  4135  18C9  3448               	retlw	72	;'H'
  4136  18CA  3449               	retlw	73	;'I'
  4137  18CB  3447               	retlw	71	;'G'
  4138  18CC  3448               	retlw	72	;'H'
  4139  18CD  343D               	retlw	61	;'='
  4140  18CE  3425               	retlw	37	;'%'
  4141  18CF  3464               	retlw	100	;'d'
  4142  18D0  3420               	retlw	32	;' '
  4143  18D1  3454               	retlw	84	;'T'
  4144  18D2  344C               	retlw	76	;'L'
  4145  18D3  344F               	retlw	79	;'O'
  4146  18D4  3457               	retlw	87	;'W'
  4147  18D5  343D               	retlw	61	;'='
  4148  18D6  3425               	retlw	37	;'%'
  4149  18D7  3464               	retlw	100	;'d'
  4150  18D8  3420               	retlw	32	;' '
  4151  18D9  3454               	retlw	84	;'T'
  4152  18DA  3448               	retlw	72	;'H'
  4153  18DB  3452               	retlw	82	;'R'
  4154  18DC  344D               	retlw	77	;'M'
  4155  18DD  343D               	retlw	61	;'='
  4156  18DE  3425               	retlw	37	;'%'
  4157  18DF  3464               	retlw	100	;'d'
  4158  18E0  3429               	retlw	41	;')'
  4159  18E1  340A               	retlw	10
  4160  18E2  3400               	retlw	0
  4161                           
  4162                           	psect	stringtext7
  4163  18E3                     __pstringtext7:	
  4164  18E3                     STR_11:	
  4165  18E3  3443               	retlw	67	;'C'
  4166  18E4  346F               	retlw	111	;'o'
  4167  18E5  346E               	retlw	110	;'n'
  4168  18E6  3476               	retlw	118	;'v'
  4169  18E7  3465               	retlw	101	;'e'
  4170  18E8  3472               	retlw	114	;'r'
  4171  18E9  3473               	retlw	115	;'s'
  4172  18EA  3469               	retlw	105	;'i'
  4173  18EB  346F               	retlw	111	;'o'
  4174  18EC  346E               	retlw	110	;'n'
  4175  18ED  3420               	retlw	32	;' '
  4176  18EE  3472               	retlw	114	;'r'
  4177  18EF  3461               	retlw	97	;'a'
  4178  18F0  3474               	retlw	116	;'t'
  4179  18F1  3465               	retlw	101	;'e'
  4180  18F2  343A               	retlw	58	;':'
  4181  18F3  3409               	retlw	9
  4182  18F4  3430               	retlw	48	;'0'
  4183  18F5  3478               	retlw	120	;'x'
  4184  18F6  3425               	retlw	37	;'%'
  4185  18F7  3478               	retlw	120	;'x'
  4186  18F8  3420               	retlw	32	;' '
  4187  18F9  3428               	retlw	40	;'('
  4188  18FA  3425               	retlw	37	;'%'
  4189  18FB  342E               	retlw	46	;'.'
  4190  18FC  3434               	retlw	52	;'4'
  4191  18FD  3466               	retlw	102	;'f'
  4192  18FE  3420               	retlw	32	;' '
  4193  18FF  3463               	retlw	99	;'c'
  4194  1900  346F               	retlw	111	;'o'
  4195  1901  346E               	retlw	110	;'n'
  4196  1902  3476               	retlw	118	;'v'
  4197  1903  3465               	retlw	101	;'e'
  4198  1904  3472               	retlw	114	;'r'
  4199  1905  3473               	retlw	115	;'s'
  4200  1906  3469               	retlw	105	;'i'
  4201  1907  346F               	retlw	111	;'o'
  4202  1908  346E               	retlw	110	;'n'
  4203  1909  3473               	retlw	115	;'s'
  4204  190A  3420               	retlw	32	;' '
  4205  190B  3470               	retlw	112	;'p'
  4206  190C  3465               	retlw	101	;'e'
  4207  190D  3472               	retlw	114	;'r'
  4208  190E  3420               	retlw	32	;' '
  4209  190F  3473               	retlw	115	;'s'
  4210  1910  3465               	retlw	101	;'e'
  4211  1911  3463               	retlw	99	;'c'
  4212  1912  346F               	retlw	111	;'o'
  4213  1913  346E               	retlw	110	;'n'
  4214  1914  3464               	retlw	100	;'d'
  4215  1915  3429               	retlw	41	;')'
  4216  1916  340A               	retlw	10
  4217  1917  3400               	retlw	0
  4218                           
  4219                           	psect	stringtext8
  4220  1918                     __pstringtext8:	
  4221  1918                     STR_2:	
  4222  1918  344D               	retlw	77	;'M'
  4223  1919  3469               	retlw	105	;'i'
  4224  191A  3463               	retlw	99	;'c'
  4225  191B  3472               	retlw	114	;'r'
  4226  191C  346F               	retlw	111	;'o'
  4227  191D  3463               	retlw	99	;'c'
  4228  191E  3468               	retlw	104	;'h'
  4229  191F  3469               	retlw	105	;'i'
  4230  1920  3470               	retlw	112	;'p'
  4231  1921  3420               	retlw	32	;' '
  4232  1922  3445               	retlw	69	;'E'
  4233  1923  344D               	retlw	77	;'M'
  4234  1924  3443               	retlw	67	;'C'
  4235  1925  3431               	retlw	49	;'1'
  4236  1926  3430               	retlw	48	;'0'
  4237  1927  3430               	retlw	48	;'0'
  4238  1928  3431               	retlw	49	;'1'
  4239  1929  3420               	retlw	32	;' '
  4240  192A  3454               	retlw	84	;'T'
  4241  192B  3465               	retlw	101	;'e'
  4242  192C  346D               	retlw	109	;'m'
  4243  192D  3470               	retlw	112	;'p'
  4244  192E  3465               	retlw	101	;'e'
  4245  192F  3472               	retlw	114	;'r'
  4246  1930  3461               	retlw	97	;'a'
  4247  1931  3474               	retlw	116	;'t'
  4248  1932  3475               	retlw	117	;'u'
  4249  1933  3472               	retlw	114	;'r'
  4250  1934  3465               	retlw	101	;'e'
  4251  1935  3420               	retlw	32	;' '
  4252  1936  3453               	retlw	83	;'S'
  4253  1937  3465               	retlw	101	;'e'
  4254  1938  346E               	retlw	110	;'n'
  4255  1939  3473               	retlw	115	;'s'
  4256  193A  346F               	retlw	111	;'o'
  4257  193B  3472               	retlw	114	;'r'
  4258  193C  3420               	retlw	32	;' '
  4259  193D  3444               	retlw	68	;'D'
  4260  193E  3465               	retlw	101	;'e'
  4261  193F  346D               	retlw	109	;'m'
  4262  1940  346F               	retlw	111	;'o'
  4263  1941  3400               	retlw	0
  4264                           
  4265                           	psect	stringtext9
  4266  19B8                     __pstringtext9:	
  4267  19B8                     STR_15:	
  4268  19B8  3454               	retlw	84	;'T'
  4269  19B9  3465               	retlw	101	;'e'
  4270  19BA  346D               	retlw	109	;'m'
  4271  19BB  3470               	retlw	112	;'p'
  4272  19BC  3465               	retlw	101	;'e'
  4273  19BD  3472               	retlw	114	;'r'
  4274  19BE  3461               	retlw	97	;'a'
  4275  19BF  3474               	retlw	116	;'t'
  4276  19C0  3475               	retlw	117	;'u'
  4277  19C1  3472               	retlw	114	;'r'
  4278  19C2  3465               	retlw	101	;'e'
  4279  19C3  3420               	retlw	32	;' '
  4280  19C4  3468               	retlw	104	;'h'
  4281  19C5  3469               	retlw	105	;'i'
  4282  19C6  3467               	retlw	103	;'g'
  4283  19C7  3468               	retlw	104	;'h'
  4284  19C8  3420               	retlw	32	;' '
  4285  19C9  346C               	retlw	108	;'l'
  4286  19CA  3469               	retlw	105	;'i'
  4287  19CB  346D               	retlw	109	;'m'
  4288  19CC  3469               	retlw	105	;'i'
  4289  19CD  3474               	retlw	116	;'t'
  4290  19CE  343A               	retlw	58	;':'
  4291  19CF  3409               	retlw	9
  4292  19D0  3425               	retlw	37	;'%'
  4293  19D1  3464               	retlw	100	;'d'
  4294  19D2  342E               	retlw	46	;'.'
  4295  19D3  3425               	retlw	37	;'%'
  4296  19D4  3464               	retlw	100	;'d'
  4297  19D5  3420               	retlw	32	;' '
  4298  19D6  3443               	retlw	67	;'C'
  4299  19D7  340A               	retlw	10
  4300  19D8  3400               	retlw	0
  4301                           
  4302                           	psect	stringtext10
  4303  19D9                     __pstringtext10:	
  4304  19D9                     STR_16:	
  4305  19D9  3454               	retlw	84	;'T'
  4306  19DA  3465               	retlw	101	;'e'
  4307  19DB  346D               	retlw	109	;'m'
  4308  19DC  3470               	retlw	112	;'p'
  4309  19DD  3465               	retlw	101	;'e'
  4310  19DE  3472               	retlw	114	;'r'
  4311  19DF  3461               	retlw	97	;'a'
  4312  19E0  3474               	retlw	116	;'t'
  4313  19E1  3475               	retlw	117	;'u'
  4314  19E2  3472               	retlw	114	;'r'
  4315  19E3  3465               	retlw	101	;'e'
  4316  19E4  3420               	retlw	32	;' '
  4317  19E5  346C               	retlw	108	;'l'
  4318  19E6  346F               	retlw	111	;'o'
  4319  19E7  3477               	retlw	119	;'w'
  4320  19E8  3420               	retlw	32	;' '
  4321  19E9  346C               	retlw	108	;'l'
  4322  19EA  3469               	retlw	105	;'i'
  4323  19EB  346D               	retlw	109	;'m'
  4324  19EC  3469               	retlw	105	;'i'
  4325  19ED  3474               	retlw	116	;'t'
  4326  19EE  343A               	retlw	58	;':'
  4327  19EF  3409               	retlw	9
  4328  19F0  3425               	retlw	37	;'%'
  4329  19F1  3464               	retlw	100	;'d'
  4330  19F2  342E               	retlw	46	;'.'
  4331  19F3  3425               	retlw	37	;'%'
  4332  19F4  3464               	retlw	100	;'d'
  4333  19F5  3420               	retlw	32	;' '
  4334  19F6  3443               	retlw	67	;'C'
  4335  19F7  340A               	retlw	10
  4336  19F8  3400               	retlw	0
  4337                           
  4338                           	psect	stringtext11
  4339  19F9                     __pstringtext11:	
  4340  19F9                     STR_19:	
  4341  19F9  3443               	retlw	67	;'C'
  4342  19FA  3475               	retlw	117	;'u'
  4343  19FB  3472               	retlw	114	;'r'
  4344  19FC  3472               	retlw	114	;'r'
  4345  19FD  3465               	retlw	101	;'e'
  4346  19FE  346E               	retlw	110	;'n'
  4347  19FF  3474               	retlw	116	;'t'
  4348  1A00  3420               	retlw	32	;' '
  4349  1A01  3454               	retlw	84	;'T'
  4350  1A02  3465               	retlw	101	;'e'
  4351  1A03  346D               	retlw	109	;'m'
  4352  1A04  3470               	retlw	112	;'p'
  4353  1A05  3465               	retlw	101	;'e'
  4354  1A06  3472               	retlw	114	;'r'
  4355  1A07  3461               	retlw	97	;'a'
  4356  1A08  3474               	retlw	116	;'t'
  4357  1A09  3475               	retlw	117	;'u'
  4358  1A0A  3472               	retlw	114	;'r'
  4359  1A0B  3465               	retlw	101	;'e'
  4360  1A0C  343A               	retlw	58	;':'
  4361  1A0D  3409               	retlw	9
  4362  1A0E  3425               	retlw	37	;'%'
  4363  1A0F  3464               	retlw	100	;'d'
  4364  1A10  342E               	retlw	46	;'.'
  4365  1A11  3425               	retlw	37	;'%'
  4366  1A12  3464               	retlw	100	;'d'
  4367  1A13  3420               	retlw	32	;' '
  4368  1A14  3443               	retlw	67	;'C'
  4369  1A15  340A               	retlw	10
  4370  1A16  3400               	retlw	0
  4371                           
  4372                           	psect	stringtext12
  4373  1A17                     __pstringtext12:	
  4374  1A17                     STR_18:	
  4375  1A17  3454               	retlw	84	;'T'
  4376  1A18  3468               	retlw	104	;'h'
  4377  1A19  3465               	retlw	101	;'e'
  4378  1A1A  3472               	retlw	114	;'r'
  4379  1A1B  346D               	retlw	109	;'m'
  4380  1A1C  3461               	retlw	97	;'a'
  4381  1A1D  346C               	retlw	108	;'l'
  4382  1A1E  3420               	retlw	32	;' '
  4383  1A1F  3468               	retlw	104	;'h'
  4384  1A20  3479               	retlw	121	;'y'
  4385  1A21  3473               	retlw	115	;'s'
  4386  1A22  3474               	retlw	116	;'t'
  4387  1A23  3465               	retlw	101	;'e'
  4388  1A24  3472               	retlw	114	;'r'
  4389  1A25  3465               	retlw	101	;'e'
  4390  1A26  3473               	retlw	115	;'s'
  4391  1A27  3469               	retlw	105	;'i'
  4392  1A28  3473               	retlw	115	;'s'
  4393  1A29  343A               	retlw	58	;':'
  4394  1A2A  3409               	retlw	9
  4395  1A2B  3425               	retlw	37	;'%'
  4396  1A2C  3464               	retlw	100	;'d'
  4397  1A2D  3420               	retlw	32	;' '
  4398  1A2E  3443               	retlw	67	;'C'
  4399  1A2F  340A               	retlw	10
  4400  1A30  340A               	retlw	10
  4401  1A31  3400               	retlw	0
  4402                           
  4403                           	psect	stringtext13
  4404  1A32                     __pstringtext13:	
  4405  1A32                     STR_4:	
  4406  1A32  3450               	retlw	80	;'P'
  4407  1A33  3472               	retlw	114	;'r'
  4408  1A34  346F               	retlw	111	;'o'
  4409  1A35  3464               	retlw	100	;'d'
  4410  1A36  3475               	retlw	117	;'u'
  4411  1A37  3463               	retlw	99	;'c'
  4412  1A38  3474               	retlw	116	;'t'
  4413  1A39  3420               	retlw	32	;' '
  4414  1A3A  3449               	retlw	73	;'I'
  4415  1A3B  3444               	retlw	68	;'D'
  4416  1A3C  343A               	retlw	58	;':'
  4417  1A3D  3409               	retlw	9
  4418  1A3E  3409               	retlw	9
  4419  1A3F  3445               	retlw	69	;'E'
  4420  1A40  344D               	retlw	77	;'M'
  4421  1A41  3443               	retlw	67	;'C'
  4422  1A42  3431               	retlw	49	;'1'
  4423  1A43  3430               	retlw	48	;'0'
  4424  1A44  3430               	retlw	48	;'0'
  4425  1A45  3431               	retlw	49	;'1'
  4426  1A46  3425               	retlw	37	;'%'
  4427  1A47  3473               	retlw	115	;'s'
  4428  1A48  340A               	retlw	10
  4429  1A49  3400               	retlw	0
  4430                           
  4431                           	psect	stringtext14
  4432  1A62                     __pstringtext14:	
  4433  1A62                     STR_7:	
  4434  1A62  344D               	retlw	77	;'M'
  4435  1A63  3461               	retlw	97	;'a'
  4436  1A64  346E               	retlw	110	;'n'
  4437  1A65  3475               	retlw	117	;'u'
  4438  1A66  3466               	retlw	102	;'f'
  4439  1A67  3461               	retlw	97	;'a'
  4440  1A68  3463               	retlw	99	;'c'
  4441  1A69  3474               	retlw	116	;'t'
  4442  1A6A  3475               	retlw	117	;'u'
  4443  1A6B  3472               	retlw	114	;'r'
  4444  1A6C  3465               	retlw	101	;'e'
  4445  1A6D  3472               	retlw	114	;'r'
  4446  1A6E  3420               	retlw	32	;' '
  4447  1A6F  3449               	retlw	73	;'I'
  4448  1A70  3444               	retlw	68	;'D'
  4449  1A71  343A               	retlw	58	;':'
  4450  1A72  3409               	retlw	9
  4451  1A73  3430               	retlw	48	;'0'
  4452  1A74  3478               	retlw	120	;'x'
  4453  1A75  3425               	retlw	37	;'%'
  4454  1A76  3458               	retlw	88	;'X'
  4455  1A77  340A               	retlw	10
  4456  1A78  3400               	retlw	0
  4457                           
  4458                           	psect	stringtext15
  4459  1A79                     __pstringtext15:	
  4460  1A79                     STR_17:	
  4461  1A79  3454               	retlw	84	;'T'
  4462  1A7A  3468               	retlw	104	;'h'
  4463  1A7B  3465               	retlw	101	;'e'
  4464  1A7C  3472               	retlw	114	;'r'
  4465  1A7D  346D               	retlw	109	;'m'
  4466  1A7E  3461               	retlw	97	;'a'
  4467  1A7F  346C               	retlw	108	;'l'
  4468  1A80  3420               	retlw	32	;' '
  4469  1A81  346C               	retlw	108	;'l'
  4470  1A82  3469               	retlw	105	;'i'
  4471  1A83  346D               	retlw	109	;'m'
  4472  1A84  3469               	retlw	105	;'i'
  4473  1A85  3474               	retlw	116	;'t'
  4474  1A86  343A               	retlw	58	;':'
  4475  1A87  3409               	retlw	9
  4476  1A88  3409               	retlw	9
  4477  1A89  3425               	retlw	37	;'%'
  4478  1A8A  3464               	retlw	100	;'d'
  4479  1A8B  3420               	retlw	32	;' '
  4480  1A8C  3443               	retlw	67	;'C'
  4481  1A8D  340A               	retlw	10
  4482  1A8E  3400               	retlw	0
  4483                           
  4484                           	psect	stringtext16
  4485  1A8F                     __pstringtext16:	
  4486  1A8F                     STR_12:	
  4487  1A8F  3453               	retlw	83	;'S'
  4488  1A90  344D               	retlw	77	;'M'
  4489  1A91  3442               	retlw	66	;'B'
  4490  1A92  3475               	retlw	117	;'u'
  4491  1A93  3473               	retlw	115	;'s'
  4492  1A94  3420               	retlw	32	;' '
  4493  1A95  3454               	retlw	84	;'T'
  4494  1A96  3469               	retlw	105	;'i'
  4495  1A97  346D               	retlw	109	;'m'
  4496  1A98  3465               	retlw	101	;'e'
  4497  1A99  344F               	retlw	79	;'O'
  4498  1A9A  3475               	retlw	117	;'u'
  4499  1A9B  3474               	retlw	116	;'t'
  4500  1A9C  343A               	retlw	58	;':'
  4501  1A9D  3409               	retlw	9
  4502  1A9E  3409               	retlw	9
  4503  1A9F  3425               	retlw	37	;'%'
  4504  1AA0  3473               	retlw	115	;'s'
  4505  1AA1  340A               	retlw	10
  4506  1AA2  3400               	retlw	0
  4507                           
  4508                           	psect	stringtext17
  4509  1AA3                     __pstringtext17:	
  4510  1AA3                     STR_21:	
  4511  1AA3  3430               	retlw	48	;'0'
  4512  1AA4  3431               	retlw	49	;'1'
  4513  1AA5  3432               	retlw	50	;'2'
  4514  1AA6  3433               	retlw	51	;'3'
  4515  1AA7  3434               	retlw	52	;'4'
  4516  1AA8  3435               	retlw	53	;'5'
  4517  1AA9  3436               	retlw	54	;'6'
  4518  1AAA  3437               	retlw	55	;'7'
  4519  1AAB  3438               	retlw	56	;'8'
  4520  1AAC  3439               	retlw	57	;'9'
  4521  1AAD  3441               	retlw	65	;'A'
  4522  1AAE  3442               	retlw	66	;'B'
  4523  1AAF  3443               	retlw	67	;'C'
  4524  1AB0  3444               	retlw	68	;'D'
  4525  1AB1  3445               	retlw	69	;'E'
  4526  1AB2  3446               	retlw	70	;'F'
  4527  1AB3  3400               	retlw	0
  4528                           
  4529                           	psect	stringtext18
  4530  1AB4                     __pstringtext18:	
  4531  1AB4                     STR_22:	
  4532  1AB4  3430               	retlw	48	;'0'
  4533  1AB5  3431               	retlw	49	;'1'
  4534  1AB6  3432               	retlw	50	;'2'
  4535  1AB7  3433               	retlw	51	;'3'
  4536  1AB8  3434               	retlw	52	;'4'
  4537  1AB9  3435               	retlw	53	;'5'
  4538  1ABA  3436               	retlw	54	;'6'
  4539  1ABB  3437               	retlw	55	;'7'
  4540  1ABC  3438               	retlw	56	;'8'
  4541  1ABD  3439               	retlw	57	;'9'
  4542  1ABE  3461               	retlw	97	;'a'
  4543  1ABF  3462               	retlw	98	;'b'
  4544  1AC0  3463               	retlw	99	;'c'
  4545  1AC1  3464               	retlw	100	;'d'
  4546  1AC2  3465               	retlw	101	;'e'
  4547  1AC3  3466               	retlw	102	;'f'
  4548  1AC4  3400               	retlw	0
  4549                           
  4550                           	psect	stringtext19
  4551  1AC5                     __pstringtext19:	
  4552  1AC5                     STR_8:	
  4553  1AC5  3452               	retlw	82	;'R'
  4554  1AC6  3465               	retlw	101	;'e'
  4555  1AC7  3476               	retlw	118	;'v'
  4556  1AC8  3469               	retlw	105	;'i'
  4557  1AC9  3473               	retlw	115	;'s'
  4558  1ACA  3469               	retlw	105	;'i'
  4559  1ACB  346F               	retlw	111	;'o'
  4560  1ACC  346E               	retlw	110	;'n'
  4561  1ACD  3420               	retlw	32	;' '
  4562  1ACE  343A               	retlw	58	;':'
  4563  1ACF  3409               	retlw	9
  4564  1AD0  3409               	retlw	9
  4565  1AD1  3425               	retlw	37	;'%'
  4566  1AD2  3464               	retlw	100	;'d'
  4567  1AD3  340A               	retlw	10
  4568  1AD4  3400               	retlw	0
  4569                           
  4570                           	psect	stringtext20
  4571  1AD5                     __pstringtext20:	
  4572  1AD5                     STR_14:	
  4573  1AD5  3444               	retlw	68	;'D'
  4574  1AD6  3469               	retlw	105	;'i'
  4575  1AD7  3473               	retlw	115	;'s'
  4576  1AD8  3461               	retlw	97	;'a'
  4577  1AD9  3462               	retlw	98	;'b'
  4578  1ADA  346C               	retlw	108	;'l'
  4579  1ADB  3465               	retlw	101	;'e'
  4580  1ADC  3464               	retlw	100	;'d'
  4581  1ADD  3400               	retlw	0
  4582                           
  4583                           	psect	stringtext21
  4584  1ADE                     __pstringtext21:	
  4585  1ADE                     STR_13:	
  4586  1ADE  3445               	retlw	69	;'E'
  4587  1ADF  346E               	retlw	110	;'n'
  4588  1AE0  3461               	retlw	97	;'a'
  4589  1AE1  3462               	retlw	98	;'b'
  4590  1AE2  346C               	retlw	108	;'l'
  4591  1AE3  3465               	retlw	101	;'e'
  4592  1AE4  3464               	retlw	100	;'d'
  4593  1AE5  3400               	retlw	0
  4594                           
  4595                           	psect	stringtext22
  4596  1AE6                     __pstringtext22:	
  4597  1AE6                     STR_20:	
  4598  1AE6  3428               	retlw	40	;'('
  4599  1AE7  346E               	retlw	110	;'n'
  4600  1AE8  3475               	retlw	117	;'u'
  4601  1AE9  346C               	retlw	108	;'l'
  4602  1AEA  346C               	retlw	108	;'l'
  4603  1AEB  3429               	retlw	41	;')'
  4604  1AEC  3400               	retlw	0
  4605                           
  4606                           	psect	stringtext23
  4607  1AED                     __pstringtext23:	
  4608  1AED                     STR_5:	
  4609  1AED  342D               	retlw	45	;'-'
  4610  1AEE  3431               	retlw	49	;'1'
  4611  1AEF  3400               	retlw	0
  4612                           
  4613                           	psect	stringtext24
  4614  1AF0                     __pstringtext24:	
  4615  1AF0                     STR_1:	
  4616  1AF0  340C               	retlw	12
  4617  1AF1  3400               	retlw	0
  4618                           
  4619                           	psect	stringtext25
  4620  0000                     __pstringtext25:	
  4621  1A31                     
  4622                           ; #config settings
  4623  0000                     
  4624                           	psect	cinit
  4625  0022                     start_initialization:	
  4626  0022                     __initialization:	
  4627                           
  4628                           ; Clear objects allocated to COMMON
  4629  0022  01F0               	clrf	__pbssCOMMON& (0+127)
  4630  0023  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  4631  0024  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  4632  0025  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  4633  0026  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  4634  0027  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  4635  0028  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  4636                           
  4637                           ; Clear objects allocated to BANK0
  4638  0029  0020               	movlb	0	; select bank0
  4639  002A  01EF               	clrf	__pbssBANK0& (0+127)
  4640                           
  4641                           ; Clear objects allocated to BANK1
  4642  002B  30E4               	movlw	low __pbssBANK1
  4643  002C  0084               	movwf	4
  4644  002D  3000               	movlw	high __pbssBANK1
  4645  002E  0085               	movwf	5
  4646  002F  3009               	movlw	9
  4647  0030  319F  2745  3180   	fcall	clear_ram0
  4648                           
  4649                           ; Clear objects allocated to BANK2
  4650  0033  3020               	movlw	low __pbssBANK2
  4651  0034  0084               	movwf	4
  4652  0035  3001               	movlw	high __pbssBANK2
  4653  0036  0085               	movwf	5
  4654  0037  3014               	movlw	20
  4655  0038  319F  2745         	fcall	clear_ram0
  4656  003A                     end_of_initialization:	
  4657                           ;End of C runtime variable initialization code
  4658                           
  4659  003A                     __end_of__initialization:	
  4660  003A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4661  003B  0020               	movlb	0
  4662  003C  3194  2CE8         	ljmp	_main	;jump to C main() function
  4663                           
  4664                           	psect	bssCOMMON
  4665  0070                     __pbssCOMMON:	
  4666  0070                     _i2c2_object:	
  4667  0070                     	ds	5
  4668  0075                     _p_i2c2_current:	
  4669  0075                     	ds	1
  4670  0076                     _p_i2c2_trb_current:	
  4671  0076                     	ds	1
  4672                           
  4673                           	psect	bssBANK0
  4674  006F                     __pbssBANK0:	
  4675  006F                     _i2c2_state:	
  4676  006F                     	ds	1
  4677                           
  4678                           	psect	bssBANK1
  4679  00E4                     __pbssBANK1:	
  4680  00E4                     I2C2_ISR@i2c_10bit_address_restart:	
  4681  00E4                     	ds	1
  4682  00E5                     I2C2_ISR@i2c_bytes_left:	
  4683  00E5                     	ds	1
  4684  00E6                     I2C2_ISR@pi2c_buf_ptr:	
  4685  00E6                     	ds	1
  4686  00E7                     _i2c2_trb_count:	
  4687  00E7                     	ds	1
  4688  00E8                     _i2c2_tr_queue:	
  4689  00E8                     	ds	3
  4690  00EB                     I2C2_ISR@i2c_address:	
  4691  00EB                     	ds	2
  4692                           
  4693                           	psect	bssBANK2
  4694  0120                     __pbssBANK2:	
  4695  0120                     EMC1001_Read@trb:	
  4696  0120                     	ds	8
  4697  0128                     EMC1001_Write@trb:	
  4698  0128                     	ds	4
  4699  012C                     I2C2_MasterRead@trBlock:	
  4700  012C                     	ds	4
  4701  0130                     I2C2_MasterWrite@trBlock:	
  4702  0130                     	ds	4
  4703                           
  4704                           	psect	clrtext
  4705  1F45                     clear_ram0:	
  4706                           ;	Called with FSR0 containing the base address, and
  4707                           ;	WREG with the size to clear
  4708                           
  4709  1F45  0064               	clrwdt	;clear the watchdog before getting into this loop
  4710  1F46                     clrloop0:	
  4711  1F46  0180               	clrf	0	;clear RAM location pointed to by FSR
  4712  1F47  3101               	addfsr 0,1
  4713  1F48  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4714  1F49  2F46               	goto	clrloop0	;have we reached the end yet?
  4715  1F4A  3400               	retlw	0	;all done for this memory range, return
  4716                           
  4717                           	psect	cstackBANK1
  4718  00A0                     __pcstackBANK1:	
  4719  00A0                     ?_printf:	
  4720  00A0                     printf@f:	
  4721                           ; 2 bytes @ 0x0
  4722                           
  4723                           
  4724                           ; 2 bytes @ 0x0
  4725  00A0                     	ds	12
  4726  00AC                     _printf$1383:	
  4727                           
  4728                           ; 3 bytes @ 0xC
  4729  00AC                     	ds	3
  4730  00AF                     printf@idx:	
  4731                           
  4732                           ; 1 bytes @ 0xF
  4733  00AF                     	ds	1
  4734  00B0                     _printf$861:	
  4735                           
  4736                           ; 2 bytes @ 0x10
  4737  00B0                     	ds	2
  4738  00B2                     printf@len:	
  4739                           
  4740                           ; 2 bytes @ 0x12
  4741  00B2                     	ds	2
  4742  00B4                     printf@cp:	
  4743                           
  4744                           ; 2 bytes @ 0x14
  4745  00B4                     	ds	2
  4746  00B6                     printf@ap:	
  4747                           
  4748                           ; 1 bytes @ 0x16
  4749  00B6                     	ds	1
  4750  00B7                     printf@flag:	
  4751                           
  4752                           ; 2 bytes @ 0x17
  4753  00B7                     	ds	2
  4754  00B9                     printf@exp:	
  4755                           
  4756                           ; 2 bytes @ 0x19
  4757  00B9                     	ds	2
  4758  00BB                     printf@tmpval:	
  4759                           
  4760                           ; 4 bytes @ 0x1B
  4761  00BB                     	ds	4
  4762  00BF                     printf@val:	
  4763                           
  4764                           ; 4 bytes @ 0x1F
  4765  00BF                     	ds	4
  4766  00C3                     printf@fval:	
  4767                           
  4768                           ; 3 bytes @ 0x23
  4769  00C3                     	ds	3
  4770  00C6                     printf@prec:	
  4771                           
  4772                           ; 2 bytes @ 0x26
  4773  00C6                     	ds	2
  4774  00C8                     printf@c:	
  4775                           
  4776                           ; 1 bytes @ 0x28
  4777  00C8                     	ds	1
  4778  00C9                     ??_EMC1001_PrintInfo:	
  4779  00C9                     _EMC1001_PrintTemp$1379:	
  4780                           ; 1 bytes @ 0x29
  4781                           
  4782                           
  4783                           ; 2 bytes @ 0x29
  4784  00C9                     	ds	2
  4785  00CB                     EMC1001_PrintTemp@temp:	
  4786                           
  4787                           ; 1 bytes @ 0x2B
  4788  00CB                     	ds	1
  4789  00CC                     EMC1001_PrintTemp@templo:	
  4790                           
  4791                           ; 1 bytes @ 0x2C
  4792  00CC                     	ds	10
  4793  00D6                     EMC1001_PrintInfo@cr:	
  4794                           
  4795                           ; 3 bytes @ 0x36
  4796  00D6                     	ds	3
  4797  00D9                     _EMC1001_PrintInfo$778:	
  4798                           
  4799                           ; 2 bytes @ 0x39
  4800  00D9                     	ds	2
  4801  00DB                     _EMC1001_PrintInfo$788:	
  4802                           
  4803                           ; 2 bytes @ 0x3B
  4804  00DB                     	ds	2
  4805  00DD                     _EMC1001_PrintInfo$1378:	
  4806                           
  4807                           ; 2 bytes @ 0x3D
  4808  00DD                     	ds	2
  4809  00DF                     EMC1001_PrintInfo@temp:	
  4810                           
  4811                           ; 1 bytes @ 0x3F
  4812  00DF                     	ds	1
  4813  00E0                     EMC1001_PrintInfo@templo:	
  4814                           
  4815                           ; 1 bytes @ 0x40
  4816  00E0                     	ds	1
  4817  00E1                     EMC1001_PrintInfo@data:	
  4818                           
  4819                           ; 1 bytes @ 0x41
  4820  00E1                     	ds	1
  4821  00E2                     ??_main:	
  4822                           
  4823                           ; 1 bytes @ 0x42
  4824  00E2                     	ds	2
  4825                           
  4826                           	psect	cstackCOMMON
  4827  0077                     __pcstackCOMMON:	
  4828  0077                     ?_isdigit:	
  4829  0077                     ?_I2C2_Stop:	
  4830                           ; 1 bit 
  4831                           
  4832  0077                     ??_I2C2_Stop:	
  4833                           ; 1 bytes @ 0x0
  4834                           
  4835  0077                     ?_I2C2_FunctionComplete:	
  4836                           ; 1 bytes @ 0x0
  4837                           
  4838  0077                     ??_I2C2_FunctionComplete:	
  4839                           ; 1 bytes @ 0x0
  4840                           
  4841  0077                     ?_PIN_MANAGER_Initialize:	
  4842                           ; 1 bytes @ 0x0
  4843                           
  4844  0077                     ?_OSCILLATOR_Initialize:	
  4845                           ; 1 bytes @ 0x0
  4846                           
  4847  0077                     ?_EMC1001_SetConversionRate:	
  4848                           ; 1 bytes @ 0x0
  4849                           
  4850  0077                     ?_EMC1001_SetThermLimit:	
  4851                           ; 1 bytes @ 0x0
  4852                           
  4853  0077                     ?_EMC1001_SetThermHysteresis:	
  4854                           ; 1 bytes @ 0x0
  4855                           
  4856  0077                     ?_EMC1001_SMBusTimeout:	
  4857                           ; 1 bytes @ 0x0
  4858                           
  4859  0077                     ?_EMC1001_MASK1:	
  4860                           ; 1 bytes @ 0x0
  4861                           
  4862  0077                     ?_EMC1001_StandbyMode:	
  4863                           ; 1 bytes @ 0x0
  4864                           
  4865  0077                     ?_EMC1001_THERM2:	
  4866                           ; 1 bytes @ 0x0
  4867                           
  4868  0077                     ?_EMC1001_PrintInfo:	
  4869                           ; 1 bytes @ 0x0
  4870                           
  4871  0077                     ?_EMC1001_PrintTemp:	
  4872                           ; 1 bytes @ 0x0
  4873                           
  4874  0077                     ?_EUSART_Initialize:	
  4875                           ; 1 bytes @ 0x0
  4876                           
  4877  0077                     ?_EUSART_Write:	
  4878                           ; 1 bytes @ 0x0
  4879                           
  4880  0077                     ?_putch:	
  4881                           ; 1 bytes @ 0x0
  4882                           
  4883  0077                     ?_I2C2_Initialize:	
  4884                           ; 1 bytes @ 0x0
  4885                           
  4886  0077                     ?_I2C2_ISR:	
  4887                           ; 1 bytes @ 0x0
  4888                           
  4889  0077                     ?_I2C2_BusCollisionISR:	
  4890                           ; 1 bytes @ 0x0
  4891                           
  4892  0077                     ??_I2C2_BusCollisionISR:	
  4893                           ; 1 bytes @ 0x0
  4894                           
  4895  0077                     ?_INTERRUPT_InterruptManager:	
  4896                           ; 1 bytes @ 0x0
  4897                           
  4898  0077                     ?_SYSTEM_Initialize:	
  4899                           ; 1 bytes @ 0x0
  4900                           
  4901  0077                     ?_main:	
  4902                           ; 1 bytes @ 0x0
  4903                           
  4904                           
  4905                           ; 1 bytes @ 0x0
  4906  0077                     	ds	1
  4907  0078                     I2C2_Stop@completion_code:	
  4908                           
  4909                           ; 1 bytes @ 0x1
  4910  0078                     	ds	1
  4911  0079                     ??_I2C2_ISR:	
  4912                           
  4913                           ; 1 bytes @ 0x2
  4914  0079                     	ds	4
  4915  007D                     ??_INTERRUPT_InterruptManager:	
  4916                           
  4917                           ; 1 bytes @ 0x6
  4918  007D                     	ds	1
  4919                           
  4920                           	psect	cstackBANK0
  4921  0020                     __pcstackBANK0:	
  4922  0020                     ?___ftge:	
  4923  0020                     ?_I2C2_MasterWriteTRBBuild:	
  4924                           ; 1 bit 
  4925                           
  4926  0020                     ?_I2C2_MasterTRBInsert:	
  4927                           ; 1 bytes @ 0x0
  4928                           
  4929  0020                     ?_I2C2_MasterReadTRBBuild:	
  4930                           ; 1 bytes @ 0x0
  4931                           
  4932  0020                     ??_PIN_MANAGER_Initialize:	
  4933                           ; 1 bytes @ 0x0
  4934                           
  4935  0020                     ??_OSCILLATOR_Initialize:	
  4936                           ; 1 bytes @ 0x0
  4937                           
  4938  0020                     ??_isdigit:	
  4939                           ; 1 bytes @ 0x0
  4940                           
  4941  0020                     ??_EUSART_Initialize:	
  4942                           ; 1 bytes @ 0x0
  4943                           
  4944  0020                     ??_EUSART_Write:	
  4945                           ; 1 bytes @ 0x0
  4946                           
  4947  0020                     ??_I2C2_Initialize:	
  4948                           ; 1 bytes @ 0x0
  4949                           
  4950  0020                     ?___awmod:	
  4951                           ; 1 bytes @ 0x0
  4952                           
  4953  0020                     ?___ftpack:	
  4954                           ; 2 bytes @ 0x0
  4955                           
  4956  0020                     ?___ftneg:	
  4957                           ; 3 bytes @ 0x0
  4958                           
  4959  0020                     ?__tdiv_to_l_:	
  4960                           ; 3 bytes @ 0x0
  4961                           
  4962  0020                     ?__div_to_l_:	
  4963                           ; 4 bytes @ 0x0
  4964                           
  4965  0020                     ?___lldiv:	
  4966                           ; 4 bytes @ 0x0
  4967                           
  4968  0020                     EUSART_Write@txData:	
  4969                           ; 4 bytes @ 0x0
  4970                           
  4971  0020                     I2C2_MasterTRBInsert@ptrb_list:	
  4972                           ; 1 bytes @ 0x0
  4973                           
  4974  0020                     I2C2_MasterReadTRBBuild@pdata:	
  4975                           ; 1 bytes @ 0x0
  4976                           
  4977  0020                     I2C2_MasterWriteTRBBuild@pdata:	
  4978                           ; 1 bytes @ 0x0
  4979                           
  4980  0020                     PIN_MANAGER_Initialize@state:	
  4981                           ; 1 bytes @ 0x0
  4982                           
  4983  0020                     _isdigit$1116:	
  4984                           ; 1 bytes @ 0x0
  4985                           
  4986  0020                     ___awmod@divisor:	
  4987                           ; 1 bytes @ 0x0
  4988                           
  4989  0020                     __div_to_l_@f1:	
  4990                           ; 2 bytes @ 0x0
  4991                           
  4992  0020                     ___ftpack@arg:	
  4993                           ; 3 bytes @ 0x0
  4994                           
  4995  0020                     __tdiv_to_l_@f1:	
  4996                           ; 3 bytes @ 0x0
  4997                           
  4998  0020                     ___ftge@ff1:	
  4999                           ; 3 bytes @ 0x0
  5000                           
  5001  0020                     ___ftneg@f1:	
  5002                           ; 3 bytes @ 0x0
  5003                           
  5004  0020                     ___lldiv@divisor:	
  5005                           ; 3 bytes @ 0x0
  5006                           
  5007                           
  5008                           ; 4 bytes @ 0x0
  5009  0020                     	ds	1
  5010  0021                     ??_putch:	
  5011  0021                     ??_SYSTEM_Initialize:	
  5012                           ; 1 bytes @ 0x1
  5013                           
  5014  0021                     putch@txData:	
  5015                           ; 1 bytes @ 0x1
  5016                           
  5017  0021                     I2C2_MasterTRBInsert@pflag:	
  5018                           ; 1 bytes @ 0x1
  5019                           
  5020  0021                     I2C2_MasterReadTRBBuild@length:	
  5021                           ; 1 bytes @ 0x1
  5022                           
  5023  0021                     I2C2_MasterWriteTRBBuild@length:	
  5024                           ; 1 bytes @ 0x1
  5025                           
  5026  0021                     isdigit@c:	
  5027                           ; 1 bytes @ 0x1
  5028                           
  5029                           
  5030                           ; 1 bytes @ 0x1
  5031  0021                     	ds	1
  5032  0022                     ??_I2C2_MasterTRBInsert:	
  5033  0022                     ?_cputs:	
  5034                           ; 1 bytes @ 0x2
  5035                           
  5036  0022                     I2C2_MasterReadTRBBuild@address:	
  5037                           ; 1 bytes @ 0x2
  5038                           
  5039  0022                     I2C2_MasterWriteTRBBuild@address:	
  5040                           ; 2 bytes @ 0x2
  5041                           
  5042  0022                     ___awmod@dividend:	
  5043                           ; 2 bytes @ 0x2
  5044                           
  5045  0022                     cputs@s:	
  5046                           ; 2 bytes @ 0x2
  5047                           
  5048                           
  5049                           ; 2 bytes @ 0x2
  5050  0022                     	ds	1
  5051  0023                     ??___ftneg:	
  5052  0023                     I2C2_MasterTRBInsert@count:	
  5053                           ; 1 bytes @ 0x3
  5054                           
  5055  0023                     ___ftpack@exp:	
  5056                           ; 1 bytes @ 0x3
  5057                           
  5058  0023                     __div_to_l_@f2:	
  5059                           ; 1 bytes @ 0x3
  5060                           
  5061  0023                     __tdiv_to_l_@f2:	
  5062                           ; 3 bytes @ 0x3
  5063                           
  5064  0023                     ___ftge@ff2:	
  5065                           ; 3 bytes @ 0x3
  5066                           
  5067                           
  5068                           ; 3 bytes @ 0x3
  5069  0023                     	ds	1
  5070  0024                     ??_I2C2_MasterWriteTRBBuild:	
  5071  0024                     ??_I2C2_MasterReadTRBBuild:	
  5072                           ; 1 bytes @ 0x4
  5073                           
  5074  0024                     ??_cputs:	
  5075                           ; 1 bytes @ 0x4
  5076                           
  5077  0024                     ??___awmod:	
  5078                           ; 1 bytes @ 0x4
  5079                           
  5080  0024                     ___ftpack@sign:	
  5081                           ; 1 bytes @ 0x4
  5082                           
  5083  0024                     ___lldiv@dividend:	
  5084                           ; 1 bytes @ 0x4
  5085                           
  5086                           
  5087                           ; 4 bytes @ 0x4
  5088  0024                     	ds	1
  5089  0025                     ??___ftpack:	
  5090  0025                     ?_puts:	
  5091                           ; 1 bytes @ 0x5
  5092                           
  5093  0025                     ___awmod@counter:	
  5094                           ; 2 bytes @ 0x5
  5095                           
  5096  0025                     puts@s:	
  5097                           ; 1 bytes @ 0x5
  5098                           
  5099                           
  5100                           ; 2 bytes @ 0x5
  5101  0025                     	ds	1
  5102  0026                     ??__tdiv_to_l_:	
  5103  0026                     ??__div_to_l_:	
  5104                           ; 1 bytes @ 0x6
  5105                           
  5106  0026                     ??___ftge:	
  5107                           ; 1 bytes @ 0x6
  5108                           
  5109  0026                     I2C2_MasterReadTRBBuild@ptrb:	
  5110                           ; 1 bytes @ 0x6
  5111                           
  5112  0026                     I2C2_MasterWriteTRBBuild@ptrb:	
  5113                           ; 1 bytes @ 0x6
  5114                           
  5115  0026                     ___awmod@sign:	
  5116                           ; 1 bytes @ 0x6
  5117                           
  5118                           
  5119                           ; 1 bytes @ 0x6
  5120  0026                     	ds	1
  5121  0027                     ??_puts:	
  5122  0027                     ?_EMC1001_Read:	
  5123                           ; 1 bytes @ 0x7
  5124                           
  5125  0027                     ?_EMC1001_Write:	
  5126                           ; 1 bytes @ 0x7
  5127                           
  5128  0027                     ?___awdiv:	
  5129                           ; 1 bytes @ 0x7
  5130                           
  5131  0027                     EMC1001_Read@pData:	
  5132                           ; 2 bytes @ 0x7
  5133                           
  5134  0027                     EMC1001_Write@data:	
  5135                           ; 1 bytes @ 0x7
  5136                           
  5137  0027                     ___awdiv@divisor:	
  5138                           ; 1 bytes @ 0x7
  5139                           
  5140                           
  5141                           ; 2 bytes @ 0x7
  5142  0027                     	ds	1
  5143  0028                     ??_EMC1001_Read:	
  5144  0028                     ??_EMC1001_Write:	
  5145                           ; 1 bytes @ 0x8
  5146                           
  5147  0028                     ??___lldiv:	
  5148                           ; 1 bytes @ 0x8
  5149                           
  5150  0028                     ?___awtoft:	
  5151                           ; 1 bytes @ 0x8
  5152                           
  5153  0028                     ?___lltoft:	
  5154                           ; 3 bytes @ 0x8
  5155                           
  5156  0028                     ___awtoft@c:	
  5157                           ; 3 bytes @ 0x8
  5158                           
  5159  0028                     ___lltoft@c:	
  5160                           ; 2 bytes @ 0x8
  5161                           
  5162                           
  5163                           ; 4 bytes @ 0x8
  5164  0028                     	ds	1
  5165  0029                     ___awdiv@dividend:	
  5166  0029                     ___lldiv@quotient:	
  5167                           ; 2 bytes @ 0x9
  5168                           
  5169                           
  5170                           ; 4 bytes @ 0x9
  5171  0029                     	ds	1
  5172  002A                     EMC1001_Read@timeOut:	
  5173  002A                     EMC1001_Write@reg:	
  5174                           ; 1 bytes @ 0xA
  5175                           
  5176  002A                     __tdiv_to_l_@quot:	
  5177                           ; 1 bytes @ 0xA
  5178                           
  5179                           
  5180                           ; 4 bytes @ 0xA
  5181  002A                     	ds	1
  5182  002B                     ??___awdiv:	
  5183  002B                     ??___awtoft:	
  5184                           ; 1 bytes @ 0xB
  5185                           
  5186  002B                     EMC1001_Read@reg:	
  5187                           ; 1 bytes @ 0xB
  5188                           
  5189  002B                     EMC1001_Write@timeOut:	
  5190                           ; 1 bytes @ 0xB
  5191                           
  5192                           
  5193                           ; 1 bytes @ 0xB
  5194  002B                     	ds	1
  5195  002C                     ??___lltoft:	
  5196  002C                     EMC1001_Read@status:	
  5197                           ; 1 bytes @ 0xC
  5198                           
  5199  002C                     ___awdiv@counter:	
  5200                           ; 1 bytes @ 0xC
  5201                           
  5202  002C                     EMC1001_Write@buffer:	
  5203                           ; 1 bytes @ 0xC
  5204                           
  5205                           
  5206                           ; 2 bytes @ 0xC
  5207  002C                     	ds	1
  5208  002D                     ___awdiv@sign:	
  5209  002D                     ___awtoft@sign:	
  5210                           ; 1 bytes @ 0xD
  5211                           
  5212  002D                     ___lldiv@counter:	
  5213                           ; 1 bytes @ 0xD
  5214                           
  5215  002D                     ___lltoft@exp:	
  5216                           ; 1 bytes @ 0xD
  5217                           
  5218                           
  5219                           ; 1 bytes @ 0xD
  5220  002D                     	ds	1
  5221  002E                     ?___llmod:	
  5222  002E                     EMC1001_Write@status:	
  5223                           ; 4 bytes @ 0xE
  5224                           
  5225  002E                     __tdiv_to_l_@cntr:	
  5226                           ; 1 bytes @ 0xE
  5227                           
  5228  002E                     ___awdiv@quotient:	
  5229                           ; 1 bytes @ 0xE
  5230                           
  5231  002E                     __div_to_l_@quot:	
  5232                           ; 2 bytes @ 0xE
  5233                           
  5234  002E                     ___llmod@divisor:	
  5235                           ; 4 bytes @ 0xE
  5236                           
  5237                           
  5238                           ; 4 bytes @ 0xE
  5239  002E                     	ds	1
  5240  002F                     ??_EMC1001_SetConversionRate:	
  5241  002F                     ??_EMC1001_SetThermLimit:	
  5242                           ; 1 bytes @ 0xF
  5243                           
  5244  002F                     ??_EMC1001_SetThermHysteresis:	
  5245                           ; 1 bytes @ 0xF
  5246                           
  5247  002F                     ??_EMC1001_SMBusTimeout:	
  5248                           ; 1 bytes @ 0xF
  5249                           
  5250  002F                     ??_EMC1001_MASK1:	
  5251                           ; 1 bytes @ 0xF
  5252                           
  5253  002F                     ??_EMC1001_StandbyMode:	
  5254                           ; 1 bytes @ 0xF
  5255                           
  5256  002F                     ??_EMC1001_THERM2:	
  5257                           ; 1 bytes @ 0xF
  5258                           
  5259  002F                     __tdiv_to_l_@exp1:	
  5260                           ; 1 bytes @ 0xF
  5261                           
  5262                           
  5263                           ; 1 bytes @ 0xF
  5264  002F                     	ds	1
  5265  0030                     ?_EMC1001_SetTempHighLimit:	
  5266  0030                     ?_EMC1001_SetTempLowLimit:	
  5267                           ; 1 bytes @ 0x10
  5268                           
  5269  0030                     ?___wmul:	
  5270                           ; 1 bytes @ 0x10
  5271                           
  5272  0030                     EMC1001_SetConversionRate@data:	
  5273                           ; 2 bytes @ 0x10
  5274                           
  5275  0030                     EMC1001_SetTempHighLimit@LB:	
  5276                           ; 1 bytes @ 0x10
  5277                           
  5278  0030                     EMC1001_SetTempLowLimit@LB:	
  5279                           ; 1 bytes @ 0x10
  5280                           
  5281  0030                     EMC1001_SetThermLimit@data:	
  5282                           ; 1 bytes @ 0x10
  5283                           
  5284  0030                     EMC1001_SetThermHysteresis@data:	
  5285                           ; 1 bytes @ 0x10
  5286                           
  5287  0030                     EMC1001_SMBusTimeout@enable:	
  5288                           ; 1 bytes @ 0x10
  5289                           
  5290  0030                     EMC1001_MASK1@enable:	
  5291                           ; 1 bytes @ 0x10
  5292                           
  5293  0030                     EMC1001_StandbyMode@enable:	
  5294                           ; 1 bytes @ 0x10
  5295                           
  5296  0030                     EMC1001_THERM2@enable:	
  5297                           ; 1 bytes @ 0x10
  5298                           
  5299  0030                     ___wmul@multiplier:	
  5300                           ; 1 bytes @ 0x10
  5301                           
  5302                           
  5303                           ; 2 bytes @ 0x10
  5304  0030                     	ds	1
  5305  0031                     ??_EMC1001_SetTempHighLimit:	
  5306  0031                     ??_EMC1001_SetTempLowLimit:	
  5307                           ; 1 bytes @ 0x11
  5308                           
  5309  0031                     EMC1001_MASK1@data:	
  5310                           ; 1 bytes @ 0x11
  5311                           
  5312  0031                     EMC1001_StandbyMode@data:	
  5313                           ; 1 bytes @ 0x11
  5314                           
  5315  0031                     EMC1001_THERM2@data:	
  5316                           ; 1 bytes @ 0x11
  5317                           
  5318                           
  5319                           ; 1 bytes @ 0x11
  5320  0031                     	ds	1
  5321  0032                     __div_to_l_@cntr:	
  5322  0032                     ___wmul@multiplicand:	
  5323                           ; 1 bytes @ 0x12
  5324                           
  5325  0032                     ___llmod@dividend:	
  5326                           ; 2 bytes @ 0x12
  5327                           
  5328                           
  5329                           ; 4 bytes @ 0x12
  5330  0032                     	ds	1
  5331  0033                     __div_to_l_@exp1:	
  5332                           
  5333                           ; 1 bytes @ 0x13
  5334  0033                     	ds	1
  5335  0034                     ??___wmul:	
  5336  0034                     ___wmul@product:	
  5337                           ; 1 bytes @ 0x14
  5338                           
  5339                           
  5340                           ; 2 bytes @ 0x14
  5341  0034                     	ds	1
  5342  0035                     EMC1001_SetTempHighLimit@HB:	
  5343  0035                     EMC1001_SetTempLowLimit@HB:	
  5344                           ; 1 bytes @ 0x15
  5345                           
  5346                           
  5347                           ; 1 bytes @ 0x15
  5348  0035                     	ds	1
  5349  0036                     ??___llmod:	
  5350  0036                     ?___ftmul:	
  5351                           ; 1 bytes @ 0x16
  5352                           
  5353  0036                     ___ftmul@f1:	
  5354                           ; 3 bytes @ 0x16
  5355                           
  5356                           
  5357                           ; 3 bytes @ 0x16
  5358  0036                     	ds	1
  5359  0037                     ___llmod@counter:	
  5360                           
  5361                           ; 1 bytes @ 0x17
  5362  0037                     	ds	2
  5363  0039                     ___ftmul@f2:	
  5364                           
  5365                           ; 3 bytes @ 0x19
  5366  0039                     	ds	3
  5367  003C                     ??___ftmul:	
  5368                           
  5369                           ; 1 bytes @ 0x1C
  5370  003C                     	ds	4
  5371  0040                     ___ftmul@exp:	
  5372                           
  5373                           ; 1 bytes @ 0x20
  5374  0040                     	ds	1
  5375  0041                     ___ftmul@f3_as_product:	
  5376                           
  5377                           ; 3 bytes @ 0x21
  5378  0041                     	ds	3
  5379  0044                     ___ftmul@cntr:	
  5380                           
  5381                           ; 1 bytes @ 0x24
  5382  0044                     	ds	1
  5383  0045                     ___ftmul@sign:	
  5384                           
  5385                           ; 1 bytes @ 0x25
  5386  0045                     	ds	1
  5387  0046                     ?_fround:	
  5388  0046                     ?_scale:	
  5389                           ; 3 bytes @ 0x26
  5390                           
  5391                           
  5392                           ; 3 bytes @ 0x26
  5393  0046                     	ds	3
  5394  0049                     ??_fround:	
  5395  0049                     ??_scale:	
  5396                           ; 1 bytes @ 0x29
  5397                           
  5398                           
  5399                           ; 1 bytes @ 0x29
  5400  0049                     	ds	2
  5401  004B                     _scale$1382:	
  5402                           
  5403                           ; 3 bytes @ 0x2B
  5404  004B                     	ds	2
  5405  004D                     _fround$1381:	
  5406                           
  5407                           ; 3 bytes @ 0x2D
  5408  004D                     	ds	1
  5409  004E                     scale@scl:	
  5410                           
  5411                           ; 1 bytes @ 0x2E
  5412  004E                     	ds	1
  5413  004F                     ?___fttol:	
  5414  004F                     ___fttol@f1:	
  5415                           ; 4 bytes @ 0x2F
  5416                           
  5417                           
  5418                           ; 3 bytes @ 0x2F
  5419  004F                     	ds	1
  5420  0050                     _fround$1380:	
  5421                           
  5422                           ; 3 bytes @ 0x30
  5423  0050                     	ds	3
  5424  0053                     ??___fttol:	
  5425  0053                     fround@prec:	
  5426                           ; 1 bytes @ 0x33
  5427                           
  5428                           
  5429                           ; 1 bytes @ 0x33
  5430  0053                     	ds	1
  5431  0054                     ?___ftadd:	
  5432  0054                     ___ftadd@f1:	
  5433                           ; 3 bytes @ 0x34
  5434                           
  5435                           
  5436                           ; 3 bytes @ 0x34
  5437  0054                     	ds	3
  5438  0057                     ___fttol@sign1:	
  5439  0057                     ___ftadd@f2:	
  5440                           ; 1 bytes @ 0x37
  5441                           
  5442                           
  5443                           ; 3 bytes @ 0x37
  5444  0057                     	ds	1
  5445  0058                     ___fttol@lval:	
  5446                           
  5447                           ; 4 bytes @ 0x38
  5448  0058                     	ds	2
  5449  005A                     ??___ftadd:	
  5450                           
  5451                           ; 1 bytes @ 0x3A
  5452  005A                     	ds	2
  5453  005C                     ___fttol@exp1:	
  5454                           
  5455                           ; 1 bytes @ 0x3C
  5456  005C                     	ds	2
  5457  005E                     ___ftadd@sign:	
  5458                           
  5459                           ; 1 bytes @ 0x3E
  5460  005E                     	ds	1
  5461  005F                     ___ftadd@exp2:	
  5462                           
  5463                           ; 1 bytes @ 0x3F
  5464  005F                     	ds	1
  5465  0060                     ___ftadd@exp1:	
  5466                           
  5467                           ; 1 bytes @ 0x40
  5468  0060                     	ds	1
  5469  0061                     ?___ftsub:	
  5470  0061                     ___ftsub@f2:	
  5471                           ; 3 bytes @ 0x41
  5472                           
  5473                           
  5474                           ; 3 bytes @ 0x41
  5475  0061                     	ds	3
  5476  0064                     ___ftsub@f1:	
  5477                           
  5478                           ; 3 bytes @ 0x44
  5479  0064                     	ds	3
  5480  0067                     ??_printf:	
  5481  0067                     ??___ftsub:	
  5482                           ; 1 bytes @ 0x47
  5483                           
  5484                           
  5485                           ; 1 bytes @ 0x47
  5486  0067                     	ds	6
  5487  006D                     ??_EMC1001_PrintTemp:	
  5488                           
  5489                           ; 1 bytes @ 0x4D
  5490  006D                     	ds	2
  5491                           
  5492                           	psect	maintext
  5493  14E8                     __pmaintext:	
  5494 ;;
  5495 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5496 ;;
  5497 ;; *************** function _main *****************
  5498 ;; Defined at:
  5499 ;;		line 10 in file "main.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : B1F/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;Total ram usage:        2 bytes
  5518 ;; Hardware stack levels required when called:    8
  5519 ;; This function calls:
  5520 ;;		_EMC1001_MASK1
  5521 ;;		_EMC1001_PrintInfo
  5522 ;;		_EMC1001_PrintTemp
  5523 ;;		_EMC1001_SMBusTimeout
  5524 ;;		_EMC1001_SetConversionRate
  5525 ;;		_EMC1001_SetTempHighLimit
  5526 ;;		_EMC1001_SetTempLowLimit
  5527 ;;		_EMC1001_SetThermHysteresis
  5528 ;;		_EMC1001_SetThermLimit
  5529 ;;		_EMC1001_StandbyMode
  5530 ;;		_EMC1001_THERM2
  5531 ;;		_SYSTEM_Initialize
  5532 ;;		_printf
  5533 ;;		_puts
  5534 ;; This function is called by:
  5535 ;;		Startup code after reset
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           
  5540                           ;psect for function _main
  5541  14E8                     _main:	
  5542                           
  5543                           ;main.c: 13: SYSTEM_Initialize();
  5544                           
  5545                           ;incstack = 0
  5546                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5547  14E8  319F  277D  3194   	fcall	_SYSTEM_Initialize
  5548                           
  5549                           ;main.c: 14: (INTCONbits.GIE = 1);
  5550  14EB  178B               	bsf	11,7	;volatile
  5551                           
  5552                           ;main.c: 15: (INTCONbits.PEIE = 1);
  5553  14EC  170B               	bsf	11,6	;volatile
  5554                           
  5555                           ;main.c: 18: do { LATAbits.LATA0 = 0; } while(0);
  5556  14ED  0020               	movlb	0	; select bank0
  5557  14EE  1016               	bcf	22,0	;volatile
  5558                           
  5559                           ;main.c: 19: do { LATAbits.LATA1 = 0; } while(0);
  5560  14EF  1096               	bcf	22,1	;volatile
  5561                           
  5562                           ;main.c: 20: do { LATAbits.LATA2 = 0; } while(0);
  5563  14F0  1116               	bcf	22,2	;volatile
  5564                           
  5565                           ;main.c: 21: do { LATAbits.LATA3 = 0; } while(0);
  5566  14F1  1196               	bcf	22,3	;volatile
  5567                           
  5568                           ;main.c: 24: EMC1001_SetConversionRate(0x05);
  5569  14F2  3005               	movlw	5
  5570  14F3  319F  2789  3194   	fcall	_EMC1001_SetConversionRate
  5571                           
  5572                           ;main.c: 25: EMC1001_SetThermLimit(30);
  5573  14F6  301E               	movlw	30
  5574  14F7  319F  2768  3194   	fcall	_EMC1001_SetThermLimit
  5575                           
  5576                           ;main.c: 26: EMC1001_SetThermHysteresis(3);
  5577  14FA  3003               	movlw	3
  5578  14FB  319F  275E  3194   	fcall	_EMC1001_SetThermHysteresis
  5579                           
  5580                           ;main.c: 27: EMC1001_SMBusTimeout(0);
  5581  14FE  3000               	movlw	0
  5582  14FF  3188  2003  3194   	fcall	_EMC1001_SMBusTimeout
  5583                           
  5584                           ;main.c: 28: EMC1001_MASK1(0);
  5585  1502  3000               	movlw	0
  5586  1503  3190  2046  3194   	fcall	_EMC1001_MASK1
  5587                           
  5588                           ;main.c: 29: EMC1001_StandbyMode(0);
  5589  1506  3000               	movlw	0
  5590  1507  3190  2067  3194   	fcall	_EMC1001_StandbyMode
  5591                           
  5592                           ;main.c: 30: EMC1001_THERM2(0);
  5593  150A  3000               	movlw	0
  5594  150B  3190  2088  3194   	fcall	_EMC1001_THERM2
  5595                           
  5596                           ;main.c: 31: EMC1001_SetTempHighLimit(29,25);
  5597  150E  3019               	movlw	25
  5598  150F  0021               	movlb	1	; select bank1
  5599  1510  00E2               	movwf	??_main^(0+128)
  5600  1511  0862               	movf	??_main^(0+128),w
  5601  1512  0020               	movlb	0	; select bank0
  5602  1513  00B0               	movwf	EMC1001_SetTempHighLimit@LB
  5603  1514  301D               	movlw	29
  5604  1515  3191  2144  3194   	fcall	_EMC1001_SetTempHighLimit
  5605                           
  5606                           ;main.c: 32: EMC1001_SetTempLowLimit(26,75);
  5607  1518  304B               	movlw	75
  5608  1519  0021               	movlb	1	; select bank1
  5609  151A  00E2               	movwf	??_main^(0+128)
  5610  151B  0862               	movf	??_main^(0+128),w
  5611  151C  0020               	movlb	0	; select bank0
  5612  151D  00B0               	movwf	EMC1001_SetTempLowLimit@LB
  5613  151E  301A               	movlw	26
  5614  151F  3191  2174  3194   	fcall	_EMC1001_SetTempLowLimit
  5615  1522                     l4628:	
  5616                           ;main.c: 35: while (1)
  5617                           
  5618                           
  5619                           ;main.c: 36: {
  5620                           ;main.c: 37: printf("\x0C");
  5621  1522  30F0               	movlw	low (STR_1| (0+32768))
  5622  1523  0021               	movlb	1	; select bank1
  5623  1524  00A0               	movwf	printf@f^(0+128)
  5624  1525  309A               	movlw	high (STR_1| (0+32768))
  5625  1526  00A1               	movwf	(printf@f^(0+128)+1)
  5626  1527  3180  203E  3194   	fcall	_printf
  5627                           
  5628                           ;main.c: 38: puts("Microchip EMC1001 Temperature Sensor Demo");
  5629  152A  3018               	movlw	low (STR_2| (0+32768))
  5630  152B  0020               	movlb	0	; select bank0
  5631  152C  00A5               	movwf	puts@s
  5632  152D  3099               	movlw	high (STR_2| (0+32768))
  5633  152E  00A6               	movwf	puts@s+1
  5634  152F  3190  2000  3194   	fcall	_puts
  5635                           
  5636                           ;main.c: 39: puts("MPLABXpress LED2=read indicator, LED3=EMC1001 ALARM1, LED4=EMC1001 AL
      +                          ARM2\n");
  5637  1532  3020               	movlw	low (STR_3| (0+32768))
  5638  1533  0020               	movlb	0	; select bank0
  5639  1534  00A5               	movwf	puts@s
  5640  1535  3098               	movlw	high (STR_3| (0+32768))
  5641  1536  00A6               	movwf	puts@s+1
  5642  1537  3190  2000  3194   	fcall	_puts
  5643                           
  5644                           ;main.c: 41: do { LATAbits.LATA0 = 1; } while(0);
  5645  153A  0020               	movlb	0	; select bank0
  5646  153B  1416               	bsf	22,0	;volatile
  5647                           
  5648                           ;main.c: 42: EMC1001_PrintInfo();
  5649  153C  318B  2376  3194   	fcall	_EMC1001_PrintInfo
  5650                           
  5651                           ;main.c: 43: EMC1001_PrintTemp();
  5652  153F  3194  2430  3194   	fcall	_EMC1001_PrintTemp
  5653                           
  5654                           ;main.c: 44: do { LATAbits.LATA0 = 0; } while(0);
  5655  1542  0020               	movlb	0	; select bank0
  5656  1543  1016               	bcf	22,0	;volatile
  5657                           
  5658                           ;main.c: 46: LATAbits.LATA1=~PORTAbits.RA7;
  5659  1544  1003               	clrc
  5660  1545  1F8C               	btfss	12,7	;volatile
  5661  1546  1403               	setc
  5662  1547  1C03               	btfss	3,0
  5663  1548  2D4C               	goto	u6370
  5664  1549  0020               	movlb	0	; select bank0
  5665  154A  1496               	bsf	22,1	;volatile
  5666  154B  2D4E               	goto	l4640
  5667  154C                     u6370:	
  5668  154C  0020               	movlb	0	; select bank0
  5669  154D  1096               	bcf	22,1	;volatile
  5670  154E                     l4640:	
  5671                           
  5672                           ;main.c: 47: LATAbits.LATA2=~PORTAbits.RA6;
  5673  154E  1003               	clrc
  5674  154F  1F0C               	btfss	12,6	;volatile
  5675  1550  1403               	setc
  5676  1551  1C03               	btfss	3,0
  5677  1552  2D56               	goto	u6390
  5678  1553  0020               	movlb	0	; select bank0
  5679  1554  1516               	bsf	22,2	;volatile
  5680  1555  2D58               	goto	l4642
  5681  1556                     u6390:	
  5682  1556  0020               	movlb	0	; select bank0
  5683  1557  1116               	bcf	22,2	;volatile
  5684  1558                     l4642:	
  5685                           
  5686                           ;main.c: 49: _delay((unsigned long)((1000)*(1000000/4000.0)));
  5687  1558  3002               	movlw	2
  5688  1559  0021               	movlb	1	; select bank1
  5689  155A  00E3               	movwf	(??_main^(0+128)+1)
  5690  155B  3045               	movlw	69
  5691  155C  00E2               	movwf	??_main^(0+128)
  5692  155D  30A9               	movlw	169
  5693  155E                     u6417:	
  5694  155E  0B89               	decfsz	9,f
  5695  155F  2D5E               	goto	u6417
  5696  1560  0BE2               	decfsz	??_main^(0+128),f
  5697  1561  2D5E               	goto	u6417
  5698  1562  0BE3               	decfsz	(??_main^(0+128)+1),f
  5699  1563  2D5E               	goto	u6417
  5700  1564  3200               	nop2
  5701  1565  2D22               	goto	l4628
  5702  1566                     __end_of_main:	
  5703                           
  5704                           	psect	text1
  5705  1000                     __ptext1:	
  5706 ;; *************** function _puts *****************
  5707 ;; Defined at:
  5708 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/puts.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  5711 ;;		 -> STR_3(75), STR_2(42), 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  2    5[BANK0 ] int 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:        2 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    6
  5730 ;; This function calls:
  5731 ;;		_cputs
  5732 ;;		_putch
  5733 ;; This function is called by:
  5734 ;;		_main
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function _puts
  5740  1000                     _puts:	
  5741                           
  5742                           ;incstack = 0
  5743                           ; Regs used in _puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5744  1000  0020               	movlb	0	; select bank0
  5745  1001  0826               	movf	puts@s+1,w
  5746  1002  00A3               	movwf	cputs@s+1
  5747  1003  0825               	movf	puts@s,w
  5748  1004  00A2               	movwf	cputs@s
  5749  1005  319F  27B9  3190   	fcall	_cputs
  5750  1008  300A               	movlw	10
  5751  1009  319F  273F         	fcall	_putch
  5752  100B  0008               	return
  5753  100C                     __end_of_puts:	
  5754                           
  5755                           	psect	text2
  5756  1FB9                     __ptext2:	
  5757 ;; *************** function _cputs *****************
  5758 ;; Defined at:
  5759 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/cputs.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  5762 ;;		 -> STR_3(75), STR_2(42), 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      void 
  5767 ;; Registers used:
  5768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;Total ram usage:        3 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    5
  5781 ;; This function calls:
  5782 ;;		_putch
  5783 ;; This function is called by:
  5784 ;;		_puts
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _cputs
  5790  1FB9                     _cputs:	
  5791  1FB9                     l4500:	
  5792                           ;incstack = 0
  5793                           ; Regs used in _cputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5794                           
  5795  1FB9  0020               	movlb	0	; select bank0
  5796  1FBA  0822               	movf	cputs@s,w
  5797  1FBB  0084               	movwf	4
  5798  1FBC  0823               	movf	cputs@s+1,w
  5799  1FBD  0085               	movwf	5
  5800  1FBE  0012               	moviw fsr0++
  5801  1FBF  1903               	btfsc	3,2
  5802  1FC0  0008               	return
  5803  1FC1  0020               	movlb	0	; select bank0
  5804  1FC2  0822               	movf	cputs@s,w
  5805  1FC3  0084               	movwf	4
  5806  1FC4  0823               	movf	cputs@s+1,w
  5807  1FC5  0085               	movwf	5
  5808  1FC6  0800               	movf	0,w	;code access
  5809  1FC7  319F  273F  319F   	fcall	_putch
  5810  1FCA  3001               	movlw	1
  5811  1FCB  0020               	movlb	0	; select bank0
  5812  1FCC  07A2               	addwf	cputs@s,f
  5813  1FCD  3000               	movlw	0
  5814  1FCE  3DA3               	addwfc	cputs@s+1,f
  5815  1FCF  2FB9               	goto	l4500
  5816  1FD0                     __end_of_cputs:	
  5817                           
  5818                           	psect	text3
  5819  1F7D                     __ptext3:	
  5820 ;; *************** function _SYSTEM_Initialize *****************
  5821 ;; Defined at:
  5822 ;;		line 82 in file "mcc_generated_files/mcc.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;		None
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0, pclath, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;Total ram usage:        0 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    4
  5843 ;; This function calls:
  5844 ;;		_EUSART_Initialize
  5845 ;;		_I2C2_Initialize
  5846 ;;		_OSCILLATOR_Initialize
  5847 ;;		_PIN_MANAGER_Initialize
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function _SYSTEM_Initialize
  5855  1F7D                     _SYSTEM_Initialize:	
  5856                           
  5857                           ;mcc.c: 85: PIN_MANAGER_Initialize();
  5858                           
  5859                           ;incstack = 0
  5860                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5861  1F7D  3192  22AF  319F   	fcall	_PIN_MANAGER_Initialize
  5862                           
  5863                           ;mcc.c: 86: OSCILLATOR_Initialize();
  5864  1F80  3187  27F7  319F   	fcall	_OSCILLATOR_Initialize
  5865                           
  5866                           ;mcc.c: 87: I2C2_Initialize();
  5867  1F83  319F  27E8  319F   	fcall	_I2C2_Initialize
  5868                           
  5869                           ;mcc.c: 88: EUSART_Initialize();
  5870  1F86  319F  2772         	fcall	_EUSART_Initialize
  5871  1F88  0008               	return
  5872  1F89                     __end_of_SYSTEM_Initialize:	
  5873                           
  5874                           	psect	text4
  5875  12AF                     __ptext4:	
  5876 ;; *************** function _PIN_MANAGER_Initialize *****************
  5877 ;; Defined at:
  5878 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  state           1    0[BANK0 ] unsigned char 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      void 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;Total ram usage:        1 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    3
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_SYSTEM_Initialize
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           
  5907                           ;psect for function _PIN_MANAGER_Initialize
  5908  12AF                     _PIN_MANAGER_Initialize:	
  5909                           
  5910                           ;pin_manager.c: 56: LATA = 0x00;
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5914  12AF  0020               	movlb	0	; select bank0
  5915  12B0  0196               	clrf	22	;volatile
  5916                           
  5917                           ;pin_manager.c: 57: LATB = 0x00;
  5918  12B1  0197               	clrf	23	;volatile
  5919                           
  5920                           ;pin_manager.c: 58: LATC = 0x01;
  5921  12B2  3001               	movlw	1
  5922  12B3  0098               	movwf	24	;volatile
  5923                           
  5924                           ;pin_manager.c: 63: TRISA = 0xF0;
  5925  12B4  30F0               	movlw	240
  5926  12B5  0091               	movwf	17	;volatile
  5927                           
  5928                           ;pin_manager.c: 64: TRISB = 0xFF;
  5929  12B6  30FF               	movlw	255
  5930  12B7  0092               	movwf	18	;volatile
  5931                           
  5932                           ;pin_manager.c: 65: TRISC = 0xFE;
  5933  12B8  30FE               	movlw	254
  5934  12B9  0093               	movwf	19	;volatile
  5935                           
  5936                           ;pin_manager.c: 70: ANSELC = 0xE7;
  5937  12BA  30E7               	movlw	231
  5938  12BB  003E               	movlb	30	; select bank30
  5939  12BC  00CE               	movwf	78	;volatile
  5940                           
  5941                           ;pin_manager.c: 71: ANSELB = 0xFF;
  5942  12BD  30FF               	movlw	255
  5943  12BE  00C3               	movwf	67	;volatile
  5944                           
  5945                           ;pin_manager.c: 72: ANSELA = 0x30;
  5946  12BF  3030               	movlw	48
  5947  12C0  00B8               	movwf	56	;volatile
  5948                           
  5949                           ;pin_manager.c: 77: WPUE = 0x08;
  5950  12C1  3008               	movlw	8
  5951  12C2  00E5               	movwf	101	;volatile
  5952                           
  5953                           ;pin_manager.c: 78: WPUB = 0xFF;
  5954  12C3  30FF               	movlw	255
  5955  12C4  00C4               	movwf	68	;volatile
  5956                           
  5957                           ;pin_manager.c: 79: WPUA = 0xF0;
  5958  12C5  30F0               	movlw	240
  5959  12C6  00B9               	movwf	57	;volatile
  5960                           
  5961                           ;pin_manager.c: 80: WPUC = 0xE7;
  5962  12C7  30E7               	movlw	231
  5963  12C8  00CF               	movwf	79	;volatile
  5964                           
  5965                           ;pin_manager.c: 85: ODCONA = 0x00;
  5966  12C9  01BA               	clrf	58	;volatile
  5967                           
  5968                           ;pin_manager.c: 86: ODCONB = 0x00;
  5969  12CA  01C5               	clrf	69	;volatile
  5970                           
  5971                           ;pin_manager.c: 87: ODCONC = 0x00;
  5972  12CB  01D0               	clrf	80	;volatile
  5973                           
  5974                           ;pin_manager.c: 94: bool state = GIE;
  5975  12CC  3000               	movlw	0
  5976  12CD  1B8B               	btfsc	11,7	;volatile
  5977  12CE  3001               	movlw	1
  5978  12CF  0020               	movlb	0	; select bank0
  5979  12D0  00A0               	movwf	PIN_MANAGER_Initialize@state
  5980                           
  5981                           ;pin_manager.c: 95: GIE = 0;
  5982  12D1  138B               	bcf	11,7	;volatile
  5983                           
  5984                           ;pin_manager.c: 96: PPSLOCK = 0x55;
  5985  12D2  3055               	movlw	85
  5986  12D3  003D               	movlb	29	; select bank29
  5987  12D4  008F               	movwf	15	;volatile
  5988                           
  5989                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
  5990  12D5  30AA               	movlw	170
  5991  12D6  008F               	movwf	15	;volatile
  5992                           
  5993                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x00;
  5994  12D7  100F               	bcf	15,0	;volatile
  5995                           
  5996                           ;pin_manager.c: 100: RC0PPS = 0x10;
  5997  12D8  3010               	movlw	16
  5998  12D9  003E               	movlb	30	; select bank30
  5999  12DA  00A0               	movwf	32	;volatile
  6000                           
  6001                           ;pin_manager.c: 101: RC3PPS = 0x17;
  6002  12DB  3017               	movlw	23
  6003  12DC  00A3               	movwf	35	;volatile
  6004                           
  6005                           ;pin_manager.c: 102: SSP2DATPPSbits.SSP2DATPPS = 0x13;
  6006  12DD  003D               	movlb	29	; select bank29
  6007  12DE  0849               	movf	73,w	;volatile
  6008  12DF  39E0               	andlw	-32
  6009  12E0  3813               	iorlw	19
  6010  12E1  00C9               	movwf	73	;volatile
  6011                           
  6012                           ;pin_manager.c: 103: SSP2CLKPPSbits.SSP2CLKPPS = 0x14;
  6013  12E2  0848               	movf	72,w	;volatile
  6014  12E3  39E0               	andlw	-32
  6015  12E4  3814               	iorlw	20
  6016  12E5  00C8               	movwf	72	;volatile
  6017                           
  6018                           ;pin_manager.c: 104: RC4PPS = 0x16;
  6019  12E6  3016               	movlw	22
  6020  12E7  003E               	movlb	30	; select bank30
  6021  12E8  00A4               	movwf	36	;volatile
  6022                           
  6023                           ;pin_manager.c: 106: PPSLOCK = 0x55;
  6024  12E9  3055               	movlw	85
  6025  12EA  003D               	movlb	29	; select bank29
  6026  12EB  008F               	movwf	15	;volatile
  6027                           
  6028                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
  6029  12EC  30AA               	movlw	170
  6030  12ED  008F               	movwf	15	;volatile
  6031                           
  6032                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x01;
  6033  12EE  140F               	bsf	15,0	;volatile
  6034                           
  6035                           ;pin_manager.c: 110: GIE = state;
  6036  12EF  0020               	movlb	0	; select bank0
  6037  12F0  1C20               	btfss	PIN_MANAGER_Initialize@state,0
  6038  12F1  2AF4               	goto	u5590
  6039  12F2  178B               	bsf	11,7	;volatile
  6040  12F3  0008               	return
  6041  12F4                     u5590:	
  6042  12F4  138B               	bcf	11,7	;volatile
  6043  12F5  0008               	return
  6044  12F6                     __end_of_PIN_MANAGER_Initialize:	
  6045                           
  6046                           	psect	text5
  6047  07F7                     __ptext5:	
  6048 ;; *************** function _OSCILLATOR_Initialize *****************
  6049 ;; Defined at:
  6050 ;;		line 91 in file "mcc_generated_files/mcc.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  1    wreg      void 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    3
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_SYSTEM_Initialize
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function _OSCILLATOR_Initialize
  6080  07F7                     _OSCILLATOR_Initialize:	
  6081                           
  6082                           ;mcc.c: 94: OSCCON1 = 0x62;
  6083                           
  6084                           ;incstack = 0
  6085                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6086  07F7  3062               	movlw	98
  6087  07F8  0031               	movlb	17	; select bank17
  6088  07F9  008D               	movwf	13	;volatile
  6089                           
  6090                           ;mcc.c: 96: OSCCON3 = 0x00;
  6091  07FA  018F               	clrf	15	;volatile
  6092                           
  6093                           ;mcc.c: 98: OSCEN = 0x00;
  6094  07FB  0191               	clrf	17	;volatile
  6095                           
  6096                           ;mcc.c: 100: OSCFRQ = 0x02;
  6097  07FC  3002               	movlw	2
  6098  07FD  0093               	movwf	19	;volatile
  6099                           
  6100                           ;mcc.c: 102: OSCTUNE = 0x00;
  6101  07FE  0192               	clrf	18	;volatile
  6102  07FF  0008               	return
  6103  0800                     __end_of_OSCILLATOR_Initialize:	
  6104                           
  6105                           	psect	text6
  6106  1FE8                     __ptext6:	
  6107 ;; *************** function _I2C2_Initialize *****************
  6108 ;; Defined at:
  6109 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;		None
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;		None
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      void 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;Total ram usage:        1 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    3
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_SYSTEM_Initialize
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _I2C2_Initialize
  6139  1FE8                     _I2C2_Initialize:	
  6140                           
  6141                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  6142                           
  6143                           ;incstack = 0
  6144                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  6145  1FE8  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  6146  1FE9  0020               	movlb	0	; select bank0
  6147  1FEA  00A0               	movwf	??_I2C2_Initialize
  6148  1FEB  0820               	movf	??_I2C2_Initialize,w
  6149  1FEC  00F1               	movwf	_i2c2_object+1
  6150                           
  6151                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  6152  1FED  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  6153  1FEE  00A0               	movwf	??_I2C2_Initialize
  6154  1FEF  0820               	movf	??_I2C2_Initialize,w
  6155  1FF0  00F0               	movwf	_i2c2_object
  6156                           
  6157                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  6158  1FF1  14F2               	bsf	_i2c2_object+2,1
  6159                           
  6160                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  6161  1FF2  1072               	bcf	_i2c2_object+2,0
  6162                           
  6163                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  6164  1FF3  01F4               	clrf	_i2c2_object+4
  6165                           
  6166                           ;i2c2.c: 208: SSP2STAT = 0x80;
  6167  1FF4  3080               	movlw	128
  6168  1FF5  0023               	movlb	3	; select bank3
  6169  1FF6  0099               	movwf	25	;volatile
  6170                           
  6171                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  6172  1FF7  3028               	movlw	40
  6173  1FF8  009A               	movwf	26	;volatile
  6174                           
  6175                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  6176  1FF9  019C               	clrf	28	;volatile
  6177                           
  6178                           ;i2c2.c: 214: SSP2ADD = 0x04;
  6179  1FFA  3004               	movlw	4
  6180  1FFB  0097               	movwf	23	;volatile
  6181                           
  6182                           ;i2c2.c: 218: PIR3bits.SSP2IF = 0;
  6183  1FFC  002E               	movlb	14	; select bank14
  6184  1FFD  110F               	bcf	15,2	;volatile
  6185                           
  6186                           ;i2c2.c: 220: PIE3bits.SSP2IE = 1;
  6187  1FFE  1519               	bsf	25,2	;volatile
  6188  1FFF  0008               	return
  6189  2000                     __end_of_I2C2_Initialize:	
  6190                           
  6191                           	psect	text7
  6192  1F72                     __ptext7:	
  6193 ;; *************** function _EUSART_Initialize *****************
  6194 ;; Defined at:
  6195 ;;		line 55 in file "mcc_generated_files/eusart.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;		None
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;		None
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, status,2
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;Total ram usage:        0 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    3
  6216 ;; This function calls:
  6217 ;;		Nothing
  6218 ;; This function is called by:
  6219 ;;		_SYSTEM_Initialize
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function _EUSART_Initialize
  6225  1F72                     _EUSART_Initialize:	
  6226                           
  6227                           ;eusart.c: 60: BAUD1CON = 0x08;
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6231  1F72  3008               	movlw	8
  6232  1F73  0022               	movlb	2	; select bank2
  6233  1F74  009F               	movwf	31	;volatile
  6234                           
  6235                           ;eusart.c: 63: RC1STA = 0x80;
  6236  1F75  3080               	movlw	128
  6237  1F76  009D               	movwf	29	;volatile
  6238                           
  6239                           ;eusart.c: 66: TX1STA = 0x24;
  6240  1F77  3024               	movlw	36
  6241  1F78  009E               	movwf	30	;volatile
  6242                           
  6243                           ;eusart.c: 69: SP1BRGL = 0x19;
  6244  1F79  3019               	movlw	25
  6245  1F7A  009B               	movwf	27	;volatile
  6246                           
  6247                           ;eusart.c: 72: SP1BRGH = 0x00;
  6248  1F7B  019C               	clrf	28	;volatile
  6249  1F7C  0008               	return
  6250  1F7D                     __end_of_EUSART_Initialize:	
  6251                           
  6252                           	psect	text8
  6253  1088                     __ptext8:	
  6254 ;; *************** function _EMC1001_THERM2 *****************
  6255 ;; Defined at:
  6256 ;;		line 185 in file "EMC1001.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  enable          1    wreg     unsigned char 
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;  enable          1   16[BANK0 ] unsigned char 
  6261 ;;  data            1   17[BANK0 ] unsigned char 
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      unsigned char 
  6264 ;; Registers used:
  6265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;Total ram usage:        3 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    5
  6278 ;; This function calls:
  6279 ;;		_EMC1001_Read
  6280 ;;		_EMC1001_Write
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _EMC1001_THERM2
  6288  1088                     _EMC1001_THERM2:	
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in _EMC1001_THERM2: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6292                           ;EMC1001_THERM2@enable stored from wreg
  6293  1088  0020               	movlb	0	; select bank0
  6294  1089  00B0               	movwf	EMC1001_THERM2@enable
  6295                           
  6296                           ;EMC1001.c: 187: uint8_t data;
  6297                           ;EMC1001.c: 188: EMC1001_Read(0x03,&data);
  6298  108A  3031               	movlw	(low (EMC1001_THERM2@data| 0))& (0+255)
  6299  108B  00AF               	movwf	??_EMC1001_THERM2
  6300  108C  082F               	movf	??_EMC1001_THERM2,w
  6301  108D  00A7               	movwf	EMC1001_Read@pData
  6302  108E  3003               	movlw	3
  6303  108F  3193  233E  3190   	fcall	_EMC1001_Read
  6304                           
  6305                           ;EMC1001.c: 190: if (enable)
  6306  1092  0020               	movlb	0	; select bank0
  6307  1093  0830               	movf	EMC1001_THERM2@enable,w
  6308  1094  1903               	btfsc	3,2
  6309  1095  289F               	goto	l3832
  6310                           
  6311                           ;EMC1001.c: 191: return EMC1001_Write(0x03,data|0b00100000);
  6312                           ;	Return value of _EMC1001_THERM2 is never used
  6313  1096  0831               	movf	EMC1001_THERM2@data,w
  6314  1097  3820               	iorlw	32
  6315  1098  00AF               	movwf	??_EMC1001_THERM2
  6316  1099  082F               	movf	??_EMC1001_THERM2,w
  6317  109A  00A7               	movwf	EMC1001_Write@data
  6318  109B  3003               	movlw	3
  6319  109C  3192  22F6         	fcall	_EMC1001_Write
  6320  109E  0008               	return
  6321  109F                     l3832:	
  6322                           
  6323                           ;EMC1001.c: 192: else
  6324                           ;EMC1001.c: 193: return EMC1001_Write(0x03,data&0b11011111);
  6325                           ;	Return value of _EMC1001_THERM2 is never used
  6326  109F  0020               	movlb	0	; select bank0
  6327  10A0  0831               	movf	EMC1001_THERM2@data,w
  6328  10A1  39DF               	andlw	223
  6329  10A2  00AF               	movwf	??_EMC1001_THERM2
  6330  10A3  082F               	movf	??_EMC1001_THERM2,w
  6331  10A4  00A7               	movwf	EMC1001_Write@data
  6332  10A5  3003               	movlw	3
  6333  10A6  3192  22F6         	fcall	_EMC1001_Write
  6334  10A8  0008               	return
  6335  10A9                     __end_of_EMC1001_THERM2:	
  6336                           
  6337                           	psect	text9
  6338  1067                     __ptext9:	
  6339 ;; *************** function _EMC1001_StandbyMode *****************
  6340 ;; Defined at:
  6341 ;;		line 170 in file "EMC1001.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  enable          1    wreg     unsigned char 
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  enable          1   16[BANK0 ] unsigned char 
  6346 ;;  data            1   17[BANK0 ] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      unsigned char 
  6349 ;; Registers used:
  6350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;Total ram usage:        3 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    5
  6363 ;; This function calls:
  6364 ;;		_EMC1001_Read
  6365 ;;		_EMC1001_Write
  6366 ;; This function is called by:
  6367 ;;		_main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _EMC1001_StandbyMode
  6373  1067                     _EMC1001_StandbyMode:	
  6374                           
  6375                           ;incstack = 0
  6376                           ; Regs used in _EMC1001_StandbyMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6377                           ;EMC1001_StandbyMode@enable stored from wreg
  6378  1067  0020               	movlb	0	; select bank0
  6379  1068  00B0               	movwf	EMC1001_StandbyMode@enable
  6380                           
  6381                           ;EMC1001.c: 172: uint8_t data;
  6382                           ;EMC1001.c: 173: EMC1001_Read(0x03,&data);
  6383  1069  3031               	movlw	(low (EMC1001_StandbyMode@data| 0))& (0+255)
  6384  106A  00AF               	movwf	??_EMC1001_StandbyMode
  6385  106B  082F               	movf	??_EMC1001_StandbyMode,w
  6386  106C  00A7               	movwf	EMC1001_Read@pData
  6387  106D  3003               	movlw	3
  6388  106E  3193  233E  3190   	fcall	_EMC1001_Read
  6389                           
  6390                           ;EMC1001.c: 175: if (enable)
  6391  1071  0020               	movlb	0	; select bank0
  6392  1072  0830               	movf	EMC1001_StandbyMode@enable,w
  6393  1073  1903               	btfsc	3,2
  6394  1074  287E               	goto	l3818
  6395                           
  6396                           ;EMC1001.c: 176: return EMC1001_Write(0x03,data|0b01000000);
  6397                           ;	Return value of _EMC1001_StandbyMode is never used
  6398  1075  0831               	movf	EMC1001_StandbyMode@data,w
  6399  1076  3840               	iorlw	64
  6400  1077  00AF               	movwf	??_EMC1001_StandbyMode
  6401  1078  082F               	movf	??_EMC1001_StandbyMode,w
  6402  1079  00A7               	movwf	EMC1001_Write@data
  6403  107A  3003               	movlw	3
  6404  107B  3192  22F6         	fcall	_EMC1001_Write
  6405  107D  0008               	return
  6406  107E                     l3818:	
  6407                           
  6408                           ;EMC1001.c: 177: else
  6409                           ;EMC1001.c: 178: return EMC1001_Write(0x03,data&0b10111111);
  6410                           ;	Return value of _EMC1001_StandbyMode is never used
  6411  107E  0020               	movlb	0	; select bank0
  6412  107F  0831               	movf	EMC1001_StandbyMode@data,w
  6413  1080  39BF               	andlw	191
  6414  1081  00AF               	movwf	??_EMC1001_StandbyMode
  6415  1082  082F               	movf	??_EMC1001_StandbyMode,w
  6416  1083  00A7               	movwf	EMC1001_Write@data
  6417  1084  3003               	movlw	3
  6418  1085  3192  22F6         	fcall	_EMC1001_Write
  6419  1087  0008               	return
  6420  1088                     __end_of_EMC1001_StandbyMode:	
  6421                           
  6422                           	psect	text10
  6423  1F68                     __ptext10:	
  6424 ;; *************** function _EMC1001_SetThermLimit *****************
  6425 ;; Defined at:
  6426 ;;		line 117 in file "EMC1001.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  data            1    wreg     unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  data            1   16[BANK0 ] unsigned char 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      unsigned char 
  6433 ;; Registers used:
  6434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;Total ram usage:        2 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    5
  6447 ;; This function calls:
  6448 ;;		_EMC1001_Write
  6449 ;; This function is called by:
  6450 ;;		_main
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _EMC1001_SetThermLimit
  6456  1F68                     _EMC1001_SetThermLimit:	
  6457                           
  6458                           ;incstack = 0
  6459                           ; Regs used in _EMC1001_SetThermLimit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6460                           ;EMC1001_SetThermLimit@data stored from wreg
  6461  1F68  0020               	movlb	0	; select bank0
  6462  1F69  00B0               	movwf	EMC1001_SetThermLimit@data
  6463                           
  6464                           ;EMC1001.c: 119: return EMC1001_Write(0x20,data);
  6465                           ;	Return value of _EMC1001_SetThermLimit is never used
  6466  1F6A  0830               	movf	EMC1001_SetThermLimit@data,w
  6467  1F6B  00AF               	movwf	??_EMC1001_SetThermLimit
  6468  1F6C  082F               	movf	??_EMC1001_SetThermLimit,w
  6469  1F6D  00A7               	movwf	EMC1001_Write@data
  6470  1F6E  3020               	movlw	32
  6471  1F6F  3192  22F6         	fcall	_EMC1001_Write
  6472  1F71  0008               	return
  6473  1F72                     __end_of_EMC1001_SetThermLimit:	
  6474                           
  6475                           	psect	text11
  6476  1F5E                     __ptext11:	
  6477 ;; *************** function _EMC1001_SetThermHysteresis *****************
  6478 ;; Defined at:
  6479 ;;		line 126 in file "EMC1001.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  data            1    wreg     unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  data            1   16[BANK0 ] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      unsigned char 
  6486 ;; Registers used:
  6487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;Total ram usage:        2 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    5
  6500 ;; This function calls:
  6501 ;;		_EMC1001_Write
  6502 ;; This function is called by:
  6503 ;;		_main
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _EMC1001_SetThermHysteresis
  6509  1F5E                     _EMC1001_SetThermHysteresis:	
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _EMC1001_SetThermHysteresis: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6513                           ;EMC1001_SetThermHysteresis@data stored from wreg
  6514  1F5E  0020               	movlb	0	; select bank0
  6515  1F5F  00B0               	movwf	EMC1001_SetThermHysteresis@data
  6516                           
  6517                           ;EMC1001.c: 128: return EMC1001_Write(0x21,data);
  6518                           ;	Return value of _EMC1001_SetThermHysteresis is never used
  6519  1F60  0830               	movf	EMC1001_SetThermHysteresis@data,w
  6520  1F61  00AF               	movwf	??_EMC1001_SetThermHysteresis
  6521  1F62  082F               	movf	??_EMC1001_SetThermHysteresis,w
  6522  1F63  00A7               	movwf	EMC1001_Write@data
  6523  1F64  3021               	movlw	33
  6524  1F65  3192  22F6         	fcall	_EMC1001_Write
  6525  1F67  0008               	return
  6526  1F68                     __end_of_EMC1001_SetThermHysteresis:	
  6527                           
  6528                           	psect	text12
  6529  1174                     __ptext12:	
  6530 ;; *************** function _EMC1001_SetTempLowLimit *****************
  6531 ;; Defined at:
  6532 ;;		line 105 in file "EMC1001.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  HB              1    wreg     unsigned char 
  6535 ;;  LB              1   16[BANK0 ] unsigned char 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  HB              1   21[BANK0 ] unsigned char 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      unsigned char 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;Total ram usage:        6 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		_EMC1001_Write
  6556 ;;		___awdiv
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _EMC1001_SetTempLowLimit
  6564  1174                     _EMC1001_SetTempLowLimit:	
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _EMC1001_SetTempLowLimit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6568                           ;EMC1001_SetTempLowLimit@HB stored from wreg
  6569  1174  0020               	movlb	0	; select bank0
  6570  1175  00B5               	movwf	EMC1001_SetTempLowLimit@HB
  6571                           
  6572                           ;EMC1001.c: 107: EMC1001_Write(0x07,HB);
  6573  1176  0835               	movf	EMC1001_SetTempLowLimit@HB,w
  6574  1177  00B1               	movwf	??_EMC1001_SetTempLowLimit
  6575  1178  0831               	movf	??_EMC1001_SetTempLowLimit,w
  6576  1179  00A7               	movwf	EMC1001_Write@data
  6577  117A  3007               	movlw	7
  6578  117B  3192  22F6  3191   	fcall	_EMC1001_Write
  6579                           
  6580                           ;EMC1001.c: 108: if (LB!=0) LB=(LB/25)<<6;
  6581  117E  0020               	movlb	0	; select bank0
  6582  117F  0830               	movf	EMC1001_SetTempLowLimit@LB,w
  6583  1180  1903               	btfsc	3,2
  6584  1181  299C               	goto	l3852
  6585  1182  3019               	movlw	25
  6586  1183  00A7               	movwf	___awdiv@divisor
  6587  1184  3000               	movlw	0
  6588  1185  00A8               	movwf	___awdiv@divisor+1
  6589  1186  0830               	movf	EMC1001_SetTempLowLimit@LB,w
  6590  1187  00B1               	movwf	??_EMC1001_SetTempLowLimit
  6591  1188  01B2               	clrf	??_EMC1001_SetTempLowLimit+1
  6592  1189  0831               	movf	??_EMC1001_SetTempLowLimit,w
  6593  118A  00A9               	movwf	___awdiv@dividend
  6594  118B  0832               	movf	??_EMC1001_SetTempLowLimit+1,w
  6595  118C  00AA               	movwf	___awdiv@dividend+1
  6596  118D  3193  238B  3191   	fcall	___awdiv
  6597  1190  0020               	movlb	0	; select bank0
  6598  1191  0827               	movf	?___awdiv,w
  6599  1192  00B3               	movwf	??_EMC1001_SetTempLowLimit+2
  6600  1193  3005               	movlw	5
  6601  1194                     u5035:	
  6602  1194  35B3               	lslf	??_EMC1001_SetTempLowLimit+2,f
  6603  1195  3EFF               	addlw	-1
  6604  1196  1D03               	skipz
  6605  1197  2994               	goto	u5035
  6606  1198  3533               	lslf	??_EMC1001_SetTempLowLimit+2,w
  6607  1199  00B4               	movwf	??_EMC1001_SetTempLowLimit+3
  6608  119A  0834               	movf	??_EMC1001_SetTempLowLimit+3,w
  6609  119B  00B0               	movwf	EMC1001_SetTempLowLimit@LB
  6610  119C                     l3852:	
  6611                           
  6612                           ;EMC1001.c: 109: EMC1001_Write(0x08,LB);
  6613  119C  0830               	movf	EMC1001_SetTempLowLimit@LB,w
  6614  119D  00B1               	movwf	??_EMC1001_SetTempLowLimit
  6615  119E  0831               	movf	??_EMC1001_SetTempLowLimit,w
  6616  119F  00A7               	movwf	EMC1001_Write@data
  6617  11A0  3008               	movlw	8
  6618  11A1  3192  22F6         	fcall	_EMC1001_Write
  6619  11A3  0008               	return
  6620  11A4                     __end_of_EMC1001_SetTempLowLimit:	
  6621                           ;EMC1001.c: 110: return 1;
  6622                           ;	Return value of _EMC1001_SetTempLowLimit is never used
  6623                           
  6624                           
  6625                           	psect	text13
  6626  1144                     __ptext13:	
  6627 ;; *************** function _EMC1001_SetTempHighLimit *****************
  6628 ;; Defined at:
  6629 ;;		line 93 in file "EMC1001.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  HB              1    wreg     unsigned char 
  6632 ;;  LB              1   16[BANK0 ] unsigned char 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  HB              1   21[BANK0 ] unsigned char 
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      unsigned char 
  6637 ;; Registers used:
  6638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6644 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;Total ram usage:        6 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    5
  6651 ;; This function calls:
  6652 ;;		_EMC1001_Write
  6653 ;;		___awdiv
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _EMC1001_SetTempHighLimit
  6661  1144                     _EMC1001_SetTempHighLimit:	
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _EMC1001_SetTempHighLimit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6665                           ;EMC1001_SetTempHighLimit@HB stored from wreg
  6666  1144  0020               	movlb	0	; select bank0
  6667  1145  00B5               	movwf	EMC1001_SetTempHighLimit@HB
  6668                           
  6669                           ;EMC1001.c: 95: EMC1001_Write(0x05,HB);
  6670  1146  0835               	movf	EMC1001_SetTempHighLimit@HB,w
  6671  1147  00B1               	movwf	??_EMC1001_SetTempHighLimit
  6672  1148  0831               	movf	??_EMC1001_SetTempHighLimit,w
  6673  1149  00A7               	movwf	EMC1001_Write@data
  6674  114A  3005               	movlw	5
  6675  114B  3192  22F6  3191   	fcall	_EMC1001_Write
  6676                           
  6677                           ;EMC1001.c: 96: if (LB!=0) LB=(LB/25)<<6;
  6678  114E  0020               	movlb	0	; select bank0
  6679  114F  0830               	movf	EMC1001_SetTempHighLimit@LB,w
  6680  1150  1903               	btfsc	3,2
  6681  1151  296C               	goto	l3842
  6682  1152  3019               	movlw	25
  6683  1153  00A7               	movwf	___awdiv@divisor
  6684  1154  3000               	movlw	0
  6685  1155  00A8               	movwf	___awdiv@divisor+1
  6686  1156  0830               	movf	EMC1001_SetTempHighLimit@LB,w
  6687  1157  00B1               	movwf	??_EMC1001_SetTempHighLimit
  6688  1158  01B2               	clrf	??_EMC1001_SetTempHighLimit+1
  6689  1159  0831               	movf	??_EMC1001_SetTempHighLimit,w
  6690  115A  00A9               	movwf	___awdiv@dividend
  6691  115B  0832               	movf	??_EMC1001_SetTempHighLimit+1,w
  6692  115C  00AA               	movwf	___awdiv@dividend+1
  6693  115D  3193  238B  3191   	fcall	___awdiv
  6694  1160  0020               	movlb	0	; select bank0
  6695  1161  0827               	movf	?___awdiv,w
  6696  1162  00B3               	movwf	??_EMC1001_SetTempHighLimit+2
  6697  1163  3005               	movlw	5
  6698  1164                     u5015:	
  6699  1164  35B3               	lslf	??_EMC1001_SetTempHighLimit+2,f
  6700  1165  3EFF               	addlw	-1
  6701  1166  1D03               	skipz
  6702  1167  2964               	goto	u5015
  6703  1168  3533               	lslf	??_EMC1001_SetTempHighLimit+2,w
  6704  1169  00B4               	movwf	??_EMC1001_SetTempHighLimit+3
  6705  116A  0834               	movf	??_EMC1001_SetTempHighLimit+3,w
  6706  116B  00B0               	movwf	EMC1001_SetTempHighLimit@LB
  6707  116C                     l3842:	
  6708                           
  6709                           ;EMC1001.c: 97: EMC1001_Write(0x06,LB);
  6710  116C  0830               	movf	EMC1001_SetTempHighLimit@LB,w
  6711  116D  00B1               	movwf	??_EMC1001_SetTempHighLimit
  6712  116E  0831               	movf	??_EMC1001_SetTempHighLimit,w
  6713  116F  00A7               	movwf	EMC1001_Write@data
  6714  1170  3006               	movlw	6
  6715  1171  3192  22F6         	fcall	_EMC1001_Write
  6716  1173  0008               	return
  6717  1174                     __end_of_EMC1001_SetTempHighLimit:	
  6718                           ;EMC1001.c: 98: return 1;
  6719                           ;	Return value of _EMC1001_SetTempHighLimit is never used
  6720                           
  6721                           
  6722                           	psect	text14
  6723  1F89                     __ptext14:	
  6724 ;; *************** function _EMC1001_SetConversionRate *****************
  6725 ;; Defined at:
  6726 ;;		line 81 in file "EMC1001.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  data            1    wreg     unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  data            1   16[BANK0 ] unsigned char 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      unsigned char 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;Total ram usage:        2 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		_EMC1001_Write
  6749 ;; This function is called by:
  6750 ;;		_main
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _EMC1001_SetConversionRate
  6756  1F89                     _EMC1001_SetConversionRate:	
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _EMC1001_SetConversionRate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6760                           ;EMC1001_SetConversionRate@data stored from wreg
  6761  1F89  0020               	movlb	0	; select bank0
  6762  1F8A  00B0               	movwf	EMC1001_SetConversionRate@data
  6763                           
  6764                           ;EMC1001.c: 83: if(data>=0x00 && data<=0x09)
  6765  1F8B  300A               	movlw	10
  6766  1F8C  0230               	subwf	EMC1001_SetConversionRate@data,w
  6767  1F8D  1803               	skipnc
  6768  1F8E  0008               	return
  6769                           
  6770                           ;EMC1001.c: 84: return EMC1001_Write(0x04,data);
  6771                           ;	Return value of _EMC1001_SetConversionRate is never used
  6772  1F8F  0830               	movf	EMC1001_SetConversionRate@data,w
  6773  1F90  00AF               	movwf	??_EMC1001_SetConversionRate
  6774  1F91  082F               	movf	??_EMC1001_SetConversionRate,w
  6775  1F92  00A7               	movwf	EMC1001_Write@data
  6776  1F93  3004               	movlw	4
  6777  1F94  3192  22F6         	fcall	_EMC1001_Write
  6778                           
  6779                           ;EMC1001.c: 85: else
  6780                           ;EMC1001.c: 86: return 0;
  6781                           ;	Return value of _EMC1001_SetConversionRate is never used
  6782  1F96  0008               	return
  6783  1F97                     __end_of_EMC1001_SetConversionRate:	
  6784                           
  6785                           	psect	text15
  6786  0803                     __ptext15:	
  6787 ;; *************** function _EMC1001_SMBusTimeout *****************
  6788 ;; Defined at:
  6789 ;;		line 144 in file "EMC1001.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  enable          1    wreg     unsigned char 
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  enable          1   16[BANK0 ] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      unsigned char 
  6796 ;; Registers used:
  6797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;Total ram usage:        2 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    5
  6810 ;; This function calls:
  6811 ;;		_EMC1001_Write
  6812 ;; This function is called by:
  6813 ;;		_main
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           
  6818                           ;psect for function _EMC1001_SMBusTimeout
  6819  0803                     _EMC1001_SMBusTimeout:	
  6820                           
  6821                           ;incstack = 0
  6822                           ; Regs used in _EMC1001_SMBusTimeout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6823                           ;EMC1001_SMBusTimeout@enable stored from wreg
  6824  0803  0020               	movlb	0	; select bank0
  6825  0804  00B0               	movwf	EMC1001_SMBusTimeout@enable
  6826                           
  6827                           ;EMC1001.c: 146: if (enable)
  6828  0805  0830               	movf	EMC1001_SMBusTimeout@enable,w
  6829  0806  1903               	btfsc	3,2
  6830  0807  2810               	goto	l3790
  6831                           
  6832                           ;EMC1001.c: 147: return EMC1001_Write(0x22,0b10000000);
  6833                           ;	Return value of _EMC1001_SMBusTimeout is never used
  6834  0808  3080               	movlw	128
  6835  0809  00AF               	movwf	??_EMC1001_SMBusTimeout
  6836  080A  082F               	movf	??_EMC1001_SMBusTimeout,w
  6837  080B  00A7               	movwf	EMC1001_Write@data
  6838  080C  3022               	movlw	34
  6839  080D  3192  22F6         	fcall	_EMC1001_Write
  6840  080F  0008               	return
  6841  0810                     l3790:	
  6842                           
  6843                           ;EMC1001.c: 148: else
  6844                           ;EMC1001.c: 149: return EMC1001_Write(0x22,0b00000000);
  6845                           ;	Return value of _EMC1001_SMBusTimeout is never used
  6846  0810  0020               	movlb	0	; select bank0
  6847  0811  01A7               	clrf	EMC1001_Write@data
  6848  0812  3022               	movlw	34
  6849  0813  3192  22F6         	fcall	_EMC1001_Write
  6850  0815  0008               	return
  6851  0816                     __end_of_EMC1001_SMBusTimeout:	
  6852                           
  6853                           	psect	text16
  6854  1430                     __ptext16:	
  6855 ;; *************** function _EMC1001_PrintTemp *****************
  6856 ;; Defined at:
  6857 ;;		line 233 in file "EMC1001.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;		None
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  templo          1   44[BANK1 ] unsigned char 
  6862 ;;  temp            1   43[BANK1 ] char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  1    wreg      void 
  6865 ;; Registers used:
  6866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;Total ram usage:        6 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    7
  6879 ;; This function calls:
  6880 ;;		_EMC1001_Read
  6881 ;;		___wmul
  6882 ;;		_printf
  6883 ;; This function is called by:
  6884 ;;		_main
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _EMC1001_PrintTemp
  6890  1430                     _EMC1001_PrintTemp:	
  6891                           
  6892                           ;EMC1001.c: 235: int8_t temp;
  6893                           ;EMC1001.c: 236: uint8_t templo;
  6894                           ;EMC1001.c: 238: if (EMC1001_Read(0x00, (uint8_t*)&temp)) {
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _EMC1001_PrintTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6898  1430  30CB               	movlw	(low (EMC1001_PrintTemp@temp| 0))& (0+255)
  6899  1431  0020               	movlb	0	; select bank0
  6900  1432  00ED               	movwf	??_EMC1001_PrintTemp
  6901  1433  086D               	movf	??_EMC1001_PrintTemp,w
  6902  1434  00A7               	movwf	EMC1001_Read@pData
  6903  1435  3000               	movlw	0
  6904  1436  3193  233E  3194   	fcall	_EMC1001_Read
  6905  1439  3A00               	xorlw	0
  6906  143A  1903               	skipnz
  6907  143B  0008               	return
  6908                           
  6909                           ;EMC1001.c: 239: EMC1001_Read(0x02, &templo);
  6910  143C  30CC               	movlw	(low (EMC1001_PrintTemp@templo| 0))& (0+255)
  6911  143D  0020               	movlb	0	; select bank0
  6912  143E  00ED               	movwf	??_EMC1001_PrintTemp
  6913  143F  086D               	movf	??_EMC1001_PrintTemp,w
  6914  1440  00A7               	movwf	EMC1001_Read@pData
  6915  1441  3002               	movlw	2
  6916  1442  3193  233E  3194   	fcall	_EMC1001_Read
  6917                           
  6918                           ;EMC1001.c: 240: templo = templo >> 6;
  6919  1445  0021               	movlb	1	; select bank1
  6920  1446  084C               	movf	EMC1001_PrintTemp@templo^(0+128),w
  6921  1447  0020               	movlb	0	; select bank0
  6922  1448  00ED               	movwf	??_EMC1001_PrintTemp
  6923  1449  3006               	movlw	6
  6924  144A                     u6355:	
  6925  144A  36ED               	lsrf	??_EMC1001_PrintTemp,f
  6926  144B  0B89               	decfsz	9,f
  6927  144C  2C4A               	goto	u6355
  6928  144D  086D               	movf	??_EMC1001_PrintTemp,w
  6929  144E  00EE               	movwf	??_EMC1001_PrintTemp+1
  6930  144F  086E               	movf	??_EMC1001_PrintTemp+1,w
  6931  1450  0021               	movlb	1	; select bank1
  6932  1451  00CC               	movwf	EMC1001_PrintTemp@templo^(0+128)
  6933                           
  6934                           ;EMC1001.c: 241: if (temp < 0) templo = 3-templo;
  6935  1452  1FCB               	btfss	EMC1001_PrintTemp@temp^(0+128),7
  6936  1453  2C5C               	goto	l4592
  6937  1454  034C               	decf	EMC1001_PrintTemp@templo^(0+128),w
  6938  1455  3AFF               	xorlw	255
  6939  1456  3E03               	addlw	3
  6940  1457  0020               	movlb	0	; select bank0
  6941  1458  00ED               	movwf	??_EMC1001_PrintTemp
  6942  1459  086D               	movf	??_EMC1001_PrintTemp,w
  6943  145A  0021               	movlb	1	; select bank1
  6944  145B  00CC               	movwf	EMC1001_PrintTemp@templo^(0+128)
  6945  145C                     l4592:	
  6946                           
  6947                           ;EMC1001.c: 242: printf("Current Temperature:\t%d.%d C\n", temp, templo*25);
  6948  145C  084C               	movf	EMC1001_PrintTemp@templo^(0+128),w
  6949  145D  0020               	movlb	0	; select bank0
  6950  145E  00ED               	movwf	??_EMC1001_PrintTemp
  6951  145F  01EE               	clrf	??_EMC1001_PrintTemp+1
  6952  1460  086D               	movf	??_EMC1001_PrintTemp,w
  6953  1461  00B0               	movwf	___wmul@multiplier
  6954  1462  086E               	movf	??_EMC1001_PrintTemp+1,w
  6955  1463  00B1               	movwf	___wmul@multiplier+1
  6956  1464  3019               	movlw	25
  6957  1465  00B2               	movwf	___wmul@multiplicand
  6958  1466  3000               	movlw	0
  6959  1467  00B3               	movwf	___wmul@multiplicand+1
  6960  1468  3190  200C  3194   	fcall	___wmul
  6961  146B  0020               	movlb	0	; select bank0
  6962  146C  0831               	movf	?___wmul+1,w
  6963  146D  0021               	movlb	1	; select bank1
  6964  146E  00CA               	movwf	(_EMC1001_PrintTemp$1379+1)^(0+128)
  6965  146F  0020               	movlb	0	; select bank0
  6966  1470  0830               	movf	?___wmul,w
  6967  1471  0021               	movlb	1	; select bank1
  6968  1472  00C9               	movwf	_EMC1001_PrintTemp$1379^(0+128)
  6969                           
  6970                           ;EMC1001.c: 242: printf("Current Temperature:\t%d.%d C\n", temp, templo*25);
  6971  1473  30F9               	movlw	low (STR_19| (0+32768))
  6972  1474  00A0               	movwf	printf@f^(0+128)
  6973  1475  3099               	movlw	high (STR_19| (0+32768))
  6974  1476  00A1               	movwf	(printf@f^(0+128)+1)
  6975  1477  084B               	movf	EMC1001_PrintTemp@temp^(0+128),w
  6976  1478  00A2               	movwf	(?_printf^(0+128)+2)
  6977  1479  01A3               	clrf	((?_printf+1)^(0+128)+2)
  6978  147A  1BA2               	btfsc	(?_printf^(0+128)+2),7
  6979  147B  03A3               	decf	((?_printf+1)^(0+128)+2),f
  6980  147C  084A               	movf	(_EMC1001_PrintTemp$1379+1)^(0+128),w
  6981  147D  00A5               	movwf	((?_printf+1)^(0+128)+4)
  6982  147E  0849               	movf	_EMC1001_PrintTemp$1379^(0+128),w
  6983  147F  00A4               	movwf	(?_printf^(0+128)+4)
  6984  1480  3180  203E         	fcall	_printf
  6985  1482  0008               	return
  6986  1483                     __end_of_EMC1001_PrintTemp:	
  6987                           
  6988                           	psect	text17
  6989  0B76                     __ptext17:	
  6990 ;; *************** function _EMC1001_PrintInfo *****************
  6991 ;; Defined at:
  6992 ;;		line 199 in file "EMC1001.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;		None
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  cr              3   54[BANK1 ] float 
  6997 ;;  data            1   65[BANK1 ] unsigned char 
  6998 ;;  templo          1   64[BANK1 ] unsigned char 
  6999 ;;  temp            1   63[BANK1 ] char 
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;Total ram usage:       25 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    7
  7016 ;; This function calls:
  7017 ;;		_EMC1001_Read
  7018 ;;		___awtoft
  7019 ;;		___ftmul
  7020 ;;		___wmul
  7021 ;;		_printf
  7022 ;; This function is called by:
  7023 ;;		_main
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           
  7028                           ;psect for function _EMC1001_PrintInfo
  7029  0B76                     _EMC1001_PrintInfo:	
  7030                           
  7031                           ;EMC1001.c: 201: uint8_t data;
  7032                           ;EMC1001.c: 202: float cr=0;
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _EMC1001_PrintInfo: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7036  0B76  3000               	movlw	0
  7037  0B77  0021               	movlb	1	; select bank1
  7038  0B78  00D6               	movwf	EMC1001_PrintInfo@cr^(0+128)
  7039  0B79  3000               	movlw	0
  7040  0B7A  00D7               	movwf	(EMC1001_PrintInfo@cr+1)^(0+128)
  7041  0B7B  3000               	movlw	0
  7042  0B7C  00D8               	movwf	(EMC1001_PrintInfo@cr+2)^(0+128)
  7043                           
  7044                           ;EMC1001.c: 203: int8_t temp;
  7045                           ;EMC1001.c: 204: uint8_t templo;
  7046                           ;EMC1001.c: 206: if (EMC1001_Read(0xfd,&data)) printf("Product ID:\t\tEMC1001%s\n", data
      +                           ? "-1" : "");
  7047  0B7D  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7048  0B7E  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7049  0B7F  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7050  0B80  0020               	movlb	0	; select bank0
  7051  0B81  00A7               	movwf	EMC1001_Read@pData
  7052  0B82  30FD               	movlw	253
  7053  0B83  3193  233E  318B   	fcall	_EMC1001_Read
  7054  0B86  3A00               	xorlw	0
  7055  0B87  1903               	skipnz
  7056  0B88  2BA0               	goto	l4520
  7057  0B89  0021               	movlb	1	; select bank1
  7058  0B8A  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7059  0B8B  1D03               	btfss	3,2
  7060  0B8C  2B91               	goto	l4516
  7061  0B8D  3031               	movlw	low ((STR_18+26)| (0+32768))
  7062  0B8E  00D9               	movwf	_EMC1001_PrintInfo$778^(0+128)
  7063  0B8F  309A               	movlw	high ((STR_18+26)| (0+32768))
  7064  0B90  2B94               	goto	L1
  7065  0B91                     l4516:	
  7066  0B91  30ED               	movlw	low (STR_5| (0+32768))
  7067  0B92  00D9               	movwf	_EMC1001_PrintInfo$778^(0+128)
  7068  0B93  309A               	movlw	high (STR_5| (0+32768))
  7069  0B94                     L1:	
  7070  0B94  00DA               	movwf	(_EMC1001_PrintInfo$778^(0+128)+1)
  7071  0B95  3032               	movlw	low (STR_4| (0+32768))
  7072  0B96  00A0               	movwf	printf@f^(0+128)
  7073  0B97  309A               	movlw	high (STR_4| (0+32768))
  7074  0B98  00A1               	movwf	(printf@f^(0+128)+1)
  7075  0B99  085A               	movf	(_EMC1001_PrintInfo$778+1)^(0+128),w
  7076  0B9A  00A3               	movwf	((low ((?_printf| 0+2))+1))^(0+128)
  7077  0B9B  0859               	movf	_EMC1001_PrintInfo$778^(0+128),w
  7078  0B9C  00A2               	movwf	(low ((?_printf| 0+2)))^(0+128)
  7079  0B9D  3180  203E  318B   	fcall	_printf
  7080  0BA0                     l4520:	
  7081                           
  7082                           ;EMC1001.c: 207: if (EMC1001_Read(0xfe,&data)) printf("Manufacturer ID:\t0x%X\n", data);
  7083  0BA0  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7084  0BA1  0021               	movlb	1	; select bank1
  7085  0BA2  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7086  0BA3  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7087  0BA4  0020               	movlb	0	; select bank0
  7088  0BA5  00A7               	movwf	EMC1001_Read@pData
  7089  0BA6  30FE               	movlw	254
  7090  0BA7  3193  233E  318B   	fcall	_EMC1001_Read
  7091  0BAA  3A00               	xorlw	0
  7092  0BAB  1903               	skipnz
  7093  0BAC  2BBC               	goto	l4524
  7094  0BAD  3062               	movlw	low (STR_7| (0+32768))
  7095  0BAE  0021               	movlb	1	; select bank1
  7096  0BAF  00A0               	movwf	printf@f^(0+128)
  7097  0BB0  309A               	movlw	high (STR_7| (0+32768))
  7098  0BB1  00A1               	movwf	(printf@f^(0+128)+1)
  7099  0BB2  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7100  0BB3  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7101  0BB4  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7102  0BB5  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7103  0BB6  00A2               	movwf	(?_printf^(0+128)+2)
  7104  0BB7  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7105  0BB8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7106  0BB9  3180  203E  318B   	fcall	_printf
  7107  0BBC                     l4524:	
  7108                           
  7109                           ;EMC1001.c: 208: if (EMC1001_Read(0xff,&data)) printf("Revision :\t\t%d\n", data);
  7110  0BBC  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7111  0BBD  0021               	movlb	1	; select bank1
  7112  0BBE  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7113  0BBF  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7114  0BC0  0020               	movlb	0	; select bank0
  7115  0BC1  00A7               	movwf	EMC1001_Read@pData
  7116  0BC2  30FF               	movlw	255
  7117  0BC3  3193  233E  318B   	fcall	_EMC1001_Read
  7118  0BC6  3A00               	xorlw	0
  7119  0BC7  1903               	skipnz
  7120  0BC8  2BD8               	goto	l4528
  7121  0BC9  30C5               	movlw	low (STR_8| (0+32768))
  7122  0BCA  0021               	movlb	1	; select bank1
  7123  0BCB  00A0               	movwf	printf@f^(0+128)
  7124  0BCC  309A               	movlw	high (STR_8| (0+32768))
  7125  0BCD  00A1               	movwf	(printf@f^(0+128)+1)
  7126  0BCE  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7127  0BCF  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7128  0BD0  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7129  0BD1  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7130  0BD2  00A2               	movwf	(?_printf^(0+128)+2)
  7131  0BD3  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7132  0BD4  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7133  0BD5  3180  203E  318B   	fcall	_printf
  7134  0BD8                     l4528:	
  7135                           
  7136                           ;EMC1001.c: 209: if (EMC1001_Read(0x01,&data)) printf("Status Reg: \t\t0x%X (BUSY=%d THI
      +                          GH=%d TLOW=%d THRM=%d)\n",data,data>>7,data>>6&1,data>>5&1,data&1);
  7137  0BD8  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7138  0BD9  0021               	movlb	1	; select bank1
  7139  0BDA  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7140  0BDB  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7141  0BDC  0020               	movlb	0	; select bank0
  7142  0BDD  00A7               	movwf	EMC1001_Read@pData
  7143  0BDE  3001               	movlw	1
  7144  0BDF  3193  233E  318B   	fcall	_EMC1001_Read
  7145  0BE2  3A00               	xorlw	0
  7146  0BE3  1903               	skipnz
  7147  0BE4  2C25               	goto	l4532
  7148  0BE5  30AC               	movlw	low (STR_9| (0+32768))
  7149  0BE6  0021               	movlb	1	; select bank1
  7150  0BE7  00A0               	movwf	printf@f^(0+128)
  7151  0BE8  3098               	movlw	high (STR_9| (0+32768))
  7152  0BE9  00A1               	movwf	(printf@f^(0+128)+1)
  7153  0BEA  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7154  0BEB  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7155  0BEC  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7156  0BED  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7157  0BEE  00A2               	movwf	(?_printf^(0+128)+2)
  7158  0BEF  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7159  0BF0  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7160  0BF1  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7161  0BF2  00CB               	movwf	(??_EMC1001_PrintInfo+2)^(0+128)
  7162  0BF3  3007               	movlw	7
  7163  0BF4                     u6155:	
  7164  0BF4  36CB               	lsrf	(??_EMC1001_PrintInfo+2)^(0+128),f
  7165  0BF5  0B89               	decfsz	9,f
  7166  0BF6  2BF4               	goto	u6155
  7167  0BF7  084B               	movf	(??_EMC1001_PrintInfo+2)^(0+128),w
  7168  0BF8  00CC               	movwf	(??_EMC1001_PrintInfo+3)^(0+128)
  7169  0BF9  01CD               	clrf	((??_EMC1001_PrintInfo+3)^(0+128)+1)
  7170  0BFA  084C               	movf	(??_EMC1001_PrintInfo+3)^(0+128),w
  7171  0BFB  00A4               	movwf	(?_printf^(0+128)+4)
  7172  0BFC  084D               	movf	(??_EMC1001_PrintInfo+4)^(0+128),w
  7173  0BFD  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7174  0BFE  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7175  0BFF  00CE               	movwf	(??_EMC1001_PrintInfo+5)^(0+128)
  7176  0C00  3006               	movlw	6
  7177  0C01                     u6165:	
  7178  0C01  36CE               	lsrf	(??_EMC1001_PrintInfo+5)^(0+128),f
  7179  0C02  0B89               	decfsz	9,f
  7180  0C03  2C01               	goto	u6165
  7181  0C04  084E               	movf	(??_EMC1001_PrintInfo+5)^(0+128),w
  7182  0C05  3901               	andlw	1
  7183  0C06  00CF               	movwf	(??_EMC1001_PrintInfo+6)^(0+128)
  7184  0C07  01D0               	clrf	((??_EMC1001_PrintInfo+6)^(0+128)+1)
  7185  0C08  084F               	movf	(??_EMC1001_PrintInfo+6)^(0+128),w
  7186  0C09  00A6               	movwf	(?_printf^(0+128)+6)
  7187  0C0A  0850               	movf	(??_EMC1001_PrintInfo+7)^(0+128),w
  7188  0C0B  00A7               	movwf	((?_printf+1)^(0+128)+6)
  7189  0C0C  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7190  0C0D  00D1               	movwf	(??_EMC1001_PrintInfo+8)^(0+128)
  7191  0C0E  3005               	movlw	5
  7192  0C0F                     u6175:	
  7193  0C0F  36D1               	lsrf	(??_EMC1001_PrintInfo+8)^(0+128),f
  7194  0C10  0B89               	decfsz	9,f
  7195  0C11  2C0F               	goto	u6175
  7196  0C12  0851               	movf	(??_EMC1001_PrintInfo+8)^(0+128),w
  7197  0C13  3901               	andlw	1
  7198  0C14  00D2               	movwf	(??_EMC1001_PrintInfo+9)^(0+128)
  7199  0C15  01D3               	clrf	((??_EMC1001_PrintInfo+9)^(0+128)+1)
  7200  0C16  0852               	movf	(??_EMC1001_PrintInfo+9)^(0+128),w
  7201  0C17  00A8               	movwf	(?_printf^(0+128)+8)
  7202  0C18  0853               	movf	(??_EMC1001_PrintInfo+10)^(0+128),w
  7203  0C19  00A9               	movwf	((?_printf+1)^(0+128)+8)
  7204  0C1A  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7205  0C1B  3901               	andlw	1
  7206  0C1C  00D4               	movwf	(??_EMC1001_PrintInfo+11)^(0+128)
  7207  0C1D  01D5               	clrf	((??_EMC1001_PrintInfo+11)^(0+128)+1)
  7208  0C1E  0854               	movf	(??_EMC1001_PrintInfo+11)^(0+128),w
  7209  0C1F  00AA               	movwf	(?_printf^(0+128)+10)
  7210  0C20  0855               	movf	(??_EMC1001_PrintInfo+12)^(0+128),w
  7211  0C21  00AB               	movwf	((?_printf+1)^(0+128)+10)
  7212  0C22  3180  203E  318B   	fcall	_printf
  7213  0C25                     l4532:	
  7214                           
  7215                           ;EMC1001.c: 210: if (EMC1001_Read(0x03,&data)) printf("Configuration Reg: \t0x%X (MASK1=
      +                          %d RUN/STOP=%d ALERT/THERM2=%d)\n",data,data>>7,data>>6&1,data>>5&1);
  7216  0C25  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7217  0C26  0021               	movlb	1	; select bank1
  7218  0C27  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7219  0C28  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7220  0C29  0020               	movlb	0	; select bank0
  7221  0C2A  00A7               	movwf	EMC1001_Read@pData
  7222  0C2B  3003               	movlw	3
  7223  0C2C  3193  233E  318B   	fcall	_EMC1001_Read
  7224  0C2F  3A00               	xorlw	0
  7225  0C30  1903               	skipnz
  7226  0C31  2C6A               	goto	l4536
  7227  0C32  306B               	movlw	low (STR_10| (0+32768))
  7228  0C33  0021               	movlb	1	; select bank1
  7229  0C34  00A0               	movwf	printf@f^(0+128)
  7230  0C35  3098               	movlw	high (STR_10| (0+32768))
  7231  0C36  00A1               	movwf	(printf@f^(0+128)+1)
  7232  0C37  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7233  0C38  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7234  0C39  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7235  0C3A  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7236  0C3B  00A2               	movwf	(?_printf^(0+128)+2)
  7237  0C3C  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7238  0C3D  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7239  0C3E  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7240  0C3F  00CB               	movwf	(??_EMC1001_PrintInfo+2)^(0+128)
  7241  0C40  3007               	movlw	7
  7242  0C41                     u6195:	
  7243  0C41  36CB               	lsrf	(??_EMC1001_PrintInfo+2)^(0+128),f
  7244  0C42  0B89               	decfsz	9,f
  7245  0C43  2C41               	goto	u6195
  7246  0C44  084B               	movf	(??_EMC1001_PrintInfo+2)^(0+128),w
  7247  0C45  00CC               	movwf	(??_EMC1001_PrintInfo+3)^(0+128)
  7248  0C46  01CD               	clrf	((??_EMC1001_PrintInfo+3)^(0+128)+1)
  7249  0C47  084C               	movf	(??_EMC1001_PrintInfo+3)^(0+128),w
  7250  0C48  00A4               	movwf	(?_printf^(0+128)+4)
  7251  0C49  084D               	movf	(??_EMC1001_PrintInfo+4)^(0+128),w
  7252  0C4A  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7253  0C4B  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7254  0C4C  00CE               	movwf	(??_EMC1001_PrintInfo+5)^(0+128)
  7255  0C4D  3006               	movlw	6
  7256  0C4E                     u6205:	
  7257  0C4E  36CE               	lsrf	(??_EMC1001_PrintInfo+5)^(0+128),f
  7258  0C4F  0B89               	decfsz	9,f
  7259  0C50  2C4E               	goto	u6205
  7260  0C51  084E               	movf	(??_EMC1001_PrintInfo+5)^(0+128),w
  7261  0C52  3901               	andlw	1
  7262  0C53  00CF               	movwf	(??_EMC1001_PrintInfo+6)^(0+128)
  7263  0C54  01D0               	clrf	((??_EMC1001_PrintInfo+6)^(0+128)+1)
  7264  0C55  084F               	movf	(??_EMC1001_PrintInfo+6)^(0+128),w
  7265  0C56  00A6               	movwf	(?_printf^(0+128)+6)
  7266  0C57  0850               	movf	(??_EMC1001_PrintInfo+7)^(0+128),w
  7267  0C58  00A7               	movwf	((?_printf+1)^(0+128)+6)
  7268  0C59  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7269  0C5A  00D1               	movwf	(??_EMC1001_PrintInfo+8)^(0+128)
  7270  0C5B  3005               	movlw	5
  7271  0C5C                     u6215:	
  7272  0C5C  36D1               	lsrf	(??_EMC1001_PrintInfo+8)^(0+128),f
  7273  0C5D  0B89               	decfsz	9,f
  7274  0C5E  2C5C               	goto	u6215
  7275  0C5F  0851               	movf	(??_EMC1001_PrintInfo+8)^(0+128),w
  7276  0C60  3901               	andlw	1
  7277  0C61  00D2               	movwf	(??_EMC1001_PrintInfo+9)^(0+128)
  7278  0C62  01D3               	clrf	((??_EMC1001_PrintInfo+9)^(0+128)+1)
  7279  0C63  0852               	movf	(??_EMC1001_PrintInfo+9)^(0+128),w
  7280  0C64  00A8               	movwf	(?_printf^(0+128)+8)
  7281  0C65  0853               	movf	(??_EMC1001_PrintInfo+10)^(0+128),w
  7282  0C66  00A9               	movwf	((?_printf+1)^(0+128)+8)
  7283  0C67  3180  203E  318B   	fcall	_printf
  7284  0C6A                     l4536:	
  7285                           
  7286                           ;EMC1001.c: 211: if (EMC1001_Read(0x04, &data)){
  7287  0C6A  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7288  0C6B  0021               	movlb	1	; select bank1
  7289  0C6C  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7290  0C6D  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7291  0C6E  0020               	movlb	0	; select bank0
  7292  0C6F  00A7               	movwf	EMC1001_Read@pData
  7293  0C70  3004               	movlw	4
  7294  0C71  3193  233E  318B   	fcall	_EMC1001_Read
  7295  0C74  3A00               	xorlw	0
  7296  0C75  1903               	skipnz
  7297  0C76  2CC2               	goto	l4544
  7298                           
  7299                           ;EMC1001.c: 212: if (data<0x0A ) cr=(0x01<<data)*0.0625;
  7300  0C77  300A               	movlw	10
  7301  0C78  0021               	movlb	1	; select bank1
  7302  0C79  0261               	subwf	EMC1001_PrintInfo@data^(0+128),w
  7303  0C7A  1803               	skipnc
  7304  0C7B  2CAE               	goto	l4542
  7305  0C7C  3000               	movlw	0
  7306  0C7D  0020               	movlb	0	; select bank0
  7307  0C7E  00B6               	movwf	___ftmul@f1
  7308  0C7F  3080               	movlw	128
  7309  0C80  00B7               	movwf	___ftmul@f1+1
  7310  0C81  303D               	movlw	61
  7311  0C82  00B8               	movwf	___ftmul@f1+2
  7312  0C83  3001               	movlw	1
  7313  0C84  0021               	movlb	1	; select bank1
  7314  0C85  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7315  0C86  3000               	movlw	0
  7316  0C87  00CA               	movwf	(??_EMC1001_PrintInfo^(0+128)+1)
  7317  0C88  0A61               	incf	EMC1001_PrintInfo@data^(0+128),w
  7318  0C89  2C8C               	goto	u6244
  7319  0C8A                     u6245:	
  7320  0C8A  35C9               	lslf	??_EMC1001_PrintInfo^(0+128),f
  7321  0C8B  0DCA               	rlf	(??_EMC1001_PrintInfo^(0+128)+1),f
  7322  0C8C                     u6244:	
  7323  0C8C  0B89               	decfsz	9,f
  7324  0C8D  2C8A               	goto	u6245
  7325  0C8E  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7326  0C8F  0020               	movlb	0	; select bank0
  7327  0C90  00A8               	movwf	___awtoft@c
  7328  0C91  0021               	movlb	1	; select bank1
  7329  0C92  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7330  0C93  0020               	movlb	0	; select bank0
  7331  0C94  00A9               	movwf	___awtoft@c+1
  7332  0C95  3190  20A9  318B   	fcall	___awtoft
  7333  0C98  0020               	movlb	0	; select bank0
  7334  0C99  0828               	movf	?___awtoft,w
  7335  0C9A  00B9               	movwf	___ftmul@f2
  7336  0C9B  0829               	movf	?___awtoft+1,w
  7337  0C9C  00BA               	movwf	___ftmul@f2+1
  7338  0C9D  082A               	movf	?___awtoft+2,w
  7339  0C9E  00BB               	movwf	___ftmul@f2+2
  7340  0C9F  3188  2016  318B   	fcall	___ftmul
  7341  0CA2  0020               	movlb	0	; select bank0
  7342  0CA3  0836               	movf	?___ftmul,w
  7343  0CA4  0021               	movlb	1	; select bank1
  7344  0CA5  00D6               	movwf	EMC1001_PrintInfo@cr^(0+128)
  7345  0CA6  0020               	movlb	0	; select bank0
  7346  0CA7  0837               	movf	?___ftmul+1,w
  7347  0CA8  0021               	movlb	1	; select bank1
  7348  0CA9  00D7               	movwf	(EMC1001_PrintInfo@cr+1)^(0+128)
  7349  0CAA  0020               	movlb	0	; select bank0
  7350  0CAB  0838               	movf	?___ftmul+2,w
  7351  0CAC  0021               	movlb	1	; select bank1
  7352  0CAD  00D8               	movwf	(EMC1001_PrintInfo@cr+2)^(0+128)
  7353  0CAE                     l4542:	
  7354                           
  7355                           ;EMC1001.c: 213: printf("Conversion rate:\t0x%x (%.4f conversions per second)\n",data,cr
      +                          );
  7356  0CAE  30E3               	movlw	low (STR_11| (0+32768))
  7357  0CAF  00A0               	movwf	printf@f^(0+128)
  7358  0CB0  3098               	movlw	high (STR_11| (0+32768))
  7359  0CB1  00A1               	movwf	(printf@f^(0+128)+1)
  7360  0CB2  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7361  0CB3  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7362  0CB4  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7363  0CB5  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7364  0CB6  00A2               	movwf	(?_printf^(0+128)+2)
  7365  0CB7  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7366  0CB8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7367  0CB9  0856               	movf	EMC1001_PrintInfo@cr^(0+128),w
  7368  0CBA  00A4               	movwf	(?_printf^(0+128)+4)
  7369  0CBB  0857               	movf	(EMC1001_PrintInfo@cr+1)^(0+128),w
  7370  0CBC  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7371  0CBD  0858               	movf	(EMC1001_PrintInfo@cr+2)^(0+128),w
  7372  0CBE  00A6               	movwf	((?_printf+2)^(0+128)+4)
  7373  0CBF  3180  203E  318B   	fcall	_printf
  7374  0CC2                     l4544:	
  7375                           
  7376                           ;EMC1001.c: 214: }
  7377                           ;EMC1001.c: 215: if (EMC1001_Read(0x22,&data)) printf("SMBus TimeOut:\t\t%s\n", data>>7 
      +                          ? "Enabled":"Disabled");
  7378  0CC2  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7379  0CC3  0021               	movlb	1	; select bank1
  7380  0CC4  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7381  0CC5  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7382  0CC6  0020               	movlb	0	; select bank0
  7383  0CC7  00A7               	movwf	EMC1001_Read@pData
  7384  0CC8  3022               	movlw	34
  7385  0CC9  3193  233E  318B   	fcall	_EMC1001_Read
  7386  0CCC  3A00               	xorlw	0
  7387  0CCD  1903               	skipnz
  7388  0CCE  2CEC               	goto	l4554
  7389  0CCF  0021               	movlb	1	; select bank1
  7390  0CD0  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7391  0CD1  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7392  0CD2  3007               	movlw	7
  7393  0CD3                     u6265:	
  7394  0CD3  36C9               	lsrf	??_EMC1001_PrintInfo^(0+128),f
  7395  0CD4  0B89               	decfsz	9,f
  7396  0CD5  2CD3               	goto	u6265
  7397  0CD6  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7398  0CD7  1D03               	btfss	3,2
  7399  0CD8  2CDD               	goto	l4550
  7400  0CD9  30D5               	movlw	low (STR_14| (0+32768))
  7401  0CDA  00DB               	movwf	_EMC1001_PrintInfo$788^(0+128)
  7402  0CDB  309A               	movlw	high (STR_14| (0+32768))
  7403  0CDC  2CE0               	goto	L2
  7404  0CDD                     l4550:	
  7405  0CDD  30DE               	movlw	low (STR_13| (0+32768))
  7406  0CDE  00DB               	movwf	_EMC1001_PrintInfo$788^(0+128)
  7407  0CDF  309A               	movlw	high (STR_13| (0+32768))
  7408  0CE0                     L2:	
  7409  0CE0  00DC               	movwf	(_EMC1001_PrintInfo$788^(0+128)+1)
  7410  0CE1  308F               	movlw	low (STR_12| (0+32768))
  7411  0CE2  00A0               	movwf	printf@f^(0+128)
  7412  0CE3  309A               	movlw	high (STR_12| (0+32768))
  7413  0CE4  00A1               	movwf	(printf@f^(0+128)+1)
  7414  0CE5  085C               	movf	(_EMC1001_PrintInfo$788+1)^(0+128),w
  7415  0CE6  00A3               	movwf	((low ((?_printf| 0+2))+1))^(0+128)
  7416  0CE7  085B               	movf	_EMC1001_PrintInfo$788^(0+128),w
  7417  0CE8  00A2               	movwf	(low ((?_printf| 0+2)))^(0+128)
  7418  0CE9  3180  203E  318B   	fcall	_printf
  7419  0CEC                     l4554:	
  7420                           
  7421                           ;EMC1001.c: 216: if (EMC1001_Read(0x05, (uint8_t*)&temp)) {
  7422  0CEC  30DF               	movlw	(low (EMC1001_PrintInfo@temp| 0))& (0+255)
  7423  0CED  0021               	movlb	1	; select bank1
  7424  0CEE  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7425  0CEF  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7426  0CF0  0020               	movlb	0	; select bank0
  7427  0CF1  00A7               	movwf	EMC1001_Read@pData
  7428  0CF2  3005               	movlw	5
  7429  0CF3  3193  233E  318B   	fcall	_EMC1001_Read
  7430  0CF6  3A00               	xorlw	0
  7431  0CF7  1903               	skipnz
  7432  0CF8  2D37               	goto	l4564
  7433                           
  7434                           ;EMC1001.c: 217: EMC1001_Read(0x06, &templo);
  7435  0CF9  30E0               	movlw	(low (EMC1001_PrintInfo@templo| 0))& (0+255)
  7436  0CFA  0021               	movlb	1	; select bank1
  7437  0CFB  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7438  0CFC  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7439  0CFD  0020               	movlb	0	; select bank0
  7440  0CFE  00A7               	movwf	EMC1001_Read@pData
  7441  0CFF  3006               	movlw	6
  7442  0D00  3193  233E  318B   	fcall	_EMC1001_Read
  7443                           
  7444                           ;EMC1001.c: 218: templo = templo >> 6;
  7445  0D03  0021               	movlb	1	; select bank1
  7446  0D04  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7447  0D05  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7448  0D06  3006               	movlw	6
  7449  0D07                     u6295:	
  7450  0D07  36C9               	lsrf	??_EMC1001_PrintInfo^(0+128),f
  7451  0D08  0B89               	decfsz	9,f
  7452  0D09  2D07               	goto	u6295
  7453  0D0A  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7454  0D0B  00CA               	movwf	(??_EMC1001_PrintInfo+1)^(0+128)
  7455  0D0C  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7456  0D0D  00E0               	movwf	EMC1001_PrintInfo@templo^(0+128)
  7457                           
  7458                           ;EMC1001.c: 219: printf("Temperature high limit:\t%d.%d C\n", temp, templo*25);
  7459  0D0E  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7460  0D0F  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7461  0D10  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7462  0D11  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7463  0D12  0020               	movlb	0	; select bank0
  7464  0D13  00B0               	movwf	___wmul@multiplier
  7465  0D14  0021               	movlb	1	; select bank1
  7466  0D15  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7467  0D16  0020               	movlb	0	; select bank0
  7468  0D17  00B1               	movwf	___wmul@multiplier+1
  7469  0D18  3019               	movlw	25
  7470  0D19  00B2               	movwf	___wmul@multiplicand
  7471  0D1A  3000               	movlw	0
  7472  0D1B  00B3               	movwf	___wmul@multiplicand+1
  7473  0D1C  3190  200C  318B   	fcall	___wmul
  7474  0D1F  0020               	movlb	0	; select bank0
  7475  0D20  0831               	movf	?___wmul+1,w
  7476  0D21  0021               	movlb	1	; select bank1
  7477  0D22  00DE               	movwf	(_EMC1001_PrintInfo$1378+1)^(0+128)
  7478  0D23  0020               	movlb	0	; select bank0
  7479  0D24  0830               	movf	?___wmul,w
  7480  0D25  0021               	movlb	1	; select bank1
  7481  0D26  00DD               	movwf	_EMC1001_PrintInfo$1378^(0+128)
  7482                           
  7483                           ;EMC1001.c: 219: printf("Temperature high limit:\t%d.%d C\n", temp, templo*25);
  7484  0D27  30B8               	movlw	low (STR_15| (0+32768))
  7485  0D28  00A0               	movwf	printf@f^(0+128)
  7486  0D29  3099               	movlw	high (STR_15| (0+32768))
  7487  0D2A  00A1               	movwf	(printf@f^(0+128)+1)
  7488  0D2B  085F               	movf	EMC1001_PrintInfo@temp^(0+128),w
  7489  0D2C  00A2               	movwf	(?_printf^(0+128)+2)
  7490  0D2D  01A3               	clrf	((?_printf+1)^(0+128)+2)
  7491  0D2E  1BA2               	btfsc	(?_printf^(0+128)+2),7
  7492  0D2F  03A3               	decf	((?_printf+1)^(0+128)+2),f
  7493  0D30  085E               	movf	(_EMC1001_PrintInfo$1378+1)^(0+128),w
  7494  0D31  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7495  0D32  085D               	movf	_EMC1001_PrintInfo$1378^(0+128),w
  7496  0D33  00A4               	movwf	(?_printf^(0+128)+4)
  7497  0D34  3180  203E  318B   	fcall	_printf
  7498  0D37                     l4564:	
  7499                           
  7500                           ;EMC1001.c: 220: }
  7501                           ;EMC1001.c: 221: if (EMC1001_Read(0x07, (uint8_t*)&temp)) {
  7502  0D37  30DF               	movlw	(low (EMC1001_PrintInfo@temp| 0))& (0+255)
  7503  0D38  0021               	movlb	1	; select bank1
  7504  0D39  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7505  0D3A  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7506  0D3B  0020               	movlb	0	; select bank0
  7507  0D3C  00A7               	movwf	EMC1001_Read@pData
  7508  0D3D  3007               	movlw	7
  7509  0D3E  3193  233E  318B   	fcall	_EMC1001_Read
  7510  0D41  3A00               	xorlw	0
  7511  0D42  1903               	skipnz
  7512  0D43  2D82               	goto	l4574
  7513                           
  7514                           ;EMC1001.c: 222: EMC1001_Read(0x08, &templo);
  7515  0D44  30E0               	movlw	(low (EMC1001_PrintInfo@templo| 0))& (0+255)
  7516  0D45  0021               	movlb	1	; select bank1
  7517  0D46  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7518  0D47  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7519  0D48  0020               	movlb	0	; select bank0
  7520  0D49  00A7               	movwf	EMC1001_Read@pData
  7521  0D4A  3008               	movlw	8
  7522  0D4B  3193  233E  318B   	fcall	_EMC1001_Read
  7523                           
  7524                           ;EMC1001.c: 223: templo = templo >> 6;
  7525  0D4E  0021               	movlb	1	; select bank1
  7526  0D4F  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7527  0D50  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7528  0D51  3006               	movlw	6
  7529  0D52                     u6315:	
  7530  0D52  36C9               	lsrf	??_EMC1001_PrintInfo^(0+128),f
  7531  0D53  0B89               	decfsz	9,f
  7532  0D54  2D52               	goto	u6315
  7533  0D55  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7534  0D56  00CA               	movwf	(??_EMC1001_PrintInfo+1)^(0+128)
  7535  0D57  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7536  0D58  00E0               	movwf	EMC1001_PrintInfo@templo^(0+128)
  7537                           
  7538                           ;EMC1001.c: 224: printf("Temperature low limit:\t%d.%d C\n", temp, templo*25);
  7539  0D59  0860               	movf	EMC1001_PrintInfo@templo^(0+128),w
  7540  0D5A  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7541  0D5B  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7542  0D5C  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7543  0D5D  0020               	movlb	0	; select bank0
  7544  0D5E  00B0               	movwf	___wmul@multiplier
  7545  0D5F  0021               	movlb	1	; select bank1
  7546  0D60  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7547  0D61  0020               	movlb	0	; select bank0
  7548  0D62  00B1               	movwf	___wmul@multiplier+1
  7549  0D63  3019               	movlw	25
  7550  0D64  00B2               	movwf	___wmul@multiplicand
  7551  0D65  3000               	movlw	0
  7552  0D66  00B3               	movwf	___wmul@multiplicand+1
  7553  0D67  3190  200C  318B   	fcall	___wmul
  7554  0D6A  0020               	movlb	0	; select bank0
  7555  0D6B  0831               	movf	?___wmul+1,w
  7556  0D6C  0021               	movlb	1	; select bank1
  7557  0D6D  00DE               	movwf	(_EMC1001_PrintInfo$1378+1)^(0+128)
  7558  0D6E  0020               	movlb	0	; select bank0
  7559  0D6F  0830               	movf	?___wmul,w
  7560  0D70  0021               	movlb	1	; select bank1
  7561  0D71  00DD               	movwf	_EMC1001_PrintInfo$1378^(0+128)
  7562                           
  7563                           ;EMC1001.c: 224: printf("Temperature low limit:\t%d.%d C\n", temp, templo*25);
  7564  0D72  30D9               	movlw	low (STR_16| (0+32768))
  7565  0D73  00A0               	movwf	printf@f^(0+128)
  7566  0D74  3099               	movlw	high (STR_16| (0+32768))
  7567  0D75  00A1               	movwf	(printf@f^(0+128)+1)
  7568  0D76  085F               	movf	EMC1001_PrintInfo@temp^(0+128),w
  7569  0D77  00A2               	movwf	(?_printf^(0+128)+2)
  7570  0D78  01A3               	clrf	((?_printf+1)^(0+128)+2)
  7571  0D79  1BA2               	btfsc	(?_printf^(0+128)+2),7
  7572  0D7A  03A3               	decf	((?_printf+1)^(0+128)+2),f
  7573  0D7B  085E               	movf	(_EMC1001_PrintInfo$1378+1)^(0+128),w
  7574  0D7C  00A5               	movwf	((?_printf+1)^(0+128)+4)
  7575  0D7D  085D               	movf	_EMC1001_PrintInfo$1378^(0+128),w
  7576  0D7E  00A4               	movwf	(?_printf^(0+128)+4)
  7577  0D7F  3180  203E  318B   	fcall	_printf
  7578  0D82                     l4574:	
  7579                           
  7580                           ;EMC1001.c: 225: }
  7581                           ;EMC1001.c: 226: if (EMC1001_Read(0x20, &data)) printf("Thermal limit:\t\t%d C\n", data)
      +                          ;
  7582  0D82  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7583  0D83  0021               	movlb	1	; select bank1
  7584  0D84  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7585  0D85  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7586  0D86  0020               	movlb	0	; select bank0
  7587  0D87  00A7               	movwf	EMC1001_Read@pData
  7588  0D88  3020               	movlw	32
  7589  0D89  3193  233E  318B   	fcall	_EMC1001_Read
  7590  0D8C  3A00               	xorlw	0
  7591  0D8D  1903               	skipnz
  7592  0D8E  2D9E               	goto	l4578
  7593  0D8F  3079               	movlw	low (STR_17| (0+32768))
  7594  0D90  0021               	movlb	1	; select bank1
  7595  0D91  00A0               	movwf	printf@f^(0+128)
  7596  0D92  309A               	movlw	high (STR_17| (0+32768))
  7597  0D93  00A1               	movwf	(printf@f^(0+128)+1)
  7598  0D94  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7599  0D95  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7600  0D96  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7601  0D97  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7602  0D98  00A2               	movwf	(?_printf^(0+128)+2)
  7603  0D99  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7604  0D9A  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7605  0D9B  3180  203E  318B   	fcall	_printf
  7606  0D9E                     l4578:	
  7607                           
  7608                           ;EMC1001.c: 227: if (EMC1001_Read(0x21, &data)) printf("Thermal hysteresis:\t%d C\n\n", 
      +                          data);
  7609  0D9E  30E1               	movlw	(low (EMC1001_PrintInfo@data| 0))& (0+255)
  7610  0D9F  0021               	movlb	1	; select bank1
  7611  0DA0  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7612  0DA1  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7613  0DA2  0020               	movlb	0	; select bank0
  7614  0DA3  00A7               	movwf	EMC1001_Read@pData
  7615  0DA4  3021               	movlw	33
  7616  0DA5  3193  233E  318B   	fcall	_EMC1001_Read
  7617  0DA8  3A00               	xorlw	0
  7618  0DA9  1903               	skipnz
  7619  0DAA  0008               	return
  7620  0DAB  3017               	movlw	low (STR_18| (0+32768))
  7621  0DAC  0021               	movlb	1	; select bank1
  7622  0DAD  00A0               	movwf	printf@f^(0+128)
  7623  0DAE  309A               	movlw	high (STR_18| (0+32768))
  7624  0DAF  00A1               	movwf	(printf@f^(0+128)+1)
  7625  0DB0  0861               	movf	EMC1001_PrintInfo@data^(0+128),w
  7626  0DB1  00C9               	movwf	??_EMC1001_PrintInfo^(0+128)
  7627  0DB2  01CA               	clrf	(??_EMC1001_PrintInfo^(0+128)+1)
  7628  0DB3  0849               	movf	??_EMC1001_PrintInfo^(0+128),w
  7629  0DB4  00A2               	movwf	(?_printf^(0+128)+2)
  7630  0DB5  084A               	movf	(??_EMC1001_PrintInfo+1)^(0+128),w
  7631  0DB6  00A3               	movwf	((?_printf+1)^(0+128)+2)
  7632  0DB7  3180  203E         	fcall	_printf
  7633  0DB9  0008               	return
  7634  0DBA                     __end_of_EMC1001_PrintInfo:	
  7635                           
  7636                           	psect	text18
  7637  003E                     __ptext18:	
  7638 ;; *************** function _printf *****************
  7639 ;; Defined at:
  7640 ;;		line 464 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  7643 ;;		 -> STR_19(30), STR_18(27), STR_17(22), STR_16(32), 
  7644 ;;		 -> STR_15(33), STR_12(20), STR_11(53), STR_10(65), 
  7645 ;;		 -> STR_9(55), STR_8(16), STR_7(23), STR_4(24), 
  7646 ;;		 -> STR_1(2), 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  idx             1   15[BANK1 ] unsigned char 
  7649 ;;  val             4   31[BANK1 ] unsigned long 
  7650 ;;  tmpval          4   27[BANK1 ] struct .
  7651 ;;  fval            3   35[BANK1 ] struct .
  7652 ;;  prec            2   38[BANK1 ] int 
  7653 ;;  exp             2   25[BANK1 ] int 
  7654 ;;  flag            2   23[BANK1 ] unsigned short 
  7655 ;;  cp              2   20[BANK1 ] PTR const unsigned char 
  7656 ;;		 -> STR_20(7), STR_14(9), STR_13(8), STR_6(1), 
  7657 ;;		 -> STR_5(3), EMC1001_PrintInfo@data(1), I2C2_ISR@i2c_address(2), 
  7658 ;;  len             2   18[BANK1 ] unsigned int 
  7659 ;;  width           2    0        int 
  7660 ;;  c               1   40[BANK1 ] char 
  7661 ;;  ap              1   22[BANK1 ] PTR void [1]
  7662 ;;		 -> ?_printf(2), 
  7663 ;;  d               1    0        unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  2    0[BANK1 ] int 
  7666 ;; Registers used:
  7667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7673 ;;      Params:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;      Totals:         0       6      41       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;Total ram usage:       47 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    6
  7680 ;; This function calls:
  7681 ;;		___awdiv
  7682 ;;		___ftadd
  7683 ;;		___ftge
  7684 ;;		___ftmul
  7685 ;;		___ftneg
  7686 ;;		___ftsub
  7687 ;;		___fttol
  7688 ;;		___lldiv
  7689 ;;		___llmod
  7690 ;;		___lltoft
  7691 ;;		___wmul
  7692 ;;		__div_to_l_
  7693 ;;		__tdiv_to_l_
  7694 ;;		_fround
  7695 ;;		_isdigit
  7696 ;;		_putch
  7697 ;;		_scale
  7698 ;; This function is called by:
  7699 ;;		_main
  7700 ;;		_EMC1001_PrintInfo
  7701 ;;		_EMC1001_PrintTemp
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _printf
  7707  003E                     _printf:	
  7708                           
  7709                           ;doprnt.c: 466: va_list ap;
  7710                           ;doprnt.c: 499: signed char c;
  7711                           ;doprnt.c: 501: int width;
  7712                           ;doprnt.c: 504: int prec;
  7713                           ;doprnt.c: 508: unsigned short flag;
  7714                           ;doprnt.c: 515: char d;
  7715                           ;doprnt.c: 516: double fval;
  7716                           ;doprnt.c: 517: int exp;
  7717                           ;doprnt.c: 523: union {
  7718                           ;doprnt.c: 524: unsigned long vd;
  7719                           ;doprnt.c: 525: double integ;
  7720                           ;doprnt.c: 526: } tmpval;
  7721                           ;doprnt.c: 528: unsigned long val;
  7722                           ;doprnt.c: 529: unsigned len;
  7723                           ;doprnt.c: 530: const char * cp;
  7724                           ;doprnt.c: 533: *ap = __va_start();
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7728  003E  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  7729  003F  0020               	movlb	0	; select bank0
  7730  0040  00E7               	movwf	??_printf
  7731  0041  0867               	movf	??_printf,w
  7732  0042  0021               	movlb	1	; select bank1
  7733  0043  00B6               	movwf	printf@ap^(0+128)
  7734  0044                     l4492:	
  7735                           ;doprnt.c: 536: while(c = *f++) {
  7736                           
  7737  0044  0021               	movlb	1	; select bank1
  7738  0045  0821               	movf	(printf@f+1)^(0+128),w
  7739  0046  0020               	movlb	0	; select bank0
  7740  0047  00E8               	movwf	??_printf+1
  7741  0048  0021               	movlb	1	; select bank1
  7742  0049  0820               	movf	printf@f^(0+128),w
  7743  004A  0020               	movlb	0	; select bank0
  7744  004B  00E7               	movwf	??_printf
  7745  004C  0021               	movlb	1	; select bank1
  7746  004D  0AA0               	incf	printf@f^(0+128),f
  7747  004E  1903               	skipnz
  7748  004F  0AA1               	incf	(printf@f+1)^(0+128),f
  7749  0050  0020               	movlb	0	; select bank0
  7750  0051  0867               	movf	??_printf,w
  7751  0052  0084               	movwf	4
  7752  0053  0868               	movf	??_printf+1,w
  7753  0054  0085               	movwf	5
  7754  0055  0800               	movf	0,w	;code access
  7755  0056  00E9               	movwf	??_printf+2
  7756  0057  0869               	movf	??_printf+2,w
  7757  0058  0021               	movlb	1	; select bank1
  7758  0059  00C8               	movwf	printf@c^(0+128)
  7759  005A  0848               	movf	printf@c^(0+128),w
  7760  005B  1903               	btfsc	3,2
  7761  005C  0008               	return
  7762                           
  7763                           ;doprnt.c: 538: if(c != '%')
  7764  005D  3025               	movlw	37
  7765  005E  0648               	xorwf	printf@c^(0+128),w
  7766  005F  1903               	btfsc	3,2
  7767  0060  2866               	goto	l4238
  7768                           
  7769                           ;doprnt.c: 540: {
  7770                           ;doprnt.c: 541: (putch(c) );
  7771  0061  0848               	movf	printf@c^(0+128),w
  7772  0062  319F  273F  3180   	fcall	_putch
  7773                           
  7774                           ;doprnt.c: 542: continue;
  7775  0065  2844               	goto	l4492
  7776  0066                     l4238:	
  7777                           
  7778                           ;doprnt.c: 543: }
  7779                           ;doprnt.c: 548: flag = 0;
  7780  0066  0021               	movlb	1	; select bank1
  7781  0067  01B7               	clrf	printf@flag^(0+128)
  7782  0068  01B8               	clrf	(printf@flag+1)^(0+128)
  7783                           
  7784                           ;doprnt.c: 611: if(*f == '.') {
  7785  0069  0820               	movf	printf@f^(0+128),w
  7786  006A  0084               	movwf	4
  7787  006B  0821               	movf	(printf@f+1)^(0+128),w
  7788  006C  0085               	movwf	5
  7789  006D  0012               	moviw fsr0++
  7790  006E  3A2E               	xorlw	46
  7791  006F  1D03               	btfss	3,2
  7792  0070  28AF               	goto	l4254
  7793                           
  7794                           ;doprnt.c: 612: flag |= 0x4000;
  7795  0071  1738               	bsf	(printf@flag^(0+128)+1),6
  7796                           
  7797                           ;doprnt.c: 613: f++;
  7798  0072  3001               	movlw	1
  7799  0073  07A0               	addwf	printf@f^(0+128),f
  7800  0074  3000               	movlw	0
  7801  0075  3DA1               	addwfc	(printf@f+1)^(0+128),f
  7802                           
  7803                           ;doprnt.c: 620: {
  7804                           ;doprnt.c: 621: prec = 0;
  7805  0076  01C6               	clrf	printf@prec^(0+128)
  7806  0077  01C7               	clrf	(printf@prec+1)^(0+128)
  7807  0078                     l4252:	
  7808                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7809                           
  7810  0078  0820               	movf	printf@f^(0+128),w
  7811  0079  0084               	movwf	4
  7812  007A  0821               	movf	(printf@f+1)^(0+128),w
  7813  007B  0085               	movwf	5
  7814  007C  0800               	movf	0,w	;code access
  7815  007D  319F  2797  3180   	fcall	_isdigit
  7816  0080  1C03               	btfss	3,0
  7817  0081  2905               	goto	l4286
  7818                           
  7819                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7820  0082  0021               	movlb	1	; select bank1
  7821  0083  0820               	movf	printf@f^(0+128),w
  7822  0084  0084               	movwf	4
  7823  0085  0821               	movf	(printf@f+1)^(0+128),w
  7824  0086  0085               	movwf	5
  7825  0087  0800               	movf	0,w	;code access
  7826  0088  0020               	movlb	0	; select bank0
  7827  0089  00E7               	movwf	??_printf
  7828  008A  01E8               	clrf	??_printf+1
  7829  008B  0021               	movlb	1	; select bank1
  7830  008C  0847               	movf	(printf@prec+1)^(0+128),w
  7831  008D  0020               	movlb	0	; select bank0
  7832  008E  00B1               	movwf	___wmul@multiplier+1
  7833  008F  0021               	movlb	1	; select bank1
  7834  0090  0846               	movf	printf@prec^(0+128),w
  7835  0091  0020               	movlb	0	; select bank0
  7836  0092  00B0               	movwf	___wmul@multiplier
  7837  0093  300A               	movlw	10
  7838  0094  00B2               	movwf	___wmul@multiplicand
  7839  0095  3000               	movlw	0
  7840  0096  00B3               	movwf	___wmul@multiplicand+1
  7841  0097  3190  200C  3180   	fcall	___wmul
  7842  009A  0020               	movlb	0	; select bank0
  7843  009B  0867               	movf	??_printf,w
  7844  009C  0730               	addwf	?___wmul,w
  7845  009D  00E9               	movwf	??_printf+2
  7846  009E  0868               	movf	??_printf+1,w
  7847  009F  3D31               	addwfc	?___wmul+1,w
  7848  00A0  00EA               	movwf	??_printf+3
  7849  00A1  0869               	movf	??_printf+2,w
  7850  00A2  3ED0               	addlw	208
  7851  00A3  0021               	movlb	1	; select bank1
  7852  00A4  00C6               	movwf	printf@prec^(0+128)
  7853  00A5  30FF               	movlw	255
  7854  00A6  0020               	movlb	0	; select bank0
  7855  00A7  3D6A               	addwfc	??_printf+3,w
  7856  00A8  0021               	movlb	1	; select bank1
  7857  00A9  00C7               	movwf	(printf@prec+1)^(0+128)
  7858  00AA  3001               	movlw	1
  7859  00AB  07A0               	addwf	printf@f^(0+128),f
  7860  00AC  3000               	movlw	0
  7861  00AD  3DA1               	addwfc	(printf@f+1)^(0+128),f
  7862  00AE  2878               	goto	l4252
  7863  00AF                     l4254:	
  7864                           ;doprnt.c: 624: }
  7865                           ;doprnt.c: 625: } else {
  7866                           
  7867                           
  7868                           ;doprnt.c: 626: prec = 0;
  7869  00AF  0021               	movlb	1	; select bank1
  7870  00B0  01C6               	clrf	printf@prec^(0+128)
  7871  00B1  01C7               	clrf	(printf@prec+1)^(0+128)
  7872                           
  7873                           ;doprnt.c: 628: flag |= 0x1000;
  7874  00B2  1638               	bsf	(printf@flag^(0+128)+1),4
  7875                           
  7876                           ;doprnt.c: 630: }
  7877                           ;doprnt.c: 635: switch(c = *f++) {
  7878  00B3  2905               	goto	l4286
  7879  00B4                     l496:	
  7880                           ;doprnt.c: 662: case 'f':
  7881                           
  7882                           ;doprnt.c: 638: goto alldone;
  7883                           
  7884                           ;doprnt.c: 637: case 0:
  7885                           
  7886                           
  7887                           ;doprnt.c: 663: flag |= 0x400;
  7888  00B4  1538               	bsf	(printf@flag^(0+128)+1),2
  7889                           
  7890                           ;doprnt.c: 698: case 'i':
  7891                           ;doprnt.c: 699: break;
  7892                           
  7893                           ;doprnt.c: 697: case 'd':
  7894                           
  7895                           ;doprnt.c: 664: break;
  7896  00B5  292F               	goto	l4288
  7897  00B6                     l500:	
  7898                           ;doprnt.c: 712: case 'X':
  7899                           
  7900                           
  7901                           ;doprnt.c: 714: flag |= 0x20;
  7902  00B6  16B7               	bsf	printf@flag^(0+128),5
  7903  00B7                     l501:	
  7904                           ;doprnt.c: 718: case 'x':
  7905                           
  7906                           
  7907                           ;doprnt.c: 721: flag |= 0x80;
  7908  00B7  17B7               	bsf	printf@flag^(0+128),7
  7909                           
  7910                           ;doprnt.c: 723: break;
  7911  00B8  292F               	goto	l4288
  7912  00B9                     l4258:	
  7913                           ;doprnt.c: 728: case 's':
  7914                           
  7915                           
  7916                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7917  00B9  0836               	movf	printf@ap^(0+128),w
  7918  00BA  0086               	movwf	6
  7919  00BB  0187               	clrf	7
  7920  00BC  3F40               	moviw [0]fsr1
  7921  00BD  00B4               	movwf	printf@cp^(0+128)
  7922  00BE  3F41               	moviw [1]fsr1
  7923  00BF  00B5               	movwf	(printf@cp+1)^(0+128)
  7924  00C0  3002               	movlw	2
  7925  00C1  0020               	movlb	0	; select bank0
  7926  00C2  00E7               	movwf	??_printf
  7927  00C3  0867               	movf	??_printf,w
  7928  00C4  0021               	movlb	1	; select bank1
  7929  00C5  07B6               	addwf	printf@ap^(0+128),f
  7930                           
  7931                           ;doprnt.c: 740: if(!cp)
  7932  00C6  0834               	movf	printf@cp^(0+128),w
  7933  00C7  0435               	iorwf	(printf@cp+1)^(0+128),w
  7934  00C8  1D03               	btfss	3,2
  7935  00C9  28CE               	goto	l4266
  7936                           
  7937                           ;doprnt.c: 741: cp = "(null)";
  7938  00CA  30E6               	movlw	low (STR_20| (0+32768))
  7939  00CB  00B4               	movwf	printf@cp^(0+128)
  7940  00CC  309A               	movlw	high (STR_20| (0+32768))
  7941  00CD  00B5               	movwf	(printf@cp^(0+128)+1)
  7942  00CE                     l4266:	
  7943                           
  7944                           ;doprnt.c: 745: len = 0;
  7945  00CE  01B2               	clrf	printf@len^(0+128)
  7946  00CF  01B3               	clrf	(printf@len+1)^(0+128)
  7947  00D0                     l4270:	
  7948                           ;doprnt.c: 746: while(cp[len])
  7949                           
  7950  00D0  0834               	movf	printf@cp^(0+128),w
  7951  00D1  0732               	addwf	printf@len^(0+128),w
  7952  00D2  0084               	movwf	4
  7953  00D3  0835               	movf	(printf@cp+1)^(0+128),w
  7954  00D4  3D33               	addwfc	(printf@len+1)^(0+128),w
  7955  00D5  0085               	movwf	5
  7956  00D6  0012               	moviw fsr0++
  7957  00D7  1903               	btfsc	3,2
  7958  00D8  28DE               	goto	l4272
  7959                           
  7960                           ;doprnt.c: 747: len++;
  7961  00D9  3001               	movlw	1
  7962  00DA  07B2               	addwf	printf@len^(0+128),f
  7963  00DB  3000               	movlw	0
  7964  00DC  3DB3               	addwfc	(printf@len+1)^(0+128),f
  7965  00DD  28D0               	goto	l4270
  7966  00DE                     l4272:	
  7967                           
  7968                           ;doprnt.c: 753: if(prec && prec < len)
  7969  00DE  0846               	movf	printf@prec^(0+128),w
  7970  00DF  0447               	iorwf	(printf@prec+1)^(0+128),w
  7971  00E0  1903               	btfsc	3,2
  7972  00E1  28EE               	goto	l4282
  7973  00E2  0833               	movf	(printf@len+1)^(0+128),w
  7974  00E3  0247               	subwf	(printf@prec+1)^(0+128),w
  7975  00E4  1D03               	skipz
  7976  00E5  28E8               	goto	u5675
  7977  00E6  0832               	movf	printf@len^(0+128),w
  7978  00E7  0246               	subwf	printf@prec^(0+128),w
  7979  00E8                     u5675:	
  7980  00E8  1803               	skipnc
  7981  00E9  28EE               	goto	l4282
  7982                           
  7983                           ;doprnt.c: 754: len = prec;
  7984  00EA  0847               	movf	(printf@prec+1)^(0+128),w
  7985  00EB  00B3               	movwf	(printf@len+1)^(0+128)
  7986  00EC  0846               	movf	printf@prec^(0+128),w
  7987  00ED  00B2               	movwf	printf@len^(0+128)
  7988  00EE                     l4282:	
  7989                           ;doprnt.c: 767: while(len--)
  7990                           
  7991  00EE  3001               	movlw	1
  7992  00EF  02B2               	subwf	printf@len^(0+128),f
  7993  00F0  3000               	movlw	0
  7994  00F1  3BB3               	subwfb	(printf@len+1)^(0+128),f
  7995  00F2  0A32               	incf	printf@len^(0+128),w
  7996  00F3  1903               	btfsc	3,2
  7997  00F4  0A33               	incf	(printf@len+1)^(0+128),w
  7998  00F5  1903               	btfsc	3,2
  7999  00F6  2844               	goto	l4492
  8000                           
  8001                           ;doprnt.c: 768: (putch(*cp++) );
  8002  00F7  0834               	movf	printf@cp^(0+128),w
  8003  00F8  0084               	movwf	4
  8004  00F9  0835               	movf	(printf@cp+1)^(0+128),w
  8005  00FA  0085               	movwf	5
  8006  00FB  0800               	movf	0,w	;code access
  8007  00FC  319F  273F  3180   	fcall	_putch
  8008  00FF  3001               	movlw	1
  8009  0100  0021               	movlb	1	; select bank1
  8010  0101  07B4               	addwf	printf@cp^(0+128),f
  8011  0102  3000               	movlw	0
  8012  0103  3DB5               	addwfc	(printf@cp+1)^(0+128),f
  8013  0104  28EE               	goto	l4282
  8014  0105                     l4286:	
  8015                           ;doprnt.c: 822: }
  8016                           
  8017                           ;doprnt.c: 813: continue;
  8018                           
  8019                           ;doprnt.c: 802: default:
  8020                           
  8021                           ;doprnt.c: 774: continue;
  8022                           
  8023  0105  0021               	movlb	1	; select bank1
  8024  0106  0821               	movf	(printf@f+1)^(0+128),w
  8025  0107  0020               	movlb	0	; select bank0
  8026  0108  00E8               	movwf	??_printf+1
  8027  0109  0021               	movlb	1	; select bank1
  8028  010A  0820               	movf	printf@f^(0+128),w
  8029  010B  0020               	movlb	0	; select bank0
  8030  010C  00E7               	movwf	??_printf
  8031  010D  0021               	movlb	1	; select bank1
  8032  010E  0AA0               	incf	printf@f^(0+128),f
  8033  010F  1903               	skipnz
  8034  0110  0AA1               	incf	(printf@f+1)^(0+128),f
  8035  0111  0020               	movlb	0	; select bank0
  8036  0112  0867               	movf	??_printf,w
  8037  0113  0084               	movwf	4
  8038  0114  0868               	movf	??_printf+1,w
  8039  0115  0085               	movwf	5
  8040  0116  0800               	movf	0,w	;code access
  8041  0117  0021               	movlb	1	; select bank1
  8042  0118  00C8               	movwf	printf@c^(0+128)
  8043                           
  8044                           ; Switch size 1, requested type "space"
  8045                           ; Number of cases is 7, Range of values is 0 to 120
  8046                           ; switch strategies available:
  8047                           ; Name         Instructions Cycles
  8048                           ; simple_byte           22    12 (average)
  8049                           ; direct_byte          248     6 (fixed)
  8050                           ; jumptable            260     6 (fixed)
  8051                           ;	Chosen strategy is simple_byte
  8052  0119  3A00               	xorlw	0	; case 0
  8053  011A  1903               	skipnz
  8054  011B  2F40               	goto	l580
  8055  011C  3A58               	xorlw	88	; case 88
  8056  011D  1903               	skipnz
  8057  011E  28B6               	goto	l500
  8058  011F  3A3C               	xorlw	60	; case 100
  8059  0120  1903               	skipnz
  8060  0121  292F               	goto	l4288
  8061  0122  3A02               	xorlw	2	; case 102
  8062  0123  1903               	skipnz
  8063  0124  28B4               	goto	l496
  8064  0125  3A0F               	xorlw	15	; case 105
  8065  0126  1903               	skipnz
  8066  0127  292F               	goto	l4288
  8067  0128  3A1A               	xorlw	26	; case 115
  8068  0129  1903               	skipnz
  8069  012A  28B9               	goto	l4258
  8070  012B  3A0B               	xorlw	11	; case 120
  8071  012C  1903               	skipnz
  8072  012D  28B7               	goto	l501
  8073  012E  2844               	goto	l4492
  8074  012F                     l4288:	
  8075                           
  8076                           ;doprnt.c: 825: if(flag & (0x700)) {
  8077  012F  3000               	movlw	0
  8078  0130  0537               	andwf	printf@flag^(0+128),w
  8079  0131  0020               	movlb	0	; select bank0
  8080  0132  00E7               	movwf	??_printf
  8081  0133  3007               	movlw	7
  8082  0134  0021               	movlb	1	; select bank1
  8083  0135  0538               	andwf	(printf@flag+1)^(0+128),w
  8084  0136  0020               	movlb	0	; select bank0
  8085  0137  00E8               	movwf	??_printf+1
  8086  0138  0867               	movf	??_printf,w
  8087  0139  0468               	iorwf	??_printf+1,w
  8088  013A  1903               	btfsc	3,2
  8089  013B  2D79               	goto	l512
  8090                           
  8091                           ;doprnt.c: 827: if(flag & 0x1000)
  8092  013C  0021               	movlb	1	; select bank1
  8093  013D  1E38               	btfss	(printf@flag+1)^(0+128),4
  8094  013E  2943               	goto	l4294
  8095                           
  8096                           ;doprnt.c: 829: prec = 6;
  8097  013F  3006               	movlw	6
  8098  0140  00C6               	movwf	printf@prec^(0+128)
  8099  0141  3000               	movlw	0
  8100  0142  00C7               	movwf	(printf@prec^(0+128)+1)
  8101  0143                     l4294:	
  8102                           
  8103                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8104  0143  0836               	movf	printf@ap^(0+128),w
  8105  0144  0086               	movwf	6
  8106  0145  0187               	clrf	7
  8107  0146  3F40               	moviw [0]fsr1
  8108  0147  00C3               	movwf	printf@fval^(0+128)
  8109  0148  3F41               	moviw [1]fsr1
  8110  0149  00C4               	movwf	(printf@fval+1)^(0+128)
  8111  014A  3F42               	moviw [2]fsr1
  8112  014B  00C5               	movwf	(printf@fval+2)^(0+128)
  8113  014C  3003               	movlw	3
  8114  014D  0020               	movlb	0	; select bank0
  8115  014E  00E7               	movwf	??_printf
  8116  014F  0867               	movf	??_printf,w
  8117  0150  0021               	movlb	1	; select bank1
  8118  0151  07B6               	addwf	printf@ap^(0+128),f
  8119                           
  8120                           ;doprnt.c: 831: if(fval < 0.0) {
  8121  0152  0843               	movf	printf@fval^(0+128),w
  8122  0153  0020               	movlb	0	; select bank0
  8123  0154  00A0               	movwf	___ftge@ff1
  8124  0155  0021               	movlb	1	; select bank1
  8125  0156  0844               	movf	(printf@fval+1)^(0+128),w
  8126  0157  0020               	movlb	0	; select bank0
  8127  0158  00A1               	movwf	___ftge@ff1+1
  8128  0159  0021               	movlb	1	; select bank1
  8129  015A  0845               	movf	(printf@fval+2)^(0+128),w
  8130  015B  0020               	movlb	0	; select bank0
  8131  015C  00A2               	movwf	___ftge@ff1+2
  8132  015D  3000               	movlw	0
  8133  015E  00A3               	movwf	___ftge@ff2
  8134  015F  3000               	movlw	0
  8135  0160  00A4               	movwf	___ftge@ff2+1
  8136  0161  3000               	movlw	0
  8137  0162  00A5               	movwf	___ftge@ff2+2
  8138  0163  3191  21A4  3180   	fcall	___ftge
  8139  0166  1803               	btfsc	3,0
  8140  0167  2987               	goto	l4304
  8141                           
  8142                           ;doprnt.c: 832: fval = -fval;
  8143  0168  0021               	movlb	1	; select bank1
  8144  0169  0843               	movf	printf@fval^(0+128),w
  8145  016A  0020               	movlb	0	; select bank0
  8146  016B  00A0               	movwf	___ftneg@f1
  8147  016C  0021               	movlb	1	; select bank1
  8148  016D  0844               	movf	(printf@fval+1)^(0+128),w
  8149  016E  0020               	movlb	0	; select bank0
  8150  016F  00A1               	movwf	___ftneg@f1+1
  8151  0170  0021               	movlb	1	; select bank1
  8152  0171  0845               	movf	(printf@fval+2)^(0+128),w
  8153  0172  0020               	movlb	0	; select bank0
  8154  0173  00A2               	movwf	___ftneg@f1+2
  8155  0174  319F  274B  3180   	fcall	___ftneg
  8156  0177  0020               	movlb	0	; select bank0
  8157  0178  0820               	movf	?___ftneg,w
  8158  0179  0021               	movlb	1	; select bank1
  8159  017A  00C3               	movwf	printf@fval^(0+128)
  8160  017B  0020               	movlb	0	; select bank0
  8161  017C  0821               	movf	?___ftneg+1,w
  8162  017D  0021               	movlb	1	; select bank1
  8163  017E  00C4               	movwf	(printf@fval+1)^(0+128)
  8164  017F  0020               	movlb	0	; select bank0
  8165  0180  0822               	movf	?___ftneg+2,w
  8166  0181  0021               	movlb	1	; select bank1
  8167  0182  00C5               	movwf	(printf@fval+2)^(0+128)
  8168                           
  8169                           ;doprnt.c: 833: flag |= 0x03;
  8170  0183  3003               	movlw	3
  8171  0184  04B7               	iorwf	printf@flag^(0+128),f
  8172  0185  3000               	movlw	0
  8173  0186  04B8               	iorwf	(printf@flag+1)^(0+128),f
  8174  0187                     l4304:	
  8175                           
  8176                           ;doprnt.c: 834: }
  8177                           ;doprnt.c: 835: exp = 0;
  8178  0187  0021               	movlb	1	; select bank1
  8179  0188  01B9               	clrf	printf@exp^(0+128)
  8180  0189  01BA               	clrf	(printf@exp+1)^(0+128)
  8181                           
  8182                           ;doprnt.c: 836: if( fval!=0) {
  8183  018A  0845               	movf	(printf@fval+2)^(0+128),w
  8184  018B  0444               	iorwf	(printf@fval+1)^(0+128),w
  8185  018C  0443               	iorwf	printf@fval^(0+128),w
  8186  018D  1903               	skipnz
  8187  018E  2A59               	goto	l515
  8188                           
  8189                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8190  018F  30C3               	movlw	low (printf@fval| 0)
  8191  0190  0086               	movwf	6
  8192  0191  0187               	clrf	7
  8193  0192  3F40               	moviw [0]fsr1
  8194  0193  0020               	movlb	0	; select bank0
  8195  0194  00E7               	movwf	??_printf
  8196  0195  3F41               	moviw [1]fsr1
  8197  0196  00E8               	movwf	??_printf+1
  8198  0197  3F42               	moviw [2]fsr1
  8199  0198  00E9               	movwf	??_printf+2
  8200  0199  3F43               	moviw [3]fsr1
  8201  019A  00EA               	movwf	??_printf+3
  8202  019B  300F               	movlw	15
  8203  019C                     u5735:	
  8204  019C  36EA               	lsrf	??_printf+3,f
  8205  019D  0CE9               	rrf	??_printf+2,f
  8206  019E  0CE8               	rrf	??_printf+1,f
  8207  019F  0CE7               	rrf	??_printf,f
  8208  01A0  0B89               	decfsz	9,f
  8209  01A1  299C               	goto	u5735
  8210  01A2  30FF               	movlw	255
  8211  01A3  0567               	andwf	??_printf,w
  8212  01A4  00EB               	movwf	??_printf+4
  8213  01A5  3000               	movlw	0
  8214  01A6  0568               	andwf	??_printf+1,w
  8215  01A7  00EC               	movwf	??_printf+5
  8216  01A8  086B               	movf	??_printf+4,w
  8217  01A9  3E82               	addlw	130
  8218  01AA  0021               	movlb	1	; select bank1
  8219  01AB  00B9               	movwf	printf@exp^(0+128)
  8220  01AC  30FF               	movlw	255
  8221  01AD  0020               	movlb	0	; select bank0
  8222  01AE  3D6C               	addwfc	??_printf+5,w
  8223  01AF  0021               	movlb	1	; select bank1
  8224  01B0  00BA               	movwf	(printf@exp+1)^(0+128)
  8225                           
  8226                           ;doprnt.c: 838: exp--;
  8227  01B1  30FF               	movlw	255
  8228  01B2  07B9               	addwf	printf@exp^(0+128),f
  8229  01B3  30FF               	movlw	255
  8230  01B4  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8231                           
  8232                           ;doprnt.c: 839: exp *= 3;
  8233  01B5  3003               	movlw	3
  8234  01B6  0020               	movlb	0	; select bank0
  8235  01B7  00B0               	movwf	___wmul@multiplier
  8236  01B8  3000               	movlw	0
  8237  01B9  00B1               	movwf	___wmul@multiplier+1
  8238  01BA  0021               	movlb	1	; select bank1
  8239  01BB  083A               	movf	(printf@exp+1)^(0+128),w
  8240  01BC  0020               	movlb	0	; select bank0
  8241  01BD  00B3               	movwf	___wmul@multiplicand+1
  8242  01BE  0021               	movlb	1	; select bank1
  8243  01BF  0839               	movf	printf@exp^(0+128),w
  8244  01C0  0020               	movlb	0	; select bank0
  8245  01C1  00B2               	movwf	___wmul@multiplicand
  8246  01C2  3190  200C  3180   	fcall	___wmul
  8247  01C5  0020               	movlb	0	; select bank0
  8248  01C6  0831               	movf	?___wmul+1,w
  8249  01C7  0021               	movlb	1	; select bank1
  8250  01C8  00BA               	movwf	(printf@exp+1)^(0+128)
  8251  01C9  0020               	movlb	0	; select bank0
  8252  01CA  0830               	movf	?___wmul,w
  8253  01CB  0021               	movlb	1	; select bank1
  8254  01CC  00B9               	movwf	printf@exp^(0+128)
  8255                           
  8256                           ;doprnt.c: 840: exp /= 10;
  8257  01CD  300A               	movlw	10
  8258  01CE  0020               	movlb	0	; select bank0
  8259  01CF  00A7               	movwf	___awdiv@divisor
  8260  01D0  3000               	movlw	0
  8261  01D1  00A8               	movwf	___awdiv@divisor+1
  8262  01D2  0021               	movlb	1	; select bank1
  8263  01D3  083A               	movf	(printf@exp+1)^(0+128),w
  8264  01D4  0020               	movlb	0	; select bank0
  8265  01D5  00AA               	movwf	___awdiv@dividend+1
  8266  01D6  0021               	movlb	1	; select bank1
  8267  01D7  0839               	movf	printf@exp^(0+128),w
  8268  01D8  0020               	movlb	0	; select bank0
  8269  01D9  00A9               	movwf	___awdiv@dividend
  8270  01DA  3193  238B  3180   	fcall	___awdiv
  8271  01DD  0020               	movlb	0	; select bank0
  8272  01DE  0828               	movf	?___awdiv+1,w
  8273  01DF  0021               	movlb	1	; select bank1
  8274  01E0  00BA               	movwf	(printf@exp+1)^(0+128)
  8275  01E1  0020               	movlb	0	; select bank0
  8276  01E2  0827               	movf	?___awdiv,w
  8277  01E3  0021               	movlb	1	; select bank1
  8278  01E4  00B9               	movwf	printf@exp^(0+128)
  8279                           
  8280                           ;doprnt.c: 841: if(exp < 0)
  8281  01E5  1FBA               	btfss	(printf@exp+1)^(0+128),7
  8282  01E6  29EB               	goto	l4320
  8283                           
  8284                           ;doprnt.c: 842: exp--;
  8285  01E7  30FF               	movlw	255
  8286  01E8  07B9               	addwf	printf@exp^(0+128),f
  8287  01E9  30FF               	movlw	255
  8288  01EA  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8289  01EB                     l4320:	
  8290                           
  8291                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  8292  01EB  0339               	decf	printf@exp^(0+128),w
  8293  01EC  3AFF               	xorlw	255
  8294  01ED  318D  25BA  3180   	fcall	_scale
  8295  01F0  0020               	movlb	0	; select bank0
  8296  01F1  0846               	movf	?_scale,w
  8297  01F2  0021               	movlb	1	; select bank1
  8298  01F3  00BB               	movwf	printf@tmpval^(0+128)
  8299  01F4  0020               	movlb	0	; select bank0
  8300  01F5  0847               	movf	?_scale+1,w
  8301  01F6  0021               	movlb	1	; select bank1
  8302  01F7  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8303  01F8  0020               	movlb	0	; select bank0
  8304  01F9  0848               	movf	?_scale+2,w
  8305  01FA  0021               	movlb	1	; select bank1
  8306  01FB  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8307                           
  8308                           ;doprnt.c: 847: tmpval.integ *= fval;
  8309  01FC  0843               	movf	printf@fval^(0+128),w
  8310  01FD  0020               	movlb	0	; select bank0
  8311  01FE  00B6               	movwf	___ftmul@f1
  8312  01FF  0021               	movlb	1	; select bank1
  8313  0200  0844               	movf	(printf@fval+1)^(0+128),w
  8314  0201  0020               	movlb	0	; select bank0
  8315  0202  00B7               	movwf	___ftmul@f1+1
  8316  0203  0021               	movlb	1	; select bank1
  8317  0204  0845               	movf	(printf@fval+2)^(0+128),w
  8318  0205  0020               	movlb	0	; select bank0
  8319  0206  00B8               	movwf	___ftmul@f1+2
  8320  0207  0021               	movlb	1	; select bank1
  8321  0208  083B               	movf	printf@tmpval^(0+128),w
  8322  0209  0020               	movlb	0	; select bank0
  8323  020A  00B9               	movwf	___ftmul@f2
  8324  020B  0021               	movlb	1	; select bank1
  8325  020C  083C               	movf	(printf@tmpval+1)^(0+128),w
  8326  020D  0020               	movlb	0	; select bank0
  8327  020E  00BA               	movwf	___ftmul@f2+1
  8328  020F  0021               	movlb	1	; select bank1
  8329  0210  083D               	movf	(printf@tmpval+2)^(0+128),w
  8330  0211  0020               	movlb	0	; select bank0
  8331  0212  00BB               	movwf	___ftmul@f2+2
  8332  0213  3188  2016  3180   	fcall	___ftmul
  8333  0216  0020               	movlb	0	; select bank0
  8334  0217  0836               	movf	?___ftmul,w
  8335  0218  0021               	movlb	1	; select bank1
  8336  0219  00BB               	movwf	printf@tmpval^(0+128)
  8337  021A  0020               	movlb	0	; select bank0
  8338  021B  0837               	movf	?___ftmul+1,w
  8339  021C  0021               	movlb	1	; select bank1
  8340  021D  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8341  021E  0020               	movlb	0	; select bank0
  8342  021F  0838               	movf	?___ftmul+2,w
  8343  0220  0021               	movlb	1	; select bank1
  8344  0221  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8345                           
  8346                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  8347  0222  083B               	movf	printf@tmpval^(0+128),w
  8348  0223  0020               	movlb	0	; select bank0
  8349  0224  00A0               	movwf	___ftge@ff1
  8350  0225  0021               	movlb	1	; select bank1
  8351  0226  083C               	movf	(printf@tmpval+1)^(0+128),w
  8352  0227  0020               	movlb	0	; select bank0
  8353  0228  00A1               	movwf	___ftge@ff1+1
  8354  0229  0021               	movlb	1	; select bank1
  8355  022A  083D               	movf	(printf@tmpval+2)^(0+128),w
  8356  022B  0020               	movlb	0	; select bank0
  8357  022C  00A2               	movwf	___ftge@ff1+2
  8358  022D  3000               	movlw	0
  8359  022E  00A3               	movwf	___ftge@ff2
  8360  022F  3080               	movlw	128
  8361  0230  00A4               	movwf	___ftge@ff2+1
  8362  0231  303F               	movlw	63
  8363  0232  00A5               	movwf	___ftge@ff2+2
  8364  0233  3191  21A4  3180   	fcall	___ftge
  8365  0236  1803               	btfsc	3,0
  8366  0237  2A3D               	goto	l4328
  8367                           
  8368                           ;doprnt.c: 849: exp--;
  8369  0238  30FF               	movlw	255
  8370  0239  0021               	movlb	1	; select bank1
  8371  023A  07B9               	addwf	printf@exp^(0+128),f
  8372  023B  30FF               	movlw	255
  8373  023C  2A58               	goto	L3
  8374  023D                     l4328:	
  8375                           
  8376                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  8377  023D  0021               	movlb	1	; select bank1
  8378  023E  083B               	movf	printf@tmpval^(0+128),w
  8379  023F  0020               	movlb	0	; select bank0
  8380  0240  00A0               	movwf	___ftge@ff1
  8381  0241  0021               	movlb	1	; select bank1
  8382  0242  083C               	movf	(printf@tmpval+1)^(0+128),w
  8383  0243  0020               	movlb	0	; select bank0
  8384  0244  00A1               	movwf	___ftge@ff1+1
  8385  0245  0021               	movlb	1	; select bank1
  8386  0246  083D               	movf	(printf@tmpval+2)^(0+128),w
  8387  0247  0020               	movlb	0	; select bank0
  8388  0248  00A2               	movwf	___ftge@ff1+2
  8389  0249  3000               	movlw	0
  8390  024A  00A3               	movwf	___ftge@ff2
  8391  024B  3020               	movlw	32
  8392  024C  00A4               	movwf	___ftge@ff2+1
  8393  024D  3041               	movlw	65
  8394  024E  00A5               	movwf	___ftge@ff2+2
  8395  024F  3191  21A4  3180   	fcall	___ftge
  8396  0252  1C03               	btfss	3,0
  8397  0253  2A59               	goto	l515
  8398                           
  8399                           ;doprnt.c: 851: exp++;
  8400  0254  3001               	movlw	1
  8401  0255  0021               	movlb	1	; select bank1
  8402  0256  07B9               	addwf	printf@exp^(0+128),f
  8403  0257  3000               	movlw	0
  8404  0258                     L3:	
  8405  0258  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8406  0259                     l515:	
  8407                           
  8408                           ;doprnt.c: 852: }
  8409                           ;doprnt.c: 1112: if(prec <= 12)
  8410  0259  0021               	movlb	1	; select bank1
  8411  025A  0847               	movf	(printf@prec+1)^(0+128),w
  8412  025B  3A80               	xorlw	128
  8413  025C  0020               	movlb	0	; select bank0
  8414  025D  00E7               	movwf	??_printf
  8415  025E  3080               	movlw	128
  8416  025F  0267               	subwf	??_printf,w
  8417  0260  1D03               	skipz
  8418  0261  2A65               	goto	u5775
  8419  0262  300D               	movlw	13
  8420  0263  0021               	movlb	1	; select bank1
  8421  0264  0246               	subwf	printf@prec^(0+128),w
  8422  0265                     u5775:	
  8423  0265  1803               	skipnc
  8424  0266  2A8E               	goto	l4334
  8425                           
  8426                           ;doprnt.c: 1113: fval += fround(prec);
  8427  0267  0021               	movlb	1	; select bank1
  8428  0268  0846               	movf	printf@prec^(0+128),w
  8429  0269  318A  2210  3180   	fcall	_fround
  8430  026C  0020               	movlb	0	; select bank0
  8431  026D  0846               	movf	?_fround,w
  8432  026E  00D4               	movwf	___ftadd@f1
  8433  026F  0847               	movf	?_fround+1,w
  8434  0270  00D5               	movwf	___ftadd@f1+1
  8435  0271  0848               	movf	?_fround+2,w
  8436  0272  00D6               	movwf	___ftadd@f1+2
  8437  0273  0021               	movlb	1	; select bank1
  8438  0274  0843               	movf	printf@fval^(0+128),w
  8439  0275  0020               	movlb	0	; select bank0
  8440  0276  00D7               	movwf	___ftadd@f2
  8441  0277  0021               	movlb	1	; select bank1
  8442  0278  0844               	movf	(printf@fval+1)^(0+128),w
  8443  0279  0020               	movlb	0	; select bank0
  8444  027A  00D8               	movwf	___ftadd@f2+1
  8445  027B  0021               	movlb	1	; select bank1
  8446  027C  0845               	movf	(printf@fval+2)^(0+128),w
  8447  027D  0020               	movlb	0	; select bank0
  8448  027E  00D9               	movwf	___ftadd@f2+2
  8449  027F  3195  25ED  3180   	fcall	___ftadd
  8450  0282  0020               	movlb	0	; select bank0
  8451  0283  0854               	movf	?___ftadd,w
  8452  0284  0021               	movlb	1	; select bank1
  8453  0285  00C3               	movwf	printf@fval^(0+128)
  8454  0286  0020               	movlb	0	; select bank0
  8455  0287  0855               	movf	?___ftadd+1,w
  8456  0288  0021               	movlb	1	; select bank1
  8457  0289  00C4               	movwf	(printf@fval+1)^(0+128)
  8458  028A  0020               	movlb	0	; select bank0
  8459  028B  0856               	movf	?___ftadd+2,w
  8460  028C  0021               	movlb	1	; select bank1
  8461  028D  00C5               	movwf	(printf@fval+2)^(0+128)
  8462  028E                     l4334:	
  8463                           
  8464                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8465  028E  0021               	movlb	1	; select bank1
  8466  028F  083A               	movf	(printf@exp+1)^(0+128),w
  8467  0290  3A80               	xorlw	128
  8468  0291  0020               	movlb	0	; select bank0
  8469  0292  00E7               	movwf	??_printf
  8470  0293  3080               	movlw	128
  8471  0294  0267               	subwf	??_printf,w
  8472  0295  1D03               	skipz
  8473  0296  2A9A               	goto	u5785
  8474  0297  300A               	movlw	10
  8475  0298  0021               	movlb	1	; select bank1
  8476  0299  0239               	subwf	printf@exp^(0+128),w
  8477  029A                     u5785:	
  8478  029A  1803               	skipnc
  8479  029B  2AC5               	goto	l4342
  8480  029C  0021               	movlb	1	; select bank1
  8481  029D  0845               	movf	(printf@fval+2)^(0+128),w
  8482  029E  0444               	iorwf	(printf@fval+1)^(0+128),w
  8483  029F  0443               	iorwf	printf@fval^(0+128),w
  8484  02A0  1903               	skipnz
  8485  02A1  2B24               	goto	l4356
  8486  02A2  0843               	movf	printf@fval^(0+128),w
  8487  02A3  0020               	movlb	0	; select bank0
  8488  02A4  00CF               	movwf	___fttol@f1
  8489  02A5  0021               	movlb	1	; select bank1
  8490  02A6  0844               	movf	(printf@fval+1)^(0+128),w
  8491  02A7  0020               	movlb	0	; select bank0
  8492  02A8  00D0               	movwf	___fttol@f1+1
  8493  02A9  0021               	movlb	1	; select bank1
  8494  02AA  0845               	movf	(printf@fval+2)^(0+128),w
  8495  02AB  0020               	movlb	0	; select bank0
  8496  02AC  00D1               	movwf	___fttol@f1+2
  8497  02AD  3195  2566  3180   	fcall	___fttol
  8498  02B0  0020               	movlb	0	; select bank0
  8499  02B1  0852               	movf	?___fttol+3,w
  8500  02B2  0451               	iorwf	?___fttol+2,w
  8501  02B3  0450               	iorwf	?___fttol+1,w
  8502  02B4  044F               	iorwf	?___fttol,w
  8503  02B5  1D03               	skipz
  8504  02B6  2B24               	goto	l4356
  8505  02B7  0021               	movlb	1	; select bank1
  8506  02B8  083A               	movf	(printf@exp+1)^(0+128),w
  8507  02B9  3A80               	xorlw	128
  8508  02BA  0020               	movlb	0	; select bank0
  8509  02BB  00E7               	movwf	??_printf
  8510  02BC  3080               	movlw	128
  8511  02BD  0267               	subwf	??_printf,w
  8512  02BE  1D03               	skipz
  8513  02BF  2AC3               	goto	u5815
  8514  02C0  3002               	movlw	2
  8515  02C1  0021               	movlb	1	; select bank1
  8516  02C2  0239               	subwf	printf@exp^(0+128),w
  8517  02C3                     u5815:	
  8518  02C3  1C03               	skipc
  8519  02C4  2B24               	goto	l4356
  8520  02C5                     l4342:	
  8521                           
  8522                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  8523  02C5  0021               	movlb	1	; select bank1
  8524  02C6  083B               	movf	printf@tmpval^(0+128),w
  8525  02C7  0020               	movlb	0	; select bank0
  8526  02C8  00A0               	movwf	___ftge@ff1
  8527  02C9  0021               	movlb	1	; select bank1
  8528  02CA  083C               	movf	(printf@tmpval+1)^(0+128),w
  8529  02CB  0020               	movlb	0	; select bank0
  8530  02CC  00A1               	movwf	___ftge@ff1+1
  8531  02CD  0021               	movlb	1	; select bank1
  8532  02CE  083D               	movf	(printf@tmpval+2)^(0+128),w
  8533  02CF  0020               	movlb	0	; select bank0
  8534  02D0  00A2               	movwf	___ftge@ff1+2
  8535  02D1  3070               	movlw	112
  8536  02D2  00A3               	movwf	___ftge@ff2
  8537  02D3  3089               	movlw	137
  8538  02D4  00A4               	movwf	___ftge@ff2+1
  8539  02D5  3040               	movlw	64
  8540  02D6  00A5               	movwf	___ftge@ff2+2
  8541  02D7  3191  21A4  3180   	fcall	___ftge
  8542  02DA  1803               	btfsc	3,0
  8543  02DB  2ADE               	goto	l4346
  8544                           
  8545                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8546  02DC  30F7               	movlw	247
  8547  02DD  2ADF               	goto	L4
  8548  02DE                     l4346:	
  8549                           ;doprnt.c: 1122: }else{
  8550                           
  8551                           
  8552                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8553  02DE  30F8               	movlw	248
  8554  02DF                     L4:	
  8555  02DF  0021               	movlb	1	; select bank1
  8556  02E0  07B9               	addwf	printf@exp^(0+128),f
  8557  02E1  30FF               	movlw	255
  8558  02E2  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8559                           
  8560                           ;doprnt.c: 1124: }
  8561                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  8562  02E3  0839               	movf	printf@exp^(0+128),w
  8563  02E4  318D  25BA  3180   	fcall	_scale
  8564  02E7  0020               	movlb	0	; select bank0
  8565  02E8  0846               	movf	?_scale,w
  8566  02E9  0021               	movlb	1	; select bank1
  8567  02EA  00BB               	movwf	printf@tmpval^(0+128)
  8568  02EB  0020               	movlb	0	; select bank0
  8569  02EC  0847               	movf	?_scale+1,w
  8570  02ED  0021               	movlb	1	; select bank1
  8571  02EE  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8572  02EF  0020               	movlb	0	; select bank0
  8573  02F0  0848               	movf	?_scale+2,w
  8574  02F1  0021               	movlb	1	; select bank1
  8575  02F2  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8576                           
  8577                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  8578  02F3  0843               	movf	printf@fval^(0+128),w
  8579  02F4  0020               	movlb	0	; select bank0
  8580  02F5  00A0               	movwf	__tdiv_to_l_@f1
  8581  02F6  0021               	movlb	1	; select bank1
  8582  02F7  0844               	movf	(printf@fval+1)^(0+128),w
  8583  02F8  0020               	movlb	0	; select bank0
  8584  02F9  00A1               	movwf	__tdiv_to_l_@f1+1
  8585  02FA  0021               	movlb	1	; select bank1
  8586  02FB  0845               	movf	(printf@fval+2)^(0+128),w
  8587  02FC  0020               	movlb	0	; select bank0
  8588  02FD  00A2               	movwf	__tdiv_to_l_@f1+2
  8589  02FE  0021               	movlb	1	; select bank1
  8590  02FF  083B               	movf	printf@tmpval^(0+128),w
  8591  0300  0020               	movlb	0	; select bank0
  8592  0301  00A3               	movwf	__tdiv_to_l_@f2
  8593  0302  0021               	movlb	1	; select bank1
  8594  0303  083C               	movf	(printf@tmpval+1)^(0+128),w
  8595  0304  0020               	movlb	0	; select bank0
  8596  0305  00A4               	movwf	__tdiv_to_l_@f2+1
  8597  0306  0021               	movlb	1	; select bank1
  8598  0307  083D               	movf	(printf@tmpval+2)^(0+128),w
  8599  0308  0020               	movlb	0	; select bank0
  8600  0309  00A5               	movwf	__tdiv_to_l_@f2+2
  8601  030A  3187  2741  3180   	fcall	__tdiv_to_l_
  8602  030D  0020               	movlb	0	; select bank0
  8603  030E  0823               	movf	?__tdiv_to_l_+3,w
  8604  030F  0021               	movlb	1	; select bank1
  8605  0310  00C2               	movwf	(printf@val+3)^(0+128)
  8606  0311  0020               	movlb	0	; select bank0
  8607  0312  0822               	movf	?__tdiv_to_l_+2,w
  8608  0313  0021               	movlb	1	; select bank1
  8609  0314  00C1               	movwf	(printf@val+2)^(0+128)
  8610  0315  0020               	movlb	0	; select bank0
  8611  0316  0821               	movf	?__tdiv_to_l_+1,w
  8612  0317  0021               	movlb	1	; select bank1
  8613  0318  00C0               	movwf	(printf@val+1)^(0+128)
  8614  0319  0020               	movlb	0	; select bank0
  8615  031A  0820               	movf	?__tdiv_to_l_,w
  8616  031B  0021               	movlb	1	; select bank1
  8617  031C  00BF               	movwf	printf@val^(0+128)
  8618                           
  8619                           ;doprnt.c: 1129: fval = 0.0;
  8620  031D  3000               	movlw	0
  8621  031E  00C3               	movwf	printf@fval^(0+128)
  8622  031F  3000               	movlw	0
  8623  0320  00C4               	movwf	(printf@fval+1)^(0+128)
  8624  0321  3000               	movlw	0
  8625  0322  00C5               	movwf	(printf@fval+2)^(0+128)
  8626                           
  8627                           ;doprnt.c: 1130: } else {
  8628  0323  2B79               	goto	l4360
  8629  0324                     l4356:	
  8630                           
  8631                           ;doprnt.c: 1131: val = (unsigned long)fval;
  8632  0324  0021               	movlb	1	; select bank1
  8633  0325  0843               	movf	printf@fval^(0+128),w
  8634  0326  0020               	movlb	0	; select bank0
  8635  0327  00CF               	movwf	___fttol@f1
  8636  0328  0021               	movlb	1	; select bank1
  8637  0329  0844               	movf	(printf@fval+1)^(0+128),w
  8638  032A  0020               	movlb	0	; select bank0
  8639  032B  00D0               	movwf	___fttol@f1+1
  8640  032C  0021               	movlb	1	; select bank1
  8641  032D  0845               	movf	(printf@fval+2)^(0+128),w
  8642  032E  0020               	movlb	0	; select bank0
  8643  032F  00D1               	movwf	___fttol@f1+2
  8644  0330  3195  2566  3180   	fcall	___fttol
  8645  0333  0020               	movlb	0	; select bank0
  8646  0334  0852               	movf	?___fttol+3,w
  8647  0335  0021               	movlb	1	; select bank1
  8648  0336  00C2               	movwf	(printf@val+3)^(0+128)
  8649  0337  0020               	movlb	0	; select bank0
  8650  0338  0851               	movf	?___fttol+2,w
  8651  0339  0021               	movlb	1	; select bank1
  8652  033A  00C1               	movwf	(printf@val+2)^(0+128)
  8653  033B  0020               	movlb	0	; select bank0
  8654  033C  0850               	movf	?___fttol+1,w
  8655  033D  0021               	movlb	1	; select bank1
  8656  033E  00C0               	movwf	(printf@val+1)^(0+128)
  8657  033F  0020               	movlb	0	; select bank0
  8658  0340  084F               	movf	?___fttol,w
  8659  0341  0021               	movlb	1	; select bank1
  8660  0342  00BF               	movwf	printf@val^(0+128)
  8661                           
  8662                           ;doprnt.c: 1132: fval -= (double)val;
  8663  0343  0842               	movf	(printf@val+3)^(0+128),w
  8664  0344  0020               	movlb	0	; select bank0
  8665  0345  00AB               	movwf	___lltoft@c+3
  8666  0346  0021               	movlb	1	; select bank1
  8667  0347  0841               	movf	(printf@val+2)^(0+128),w
  8668  0348  0020               	movlb	0	; select bank0
  8669  0349  00AA               	movwf	___lltoft@c+2
  8670  034A  0021               	movlb	1	; select bank1
  8671  034B  0840               	movf	(printf@val+1)^(0+128),w
  8672  034C  0020               	movlb	0	; select bank0
  8673  034D  00A9               	movwf	___lltoft@c+1
  8674  034E  0021               	movlb	1	; select bank1
  8675  034F  083F               	movf	printf@val^(0+128),w
  8676  0350  0020               	movlb	0	; select bank0
  8677  0351  00A8               	movwf	___lltoft@c
  8678  0352  3190  20EE  3180   	fcall	___lltoft
  8679  0355  0020               	movlb	0	; select bank0
  8680  0356  0828               	movf	?___lltoft,w
  8681  0357  00E1               	movwf	___ftsub@f2
  8682  0358  0829               	movf	?___lltoft+1,w
  8683  0359  00E2               	movwf	___ftsub@f2+1
  8684  035A  082A               	movf	?___lltoft+2,w
  8685  035B  00E3               	movwf	___ftsub@f2+2
  8686  035C  0021               	movlb	1	; select bank1
  8687  035D  0843               	movf	printf@fval^(0+128),w
  8688  035E  0020               	movlb	0	; select bank0
  8689  035F  00E4               	movwf	___ftsub@f1
  8690  0360  0021               	movlb	1	; select bank1
  8691  0361  0844               	movf	(printf@fval+1)^(0+128),w
  8692  0362  0020               	movlb	0	; select bank0
  8693  0363  00E5               	movwf	___ftsub@f1+1
  8694  0364  0021               	movlb	1	; select bank1
  8695  0365  0845               	movf	(printf@fval+2)^(0+128),w
  8696  0366  0020               	movlb	0	; select bank0
  8697  0367  00E6               	movwf	___ftsub@f1+2
  8698  0368  3190  2028  3180   	fcall	___ftsub
  8699  036B  0020               	movlb	0	; select bank0
  8700  036C  0861               	movf	?___ftsub,w
  8701  036D  0021               	movlb	1	; select bank1
  8702  036E  00C3               	movwf	printf@fval^(0+128)
  8703  036F  0020               	movlb	0	; select bank0
  8704  0370  0862               	movf	?___ftsub+1,w
  8705  0371  0021               	movlb	1	; select bank1
  8706  0372  00C4               	movwf	(printf@fval+1)^(0+128)
  8707  0373  0020               	movlb	0	; select bank0
  8708  0374  0863               	movf	?___ftsub+2,w
  8709  0375  0021               	movlb	1	; select bank1
  8710  0376  00C5               	movwf	(printf@fval+2)^(0+128)
  8711                           
  8712                           ;doprnt.c: 1133: exp = 0;
  8713  0377  01B9               	clrf	printf@exp^(0+128)
  8714  0378  01BA               	clrf	(printf@exp+1)^(0+128)
  8715  0379                     l4360:	
  8716                           
  8717                           ;doprnt.c: 1134: }
  8718                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8719  0379  01C8               	clrf	printf@c^(0+128)
  8720  037A  0AC8               	incf	printf@c^(0+128),f
  8721  037B  300A               	movlw	10
  8722  037C  0648               	xorwf	printf@c^(0+128),w
  8723  037D  1903               	btfsc	3,2
  8724  037E  2BB6               	goto	l4372
  8725  037F                     l4366:	
  8726                           
  8727                           ;doprnt.c: 1137: if(val < dpowers[c])
  8728  037F  0848               	movf	printf@c^(0+128),w
  8729  0380  0020               	movlb	0	; select bank0
  8730  0381  00E7               	movwf	??_printf
  8731  0382  01E8               	clrf	??_printf+1
  8732  0383  35E7               	lslf	??_printf,f
  8733  0384  0DE8               	rlf	??_printf+1,f
  8734  0385  35E7               	lslf	??_printf,f
  8735  0386  0DE8               	rlf	??_printf+1,f
  8736  0387  3042               	movlw	low (_dpowers| (0+32768))
  8737  0388  0767               	addwf	??_printf,w
  8738  0389  0084               	movwf	4
  8739  038A  3099               	movlw	high (_dpowers| (0+32768))
  8740  038B  3D68               	addwfc	??_printf+1,w
  8741  038C  0085               	movwf	5
  8742  038D  3F00               	moviw [0]fsr0
  8743  038E  00E9               	movwf	??_printf+2
  8744  038F  3F01               	moviw [1]fsr0
  8745  0390  00EA               	movwf	??_printf+3
  8746  0391  3F02               	moviw [2]fsr0
  8747  0392  00EB               	movwf	??_printf+4
  8748  0393  3F03               	moviw [3]fsr0
  8749  0394  00EC               	movwf	??_printf+5
  8750  0395  086C               	movf	??_printf+5,w
  8751  0396  0021               	movlb	1	; select bank1
  8752  0397  0242               	subwf	(printf@val+3)^(0+128),w
  8753  0398  1D03               	skipz
  8754  0399  2BAA               	goto	u5845
  8755  039A  0020               	movlb	0	; select bank0
  8756  039B  086B               	movf	??_printf+4,w
  8757  039C  0021               	movlb	1	; select bank1
  8758  039D  0241               	subwf	(printf@val+2)^(0+128),w
  8759  039E  1D03               	skipz
  8760  039F  2BAA               	goto	u5845
  8761  03A0  0020               	movlb	0	; select bank0
  8762  03A1  086A               	movf	??_printf+3,w
  8763  03A2  0021               	movlb	1	; select bank1
  8764  03A3  0240               	subwf	(printf@val+1)^(0+128),w
  8765  03A4  1D03               	skipz
  8766  03A5  2BAA               	goto	u5845
  8767  03A6  0020               	movlb	0	; select bank0
  8768  03A7  0869               	movf	??_printf+2,w
  8769  03A8  0021               	movlb	1	; select bank1
  8770  03A9  023F               	subwf	printf@val^(0+128),w
  8771  03AA                     u5845:	
  8772  03AA  1C03               	btfss	3,0
  8773  03AB  2BB6               	goto	l4372
  8774                           
  8775                           ;doprnt.c: 1138: break;
  8776  03AC  3001               	movlw	1
  8777  03AD  0020               	movlb	0	; select bank0
  8778  03AE  00E7               	movwf	??_printf
  8779  03AF  0867               	movf	??_printf,w
  8780  03B0  0021               	movlb	1	; select bank1
  8781  03B1  07C8               	addwf	printf@c^(0+128),f
  8782  03B2  300A               	movlw	10
  8783  03B3  0648               	xorwf	printf@c^(0+128),w
  8784  03B4  1D03               	btfss	3,2
  8785  03B5  2B7F               	goto	l4366
  8786  03B6                     l4372:	
  8787                           
  8788                           ;doprnt.c: 1175: {
  8789                           ;doprnt.c: 1188: if(flag & 0x03)
  8790  03B6  3003               	movlw	3
  8791  03B7  0537               	andwf	printf@flag^(0+128),w
  8792  03B8  0020               	movlb	0	; select bank0
  8793  03B9  00E7               	movwf	??_printf
  8794  03BA  3000               	movlw	0
  8795  03BB  0021               	movlb	1	; select bank1
  8796  03BC  0538               	andwf	(printf@flag+1)^(0+128),w
  8797  03BD  0020               	movlb	0	; select bank0
  8798  03BE  00E8               	movwf	??_printf+1
  8799  03BF  0867               	movf	??_printf,w
  8800  03C0  0468               	iorwf	??_printf+1,w
  8801  03C1  1903               	btfsc	3,2
  8802  03C2  2BC7               	goto	l4382
  8803                           
  8804                           ;doprnt.c: 1190: (putch('-') );
  8805  03C3  302D               	movlw	45
  8806  03C4                     L12:	
  8807  03C4  319F  273F  3180   	fcall	_putch
  8808  03C7                     l4382:	
  8809                           ;doprnt.c: 1195: }
  8810                           ;doprnt.c: 1196: while(c--) {
  8811                           
  8812  03C7  30FF               	movlw	255
  8813  03C8  0020               	movlb	0	; select bank0
  8814  03C9  00E7               	movwf	??_printf
  8815  03CA  0867               	movf	??_printf,w
  8816  03CB  0021               	movlb	1	; select bank1
  8817  03CC  07C8               	addwf	printf@c^(0+128),f
  8818  03CD  0A48               	incf	printf@c^(0+128),w
  8819  03CE  1903               	btfsc	3,2
  8820  03CF  2C42               	goto	l4388
  8821                           
  8822                           ;doprnt.c: 1200: {
  8823                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8824  03D0  0021               	movlb	1	; select bank1
  8825  03D1  0848               	movf	printf@c^(0+128),w
  8826  03D2  0020               	movlb	0	; select bank0
  8827  03D3  00E7               	movwf	??_printf
  8828  03D4  01E8               	clrf	??_printf+1
  8829  03D5  35E7               	lslf	??_printf,f
  8830  03D6  0DE8               	rlf	??_printf+1,f
  8831  03D7  35E7               	lslf	??_printf,f
  8832  03D8  0DE8               	rlf	??_printf+1,f
  8833  03D9  3042               	movlw	low (_dpowers| (0+32768))
  8834  03DA  0767               	addwf	??_printf,w
  8835  03DB  0084               	movwf	4
  8836  03DC  3099               	movlw	high (_dpowers| (0+32768))
  8837  03DD  3D68               	addwfc	??_printf+1,w
  8838  03DE  0085               	movwf	5
  8839  03DF  3F00               	moviw [0]fsr0
  8840  03E0  00A0               	movwf	___lldiv@divisor
  8841  03E1  3F01               	moviw [1]fsr0
  8842  03E2  00A1               	movwf	___lldiv@divisor+1
  8843  03E3  3F02               	moviw [2]fsr0
  8844  03E4  00A2               	movwf	___lldiv@divisor+2
  8845  03E5  3F03               	moviw [3]fsr0
  8846  03E6  00A3               	movwf	___lldiv@divisor+3
  8847  03E7  0021               	movlb	1	; select bank1
  8848  03E8  0842               	movf	(printf@val+3)^(0+128),w
  8849  03E9  0020               	movlb	0	; select bank0
  8850  03EA  00A7               	movwf	___lldiv@dividend+3
  8851  03EB  0021               	movlb	1	; select bank1
  8852  03EC  0841               	movf	(printf@val+2)^(0+128),w
  8853  03ED  0020               	movlb	0	; select bank0
  8854  03EE  00A6               	movwf	___lldiv@dividend+2
  8855  03EF  0021               	movlb	1	; select bank1
  8856  03F0  0840               	movf	(printf@val+1)^(0+128),w
  8857  03F1  0020               	movlb	0	; select bank0
  8858  03F2  00A5               	movwf	___lldiv@dividend+1
  8859  03F3  0021               	movlb	1	; select bank1
  8860  03F4  083F               	movf	printf@val^(0+128),w
  8861  03F5  0020               	movlb	0	; select bank0
  8862  03F6  00A4               	movwf	___lldiv@dividend
  8863  03F7  3193  23DD  3180   	fcall	___lldiv
  8864  03FA  0020               	movlb	0	; select bank0
  8865  03FB  0823               	movf	?___lldiv+3,w
  8866  03FC  0021               	movlb	1	; select bank1
  8867  03FD  00BE               	movwf	(printf@tmpval+3)^(0+128)
  8868  03FE  0020               	movlb	0	; select bank0
  8869  03FF  0822               	movf	?___lldiv+2,w
  8870  0400  0021               	movlb	1	; select bank1
  8871  0401  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8872  0402  0020               	movlb	0	; select bank0
  8873  0403  0821               	movf	?___lldiv+1,w
  8874  0404  0021               	movlb	1	; select bank1
  8875  0405  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8876  0406  0020               	movlb	0	; select bank0
  8877  0407  0820               	movf	?___lldiv,w
  8878  0408  0021               	movlb	1	; select bank1
  8879  0409  00BB               	movwf	printf@tmpval^(0+128)
  8880                           
  8881                           ;doprnt.c: 1202: tmpval.vd %= 10;
  8882  040A  3000               	movlw	0
  8883  040B  0020               	movlb	0	; select bank0
  8884  040C  00B1               	movwf	___llmod@divisor+3
  8885  040D  3000               	movlw	0
  8886  040E  00B0               	movwf	___llmod@divisor+2
  8887  040F  3000               	movlw	0
  8888  0410  00AF               	movwf	___llmod@divisor+1
  8889  0411  300A               	movlw	10
  8890  0412  00AE               	movwf	___llmod@divisor
  8891  0413  0021               	movlb	1	; select bank1
  8892  0414  083E               	movf	(printf@tmpval+3)^(0+128),w
  8893  0415  0020               	movlb	0	; select bank0
  8894  0416  00B5               	movwf	___llmod@dividend+3
  8895  0417  0021               	movlb	1	; select bank1
  8896  0418  083D               	movf	(printf@tmpval+2)^(0+128),w
  8897  0419  0020               	movlb	0	; select bank0
  8898  041A  00B4               	movwf	___llmod@dividend+2
  8899  041B  0021               	movlb	1	; select bank1
  8900  041C  083C               	movf	(printf@tmpval+1)^(0+128),w
  8901  041D  0020               	movlb	0	; select bank0
  8902  041E  00B3               	movwf	___llmod@dividend+1
  8903  041F  0021               	movlb	1	; select bank1
  8904  0420  083B               	movf	printf@tmpval^(0+128),w
  8905  0421  0020               	movlb	0	; select bank0
  8906  0422  00B2               	movwf	___llmod@dividend
  8907  0423  3191  21E0  3180   	fcall	___llmod
  8908  0426  0020               	movlb	0	; select bank0
  8909  0427  0831               	movf	?___llmod+3,w
  8910  0428  0021               	movlb	1	; select bank1
  8911  0429  00BE               	movwf	(printf@tmpval+3)^(0+128)
  8912  042A  0020               	movlb	0	; select bank0
  8913  042B  0830               	movf	?___llmod+2,w
  8914  042C  0021               	movlb	1	; select bank1
  8915  042D  00BD               	movwf	(printf@tmpval+2)^(0+128)
  8916  042E  0020               	movlb	0	; select bank0
  8917  042F  082F               	movf	?___llmod+1,w
  8918  0430  0021               	movlb	1	; select bank1
  8919  0431  00BC               	movwf	(printf@tmpval+1)^(0+128)
  8920  0432  0020               	movlb	0	; select bank0
  8921  0433  082E               	movf	?___llmod,w
  8922  0434  0021               	movlb	1	; select bank1
  8923  0435  00BB               	movwf	printf@tmpval^(0+128)
  8924                           
  8925                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  8926  0436  083B               	movf	printf@tmpval^(0+128),w
  8927  0437  3E30               	addlw	48
  8928  0438  2BC4               	goto	L12
  8929  0439                     l4384:	
  8930                           ;doprnt.c: 1204: }
  8931                           ;doprnt.c: 1206: }
  8932                           ;doprnt.c: 1207: while(exp > 0) {
  8933                           
  8934                           
  8935                           ;doprnt.c: 1208: (putch('0') );
  8936  0439  3030               	movlw	48
  8937  043A  319F  273F  3180   	fcall	_putch
  8938                           
  8939                           ;doprnt.c: 1209: exp--;
  8940  043D  30FF               	movlw	255
  8941  043E  0021               	movlb	1	; select bank1
  8942  043F  07B9               	addwf	printf@exp^(0+128),f
  8943  0440  30FF               	movlw	255
  8944  0441  3DBA               	addwfc	(printf@exp+1)^(0+128),f
  8945  0442                     l4388:	
  8946  0442  083A               	movf	(printf@exp+1)^(0+128),w
  8947  0443  3A80               	xorlw	128
  8948  0444  0020               	movlb	0	; select bank0
  8949  0445  00E7               	movwf	??_printf
  8950  0446  3080               	movlw	128
  8951  0447  0267               	subwf	??_printf,w
  8952  0448  1D03               	skipz
  8953  0449  2C4D               	goto	u5885
  8954  044A  3001               	movlw	1
  8955  044B  0021               	movlb	1	; select bank1
  8956  044C  0239               	subwf	printf@exp^(0+128),w
  8957  044D                     u5885:	
  8958  044D  1803               	skipnc
  8959  044E  2C39               	goto	l4384
  8960                           
  8961                           ;doprnt.c: 1210: }
  8962                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8963  044F  0021               	movlb	1	; select bank1
  8964  0450  0847               	movf	(printf@prec+1)^(0+128),w
  8965  0451  3A80               	xorlw	128
  8966  0452  0020               	movlb	0	; select bank0
  8967  0453  00E7               	movwf	??_printf
  8968  0454  3080               	movlw	128
  8969  0455  0267               	subwf	??_printf,w
  8970  0456  1D03               	skipz
  8971  0457  2C5B               	goto	u5895
  8972  0458  3009               	movlw	9
  8973  0459  0021               	movlb	1	; select bank1
  8974  045A  0246               	subwf	printf@prec^(0+128),w
  8975  045B                     u5895:	
  8976  045B  1C03               	skipc
  8977  045C  2C5F               	goto	l4394
  8978                           
  8979                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8980  045D  3008               	movlw	8
  8981  045E  2C61               	goto	L5
  8982  045F                     l4394:	
  8983                           
  8984                           ;doprnt.c: 1213: else
  8985                           ;doprnt.c: 1214: c = prec;
  8986  045F  0021               	movlb	1	; select bank1
  8987  0460  0846               	movf	printf@prec^(0+128),w
  8988  0461                     L5:	
  8989  0461  0020               	movlb	0	; select bank0
  8990  0462  00E7               	movwf	??_printf
  8991  0463  0867               	movf	??_printf,w
  8992  0464  0021               	movlb	1	; select bank1
  8993  0465  00C8               	movwf	printf@c^(0+128)
  8994                           
  8995                           ;doprnt.c: 1215: prec -= c;
  8996  0466  0848               	movf	printf@c^(0+128),w
  8997  0467  0020               	movlb	0	; select bank0
  8998  0468  00E7               	movwf	??_printf
  8999  0469  01E8               	clrf	??_printf+1
  9000  046A  1BE7               	btfsc	??_printf,7
  9001  046B  03E8               	decf	??_printf+1,f
  9002  046C  0867               	movf	??_printf,w
  9003  046D  0021               	movlb	1	; select bank1
  9004  046E  02C6               	subwf	printf@prec^(0+128),f
  9005  046F  0020               	movlb	0	; select bank0
  9006  0470  0868               	movf	??_printf+1,w
  9007  0471  0021               	movlb	1	; select bank1
  9008  0472  3BC7               	subwfb	(printf@prec+1)^(0+128),f
  9009                           
  9010                           ;doprnt.c: 1219: if(c)
  9011  0473  0848               	movf	printf@c^(0+128),w
  9012  0474  1903               	btfsc	3,2
  9013  0475  2C7A               	goto	l4400
  9014                           
  9015                           ;doprnt.c: 1221: (putch('.') );
  9016  0476  302E               	movlw	46
  9017  0477  319F  273F  3180   	fcall	_putch
  9018  047A                     l4400:	
  9019                           
  9020                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9021  047A  0021               	movlb	1	; select bank1
  9022  047B  0848               	movf	printf@c^(0+128),w
  9023  047C  318D  25BA  3180   	fcall	_scale
  9024  047F  0020               	movlb	0	; select bank0
  9025  0480  0846               	movf	?_scale,w
  9026  0481  0021               	movlb	1	; select bank1
  9027  0482  00AC               	movwf	_printf$1383^(0+128)
  9028  0483  0020               	movlb	0	; select bank0
  9029  0484  0847               	movf	?_scale+1,w
  9030  0485  0021               	movlb	1	; select bank1
  9031  0486  00AD               	movwf	(_printf$1383+1)^(0+128)
  9032  0487  0020               	movlb	0	; select bank0
  9033  0488  0848               	movf	?_scale+2,w
  9034  0489  0021               	movlb	1	; select bank1
  9035  048A  00AE               	movwf	(_printf$1383+2)^(0+128)
  9036                           
  9037                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9038  048B  082C               	movf	_printf$1383^(0+128),w
  9039  048C  0020               	movlb	0	; select bank0
  9040  048D  00B9               	movwf	___ftmul@f2
  9041  048E  0021               	movlb	1	; select bank1
  9042  048F  082D               	movf	(_printf$1383+1)^(0+128),w
  9043  0490  0020               	movlb	0	; select bank0
  9044  0491  00BA               	movwf	___ftmul@f2+1
  9045  0492  0021               	movlb	1	; select bank1
  9046  0493  082E               	movf	(_printf$1383+2)^(0+128),w
  9047  0494  0020               	movlb	0	; select bank0
  9048  0495  00BB               	movwf	___ftmul@f2+2
  9049  0496  0021               	movlb	1	; select bank1
  9050  0497  0843               	movf	printf@fval^(0+128),w
  9051  0498  0020               	movlb	0	; select bank0
  9052  0499  00B6               	movwf	___ftmul@f1
  9053  049A  0021               	movlb	1	; select bank1
  9054  049B  0844               	movf	(printf@fval+1)^(0+128),w
  9055  049C  0020               	movlb	0	; select bank0
  9056  049D  00B7               	movwf	___ftmul@f1+1
  9057  049E  0021               	movlb	1	; select bank1
  9058  049F  0845               	movf	(printf@fval+2)^(0+128),w
  9059  04A0  0020               	movlb	0	; select bank0
  9060  04A1  00B8               	movwf	___ftmul@f1+2
  9061  04A2  3188  2016  3180   	fcall	___ftmul
  9062  04A5  0020               	movlb	0	; select bank0
  9063  04A6  0836               	movf	?___ftmul,w
  9064  04A7  00CF               	movwf	___fttol@f1
  9065  04A8  0837               	movf	?___ftmul+1,w
  9066  04A9  00D0               	movwf	___fttol@f1+1
  9067  04AA  0838               	movf	?___ftmul+2,w
  9068  04AB  00D1               	movwf	___fttol@f1+2
  9069  04AC  3195  2566  3180   	fcall	___fttol
  9070  04AF  0020               	movlb	0	; select bank0
  9071  04B0  0852               	movf	?___fttol+3,w
  9072  04B1  0021               	movlb	1	; select bank1
  9073  04B2  00C2               	movwf	(printf@val+3)^(0+128)
  9074  04B3  0020               	movlb	0	; select bank0
  9075  04B4  0851               	movf	?___fttol+2,w
  9076  04B5  0021               	movlb	1	; select bank1
  9077  04B6  00C1               	movwf	(printf@val+2)^(0+128)
  9078  04B7  0020               	movlb	0	; select bank0
  9079  04B8  0850               	movf	?___fttol+1,w
  9080  04B9  0021               	movlb	1	; select bank1
  9081  04BA  00C0               	movwf	(printf@val+1)^(0+128)
  9082  04BB  0020               	movlb	0	; select bank0
  9083  04BC  084F               	movf	?___fttol,w
  9084  04BD                     L6:	
  9085  04BD  0021               	movlb	1	; select bank1
  9086  04BE  00BF               	movwf	printf@val^(0+128)
  9087  04BF  30FF               	movlw	255
  9088  04C0  0020               	movlb	0	; select bank0
  9089  04C1  00E7               	movwf	??_printf
  9090  04C2  0867               	movf	??_printf,w
  9091  04C3  0021               	movlb	1	; select bank1
  9092  04C4  07C8               	addwf	printf@c^(0+128),f
  9093  04C5  0A48               	incf	printf@c^(0+128),w
  9094  04C6  1903               	btfsc	3,2
  9095  04C7  2D74               	goto	l4416
  9096                           
  9097                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  9098                           
  9099                           ;doprnt.c: 1228: while(c--) {
  9100  04C8  0848               	movf	printf@c^(0+128),w
  9101  04C9  0020               	movlb	0	; select bank0
  9102  04CA  00E7               	movwf	??_printf
  9103  04CB  01E8               	clrf	??_printf+1
  9104  04CC  35E7               	lslf	??_printf,f
  9105  04CD  0DE8               	rlf	??_printf+1,f
  9106  04CE  35E7               	lslf	??_printf,f
  9107  04CF  0DE8               	rlf	??_printf+1,f
  9108  04D0  3042               	movlw	low (_dpowers| (0+32768))
  9109  04D1  0767               	addwf	??_printf,w
  9110  04D2  0084               	movwf	4
  9111  04D3  3099               	movlw	high (_dpowers| (0+32768))
  9112  04D4  3D68               	addwfc	??_printf+1,w
  9113  04D5  0085               	movwf	5
  9114  04D6  3F00               	moviw [0]fsr0
  9115  04D7  00A0               	movwf	___lldiv@divisor
  9116  04D8  3F01               	moviw [1]fsr0
  9117  04D9  00A1               	movwf	___lldiv@divisor+1
  9118  04DA  3F02               	moviw [2]fsr0
  9119  04DB  00A2               	movwf	___lldiv@divisor+2
  9120  04DC  3F03               	moviw [3]fsr0
  9121  04DD  00A3               	movwf	___lldiv@divisor+3
  9122  04DE  0021               	movlb	1	; select bank1
  9123  04DF  0842               	movf	(printf@val+3)^(0+128),w
  9124  04E0  0020               	movlb	0	; select bank0
  9125  04E1  00A7               	movwf	___lldiv@dividend+3
  9126  04E2  0021               	movlb	1	; select bank1
  9127  04E3  0841               	movf	(printf@val+2)^(0+128),w
  9128  04E4  0020               	movlb	0	; select bank0
  9129  04E5  00A6               	movwf	___lldiv@dividend+2
  9130  04E6  0021               	movlb	1	; select bank1
  9131  04E7  0840               	movf	(printf@val+1)^(0+128),w
  9132  04E8  0020               	movlb	0	; select bank0
  9133  04E9  00A5               	movwf	___lldiv@dividend+1
  9134  04EA  0021               	movlb	1	; select bank1
  9135  04EB  083F               	movf	printf@val^(0+128),w
  9136  04EC  0020               	movlb	0	; select bank0
  9137  04ED  00A4               	movwf	___lldiv@dividend
  9138  04EE  3193  23DD  3180   	fcall	___lldiv
  9139  04F1  0020               	movlb	0	; select bank0
  9140  04F2  0823               	movf	?___lldiv+3,w
  9141  04F3  0021               	movlb	1	; select bank1
  9142  04F4  00BE               	movwf	(printf@tmpval+3)^(0+128)
  9143  04F5  0020               	movlb	0	; select bank0
  9144  04F6  0822               	movf	?___lldiv+2,w
  9145  04F7  0021               	movlb	1	; select bank1
  9146  04F8  00BD               	movwf	(printf@tmpval+2)^(0+128)
  9147  04F9  0020               	movlb	0	; select bank0
  9148  04FA  0821               	movf	?___lldiv+1,w
  9149  04FB  0021               	movlb	1	; select bank1
  9150  04FC  00BC               	movwf	(printf@tmpval+1)^(0+128)
  9151  04FD  0020               	movlb	0	; select bank0
  9152  04FE  0820               	movf	?___lldiv,w
  9153  04FF  0021               	movlb	1	; select bank1
  9154  0500  00BB               	movwf	printf@tmpval^(0+128)
  9155                           
  9156                           ;doprnt.c: 1230: tmpval.vd %= 10;
  9157  0501  3000               	movlw	0
  9158  0502  0020               	movlb	0	; select bank0
  9159  0503  00B1               	movwf	___llmod@divisor+3
  9160  0504  3000               	movlw	0
  9161  0505  00B0               	movwf	___llmod@divisor+2
  9162  0506  3000               	movlw	0
  9163  0507  00AF               	movwf	___llmod@divisor+1
  9164  0508  300A               	movlw	10
  9165  0509  00AE               	movwf	___llmod@divisor
  9166  050A  0021               	movlb	1	; select bank1
  9167  050B  083E               	movf	(printf@tmpval+3)^(0+128),w
  9168  050C  0020               	movlb	0	; select bank0
  9169  050D  00B5               	movwf	___llmod@dividend+3
  9170  050E  0021               	movlb	1	; select bank1
  9171  050F  083D               	movf	(printf@tmpval+2)^(0+128),w
  9172  0510  0020               	movlb	0	; select bank0
  9173  0511  00B4               	movwf	___llmod@dividend+2
  9174  0512  0021               	movlb	1	; select bank1
  9175  0513  083C               	movf	(printf@tmpval+1)^(0+128),w
  9176  0514  0020               	movlb	0	; select bank0
  9177  0515  00B3               	movwf	___llmod@dividend+1
  9178  0516  0021               	movlb	1	; select bank1
  9179  0517  083B               	movf	printf@tmpval^(0+128),w
  9180  0518  0020               	movlb	0	; select bank0
  9181  0519  00B2               	movwf	___llmod@dividend
  9182  051A  3191  21E0  3180   	fcall	___llmod
  9183  051D  0020               	movlb	0	; select bank0
  9184  051E  0831               	movf	?___llmod+3,w
  9185  051F  0021               	movlb	1	; select bank1
  9186  0520  00BE               	movwf	(printf@tmpval+3)^(0+128)
  9187  0521  0020               	movlb	0	; select bank0
  9188  0522  0830               	movf	?___llmod+2,w
  9189  0523  0021               	movlb	1	; select bank1
  9190  0524  00BD               	movwf	(printf@tmpval+2)^(0+128)
  9191  0525  0020               	movlb	0	; select bank0
  9192  0526  082F               	movf	?___llmod+1,w
  9193  0527  0021               	movlb	1	; select bank1
  9194  0528  00BC               	movwf	(printf@tmpval+1)^(0+128)
  9195  0529  0020               	movlb	0	; select bank0
  9196  052A  082E               	movf	?___llmod,w
  9197  052B  0021               	movlb	1	; select bank1
  9198  052C  00BB               	movwf	printf@tmpval^(0+128)
  9199                           
  9200                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  9201  052D  083B               	movf	printf@tmpval^(0+128),w
  9202  052E  3E30               	addlw	48
  9203  052F  319F  273F  3180   	fcall	_putch
  9204                           
  9205                           ;doprnt.c: 1232: val %= dpowers[c];
  9206  0532  0021               	movlb	1	; select bank1
  9207  0533  0848               	movf	printf@c^(0+128),w
  9208  0534  0020               	movlb	0	; select bank0
  9209  0535  00E7               	movwf	??_printf
  9210  0536  01E8               	clrf	??_printf+1
  9211  0537  35E7               	lslf	??_printf,f
  9212  0538  0DE8               	rlf	??_printf+1,f
  9213  0539  35E7               	lslf	??_printf,f
  9214  053A  0DE8               	rlf	??_printf+1,f
  9215  053B  3042               	movlw	low (_dpowers| (0+32768))
  9216  053C  0767               	addwf	??_printf,w
  9217  053D  0084               	movwf	4
  9218  053E  3099               	movlw	high (_dpowers| (0+32768))
  9219  053F  3D68               	addwfc	??_printf+1,w
  9220  0540  0085               	movwf	5
  9221  0541  3F00               	moviw [0]fsr0
  9222  0542  00AE               	movwf	___llmod@divisor
  9223  0543  3F01               	moviw [1]fsr0
  9224  0544  00AF               	movwf	___llmod@divisor+1
  9225  0545  3F02               	moviw [2]fsr0
  9226  0546  00B0               	movwf	___llmod@divisor+2
  9227  0547  3F03               	moviw [3]fsr0
  9228  0548  00B1               	movwf	___llmod@divisor+3
  9229  0549  0021               	movlb	1	; select bank1
  9230  054A  0842               	movf	(printf@val+3)^(0+128),w
  9231  054B  0020               	movlb	0	; select bank0
  9232  054C  00B5               	movwf	___llmod@dividend+3
  9233  054D  0021               	movlb	1	; select bank1
  9234  054E  0841               	movf	(printf@val+2)^(0+128),w
  9235  054F  0020               	movlb	0	; select bank0
  9236  0550  00B4               	movwf	___llmod@dividend+2
  9237  0551  0021               	movlb	1	; select bank1
  9238  0552  0840               	movf	(printf@val+1)^(0+128),w
  9239  0553  0020               	movlb	0	; select bank0
  9240  0554  00B3               	movwf	___llmod@dividend+1
  9241  0555  0021               	movlb	1	; select bank1
  9242  0556  083F               	movf	printf@val^(0+128),w
  9243  0557  0020               	movlb	0	; select bank0
  9244  0558  00B2               	movwf	___llmod@dividend
  9245  0559  3191  21E0  3180   	fcall	___llmod
  9246  055C  0020               	movlb	0	; select bank0
  9247  055D  0831               	movf	?___llmod+3,w
  9248  055E  0021               	movlb	1	; select bank1
  9249  055F  00C2               	movwf	(printf@val+3)^(0+128)
  9250  0560  0020               	movlb	0	; select bank0
  9251  0561  0830               	movf	?___llmod+2,w
  9252  0562  0021               	movlb	1	; select bank1
  9253  0563  00C1               	movwf	(printf@val+2)^(0+128)
  9254  0564  0020               	movlb	0	; select bank0
  9255  0565  082F               	movf	?___llmod+1,w
  9256  0566  0021               	movlb	1	; select bank1
  9257  0567  00C0               	movwf	(printf@val+1)^(0+128)
  9258  0568  0020               	movlb	0	; select bank0
  9259  0569  082E               	movf	?___llmod,w
  9260  056A  2CBD               	goto	L6
  9261  056B                     l4412:	
  9262                           ;doprnt.c: 1233: }
  9263                           ;doprnt.c: 1235: while(prec) {
  9264                           
  9265                           
  9266                           ;doprnt.c: 1236: (putch('0') );
  9267  056B  3030               	movlw	48
  9268  056C  319F  273F  3180   	fcall	_putch
  9269                           
  9270                           ;doprnt.c: 1237: prec--;
  9271  056F  30FF               	movlw	255
  9272  0570  0021               	movlb	1	; select bank1
  9273  0571  07C6               	addwf	printf@prec^(0+128),f
  9274  0572  30FF               	movlw	255
  9275  0573  3DC7               	addwfc	(printf@prec+1)^(0+128),f
  9276  0574                     l4416:	
  9277  0574  0846               	movf	printf@prec^(0+128),w
  9278  0575  0447               	iorwf	(printf@prec+1)^(0+128),w
  9279  0576  1903               	btfsc	3,2
  9280  0577  2844               	goto	l4492
  9281  0578  2D6B               	goto	l4412
  9282  0579                     l512:	
  9283                           ;doprnt.c: 1238: }
  9284                           ;doprnt.c: 1245: continue;
  9285                           
  9286                           
  9287                           ;doprnt.c: 1246: }
  9288                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9289  0579  0021               	movlb	1	; select bank1
  9290  057A  1BB7               	btfsc	printf@flag^(0+128),7
  9291  057B  2DA8               	goto	l4428
  9292                           
  9293                           ;doprnt.c: 1253: {
  9294                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  9295  057C  0836               	movf	printf@ap^(0+128),w
  9296  057D  0086               	movwf	6
  9297  057E  0187               	clrf	7
  9298  057F  3F40               	moviw [0]fsr1
  9299  0580  0020               	movlb	0	; select bank0
  9300  0581  00E7               	movwf	??_printf
  9301  0582  3F41               	moviw [1]fsr1
  9302  0583  00E8               	movwf	??_printf+1
  9303  0584  0867               	movf	??_printf,w
  9304  0585  0021               	movlb	1	; select bank1
  9305  0586  00BF               	movwf	printf@val^(0+128)
  9306  0587  0020               	movlb	0	; select bank0
  9307  0588  0868               	movf	??_printf+1,w
  9308  0589  0021               	movlb	1	; select bank1
  9309  058A  00C0               	movwf	(printf@val+1)^(0+128)
  9310  058B  0D89               	rlf	9,f
  9311  058C  3B89               	subwfb	9,f
  9312  058D  0989               	comf	9,f
  9313  058E  00C1               	movwf	(printf@val+2)^(0+128)
  9314  058F  00C2               	movwf	(printf@val+3)^(0+128)
  9315  0590  3002               	movlw	2
  9316  0591  0020               	movlb	0	; select bank0
  9317  0592  00E7               	movwf	??_printf
  9318  0593  0867               	movf	??_printf,w
  9319  0594  0021               	movlb	1	; select bank1
  9320  0595  07B6               	addwf	printf@ap^(0+128),f
  9321                           
  9322                           ;doprnt.c: 1261: if((long)val < 0) {
  9323  0596  1FC2               	btfss	(printf@val+3)^(0+128),7
  9324  0597  2DBF               	goto	l4432
  9325                           
  9326                           ;doprnt.c: 1262: flag |= 0x03;
  9327  0598  3003               	movlw	3
  9328  0599  04B7               	iorwf	printf@flag^(0+128),f
  9329  059A  3000               	movlw	0
  9330  059B  04B8               	iorwf	(printf@flag+1)^(0+128),f
  9331                           
  9332                           ;doprnt.c: 1263: val = -val;
  9333  059C  09BF               	comf	printf@val^(0+128),f
  9334  059D  09C0               	comf	(printf@val+1)^(0+128),f
  9335  059E  09C1               	comf	(printf@val+2)^(0+128),f
  9336  059F  09C2               	comf	(printf@val+3)^(0+128),f
  9337  05A0  0ABF               	incf	printf@val^(0+128),f
  9338  05A1  1903               	skipnz
  9339  05A2  0AC0               	incf	(printf@val+1)^(0+128),f
  9340  05A3  1903               	skipnz
  9341  05A4  0AC1               	incf	(printf@val+2)^(0+128),f
  9342  05A5  1903               	skipnz
  9343  05A6  0AC2               	incf	(printf@val+3)^(0+128),f
  9344                           
  9345                           ;doprnt.c: 1264: }
  9346                           ;doprnt.c: 1266: }
  9347  05A7  2DBF               	goto	l4432
  9348  05A8                     l4428:	
  9349                           
  9350                           ;doprnt.c: 1268: else
  9351                           ;doprnt.c: 1273: {
  9352                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9353  05A8  0836               	movf	printf@ap^(0+128),w
  9354  05A9  0086               	movwf	6
  9355  05AA  0187               	clrf	7
  9356  05AB  3F40               	moviw [0]fsr1
  9357  05AC  0020               	movlb	0	; select bank0
  9358  05AD  00E7               	movwf	??_printf
  9359  05AE  3F41               	moviw [1]fsr1
  9360  05AF  00E8               	movwf	??_printf+1
  9361  05B0  0867               	movf	??_printf,w
  9362  05B1  0021               	movlb	1	; select bank1
  9363  05B2  00BF               	movwf	printf@val^(0+128)
  9364  05B3  0020               	movlb	0	; select bank0
  9365  05B4  0868               	movf	??_printf+1,w
  9366  05B5  0021               	movlb	1	; select bank1
  9367  05B6  00C0               	movwf	(printf@val^(0+128)+1)
  9368  05B7  01C1               	clrf	(printf@val^(0+128)+2)
  9369  05B8  01C2               	clrf	(printf@val^(0+128)+3)
  9370  05B9  3002               	movlw	2
  9371  05BA  0020               	movlb	0	; select bank0
  9372  05BB  00E7               	movwf	??_printf
  9373  05BC  0867               	movf	??_printf,w
  9374  05BD  0021               	movlb	1	; select bank1
  9375  05BE  07B6               	addwf	printf@ap^(0+128),f
  9376  05BF                     l4432:	
  9377                           
  9378                           ;doprnt.c: 1287: }
  9379                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  9380  05BF  0846               	movf	printf@prec^(0+128),w
  9381  05C0  0447               	iorwf	(printf@prec+1)^(0+128),w
  9382  05C1  1D03               	btfss	3,2
  9383  05C2  2E42               	goto	l4460
  9384  05C3  0842               	movf	(printf@val+3)^(0+128),w
  9385  05C4  0441               	iorwf	(printf@val+2)^(0+128),w
  9386  05C5  0440               	iorwf	(printf@val+1)^(0+128),w
  9387  05C6  043F               	iorwf	printf@val^(0+128),w
  9388  05C7  1D03               	skipz
  9389  05C8  2E42               	goto	l4460
  9390                           
  9391                           ;doprnt.c: 1291: prec++;
  9392  05C9  3001               	movlw	1
  9393  05CA  07C6               	addwf	printf@prec^(0+128),f
  9394  05CB  3000               	movlw	0
  9395  05CC  3DC7               	addwfc	(printf@prec+1)^(0+128),f
  9396                           
  9397                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9398  05CD  2E42               	goto	l4460
  9399  05CE                     l555:	
  9400                           ;doprnt.c: 1299: case 0x00:
  9401                           
  9402                           
  9403                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9404  05CE  01C8               	clrf	printf@c^(0+128)
  9405  05CF  0AC8               	incf	printf@c^(0+128),f
  9406  05D0                     L9:	
  9407  05D0  300A               	movlw	10
  9408  05D1  0648               	xorwf	printf@c^(0+128),w
  9409  05D2  1903               	btfsc	3,2
  9410  05D3  2E4B               	goto	l4462
  9411                           
  9412                           ;doprnt.c: 1306: if(val < dpowers[c])
  9413  05D4  0848               	movf	printf@c^(0+128),w
  9414  05D5  0020               	movlb	0	; select bank0
  9415  05D6  00E7               	movwf	??_printf
  9416  05D7  01E8               	clrf	??_printf+1
  9417  05D8  35E7               	lslf	??_printf,f
  9418  05D9  0DE8               	rlf	??_printf+1,f
  9419  05DA  35E7               	lslf	??_printf,f
  9420  05DB  0DE8               	rlf	??_printf+1,f
  9421  05DC  3042               	movlw	low (_dpowers| (0+32768))
  9422  05DD  0767               	addwf	??_printf,w
  9423  05DE  0084               	movwf	4
  9424  05DF  3099               	movlw	high (_dpowers| (0+32768))
  9425  05E0  3D68               	addwfc	??_printf+1,w
  9426  05E1  0085               	movwf	5
  9427  05E2  3F00               	moviw [0]fsr0
  9428  05E3  00E9               	movwf	??_printf+2
  9429  05E4  3F01               	moviw [1]fsr0
  9430  05E5  00EA               	movwf	??_printf+3
  9431  05E6  3F02               	moviw [2]fsr0
  9432  05E7  00EB               	movwf	??_printf+4
  9433  05E8  3F03               	moviw [3]fsr0
  9434  05E9  00EC               	movwf	??_printf+5
  9435  05EA  086C               	movf	??_printf+5,w
  9436  05EB  0021               	movlb	1	; select bank1
  9437  05EC  0242               	subwf	(printf@val+3)^(0+128),w
  9438  05ED  1D03               	skipz
  9439  05EE  2DFF               	goto	u5985
  9440  05EF  0020               	movlb	0	; select bank0
  9441  05F0  086B               	movf	??_printf+4,w
  9442  05F1  0021               	movlb	1	; select bank1
  9443  05F2  0241               	subwf	(printf@val+2)^(0+128),w
  9444  05F3  1D03               	skipz
  9445  05F4  2DFF               	goto	u5985
  9446  05F5  0020               	movlb	0	; select bank0
  9447  05F6  086A               	movf	??_printf+3,w
  9448  05F7  0021               	movlb	1	; select bank1
  9449  05F8  0240               	subwf	(printf@val+1)^(0+128),w
  9450  05F9  1D03               	skipz
  9451  05FA  2DFF               	goto	u5985
  9452  05FB  0020               	movlb	0	; select bank0
  9453  05FC  0869               	movf	??_printf+2,w
  9454  05FD  0021               	movlb	1	; select bank1
  9455  05FE  023F               	subwf	printf@val^(0+128),w
  9456  05FF                     u5985:	
  9457  05FF  1C03               	btfss	3,0
  9458  0600  2E4B               	goto	l4462
  9459                           
  9460                           ;doprnt.c: 1307: break;
  9461  0601  3001               	movlw	1
  9462  0602  0020               	movlb	0	; select bank0
  9463  0603  00E7               	movwf	??_printf
  9464  0604  0867               	movf	??_printf,w
  9465  0605  0021               	movlb	1	; select bank1
  9466  0606  07C8               	addwf	printf@c^(0+128),f
  9467  0607  2DD0               	goto	L9
  9468  0608                     l560:	
  9469                           ;doprnt.c: 1314: case 0x80:
  9470                           
  9471                           ;doprnt.c: 1309: break;
  9472                           
  9473                           
  9474                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9475  0608  01C8               	clrf	printf@c^(0+128)
  9476  0609  0AC8               	incf	printf@c^(0+128),f
  9477  060A                     L10:	
  9478  060A  3008               	movlw	8
  9479  060B  0648               	xorwf	printf@c^(0+128),w
  9480  060C  1903               	btfsc	3,2
  9481  060D  2E4B               	goto	l4462
  9482                           
  9483                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9484  060E  0848               	movf	printf@c^(0+128),w
  9485  060F  0020               	movlb	0	; select bank0
  9486  0610  00E7               	movwf	??_printf
  9487  0611  01E8               	clrf	??_printf+1
  9488  0612  35E7               	lslf	??_printf,f
  9489  0613  0DE8               	rlf	??_printf+1,f
  9490  0614  35E7               	lslf	??_printf,f
  9491  0615  0DE8               	rlf	??_printf+1,f
  9492  0616  3000               	movlw	low (_hexpowers| (0+32768))
  9493  0617  0767               	addwf	??_printf,w
  9494  0618  0084               	movwf	4
  9495  0619  3098               	movlw	high (_hexpowers| (0+32768))
  9496  061A  3D68               	addwfc	??_printf+1,w
  9497  061B  0085               	movwf	5
  9498  061C  3F00               	moviw [0]fsr0
  9499  061D  00E9               	movwf	??_printf+2
  9500  061E  3F01               	moviw [1]fsr0
  9501  061F  00EA               	movwf	??_printf+3
  9502  0620  3F02               	moviw [2]fsr0
  9503  0621  00EB               	movwf	??_printf+4
  9504  0622  3F03               	moviw [3]fsr0
  9505  0623  00EC               	movwf	??_printf+5
  9506  0624  086C               	movf	??_printf+5,w
  9507  0625  0021               	movlb	1	; select bank1
  9508  0626  0242               	subwf	(printf@val+3)^(0+128),w
  9509  0627  1D03               	skipz
  9510  0628  2E39               	goto	u6015
  9511  0629  0020               	movlb	0	; select bank0
  9512  062A  086B               	movf	??_printf+4,w
  9513  062B  0021               	movlb	1	; select bank1
  9514  062C  0241               	subwf	(printf@val+2)^(0+128),w
  9515  062D  1D03               	skipz
  9516  062E  2E39               	goto	u6015
  9517  062F  0020               	movlb	0	; select bank0
  9518  0630  086A               	movf	??_printf+3,w
  9519  0631  0021               	movlb	1	; select bank1
  9520  0632  0240               	subwf	(printf@val+1)^(0+128),w
  9521  0633  1D03               	skipz
  9522  0634  2E39               	goto	u6015
  9523  0635  0020               	movlb	0	; select bank0
  9524  0636  0869               	movf	??_printf+2,w
  9525  0637  0021               	movlb	1	; select bank1
  9526  0638  023F               	subwf	printf@val^(0+128),w
  9527  0639                     u6015:	
  9528  0639  1C03               	btfss	3,0
  9529  063A  2E4B               	goto	l4462
  9530                           
  9531                           ;doprnt.c: 1318: break;
  9532  063B  3001               	movlw	1
  9533  063C  0020               	movlb	0	; select bank0
  9534  063D  00E7               	movwf	??_printf
  9535  063E  0867               	movf	??_printf,w
  9536  063F  0021               	movlb	1	; select bank1
  9537  0640  07C8               	addwf	printf@c^(0+128),f
  9538  0641  2E0A               	goto	L10
  9539  0642                     l4460:	
  9540                           ;doprnt.c: 1336: }
  9541                           
  9542                           ;doprnt.c: 1320: break;
  9543                           
  9544  0642  0837               	movf	printf@flag^(0+128),w
  9545  0643  3980               	andlw	128
  9546                           
  9547                           ; Switch size 1, requested type "space"
  9548                           ; Number of cases is 2, Range of values is 0 to 128
  9549                           ; switch strategies available:
  9550                           ; Name         Instructions Cycles
  9551                           ; simple_byte            7     4 (average)
  9552                           ; jumptable            260     6 (fixed)
  9553                           ;	Chosen strategy is simple_byte
  9554  0644  3A00               	xorlw	0	; case 0
  9555  0645  1903               	skipnz
  9556  0646  2DCE               	goto	l555
  9557  0647  3A80               	xorlw	128	; case 128
  9558  0648  1903               	skipnz
  9559  0649  2E08               	goto	l560
  9560  064A  2E4B               	goto	l4462
  9561  064B                     l4462:	
  9562                           
  9563                           ;doprnt.c: 1339: if(c < prec)
  9564  064B  0848               	movf	printf@c^(0+128),w
  9565  064C  0020               	movlb	0	; select bank0
  9566  064D  00E7               	movwf	??_printf
  9567  064E  01E8               	clrf	??_printf+1
  9568  064F  1BE7               	btfsc	??_printf,7
  9569  0650  03E8               	decf	??_printf+1,f
  9570  0651  0868               	movf	??_printf+1,w
  9571  0652  3A80               	xorlw	128
  9572  0653  00E9               	movwf	??_printf+2
  9573  0654  0021               	movlb	1	; select bank1
  9574  0655  0847               	movf	(printf@prec+1)^(0+128),w
  9575  0656  3A80               	xorlw	128
  9576  0657  0020               	movlb	0	; select bank0
  9577  0658  0269               	subwf	??_printf+2,w
  9578  0659  1D03               	skipz
  9579  065A  2E5F               	goto	u6035
  9580  065B  0021               	movlb	1	; select bank1
  9581  065C  0846               	movf	printf@prec^(0+128),w
  9582  065D  0020               	movlb	0	; select bank0
  9583  065E  0267               	subwf	??_printf,w
  9584  065F                     u6035:	
  9585  065F  1803               	skipnc
  9586  0660  2E69               	goto	l4466
  9587                           
  9588                           ;doprnt.c: 1340: c = prec;
  9589  0661  0021               	movlb	1	; select bank1
  9590  0662  0846               	movf	printf@prec^(0+128),w
  9591  0663  0020               	movlb	0	; select bank0
  9592  0664  00E7               	movwf	??_printf
  9593  0665  0867               	movf	??_printf,w
  9594  0666  0021               	movlb	1	; select bank1
  9595  0667  00C8               	movwf	printf@c^(0+128)
  9596  0668  2E85               	goto	l565
  9597  0669                     l4466:	
  9598                           
  9599                           ;doprnt.c: 1341: else if(prec < c)
  9600  0669  0021               	movlb	1	; select bank1
  9601  066A  0848               	movf	printf@c^(0+128),w
  9602  066B  0020               	movlb	0	; select bank0
  9603  066C  00E7               	movwf	??_printf
  9604  066D  01E8               	clrf	??_printf+1
  9605  066E  1BE7               	btfsc	??_printf,7
  9606  066F  03E8               	decf	??_printf+1,f
  9607  0670  0021               	movlb	1	; select bank1
  9608  0671  0847               	movf	(printf@prec+1)^(0+128),w
  9609  0672  3A80               	xorlw	128
  9610  0673  0020               	movlb	0	; select bank0
  9611  0674  00E9               	movwf	??_printf+2
  9612  0675  0868               	movf	??_printf+1,w
  9613  0676  3A80               	xorlw	128
  9614  0677  0269               	subwf	??_printf+2,w
  9615  0678  1D03               	skipz
  9616  0679  2E7D               	goto	u6045
  9617  067A  0867               	movf	??_printf,w
  9618  067B  0021               	movlb	1	; select bank1
  9619  067C  0246               	subwf	printf@prec^(0+128),w
  9620  067D                     u6045:	
  9621  067D  1803               	skipnc
  9622  067E  2E85               	goto	l565
  9623                           
  9624                           ;doprnt.c: 1342: prec = c;
  9625  067F  0021               	movlb	1	; select bank1
  9626  0680  0848               	movf	printf@c^(0+128),w
  9627  0681  00C6               	movwf	printf@prec^(0+128)
  9628  0682  01C7               	clrf	(printf@prec+1)^(0+128)
  9629  0683  1BC6               	btfsc	printf@prec^(0+128),7
  9630  0684  03C7               	decf	(printf@prec+1)^(0+128),f
  9631  0685                     l565:	
  9632                           
  9633                           ;doprnt.c: 1422: {
  9634                           ;doprnt.c: 1438: if(flag & 0x03)
  9635  0685  3003               	movlw	3
  9636  0686  0021               	movlb	1	; select bank1
  9637  0687  0537               	andwf	printf@flag^(0+128),w
  9638  0688  0020               	movlb	0	; select bank0
  9639  0689  00E7               	movwf	??_printf
  9640  068A  3000               	movlw	0
  9641  068B  0021               	movlb	1	; select bank1
  9642  068C  0538               	andwf	(printf@flag+1)^(0+128),w
  9643  068D  0020               	movlb	0	; select bank0
  9644  068E  00E8               	movwf	??_printf+1
  9645  068F  0867               	movf	??_printf,w
  9646  0690  0468               	iorwf	??_printf+1,w
  9647  0691  1903               	btfsc	3,2
  9648  0692  2F2B               	goto	l4490
  9649                           
  9650                           ;doprnt.c: 1439: (putch('-') );
  9651  0693  302D               	movlw	45
  9652  0694  2F28               	goto	L11
  9653  0695                     l4472:	
  9654                           ;doprnt.c: 1478: {
  9655                           ;doprnt.c: 1483: case 0x00:
  9656                           
  9657                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  9658                           
  9659                           ;doprnt.c: 1469: }
  9660                           ;doprnt.c: 1474: while(prec--) {
  9661                           
  9662                           
  9663                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9664  0695  3000               	movlw	0
  9665  0696  0020               	movlb	0	; select bank0
  9666  0697  00B1               	movwf	___llmod@divisor+3
  9667  0698  3000               	movlw	0
  9668  0699  00B0               	movwf	___llmod@divisor+2
  9669  069A  3000               	movlw	0
  9670  069B  00AF               	movwf	___llmod@divisor+1
  9671  069C  300A               	movlw	10
  9672  069D  00AE               	movwf	___llmod@divisor
  9673  069E  0021               	movlb	1	; select bank1
  9674  069F  0847               	movf	(printf@prec+1)^(0+128),w
  9675  06A0  0085               	movwf	5
  9676  06A1  0846               	movf	printf@prec^(0+128),w
  9677  06A2  0084               	movwf	4
  9678  06A3  3584               	lslf	4,f
  9679  06A4  0D85               	rlf	5,f
  9680  06A5  3584               	lslf	4,f
  9681  06A6  0D85               	rlf	5,f
  9682  06A7  3042               	movlw	low (_dpowers| (0+32768))
  9683  06A8  0784               	addwf	4,f
  9684  06A9  3099               	movlw	high (_dpowers| (0+32768))
  9685  06AA  3D85               	addwfc	5,f
  9686  06AB  3F00               	moviw [0]fsr0
  9687  06AC  0020               	movlb	0	; select bank0
  9688  06AD  00A0               	movwf	___lldiv@divisor
  9689  06AE  3F01               	moviw [1]fsr0
  9690  06AF  00A1               	movwf	___lldiv@divisor+1
  9691  06B0  3F02               	moviw [2]fsr0
  9692  06B1  00A2               	movwf	___lldiv@divisor+2
  9693  06B2  3F03               	moviw [3]fsr0
  9694  06B3  00A3               	movwf	___lldiv@divisor+3
  9695  06B4  0021               	movlb	1	; select bank1
  9696  06B5  0842               	movf	(printf@val+3)^(0+128),w
  9697  06B6  0020               	movlb	0	; select bank0
  9698  06B7  00A7               	movwf	___lldiv@dividend+3
  9699  06B8  0021               	movlb	1	; select bank1
  9700  06B9  0841               	movf	(printf@val+2)^(0+128),w
  9701  06BA  0020               	movlb	0	; select bank0
  9702  06BB  00A6               	movwf	___lldiv@dividend+2
  9703  06BC  0021               	movlb	1	; select bank1
  9704  06BD  0840               	movf	(printf@val+1)^(0+128),w
  9705  06BE  0020               	movlb	0	; select bank0
  9706  06BF  00A5               	movwf	___lldiv@dividend+1
  9707  06C0  0021               	movlb	1	; select bank1
  9708  06C1  083F               	movf	printf@val^(0+128),w
  9709  06C2  0020               	movlb	0	; select bank0
  9710  06C3  00A4               	movwf	___lldiv@dividend
  9711  06C4  3193  23DD  3180   	fcall	___lldiv
  9712  06C7  0020               	movlb	0	; select bank0
  9713  06C8  0823               	movf	?___lldiv+3,w
  9714  06C9  00B5               	movwf	___llmod@dividend+3
  9715  06CA  0822               	movf	?___lldiv+2,w
  9716  06CB  00B4               	movwf	___llmod@dividend+2
  9717  06CC  0821               	movf	?___lldiv+1,w
  9718  06CD  00B3               	movwf	___llmod@dividend+1
  9719  06CE  0820               	movf	?___lldiv,w
  9720  06CF  00B2               	movwf	___llmod@dividend
  9721  06D0  3191  21E0  3180   	fcall	___llmod
  9722  06D3  0020               	movlb	0	; select bank0
  9723  06D4  082E               	movf	?___llmod,w
  9724  06D5  3E30               	addlw	48
  9725  06D6  00E7               	movwf	??_printf
  9726  06D7  0867               	movf	??_printf,w
  9727  06D8  2F25               	goto	L7
  9728  06D9                     l4474:	
  9729                           ;doprnt.c: 1497: case 0x80:
  9730                           
  9731                           ;doprnt.c: 1491: break;
  9732                           
  9733                           
  9734                           ;doprnt.c: 1499: {
  9735                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9736  06D9  0847               	movf	(printf@prec+1)^(0+128),w
  9737  06DA  0085               	movwf	5
  9738  06DB  0846               	movf	printf@prec^(0+128),w
  9739  06DC  0084               	movwf	4
  9740  06DD  3584               	lslf	4,f
  9741  06DE  0D85               	rlf	5,f
  9742  06DF  3584               	lslf	4,f
  9743  06E0  0D85               	rlf	5,f
  9744  06E1  3000               	movlw	low (_hexpowers| (0+32768))
  9745  06E2  0784               	addwf	4,f
  9746  06E3  3098               	movlw	high (_hexpowers| (0+32768))
  9747  06E4  3D85               	addwfc	5,f
  9748  06E5  3F00               	moviw [0]fsr0
  9749  06E6  0020               	movlb	0	; select bank0
  9750  06E7  00A0               	movwf	___lldiv@divisor
  9751  06E8  3F01               	moviw [1]fsr0
  9752  06E9  00A1               	movwf	___lldiv@divisor+1
  9753  06EA  3F02               	moviw [2]fsr0
  9754  06EB  00A2               	movwf	___lldiv@divisor+2
  9755  06EC  3F03               	moviw [3]fsr0
  9756  06ED  00A3               	movwf	___lldiv@divisor+3
  9757  06EE  0021               	movlb	1	; select bank1
  9758  06EF  0842               	movf	(printf@val+3)^(0+128),w
  9759  06F0  0020               	movlb	0	; select bank0
  9760  06F1  00A7               	movwf	___lldiv@dividend+3
  9761  06F2  0021               	movlb	1	; select bank1
  9762  06F3  0841               	movf	(printf@val+2)^(0+128),w
  9763  06F4  0020               	movlb	0	; select bank0
  9764  06F5  00A6               	movwf	___lldiv@dividend+2
  9765  06F6  0021               	movlb	1	; select bank1
  9766  06F7  0840               	movf	(printf@val+1)^(0+128),w
  9767  06F8  0020               	movlb	0	; select bank0
  9768  06F9  00A5               	movwf	___lldiv@dividend+1
  9769  06FA  0021               	movlb	1	; select bank1
  9770  06FB  083F               	movf	printf@val^(0+128),w
  9771  06FC  0020               	movlb	0	; select bank0
  9772  06FD  00A4               	movwf	___lldiv@dividend
  9773  06FE  3193  23DD  3180   	fcall	___lldiv
  9774  0701  0020               	movlb	0	; select bank0
  9775  0702  0820               	movf	?___lldiv,w
  9776  0703  390F               	andlw	15
  9777  0704  00E7               	movwf	??_printf
  9778  0705  0867               	movf	??_printf,w
  9779  0706  0021               	movlb	1	; select bank1
  9780  0707  00AF               	movwf	printf@idx^(0+128)
  9781                           
  9782                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  9783  0708  1AB7               	btfsc	printf@flag^(0+128),5
  9784  0709  2F0E               	goto	l4480
  9785  070A  30B4               	movlw	low (STR_22| (0+32768))
  9786  070B  00B0               	movwf	_printf$861^(0+128)
  9787  070C  309A               	movlw	high (STR_22| (0+32768))
  9788  070D  2F11               	goto	L8
  9789  070E                     l4480:	
  9790  070E  30A3               	movlw	low (STR_21| (0+32768))
  9791  070F  00B0               	movwf	_printf$861^(0+128)
  9792  0710  309A               	movlw	high (STR_21| (0+32768))
  9793  0711                     L8:	
  9794  0711  00B1               	movwf	(_printf$861^(0+128)+1)
  9795  0712  0831               	movf	(_printf$861+1)^(0+128),w
  9796  0713  0020               	movlb	0	; select bank0
  9797  0714  00E8               	movwf	??_printf+1
  9798  0715  0021               	movlb	1	; select bank1
  9799  0716  0830               	movf	_printf$861^(0+128),w
  9800  0717  0020               	movlb	0	; select bank0
  9801  0718  00E7               	movwf	??_printf
  9802  0719  0021               	movlb	1	; select bank1
  9803  071A  082F               	movf	printf@idx^(0+128),w
  9804  071B  0020               	movlb	0	; select bank0
  9805  071C  0767               	addwf	??_printf,w
  9806  071D  0084               	movwf	4
  9807  071E  0868               	movf	??_printf+1,w
  9808  071F  1803               	skipnc
  9809  0720  0A68               	incf	??_printf+1,w
  9810  0721  0085               	movwf	5
  9811  0722  0800               	movf	0,w	;code access
  9812  0723  00E9               	movwf	??_printf+2
  9813  0724  0869               	movf	??_printf+2,w
  9814  0725                     L7:	
  9815  0725  0021               	movlb	1	; select bank1
  9816  0726  00C8               	movwf	printf@c^(0+128)
  9817  0727                     l4488:	
  9818                           ;doprnt.c: 1523: }
  9819                           
  9820                           ;doprnt.c: 1508: }
  9821                           ;doprnt.c: 1510: break;
  9822                           
  9823                           
  9824                           ;doprnt.c: 1524: (putch(c) );
  9825  0727  0848               	movf	printf@c^(0+128),w
  9826  0728                     L11:	
  9827  0728  319F  273F  3180   	fcall	_putch
  9828  072B                     l4490:	
  9829  072B  30FF               	movlw	255
  9830  072C  0021               	movlb	1	; select bank1
  9831  072D  07C6               	addwf	printf@prec^(0+128),f
  9832  072E  30FF               	movlw	255
  9833  072F  3DC7               	addwfc	(printf@prec+1)^(0+128),f
  9834  0730  0A46               	incf	printf@prec^(0+128),w
  9835  0731  1903               	btfsc	3,2
  9836  0732  0A47               	incf	(printf@prec+1)^(0+128),w
  9837  0733  1903               	btfsc	3,2
  9838  0734  2844               	goto	l4492
  9839  0735  0021               	movlb	1	; select bank1
  9840  0736  0837               	movf	printf@flag^(0+128),w
  9841  0737  3980               	andlw	128
  9842                           
  9843                           ; Switch size 1, requested type "space"
  9844                           ; Number of cases is 2, Range of values is 0 to 128
  9845                           ; switch strategies available:
  9846                           ; Name         Instructions Cycles
  9847                           ; simple_byte            7     4 (average)
  9848                           ; jumptable            260     6 (fixed)
  9849                           ;	Chosen strategy is simple_byte
  9850  0738  3A00               	xorlw	0	; case 0
  9851  0739  1903               	skipnz
  9852  073A  2E95               	goto	l4472
  9853  073B  3A80               	xorlw	128	; case 128
  9854  073C  1903               	skipnz
  9855  073D  2ED9               	goto	l4474
  9856  073E  2F27               	goto	l4488
  9857  073F  2F27               	goto	l4488
  9858  0740                     l580:	
  9859                           ;doprnt.c: 1540: return 0;
  9860                           ;	Return value of _printf is never used
  9861                           
  9862                           ;doprnt.c: 1525: }
  9863                           ;doprnt.c: 1533: }
  9864                           ;doprnt.c: 1535: alldone:
  9865                           
  9866  0740  0008               	return
  9867  0741                     __end_of_printf:	
  9868                           
  9869                           	psect	text19
  9870  0DBA                     __ptext19:	
  9871 ;; *************** function _scale *****************
  9872 ;; Defined at:
  9873 ;;		line 425 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;  scl             1    wreg     char 
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  scl             1   46[BANK0 ] char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;                  3   38[BANK0 ] char 
  9880 ;; Registers used:
  9881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9887 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;Total ram usage:        9 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    5
  9894 ;; This function calls:
  9895 ;;		___awdiv
  9896 ;;		___awmod
  9897 ;;		___ftmul
  9898 ;;		___wmul
  9899 ;; This function is called by:
  9900 ;;		_printf
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _scale
  9906  0DBA                     _scale:	
  9907                           
  9908                           ;incstack = 0
  9909                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9910                           ;scale@scl stored from wreg
  9911  0DBA  0020               	movlb	0	; select bank0
  9912  0DBB  00CE               	movwf	scale@scl
  9913                           
  9914                           ;doprnt.c: 428: if(scl < 0) {
  9915  0DBC  1FCE               	btfss	scale@scl,7
  9916  0DBD  2EE0               	goto	l4116
  9917                           
  9918                           ;doprnt.c: 429: scl = -scl;
  9919  0DBE  09CE               	comf	scale@scl,f
  9920  0DBF  0ACE               	incf	scale@scl,f
  9921                           
  9922                           ;doprnt.c: 430: if(scl>=110)
  9923  0DC0  084E               	movf	scale@scl,w
  9924  0DC1  3A80               	xorlw	128
  9925  0DC2  3E12               	addlw	-238
  9926  0DC3  1C03               	skipc
  9927  0DC4  2E64               	goto	l4106
  9928                           
  9929                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9930  0DC5  300A               	movlw	10
  9931  0DC6  00A7               	movwf	___awdiv@divisor
  9932  0DC7  3000               	movlw	0
  9933  0DC8  00A8               	movwf	___awdiv@divisor+1
  9934  0DC9  084E               	movf	scale@scl,w
  9935  0DCA  00A2               	movwf	___awmod@dividend
  9936  0DCB  01A3               	clrf	___awmod@dividend+1
  9937  0DCC  1BA2               	btfsc	___awmod@dividend,7
  9938  0DCD  03A3               	decf	___awmod@dividend+1,f
  9939  0DCE  3064               	movlw	100
  9940  0DCF  00A0               	movwf	___awmod@divisor
  9941  0DD0  3000               	movlw	0
  9942  0DD1  00A1               	movwf	___awmod@divisor+1
  9943  0DD2  3192  2269  318D   	fcall	___awmod
  9944  0DD5  0020               	movlb	0	; select bank0
  9945  0DD6  0821               	movf	?___awmod+1,w
  9946  0DD7  00AA               	movwf	___awdiv@dividend+1
  9947  0DD8  0820               	movf	?___awmod,w
  9948  0DD9  00A9               	movwf	___awdiv@dividend
  9949  0DDA  3193  238B  318D   	fcall	___awdiv
  9950  0DDD  0020               	movlb	0	; select bank0
  9951  0DDE  0827               	movf	?___awdiv,w
  9952  0DDF  3E09               	addlw	9
  9953  0DE0  00B0               	movwf	___wmul@multiplier
  9954  0DE1  3000               	movlw	0
  9955  0DE2  3D28               	addwfc	?___awdiv+1,w
  9956  0DE3  00B1               	movwf	___wmul@multiplier+1
  9957  0DE4  3003               	movlw	3
  9958  0DE5  00B2               	movwf	___wmul@multiplicand
  9959  0DE6  3000               	movlw	0
  9960  0DE7  00B3               	movwf	___wmul@multiplicand+1
  9961  0DE8  3190  200C  318D   	fcall	___wmul
  9962  0DEB  0020               	movlb	0	; select bank0
  9963  0DEC  0831               	movf	?___wmul+1,w
  9964  0DED  0085               	movwf	5
  9965  0DEE  0830               	movf	?___wmul,w
  9966  0DEF  0084               	movwf	4
  9967  0DF0  3091               	movlw	low (__npowers_| (0+32768))
  9968  0DF1  0784               	addwf	4,f
  9969  0DF2  3099               	movlw	high (__npowers_| (0+32768))
  9970  0DF3  3D85               	addwfc	5,f
  9971  0DF4  3F00               	moviw [0]fsr0
  9972  0DF5  00B6               	movwf	___ftmul@f1
  9973  0DF6  3F01               	moviw [1]fsr0
  9974  0DF7  00B7               	movwf	___ftmul@f1+1
  9975  0DF8  3F02               	moviw [2]fsr0
  9976  0DF9  00B8               	movwf	___ftmul@f1+2
  9977  0DFA  3064               	movlw	100
  9978  0DFB  00A7               	movwf	___awdiv@divisor
  9979  0DFC  3000               	movlw	0
  9980  0DFD  00A8               	movwf	___awdiv@divisor+1
  9981  0DFE  084E               	movf	scale@scl,w
  9982  0DFF  00A9               	movwf	___awdiv@dividend
  9983  0E00  01AA               	clrf	___awdiv@dividend+1
  9984  0E01  1BA9               	btfsc	___awdiv@dividend,7
  9985  0E02  03AA               	decf	___awdiv@dividend+1,f
  9986  0E03  3193  238B  318D   	fcall	___awdiv
  9987  0E06  0020               	movlb	0	; select bank0
  9988  0E07  0827               	movf	?___awdiv,w
  9989  0E08  3E12               	addlw	18
  9990  0E09  00B0               	movwf	___wmul@multiplier
  9991  0E0A  3000               	movlw	0
  9992  0E0B  3D28               	addwfc	?___awdiv+1,w
  9993  0E0C  00B1               	movwf	___wmul@multiplier+1
  9994  0E0D  3003               	movlw	3
  9995  0E0E  00B2               	movwf	___wmul@multiplicand
  9996  0E0F  3000               	movlw	0
  9997  0E10  00B3               	movwf	___wmul@multiplicand+1
  9998  0E11  3190  200C  318D   	fcall	___wmul
  9999  0E14  0020               	movlb	0	; select bank0
 10000  0E15  0831               	movf	?___wmul+1,w
 10001  0E16  0085               	movwf	5
 10002  0E17  0830               	movf	?___wmul,w
 10003  0E18  0084               	movwf	4
 10004  0E19  3091               	movlw	low (__npowers_| (0+32768))
 10005  0E1A  0784               	addwf	4,f
 10006  0E1B  3099               	movlw	high (__npowers_| (0+32768))
 10007  0E1C  3D85               	addwfc	5,f
 10008  0E1D  3F00               	moviw [0]fsr0
 10009  0E1E  00B9               	movwf	___ftmul@f2
 10010  0E1F  3F01               	moviw [1]fsr0
 10011  0E20  00BA               	movwf	___ftmul@f2+1
 10012  0E21  3F02               	moviw [2]fsr0
 10013  0E22  00BB               	movwf	___ftmul@f2+2
 10014  0E23  3188  2016  318D   	fcall	___ftmul
 10015  0E26  0020               	movlb	0	; select bank0
 10016  0E27  0836               	movf	?___ftmul,w
 10017  0E28  00CB               	movwf	_scale$1382
 10018  0E29  0837               	movf	?___ftmul+1,w
 10019  0E2A  00CC               	movwf	_scale$1382+1
 10020  0E2B  0838               	movf	?___ftmul+2,w
 10021  0E2C  00CD               	movwf	_scale$1382+2
 10022                           
 10023                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10024  0E2D  084E               	movf	scale@scl,w
 10025  0E2E  00A2               	movwf	___awmod@dividend
 10026  0E2F  01A3               	clrf	___awmod@dividend+1
 10027  0E30  1BA2               	btfsc	___awmod@dividend,7
 10028  0E31  03A3               	decf	___awmod@dividend+1,f
 10029  0E32  300A               	movlw	10
 10030  0E33  00A0               	movwf	___awmod@divisor
 10031  0E34  3000               	movlw	0
 10032  0E35  00A1               	movwf	___awmod@divisor+1
 10033  0E36  3192  2269  318D   	fcall	___awmod
 10034  0E39  0020               	movlb	0	; select bank0
 10035  0E3A  0821               	movf	?___awmod+1,w
 10036  0E3B  00B1               	movwf	___wmul@multiplier+1
 10037  0E3C  0820               	movf	?___awmod,w
 10038  0E3D  00B0               	movwf	___wmul@multiplier
 10039  0E3E  3003               	movlw	3
 10040  0E3F  00B2               	movwf	___wmul@multiplicand
 10041  0E40  3000               	movlw	0
 10042  0E41  00B3               	movwf	___wmul@multiplicand+1
 10043  0E42  3190  200C  318D   	fcall	___wmul
 10044  0E45  0020               	movlb	0	; select bank0
 10045  0E46  0831               	movf	?___wmul+1,w
 10046  0E47  0085               	movwf	5
 10047  0E48  0830               	movf	?___wmul,w
 10048  0E49  0084               	movwf	4
 10049  0E4A  3091               	movlw	low (__npowers_| (0+32768))
 10050  0E4B  0784               	addwf	4,f
 10051  0E4C  3099               	movlw	high (__npowers_| (0+32768))
 10052  0E4D  3D85               	addwfc	5,f
 10053  0E4E  3F00               	moviw [0]fsr0
 10054  0E4F  00B6               	movwf	___ftmul@f1
 10055  0E50  3F01               	moviw [1]fsr0
 10056  0E51  00B7               	movwf	___ftmul@f1+1
 10057  0E52  3F02               	moviw [2]fsr0
 10058  0E53  00B8               	movwf	___ftmul@f1+2
 10059  0E54  084B               	movf	_scale$1382,w
 10060  0E55  00B9               	movwf	___ftmul@f2
 10061  0E56  084C               	movf	_scale$1382+1,w
 10062  0E57  00BA               	movwf	___ftmul@f2+1
 10063  0E58  084D               	movf	_scale$1382+2,w
 10064  0E59  00BB               	movwf	___ftmul@f2+2
 10065  0E5A  3188  2016         	fcall	___ftmul
 10066  0E5C  0020               	movlb	0	; select bank0
 10067  0E5D  0836               	movf	?___ftmul,w
 10068  0E5E  00C6               	movwf	?_scale
 10069  0E5F  0837               	movf	?___ftmul+1,w
 10070  0E60  00C7               	movwf	?_scale+1
 10071  0E61  0838               	movf	?___ftmul+2,w
 10072  0E62  00C8               	movwf	?_scale+2
 10073  0E63  0008               	return
 10074  0E64                     l4106:	
 10075                           
 10076                           ;doprnt.c: 432: else if(scl > 10)
 10077  0E64  084E               	movf	scale@scl,w
 10078  0E65  3A80               	xorlw	128
 10079  0E66  3E75               	addlw	-139
 10080  0E67  1C03               	skipc
 10081  0E68  2EC3               	goto	l4112
 10082                           
 10083                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 10084  0E69  084E               	movf	scale@scl,w
 10085  0E6A  00A2               	movwf	___awmod@dividend
 10086  0E6B  01A3               	clrf	___awmod@dividend+1
 10087  0E6C  1BA2               	btfsc	___awmod@dividend,7
 10088  0E6D  03A3               	decf	___awmod@dividend+1,f
 10089  0E6E  300A               	movlw	10
 10090  0E6F  00A0               	movwf	___awmod@divisor
 10091  0E70  3000               	movlw	0
 10092  0E71  00A1               	movwf	___awmod@divisor+1
 10093  0E72  3192  2269  318D   	fcall	___awmod
 10094  0E75  0020               	movlb	0	; select bank0
 10095  0E76  0821               	movf	?___awmod+1,w
 10096  0E77  00B1               	movwf	___wmul@multiplier+1
 10097  0E78  0820               	movf	?___awmod,w
 10098  0E79  00B0               	movwf	___wmul@multiplier
 10099  0E7A  3003               	movlw	3
 10100  0E7B  00B2               	movwf	___wmul@multiplicand
 10101  0E7C  3000               	movlw	0
 10102  0E7D  00B3               	movwf	___wmul@multiplicand+1
 10103  0E7E  3190  200C  318D   	fcall	___wmul
 10104  0E81  0020               	movlb	0	; select bank0
 10105  0E82  0831               	movf	?___wmul+1,w
 10106  0E83  0085               	movwf	5
 10107  0E84  0830               	movf	?___wmul,w
 10108  0E85  0084               	movwf	4
 10109  0E86  3091               	movlw	low (__npowers_| (0+32768))
 10110  0E87  0784               	addwf	4,f
 10111  0E88  3099               	movlw	high (__npowers_| (0+32768))
 10112  0E89  3D85               	addwfc	5,f
 10113  0E8A  3F00               	moviw [0]fsr0
 10114  0E8B  00B6               	movwf	___ftmul@f1
 10115  0E8C  3F01               	moviw [1]fsr0
 10116  0E8D  00B7               	movwf	___ftmul@f1+1
 10117  0E8E  3F02               	moviw [2]fsr0
 10118  0E8F  00B8               	movwf	___ftmul@f1+2
 10119  0E90  300A               	movlw	10
 10120  0E91  00A7               	movwf	___awdiv@divisor
 10121  0E92  3000               	movlw	0
 10122  0E93  00A8               	movwf	___awdiv@divisor+1
 10123  0E94  084E               	movf	scale@scl,w
 10124  0E95  00A9               	movwf	___awdiv@dividend
 10125  0E96  01AA               	clrf	___awdiv@dividend+1
 10126  0E97  1BA9               	btfsc	___awdiv@dividend,7
 10127  0E98  03AA               	decf	___awdiv@dividend+1,f
 10128  0E99  3193  238B  318D   	fcall	___awdiv
 10129  0E9C  0020               	movlb	0	; select bank0
 10130  0E9D  0827               	movf	?___awdiv,w
 10131  0E9E  3E09               	addlw	9
 10132  0E9F  00B0               	movwf	___wmul@multiplier
 10133  0EA0  3000               	movlw	0
 10134  0EA1  3D28               	addwfc	?___awdiv+1,w
 10135  0EA2  00B1               	movwf	___wmul@multiplier+1
 10136  0EA3  3003               	movlw	3
 10137  0EA4  00B2               	movwf	___wmul@multiplicand
 10138  0EA5  3000               	movlw	0
 10139  0EA6  00B3               	movwf	___wmul@multiplicand+1
 10140  0EA7  3190  200C  318D   	fcall	___wmul
 10141  0EAA  0020               	movlb	0	; select bank0
 10142  0EAB  0831               	movf	?___wmul+1,w
 10143  0EAC  0085               	movwf	5
 10144  0EAD  0830               	movf	?___wmul,w
 10145  0EAE  0084               	movwf	4
 10146  0EAF  3091               	movlw	low (__npowers_| (0+32768))
 10147  0EB0  0784               	addwf	4,f
 10148  0EB1  3099               	movlw	high (__npowers_| (0+32768))
 10149  0EB2  3D85               	addwfc	5,f
 10150  0EB3  3F00               	moviw [0]fsr0
 10151  0EB4  00B9               	movwf	___ftmul@f2
 10152  0EB5  3F01               	moviw [1]fsr0
 10153  0EB6  00BA               	movwf	___ftmul@f2+1
 10154  0EB7  3F02               	moviw [2]fsr0
 10155  0EB8  00BB               	movwf	___ftmul@f2+2
 10156  0EB9  3188  2016         	fcall	___ftmul
 10157  0EBB  0020               	movlb	0	; select bank0
 10158  0EBC  0836               	movf	?___ftmul,w
 10159  0EBD  00C6               	movwf	?_scale
 10160  0EBE  0837               	movf	?___ftmul+1,w
 10161  0EBF  00C7               	movwf	?_scale+1
 10162  0EC0  0838               	movf	?___ftmul+2,w
 10163  0EC1  00C8               	movwf	?_scale+2
 10164  0EC2  0008               	return
 10165  0EC3                     l4112:	
 10166                           
 10167                           ;doprnt.c: 434: return _npowers_[scl];
 10168  0EC3  084E               	movf	scale@scl,w
 10169  0EC4  00C9               	movwf	??_scale
 10170  0EC5  01CA               	clrf	??_scale+1
 10171  0EC6  0849               	movf	??_scale,w
 10172  0EC7  00B0               	movwf	___wmul@multiplier
 10173  0EC8  084A               	movf	??_scale+1,w
 10174  0EC9  00B1               	movwf	___wmul@multiplier+1
 10175  0ECA  3003               	movlw	3
 10176  0ECB  00B2               	movwf	___wmul@multiplicand
 10177  0ECC  3000               	movlw	0
 10178  0ECD  00B3               	movwf	___wmul@multiplicand+1
 10179  0ECE  3190  200C         	fcall	___wmul
 10180  0ED0  0020               	movlb	0	; select bank0
 10181  0ED1  0831               	movf	?___wmul+1,w
 10182  0ED2  0085               	movwf	5
 10183  0ED3  0830               	movf	?___wmul,w
 10184  0ED4  0084               	movwf	4
 10185  0ED5  3091               	movlw	low (__npowers_| (0+32768))
 10186  0ED6  0784               	addwf	4,f
 10187  0ED7  3099               	movlw	high (__npowers_| (0+32768))
 10188  0ED8  3D85               	addwfc	5,f
 10189  0ED9  3F00               	moviw [0]fsr0
 10190  0EDA  00C6               	movwf	?_scale
 10191  0EDB  3F01               	moviw [1]fsr0
 10192  0EDC  00C7               	movwf	?_scale+1
 10193  0EDD  3F02               	moviw [2]fsr0
 10194  0EDE  00C8               	movwf	?_scale+2
 10195  0EDF  0008               	return
 10196  0EE0                     l4116:	
 10197                           
 10198                           ;doprnt.c: 435: }
 10199                           ;doprnt.c: 436: if(scl>=110)
 10200  0EE0  084E               	movf	scale@scl,w
 10201  0EE1  3A80               	xorlw	128
 10202  0EE2  3E12               	addlw	-238
 10203  0EE3  1C03               	skipc
 10204  0EE4  2F84               	goto	l4124
 10205                           
 10206                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10207  0EE5  300A               	movlw	10
 10208  0EE6  00A7               	movwf	___awdiv@divisor
 10209  0EE7  3000               	movlw	0
 10210  0EE8  00A8               	movwf	___awdiv@divisor+1
 10211  0EE9  084E               	movf	scale@scl,w
 10212  0EEA  00A2               	movwf	___awmod@dividend
 10213  0EEB  01A3               	clrf	___awmod@dividend+1
 10214  0EEC  1BA2               	btfsc	___awmod@dividend,7
 10215  0EED  03A3               	decf	___awmod@dividend+1,f
 10216  0EEE  3064               	movlw	100
 10217  0EEF  00A0               	movwf	___awmod@divisor
 10218  0EF0  3000               	movlw	0
 10219  0EF1  00A1               	movwf	___awmod@divisor+1
 10220  0EF2  3192  2269  318D   	fcall	___awmod
 10221  0EF5  0020               	movlb	0	; select bank0
 10222  0EF6  0821               	movf	?___awmod+1,w
 10223  0EF7  00AA               	movwf	___awdiv@dividend+1
 10224  0EF8  0820               	movf	?___awmod,w
 10225  0EF9  00A9               	movwf	___awdiv@dividend
 10226  0EFA  3193  238B  318D   	fcall	___awdiv
 10227  0EFD  0020               	movlb	0	; select bank0
 10228  0EFE  0827               	movf	?___awdiv,w
 10229  0EFF  3E09               	addlw	9
 10230  0F00  00B0               	movwf	___wmul@multiplier
 10231  0F01  3000               	movlw	0
 10232  0F02  3D28               	addwfc	?___awdiv+1,w
 10233  0F03  00B1               	movwf	___wmul@multiplier+1
 10234  0F04  3003               	movlw	3
 10235  0F05  00B2               	movwf	___wmul@multiplicand
 10236  0F06  3000               	movlw	0
 10237  0F07  00B3               	movwf	___wmul@multiplicand+1
 10238  0F08  3190  200C  318D   	fcall	___wmul
 10239  0F0B  0020               	movlb	0	; select bank0
 10240  0F0C  0831               	movf	?___wmul+1,w
 10241  0F0D  0085               	movwf	5
 10242  0F0E  0830               	movf	?___wmul,w
 10243  0F0F  0084               	movwf	4
 10244  0F10  306A               	movlw	low (__powers_| (0+32768))
 10245  0F11  0784               	addwf	4,f
 10246  0F12  3099               	movlw	high (__powers_| (0+32768))
 10247  0F13  3D85               	addwfc	5,f
 10248  0F14  3F00               	moviw [0]fsr0
 10249  0F15  00B6               	movwf	___ftmul@f1
 10250  0F16  3F01               	moviw [1]fsr0
 10251  0F17  00B7               	movwf	___ftmul@f1+1
 10252  0F18  3F02               	moviw [2]fsr0
 10253  0F19  00B8               	movwf	___ftmul@f1+2
 10254  0F1A  3064               	movlw	100
 10255  0F1B  00A7               	movwf	___awdiv@divisor
 10256  0F1C  3000               	movlw	0
 10257  0F1D  00A8               	movwf	___awdiv@divisor+1
 10258  0F1E  084E               	movf	scale@scl,w
 10259  0F1F  00A9               	movwf	___awdiv@dividend
 10260  0F20  01AA               	clrf	___awdiv@dividend+1
 10261  0F21  1BA9               	btfsc	___awdiv@dividend,7
 10262  0F22  03AA               	decf	___awdiv@dividend+1,f
 10263  0F23  3193  238B  318D   	fcall	___awdiv
 10264  0F26  0020               	movlb	0	; select bank0
 10265  0F27  0827               	movf	?___awdiv,w
 10266  0F28  3E12               	addlw	18
 10267  0F29  00B0               	movwf	___wmul@multiplier
 10268  0F2A  3000               	movlw	0
 10269  0F2B  3D28               	addwfc	?___awdiv+1,w
 10270  0F2C  00B1               	movwf	___wmul@multiplier+1
 10271  0F2D  3003               	movlw	3
 10272  0F2E  00B2               	movwf	___wmul@multiplicand
 10273  0F2F  3000               	movlw	0
 10274  0F30  00B3               	movwf	___wmul@multiplicand+1
 10275  0F31  3190  200C  318D   	fcall	___wmul
 10276  0F34  0020               	movlb	0	; select bank0
 10277  0F35  0831               	movf	?___wmul+1,w
 10278  0F36  0085               	movwf	5
 10279  0F37  0830               	movf	?___wmul,w
 10280  0F38  0084               	movwf	4
 10281  0F39  306A               	movlw	low (__powers_| (0+32768))
 10282  0F3A  0784               	addwf	4,f
 10283  0F3B  3099               	movlw	high (__powers_| (0+32768))
 10284  0F3C  3D85               	addwfc	5,f
 10285  0F3D  3F00               	moviw [0]fsr0
 10286  0F3E  00B9               	movwf	___ftmul@f2
 10287  0F3F  3F01               	moviw [1]fsr0
 10288  0F40  00BA               	movwf	___ftmul@f2+1
 10289  0F41  3F02               	moviw [2]fsr0
 10290  0F42  00BB               	movwf	___ftmul@f2+2
 10291  0F43  3188  2016  318D   	fcall	___ftmul
 10292  0F46  0020               	movlb	0	; select bank0
 10293  0F47  0836               	movf	?___ftmul,w
 10294  0F48  00CB               	movwf	_scale$1382
 10295  0F49  0837               	movf	?___ftmul+1,w
 10296  0F4A  00CC               	movwf	_scale$1382+1
 10297  0F4B  0838               	movf	?___ftmul+2,w
 10298  0F4C  00CD               	movwf	_scale$1382+2
 10299                           
 10300                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10301  0F4D  084E               	movf	scale@scl,w
 10302  0F4E  00A2               	movwf	___awmod@dividend
 10303  0F4F  01A3               	clrf	___awmod@dividend+1
 10304  0F50  1BA2               	btfsc	___awmod@dividend,7
 10305  0F51  03A3               	decf	___awmod@dividend+1,f
 10306  0F52  300A               	movlw	10
 10307  0F53  00A0               	movwf	___awmod@divisor
 10308  0F54  3000               	movlw	0
 10309  0F55  00A1               	movwf	___awmod@divisor+1
 10310  0F56  3192  2269  318D   	fcall	___awmod
 10311  0F59  0020               	movlb	0	; select bank0
 10312  0F5A  0821               	movf	?___awmod+1,w
 10313  0F5B  00B1               	movwf	___wmul@multiplier+1
 10314  0F5C  0820               	movf	?___awmod,w
 10315  0F5D  00B0               	movwf	___wmul@multiplier
 10316  0F5E  3003               	movlw	3
 10317  0F5F  00B2               	movwf	___wmul@multiplicand
 10318  0F60  3000               	movlw	0
 10319  0F61  00B3               	movwf	___wmul@multiplicand+1
 10320  0F62  3190  200C  318D   	fcall	___wmul
 10321  0F65  0020               	movlb	0	; select bank0
 10322  0F66  0831               	movf	?___wmul+1,w
 10323  0F67  0085               	movwf	5
 10324  0F68  0830               	movf	?___wmul,w
 10325  0F69  0084               	movwf	4
 10326  0F6A  306A               	movlw	low (__powers_| (0+32768))
 10327  0F6B  0784               	addwf	4,f
 10328  0F6C  3099               	movlw	high (__powers_| (0+32768))
 10329  0F6D  3D85               	addwfc	5,f
 10330  0F6E  3F00               	moviw [0]fsr0
 10331  0F6F  00B6               	movwf	___ftmul@f1
 10332  0F70  3F01               	moviw [1]fsr0
 10333  0F71  00B7               	movwf	___ftmul@f1+1
 10334  0F72  3F02               	moviw [2]fsr0
 10335  0F73  00B8               	movwf	___ftmul@f1+2
 10336  0F74  084B               	movf	_scale$1382,w
 10337  0F75  00B9               	movwf	___ftmul@f2
 10338  0F76  084C               	movf	_scale$1382+1,w
 10339  0F77  00BA               	movwf	___ftmul@f2+1
 10340  0F78  084D               	movf	_scale$1382+2,w
 10341  0F79  00BB               	movwf	___ftmul@f2+2
 10342  0F7A  3188  2016         	fcall	___ftmul
 10343  0F7C  0020               	movlb	0	; select bank0
 10344  0F7D  0836               	movf	?___ftmul,w
 10345  0F7E  00C6               	movwf	?_scale
 10346  0F7F  0837               	movf	?___ftmul+1,w
 10347  0F80  00C7               	movwf	?_scale+1
 10348  0F81  0838               	movf	?___ftmul+2,w
 10349  0F82  00C8               	movwf	?_scale+2
 10350  0F83  0008               	return
 10351  0F84                     l4124:	
 10352                           
 10353                           ;doprnt.c: 438: else if(scl > 10)
 10354  0F84  084E               	movf	scale@scl,w
 10355  0F85  3A80               	xorlw	128
 10356  0F86  3E75               	addlw	-139
 10357  0F87  1C03               	skipc
 10358  0F88  2FE3               	goto	l4130
 10359                           
 10360                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10361  0F89  084E               	movf	scale@scl,w
 10362  0F8A  00A2               	movwf	___awmod@dividend
 10363  0F8B  01A3               	clrf	___awmod@dividend+1
 10364  0F8C  1BA2               	btfsc	___awmod@dividend,7
 10365  0F8D  03A3               	decf	___awmod@dividend+1,f
 10366  0F8E  300A               	movlw	10
 10367  0F8F  00A0               	movwf	___awmod@divisor
 10368  0F90  3000               	movlw	0
 10369  0F91  00A1               	movwf	___awmod@divisor+1
 10370  0F92  3192  2269  318D   	fcall	___awmod
 10371  0F95  0020               	movlb	0	; select bank0
 10372  0F96  0821               	movf	?___awmod+1,w
 10373  0F97  00B1               	movwf	___wmul@multiplier+1
 10374  0F98  0820               	movf	?___awmod,w
 10375  0F99  00B0               	movwf	___wmul@multiplier
 10376  0F9A  3003               	movlw	3
 10377  0F9B  00B2               	movwf	___wmul@multiplicand
 10378  0F9C  3000               	movlw	0
 10379  0F9D  00B3               	movwf	___wmul@multiplicand+1
 10380  0F9E  3190  200C  318D   	fcall	___wmul
 10381  0FA1  0020               	movlb	0	; select bank0
 10382  0FA2  0831               	movf	?___wmul+1,w
 10383  0FA3  0085               	movwf	5
 10384  0FA4  0830               	movf	?___wmul,w
 10385  0FA5  0084               	movwf	4
 10386  0FA6  306A               	movlw	low (__powers_| (0+32768))
 10387  0FA7  0784               	addwf	4,f
 10388  0FA8  3099               	movlw	high (__powers_| (0+32768))
 10389  0FA9  3D85               	addwfc	5,f
 10390  0FAA  3F00               	moviw [0]fsr0
 10391  0FAB  00B6               	movwf	___ftmul@f1
 10392  0FAC  3F01               	moviw [1]fsr0
 10393  0FAD  00B7               	movwf	___ftmul@f1+1
 10394  0FAE  3F02               	moviw [2]fsr0
 10395  0FAF  00B8               	movwf	___ftmul@f1+2
 10396  0FB0  300A               	movlw	10
 10397  0FB1  00A7               	movwf	___awdiv@divisor
 10398  0FB2  3000               	movlw	0
 10399  0FB3  00A8               	movwf	___awdiv@divisor+1
 10400  0FB4  084E               	movf	scale@scl,w
 10401  0FB5  00A9               	movwf	___awdiv@dividend
 10402  0FB6  01AA               	clrf	___awdiv@dividend+1
 10403  0FB7  1BA9               	btfsc	___awdiv@dividend,7
 10404  0FB8  03AA               	decf	___awdiv@dividend+1,f
 10405  0FB9  3193  238B  318D   	fcall	___awdiv
 10406  0FBC  0020               	movlb	0	; select bank0
 10407  0FBD  0827               	movf	?___awdiv,w
 10408  0FBE  3E09               	addlw	9
 10409  0FBF  00B0               	movwf	___wmul@multiplier
 10410  0FC0  3000               	movlw	0
 10411  0FC1  3D28               	addwfc	?___awdiv+1,w
 10412  0FC2  00B1               	movwf	___wmul@multiplier+1
 10413  0FC3  3003               	movlw	3
 10414  0FC4  00B2               	movwf	___wmul@multiplicand
 10415  0FC5  3000               	movlw	0
 10416  0FC6  00B3               	movwf	___wmul@multiplicand+1
 10417  0FC7  3190  200C  318D   	fcall	___wmul
 10418  0FCA  0020               	movlb	0	; select bank0
 10419  0FCB  0831               	movf	?___wmul+1,w
 10420  0FCC  0085               	movwf	5
 10421  0FCD  0830               	movf	?___wmul,w
 10422  0FCE  0084               	movwf	4
 10423  0FCF  306A               	movlw	low (__powers_| (0+32768))
 10424  0FD0  0784               	addwf	4,f
 10425  0FD1  3099               	movlw	high (__powers_| (0+32768))
 10426  0FD2  3D85               	addwfc	5,f
 10427  0FD3  3F00               	moviw [0]fsr0
 10428  0FD4  00B9               	movwf	___ftmul@f2
 10429  0FD5  3F01               	moviw [1]fsr0
 10430  0FD6  00BA               	movwf	___ftmul@f2+1
 10431  0FD7  3F02               	moviw [2]fsr0
 10432  0FD8  00BB               	movwf	___ftmul@f2+2
 10433  0FD9  3188  2016         	fcall	___ftmul
 10434  0FDB  0020               	movlb	0	; select bank0
 10435  0FDC  0836               	movf	?___ftmul,w
 10436  0FDD  00C6               	movwf	?_scale
 10437  0FDE  0837               	movf	?___ftmul+1,w
 10438  0FDF  00C7               	movwf	?_scale+1
 10439  0FE0  0838               	movf	?___ftmul+2,w
 10440  0FE1  00C8               	movwf	?_scale+2
 10441  0FE2  0008               	return
 10442  0FE3                     l4130:	
 10443                           
 10444                           ;doprnt.c: 440: return _powers_[scl];
 10445  0FE3  084E               	movf	scale@scl,w
 10446  0FE4  00C9               	movwf	??_scale
 10447  0FE5  01CA               	clrf	??_scale+1
 10448  0FE6  0849               	movf	??_scale,w
 10449  0FE7  00B0               	movwf	___wmul@multiplier
 10450  0FE8  084A               	movf	??_scale+1,w
 10451  0FE9  00B1               	movwf	___wmul@multiplier+1
 10452  0FEA  3003               	movlw	3
 10453  0FEB  00B2               	movwf	___wmul@multiplicand
 10454  0FEC  3000               	movlw	0
 10455  0FED  00B3               	movwf	___wmul@multiplicand+1
 10456  0FEE  3190  200C         	fcall	___wmul
 10457  0FF0  0020               	movlb	0	; select bank0
 10458  0FF1  0831               	movf	?___wmul+1,w
 10459  0FF2  0085               	movwf	5
 10460  0FF3  0830               	movf	?___wmul,w
 10461  0FF4  0084               	movwf	4
 10462  0FF5  306A               	movlw	low (__powers_| (0+32768))
 10463  0FF6  0784               	addwf	4,f
 10464  0FF7  3099               	movlw	high (__powers_| (0+32768))
 10465  0FF8  3D85               	addwfc	5,f
 10466  0FF9  3F00               	moviw [0]fsr0
 10467  0FFA  00C6               	movwf	?_scale
 10468  0FFB  3F01               	moviw [1]fsr0
 10469  0FFC  00C7               	movwf	?_scale+1
 10470  0FFD  3F02               	moviw [2]fsr0
 10471  0FFE  00C8               	movwf	?_scale+2
 10472  0FFF  0008               	return
 10473  1000                     __end_of_scale:	
 10474                           
 10475                           	psect	text20
 10476  1F3F                     __ptext20:	
 10477 ;; *************** function _putch *****************
 10478 ;; Defined at:
 10479 ;;		line 111 in file "mcc_generated_files/eusart.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;  txData          1    wreg     unsigned char 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  txData          1    1[BANK0 ] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  1    wreg      void 
 10486 ;; Registers used:
 10487 ;;		wreg, status,2, status,0, pclath, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;Total ram usage:        1 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    4
 10500 ;; This function calls:
 10501 ;;		_EUSART_Write
 10502 ;; This function is called by:
 10503 ;;		_printf
 10504 ;;		_puts
 10505 ;;		_cputs
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           
 10510                           ;psect for function _putch
 10511  1F3F                     _putch:	
 10512                           
 10513                           ;incstack = 0
 10514                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 10515                           ;putch@txData stored from wreg
 10516  1F3F  0020               	movlb	0	; select bank0
 10517  1F40  00A1               	movwf	putch@txData
 10518                           
 10519                           ;eusart.c: 113: EUSART_Write(txData);
 10520  1F41  0821               	movf	putch@txData,w
 10521  1F42  319F  2754         	fcall	_EUSART_Write
 10522  1F44  0008               	return
 10523  1F45                     __end_of_putch:	
 10524                           
 10525                           	psect	text21
 10526  1F54                     __ptext21:	
 10527 ;; *************** function _EUSART_Write *****************
 10528 ;; Defined at:
 10529 ;;		line 97 in file "mcc_generated_files/eusart.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;  txData          1    wreg     unsigned char 
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;  txData          1    0[BANK0 ] unsigned char 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  1    wreg      void 
 10536 ;; Registers used:
 10537 ;;		wreg
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:        1 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    3
 10550 ;; This function calls:
 10551 ;;		Nothing
 10552 ;; This function is called by:
 10553 ;;		_putch
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function _EUSART_Write
 10559  1F54                     _EUSART_Write:	
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in _EUSART_Write: [wreg]
 10563                           ;EUSART_Write@txData stored from wreg
 10564  1F54  0020               	movlb	0	; select bank0
 10565  1F55  00A0               	movwf	EUSART_Write@txData
 10566  1F56                     l31:	
 10567                           ;eusart.c: 100: {
 10568                           
 10569                           ;eusart.c: 99: while(0 == PIR3bits.TXIF)
 10570                           
 10571  1F56  002E               	movlb	14	; select bank14
 10572  1F57  1E0F               	btfss	15,4	;volatile
 10573  1F58  2F56               	goto	l31
 10574                           
 10575                           ;eusart.c: 101: }
 10576                           ;eusart.c: 103: TX1REG = txData;
 10577  1F59  0020               	movlb	0	; select bank0
 10578  1F5A  0820               	movf	EUSART_Write@txData,w
 10579  1F5B  0022               	movlb	2	; select bank2
 10580  1F5C  009A               	movwf	26	;volatile
 10581  1F5D  0008               	return
 10582  1F5E                     __end_of_EUSART_Write:	
 10583                           
 10584                           	psect	text22
 10585  1F97                     __ptext22:	
 10586 ;; *************** function _isdigit *****************
 10587 ;; Defined at:
 10588 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;  c               1    wreg     unsigned char 
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;  c               1    1[BANK0 ] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;		None               void
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, status,0
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;Total ram usage:        2 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    3
 10609 ;; This function calls:
 10610 ;;		Nothing
 10611 ;; This function is called by:
 10612 ;;		_printf
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           
 10617                           ;psect for function _isdigit
 10618  1F97                     _isdigit:	
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10622                           ;isdigit@c stored from wreg
 10623  1F97  0020               	movlb	0	; select bank0
 10624  1F98  00A1               	movwf	isdigit@c
 10625  1F99  01A0               	clrf	_isdigit$1116
 10626  1F9A  303A               	movlw	58
 10627  1F9B  0221               	subwf	isdigit@c,w
 10628  1F9C  1803               	skipnc
 10629  1F9D  2FA4               	goto	l4142
 10630  1F9E  3030               	movlw	48
 10631  1F9F  0221               	subwf	isdigit@c,w
 10632  1FA0  1C03               	skipc
 10633  1FA1  2FA4               	goto	l4142
 10634  1FA2  01A0               	clrf	_isdigit$1116
 10635  1FA3  0AA0               	incf	_isdigit$1116,f
 10636  1FA4                     l4142:	
 10637  1FA4  0C20               	rrf	_isdigit$1116,w
 10638  1FA5  0008               	return
 10639  1FA6                     __end_of_isdigit:	
 10640                           
 10641                           	psect	text23
 10642  0A10                     __ptext23:	
 10643 ;; *************** function _fround *****************
 10644 ;; Defined at:
 10645 ;;		line 409 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;  prec            1    wreg     unsigned char 
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  prec            1   51[BANK0 ] unsigned char 
 10650 ;; Return value:  Size  Location     Type
 10651 ;;                  3   38[BANK0 ] unsigned char 
 10652 ;; Registers used:
 10653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10654 ;; Tracked objects:
 10655 ;;		On entry : 0/0
 10656 ;;		On exit  : 0/0
 10657 ;;		Unchanged: 0/0
 10658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10659 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;Total ram usage:       14 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; Hardware stack levels required when called:    5
 10666 ;; This function calls:
 10667 ;;		___awdiv
 10668 ;;		___awmod
 10669 ;;		___ftmul
 10670 ;;		___wmul
 10671 ;; This function is called by:
 10672 ;;		_printf
 10673 ;; This function uses a non-reentrant model
 10674 ;;
 10675                           
 10676                           
 10677                           ;psect for function _fround
 10678  0A10                     _fround:	
 10679                           
 10680                           ;incstack = 0
 10681                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10682                           ;fround@prec stored from wreg
 10683  0A10  0020               	movlb	0	; select bank0
 10684  0A11  00D3               	movwf	fround@prec
 10685                           
 10686                           ;doprnt.c: 413: if(prec>=110)
 10687  0A12  306E               	movlw	110
 10688  0A13  0253               	subwf	fround@prec,w
 10689  0A14  1C03               	skipc
 10690  0A15  2AD1               	goto	l4082
 10691                           
 10692                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10693  0A16  300A               	movlw	10
 10694  0A17  00A7               	movwf	___awdiv@divisor
 10695  0A18  3000               	movlw	0
 10696  0A19  00A8               	movwf	___awdiv@divisor+1
 10697  0A1A  0853               	movf	fround@prec,w
 10698  0A1B  00C9               	movwf	??_fround
 10699  0A1C  01CA               	clrf	??_fround+1
 10700  0A1D  0849               	movf	??_fround,w
 10701  0A1E  00A2               	movwf	___awmod@dividend
 10702  0A1F  084A               	movf	??_fround+1,w
 10703  0A20  00A3               	movwf	___awmod@dividend+1
 10704  0A21  3064               	movlw	100
 10705  0A22  00A0               	movwf	___awmod@divisor
 10706  0A23  3000               	movlw	0
 10707  0A24  00A1               	movwf	___awmod@divisor+1
 10708  0A25  3192  2269  318A   	fcall	___awmod
 10709  0A28  0020               	movlb	0	; select bank0
 10710  0A29  0821               	movf	?___awmod+1,w
 10711  0A2A  00AA               	movwf	___awdiv@dividend+1
 10712  0A2B  0820               	movf	?___awmod,w
 10713  0A2C  00A9               	movwf	___awdiv@dividend
 10714  0A2D  3193  238B  318A   	fcall	___awdiv
 10715  0A30  0020               	movlb	0	; select bank0
 10716  0A31  0827               	movf	?___awdiv,w
 10717  0A32  3E09               	addlw	9
 10718  0A33  00B0               	movwf	___wmul@multiplier
 10719  0A34  3000               	movlw	0
 10720  0A35  3D28               	addwfc	?___awdiv+1,w
 10721  0A36  00B1               	movwf	___wmul@multiplier+1
 10722  0A37  3003               	movlw	3
 10723  0A38  00B2               	movwf	___wmul@multiplicand
 10724  0A39  3000               	movlw	0
 10725  0A3A  00B3               	movwf	___wmul@multiplicand+1
 10726  0A3B  3190  200C  318A   	fcall	___wmul
 10727  0A3E  0020               	movlb	0	; select bank0
 10728  0A3F  0831               	movf	?___wmul+1,w
 10729  0A40  0085               	movwf	5
 10730  0A41  0830               	movf	?___wmul,w
 10731  0A42  0084               	movwf	4
 10732  0A43  3091               	movlw	low (__npowers_| (0+32768))
 10733  0A44  0784               	addwf	4,f
 10734  0A45  3099               	movlw	high (__npowers_| (0+32768))
 10735  0A46  3D85               	addwfc	5,f
 10736  0A47  3F00               	moviw [0]fsr0
 10737  0A48  00B6               	movwf	___ftmul@f1
 10738  0A49  3F01               	moviw [1]fsr0
 10739  0A4A  00B7               	movwf	___ftmul@f1+1
 10740  0A4B  3F02               	moviw [2]fsr0
 10741  0A4C  00B8               	movwf	___ftmul@f1+2
 10742  0A4D  3064               	movlw	100
 10743  0A4E  00A7               	movwf	___awdiv@divisor
 10744  0A4F  3000               	movlw	0
 10745  0A50  00A8               	movwf	___awdiv@divisor+1
 10746  0A51  0853               	movf	fround@prec,w
 10747  0A52  00CB               	movwf	??_fround+2
 10748  0A53  01CC               	clrf	??_fround+3
 10749  0A54  084B               	movf	??_fround+2,w
 10750  0A55  00A9               	movwf	___awdiv@dividend
 10751  0A56  084C               	movf	??_fround+3,w
 10752  0A57  00AA               	movwf	___awdiv@dividend+1
 10753  0A58  3193  238B  318A   	fcall	___awdiv
 10754  0A5B  0020               	movlb	0	; select bank0
 10755  0A5C  0827               	movf	?___awdiv,w
 10756  0A5D  3E12               	addlw	18
 10757  0A5E  00B0               	movwf	___wmul@multiplier
 10758  0A5F  3000               	movlw	0
 10759  0A60  3D28               	addwfc	?___awdiv+1,w
 10760  0A61  00B1               	movwf	___wmul@multiplier+1
 10761  0A62  3003               	movlw	3
 10762  0A63  00B2               	movwf	___wmul@multiplicand
 10763  0A64  3000               	movlw	0
 10764  0A65  00B3               	movwf	___wmul@multiplicand+1
 10765  0A66  3190  200C  318A   	fcall	___wmul
 10766  0A69  0020               	movlb	0	; select bank0
 10767  0A6A  0831               	movf	?___wmul+1,w
 10768  0A6B  0085               	movwf	5
 10769  0A6C  0830               	movf	?___wmul,w
 10770  0A6D  0084               	movwf	4
 10771  0A6E  3091               	movlw	low (__npowers_| (0+32768))
 10772  0A6F  0784               	addwf	4,f
 10773  0A70  3099               	movlw	high (__npowers_| (0+32768))
 10774  0A71  3D85               	addwfc	5,f
 10775  0A72  3F00               	moviw [0]fsr0
 10776  0A73  00B9               	movwf	___ftmul@f2
 10777  0A74  3F01               	moviw [1]fsr0
 10778  0A75  00BA               	movwf	___ftmul@f2+1
 10779  0A76  3F02               	moviw [2]fsr0
 10780  0A77  00BB               	movwf	___ftmul@f2+2
 10781  0A78  3188  2016  318A   	fcall	___ftmul
 10782  0A7B  0020               	movlb	0	; select bank0
 10783  0A7C  0836               	movf	?___ftmul,w
 10784  0A7D  00D0               	movwf	_fround$1380
 10785  0A7E  0837               	movf	?___ftmul+1,w
 10786  0A7F  00D1               	movwf	_fround$1380+1
 10787  0A80  0838               	movf	?___ftmul+2,w
 10788  0A81  00D2               	movwf	_fround$1380+2
 10789                           
 10790                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10791  0A82  0853               	movf	fround@prec,w
 10792  0A83  00C9               	movwf	??_fround
 10793  0A84  01CA               	clrf	??_fround+1
 10794  0A85  0849               	movf	??_fround,w
 10795  0A86  00A2               	movwf	___awmod@dividend
 10796  0A87  084A               	movf	??_fround+1,w
 10797  0A88  00A3               	movwf	___awmod@dividend+1
 10798  0A89  300A               	movlw	10
 10799  0A8A  00A0               	movwf	___awmod@divisor
 10800  0A8B  3000               	movlw	0
 10801  0A8C  00A1               	movwf	___awmod@divisor+1
 10802  0A8D  3192  2269  318A   	fcall	___awmod
 10803  0A90  0020               	movlb	0	; select bank0
 10804  0A91  0821               	movf	?___awmod+1,w
 10805  0A92  00B1               	movwf	___wmul@multiplier+1
 10806  0A93  0820               	movf	?___awmod,w
 10807  0A94  00B0               	movwf	___wmul@multiplier
 10808  0A95  3003               	movlw	3
 10809  0A96  00B2               	movwf	___wmul@multiplicand
 10810  0A97  3000               	movlw	0
 10811  0A98  00B3               	movwf	___wmul@multiplicand+1
 10812  0A99  3190  200C  318A   	fcall	___wmul
 10813  0A9C  0020               	movlb	0	; select bank0
 10814  0A9D  0831               	movf	?___wmul+1,w
 10815  0A9E  0085               	movwf	5
 10816  0A9F  0830               	movf	?___wmul,w
 10817  0AA0  0084               	movwf	4
 10818  0AA1  3091               	movlw	low (__npowers_| (0+32768))
 10819  0AA2  0784               	addwf	4,f
 10820  0AA3  3099               	movlw	high (__npowers_| (0+32768))
 10821  0AA4  3D85               	addwfc	5,f
 10822  0AA5  3F00               	moviw [0]fsr0
 10823  0AA6  00B6               	movwf	___ftmul@f1
 10824  0AA7  3F01               	moviw [1]fsr0
 10825  0AA8  00B7               	movwf	___ftmul@f1+1
 10826  0AA9  3F02               	moviw [2]fsr0
 10827  0AAA  00B8               	movwf	___ftmul@f1+2
 10828  0AAB  0850               	movf	_fround$1380,w
 10829  0AAC  00B9               	movwf	___ftmul@f2
 10830  0AAD  0851               	movf	_fround$1380+1,w
 10831  0AAE  00BA               	movwf	___ftmul@f2+1
 10832  0AAF  0852               	movf	_fround$1380+2,w
 10833  0AB0  00BB               	movwf	___ftmul@f2+2
 10834  0AB1  3188  2016  318A   	fcall	___ftmul
 10835  0AB4  0020               	movlb	0	; select bank0
 10836  0AB5  0836               	movf	?___ftmul,w
 10837  0AB6  00CD               	movwf	_fround$1381
 10838  0AB7  0837               	movf	?___ftmul+1,w
 10839  0AB8  00CE               	movwf	_fround$1381+1
 10840  0AB9  0838               	movf	?___ftmul+2,w
 10841  0ABA  00CF               	movwf	_fround$1381+2
 10842                           
 10843                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10844  0ABB  3000               	movlw	0
 10845  0ABC  00B6               	movwf	___ftmul@f1
 10846  0ABD  3000               	movlw	0
 10847  0ABE  00B7               	movwf	___ftmul@f1+1
 10848  0ABF  303F               	movlw	63
 10849  0AC0  00B8               	movwf	___ftmul@f1+2
 10850  0AC1  084D               	movf	_fround$1381,w
 10851  0AC2  00B9               	movwf	___ftmul@f2
 10852  0AC3  084E               	movf	_fround$1381+1,w
 10853  0AC4  00BA               	movwf	___ftmul@f2+1
 10854  0AC5  084F               	movf	_fround$1381+2,w
 10855  0AC6  00BB               	movwf	___ftmul@f2+2
 10856  0AC7  3188  2016         	fcall	___ftmul
 10857  0AC9  0020               	movlb	0	; select bank0
 10858  0ACA  0836               	movf	?___ftmul,w
 10859  0ACB  00C6               	movwf	?_fround
 10860  0ACC  0837               	movf	?___ftmul+1,w
 10861  0ACD  00C7               	movwf	?_fround+1
 10862  0ACE  0838               	movf	?___ftmul+2,w
 10863  0ACF  00C8               	movwf	?_fround+2
 10864  0AD0  0008               	return
 10865  0AD1                     l4082:	
 10866                           
 10867                           ;doprnt.c: 415: else if(prec > 10)
 10868  0AD1  300B               	movlw	11
 10869  0AD2  0253               	subwf	fround@prec,w
 10870  0AD3  1C03               	skipc
 10871  0AD4  2B49               	goto	l4090
 10872                           
 10873                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10874  0AD5  0853               	movf	fround@prec,w
 10875  0AD6  00C9               	movwf	??_fround
 10876  0AD7  01CA               	clrf	??_fround+1
 10877  0AD8  0849               	movf	??_fround,w
 10878  0AD9  00A2               	movwf	___awmod@dividend
 10879  0ADA  084A               	movf	??_fround+1,w
 10880  0ADB  00A3               	movwf	___awmod@dividend+1
 10881  0ADC  300A               	movlw	10
 10882  0ADD  00A0               	movwf	___awmod@divisor
 10883  0ADE  3000               	movlw	0
 10884  0ADF  00A1               	movwf	___awmod@divisor+1
 10885  0AE0  3192  2269  318A   	fcall	___awmod
 10886  0AE3  0020               	movlb	0	; select bank0
 10887  0AE4  0821               	movf	?___awmod+1,w
 10888  0AE5  00B1               	movwf	___wmul@multiplier+1
 10889  0AE6  0820               	movf	?___awmod,w
 10890  0AE7  00B0               	movwf	___wmul@multiplier
 10891  0AE8  3003               	movlw	3
 10892  0AE9  00B2               	movwf	___wmul@multiplicand
 10893  0AEA  3000               	movlw	0
 10894  0AEB  00B3               	movwf	___wmul@multiplicand+1
 10895  0AEC  3190  200C  318A   	fcall	___wmul
 10896  0AEF  0020               	movlb	0	; select bank0
 10897  0AF0  0831               	movf	?___wmul+1,w
 10898  0AF1  0085               	movwf	5
 10899  0AF2  0830               	movf	?___wmul,w
 10900  0AF3  0084               	movwf	4
 10901  0AF4  3091               	movlw	low (__npowers_| (0+32768))
 10902  0AF5  0784               	addwf	4,f
 10903  0AF6  3099               	movlw	high (__npowers_| (0+32768))
 10904  0AF7  3D85               	addwfc	5,f
 10905  0AF8  3F00               	moviw [0]fsr0
 10906  0AF9  00B6               	movwf	___ftmul@f1
 10907  0AFA  3F01               	moviw [1]fsr0
 10908  0AFB  00B7               	movwf	___ftmul@f1+1
 10909  0AFC  3F02               	moviw [2]fsr0
 10910  0AFD  00B8               	movwf	___ftmul@f1+2
 10911  0AFE  300A               	movlw	10
 10912  0AFF  00A7               	movwf	___awdiv@divisor
 10913  0B00  3000               	movlw	0
 10914  0B01  00A8               	movwf	___awdiv@divisor+1
 10915  0B02  0853               	movf	fround@prec,w
 10916  0B03  00CB               	movwf	??_fround+2
 10917  0B04  01CC               	clrf	??_fround+3
 10918  0B05  084B               	movf	??_fround+2,w
 10919  0B06  00A9               	movwf	___awdiv@dividend
 10920  0B07  084C               	movf	??_fround+3,w
 10921  0B08  00AA               	movwf	___awdiv@dividend+1
 10922  0B09  3193  238B  318A   	fcall	___awdiv
 10923  0B0C  0020               	movlb	0	; select bank0
 10924  0B0D  0827               	movf	?___awdiv,w
 10925  0B0E  3E09               	addlw	9
 10926  0B0F  00B0               	movwf	___wmul@multiplier
 10927  0B10  3000               	movlw	0
 10928  0B11  3D28               	addwfc	?___awdiv+1,w
 10929  0B12  00B1               	movwf	___wmul@multiplier+1
 10930  0B13  3003               	movlw	3
 10931  0B14  00B2               	movwf	___wmul@multiplicand
 10932  0B15  3000               	movlw	0
 10933  0B16  00B3               	movwf	___wmul@multiplicand+1
 10934  0B17  3190  200C  318A   	fcall	___wmul
 10935  0B1A  0020               	movlb	0	; select bank0
 10936  0B1B  0831               	movf	?___wmul+1,w
 10937  0B1C  0085               	movwf	5
 10938  0B1D  0830               	movf	?___wmul,w
 10939  0B1E  0084               	movwf	4
 10940  0B1F  3091               	movlw	low (__npowers_| (0+32768))
 10941  0B20  0784               	addwf	4,f
 10942  0B21  3099               	movlw	high (__npowers_| (0+32768))
 10943  0B22  3D85               	addwfc	5,f
 10944  0B23  3F00               	moviw [0]fsr0
 10945  0B24  00B9               	movwf	___ftmul@f2
 10946  0B25  3F01               	moviw [1]fsr0
 10947  0B26  00BA               	movwf	___ftmul@f2+1
 10948  0B27  3F02               	moviw [2]fsr0
 10949  0B28  00BB               	movwf	___ftmul@f2+2
 10950  0B29  3188  2016  318A   	fcall	___ftmul
 10951  0B2C  0020               	movlb	0	; select bank0
 10952  0B2D  0836               	movf	?___ftmul,w
 10953  0B2E  00D0               	movwf	_fround$1380
 10954  0B2F  0837               	movf	?___ftmul+1,w
 10955  0B30  00D1               	movwf	_fround$1380+1
 10956  0B31  0838               	movf	?___ftmul+2,w
 10957  0B32  00D2               	movwf	_fround$1380+2
 10958                           
 10959                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10960  0B33  3000               	movlw	0
 10961  0B34  00B6               	movwf	___ftmul@f1
 10962  0B35  3000               	movlw	0
 10963  0B36  00B7               	movwf	___ftmul@f1+1
 10964  0B37  303F               	movlw	63
 10965  0B38  00B8               	movwf	___ftmul@f1+2
 10966  0B39  0850               	movf	_fround$1380,w
 10967  0B3A  00B9               	movwf	___ftmul@f2
 10968  0B3B  0851               	movf	_fround$1380+1,w
 10969  0B3C  00BA               	movwf	___ftmul@f2+1
 10970  0B3D  0852               	movf	_fround$1380+2,w
 10971  0B3E  00BB               	movwf	___ftmul@f2+2
 10972  0B3F  3188  2016         	fcall	___ftmul
 10973  0B41  0020               	movlb	0	; select bank0
 10974  0B42  0836               	movf	?___ftmul,w
 10975  0B43  00C6               	movwf	?_fround
 10976  0B44  0837               	movf	?___ftmul+1,w
 10977  0B45  00C7               	movwf	?_fround+1
 10978  0B46  0838               	movf	?___ftmul+2,w
 10979  0B47  00C8               	movwf	?_fround+2
 10980  0B48  0008               	return
 10981  0B49                     l4090:	
 10982                           
 10983                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10984  0B49  3000               	movlw	0
 10985  0B4A  00B6               	movwf	___ftmul@f1
 10986  0B4B  3000               	movlw	0
 10987  0B4C  00B7               	movwf	___ftmul@f1+1
 10988  0B4D  303F               	movlw	63
 10989  0B4E  00B8               	movwf	___ftmul@f1+2
 10990  0B4F  0853               	movf	fround@prec,w
 10991  0B50  00C9               	movwf	??_fround
 10992  0B51  01CA               	clrf	??_fround+1
 10993  0B52  0849               	movf	??_fround,w
 10994  0B53  00B0               	movwf	___wmul@multiplier
 10995  0B54  084A               	movf	??_fround+1,w
 10996  0B55  00B1               	movwf	___wmul@multiplier+1
 10997  0B56  3003               	movlw	3
 10998  0B57  00B2               	movwf	___wmul@multiplicand
 10999  0B58  3000               	movlw	0
 11000  0B59  00B3               	movwf	___wmul@multiplicand+1
 11001  0B5A  3190  200C  318A   	fcall	___wmul
 11002  0B5D  0020               	movlb	0	; select bank0
 11003  0B5E  0831               	movf	?___wmul+1,w
 11004  0B5F  0085               	movwf	5
 11005  0B60  0830               	movf	?___wmul,w
 11006  0B61  0084               	movwf	4
 11007  0B62  3091               	movlw	low (__npowers_| (0+32768))
 11008  0B63  0784               	addwf	4,f
 11009  0B64  3099               	movlw	high (__npowers_| (0+32768))
 11010  0B65  3D85               	addwfc	5,f
 11011  0B66  3F00               	moviw [0]fsr0
 11012  0B67  00B9               	movwf	___ftmul@f2
 11013  0B68  3F01               	moviw [1]fsr0
 11014  0B69  00BA               	movwf	___ftmul@f2+1
 11015  0B6A  3F02               	moviw [2]fsr0
 11016  0B6B  00BB               	movwf	___ftmul@f2+2
 11017  0B6C  3188  2016         	fcall	___ftmul
 11018  0B6E  0020               	movlb	0	; select bank0
 11019  0B6F  0836               	movf	?___ftmul,w
 11020  0B70  00C6               	movwf	?_fround
 11021  0B71  0837               	movf	?___ftmul+1,w
 11022  0B72  00C7               	movwf	?_fround+1
 11023  0B73  0838               	movf	?___ftmul+2,w
 11024  0B74  00C8               	movwf	?_fround+2
 11025  0B75  0008               	return
 11026  0B76                     __end_of_fround:	
 11027                           
 11028                           	psect	text24
 11029  100C                     __ptext24:	
 11030 ;; *************** function ___wmul *****************
 11031 ;; Defined at:
 11032 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  multiplier      2   16[BANK0 ] unsigned int 
 11035 ;;  multiplicand    2   18[BANK0 ] unsigned int 
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  product         2   20[BANK0 ] unsigned int 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  2   16[BANK0 ] unsigned int 
 11040 ;; Registers used:
 11041 ;;		wreg, status,2, status,0
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        6 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    3
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_EMC1001_PrintInfo
 11058 ;;		_EMC1001_PrintTemp
 11059 ;;		_fround
 11060 ;;		_scale
 11061 ;;		_printf
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function ___wmul
 11067  100C                     ___wmul:	
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11071  100C  0020               	movlb	0	; select bank0
 11072  100D  01B4               	clrf	___wmul@product
 11073  100E  01B5               	clrf	___wmul@product+1
 11074  100F                     l4058:	
 11075  100F  1C30               	btfss	___wmul@multiplier,0
 11076  1010  2815               	goto	l662
 11077  1011  0832               	movf	___wmul@multiplicand,w
 11078  1012  07B4               	addwf	___wmul@product,f
 11079  1013  0833               	movf	___wmul@multiplicand+1,w
 11080  1014  3DB5               	addwfc	___wmul@product+1,f
 11081  1015                     l662:	
 11082  1015  3001               	movlw	1
 11083  1016                     u5455:	
 11084  1016  35B2               	lslf	___wmul@multiplicand,f
 11085  1017  0DB3               	rlf	___wmul@multiplicand+1,f
 11086  1018  0B89               	decfsz	9,f
 11087  1019  2816               	goto	u5455
 11088  101A  3001               	movlw	1
 11089  101B                     u5465:	
 11090  101B  36B1               	lsrf	___wmul@multiplier+1,f
 11091  101C  0CB0               	rrf	___wmul@multiplier,f
 11092  101D  0B89               	decfsz	9,f
 11093  101E  281B               	goto	u5465
 11094  101F  0830               	movf	___wmul@multiplier,w
 11095  1020  0431               	iorwf	___wmul@multiplier+1,w
 11096  1021  1D03               	btfss	3,2
 11097  1022  280F               	goto	l4058
 11098  1023  0835               	movf	___wmul@product+1,w
 11099  1024  00B1               	movwf	?___wmul+1
 11100  1025  0834               	movf	___wmul@product,w
 11101  1026  00B0               	movwf	?___wmul
 11102  1027  0008               	return
 11103  1028                     __end_of___wmul:	
 11104                           
 11105                           	psect	text25
 11106  0816                     __ptext25:	
 11107 ;; *************** function ___ftmul *****************
 11108 ;; Defined at:
 11109 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  f1              3   22[BANK0 ] float 
 11112 ;;  f2              3   25[BANK0 ] float 
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
 11115 ;;  sign            1   37[BANK0 ] unsigned char 
 11116 ;;  cntr            1   36[BANK0 ] unsigned char 
 11117 ;;  exp             1   32[BANK0 ] unsigned char 
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  3   22[BANK0 ] float 
 11120 ;; Registers used:
 11121 ;;		wreg, status,2, status,0, pclath, cstack
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11127 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;Total ram usage:       16 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    4
 11134 ;; This function calls:
 11135 ;;		___ftpack
 11136 ;; This function is called by:
 11137 ;;		_EMC1001_PrintInfo
 11138 ;;		_fround
 11139 ;;		_scale
 11140 ;;		_printf
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function ___ftmul
 11146  0816                     ___ftmul:	
 11147                           
 11148                           ;incstack = 0
 11149                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11150  0816  0020               	movlb	0	; select bank0
 11151  0817  0836               	movf	___ftmul@f1,w
 11152  0818  00BC               	movwf	??___ftmul
 11153  0819  0837               	movf	___ftmul@f1+1,w
 11154  081A  00BD               	movwf	??___ftmul+1
 11155  081B  0838               	movf	___ftmul@f1+2,w
 11156  081C  00BE               	movwf	??___ftmul+2
 11157  081D  1003               	clrc
 11158  081E  0D3D               	rlf	??___ftmul+1,w
 11159  081F  0D3E               	rlf	??___ftmul+2,w
 11160  0820  00BF               	movwf	??___ftmul+3
 11161  0821  083F               	movf	??___ftmul+3,w
 11162  0822  00C0               	movwf	___ftmul@exp
 11163  0823  0840               	movf	___ftmul@exp,w
 11164  0824  1D03               	btfss	3,2
 11165  0825  282D               	goto	l2808
 11166  0826  3000               	movlw	0
 11167  0827  00B6               	movwf	?___ftmul
 11168  0828  3000               	movlw	0
 11169  0829  00B7               	movwf	?___ftmul+1
 11170  082A  3000               	movlw	0
 11171  082B  00B8               	movwf	?___ftmul+2
 11172  082C  0008               	return
 11173  082D                     l2808:	
 11174  082D  0839               	movf	___ftmul@f2,w
 11175  082E  00BC               	movwf	??___ftmul
 11176  082F  083A               	movf	___ftmul@f2+1,w
 11177  0830  00BD               	movwf	??___ftmul+1
 11178  0831  083B               	movf	___ftmul@f2+2,w
 11179  0832  00BE               	movwf	??___ftmul+2
 11180  0833  1003               	clrc
 11181  0834  0D3D               	rlf	??___ftmul+1,w
 11182  0835  0D3E               	rlf	??___ftmul+2,w
 11183  0836  00BF               	movwf	??___ftmul+3
 11184  0837  083F               	movf	??___ftmul+3,w
 11185  0838  00C5               	movwf	___ftmul@sign
 11186  0839  0845               	movf	___ftmul@sign,w
 11187  083A  1D03               	btfss	3,2
 11188  083B  2843               	goto	l2814
 11189  083C  3000               	movlw	0
 11190  083D  00B6               	movwf	?___ftmul
 11191  083E  3000               	movlw	0
 11192  083F  00B7               	movwf	?___ftmul+1
 11193  0840  3000               	movlw	0
 11194  0841  00B8               	movwf	?___ftmul+2
 11195  0842  0008               	return
 11196  0843                     l2814:	
 11197  0843  0845               	movf	___ftmul@sign,w
 11198  0844  3E7B               	addlw	123
 11199  0845  00BC               	movwf	??___ftmul
 11200  0846  083C               	movf	??___ftmul,w
 11201  0847  07C0               	addwf	___ftmul@exp,f
 11202  0848  0836               	movf	___ftmul@f1,w
 11203  0849  00BC               	movwf	??___ftmul
 11204  084A  0837               	movf	___ftmul@f1+1,w
 11205  084B  00BD               	movwf	??___ftmul+1
 11206  084C  0838               	movf	___ftmul@f1+2,w
 11207  084D  00BE               	movwf	??___ftmul+2
 11208  084E  3010               	movlw	16
 11209  084F                     u3345:	
 11210  084F  36BE               	lsrf	??___ftmul+2,f
 11211  0850  0CBD               	rrf	??___ftmul+1,f
 11212  0851  0CBC               	rrf	??___ftmul,f
 11213  0852  0B89               	decfsz	9,f
 11214  0853  284F               	goto	u3345
 11215  0854  083C               	movf	??___ftmul,w
 11216  0855  00BF               	movwf	??___ftmul+3
 11217  0856  083F               	movf	??___ftmul+3,w
 11218  0857  00C5               	movwf	___ftmul@sign
 11219  0858  0839               	movf	___ftmul@f2,w
 11220  0859  00BC               	movwf	??___ftmul
 11221  085A  083A               	movf	___ftmul@f2+1,w
 11222  085B  00BD               	movwf	??___ftmul+1
 11223  085C  083B               	movf	___ftmul@f2+2,w
 11224  085D  00BE               	movwf	??___ftmul+2
 11225  085E  3010               	movlw	16
 11226  085F                     u3355:	
 11227  085F  36BE               	lsrf	??___ftmul+2,f
 11228  0860  0CBD               	rrf	??___ftmul+1,f
 11229  0861  0CBC               	rrf	??___ftmul,f
 11230  0862  0B89               	decfsz	9,f
 11231  0863  285F               	goto	u3355
 11232  0864  083C               	movf	??___ftmul,w
 11233  0865  00BF               	movwf	??___ftmul+3
 11234  0866  083F               	movf	??___ftmul+3,w
 11235  0867  06C5               	xorwf	___ftmul@sign,f
 11236  0868  3080               	movlw	128
 11237  0869  00BC               	movwf	??___ftmul
 11238  086A  083C               	movf	??___ftmul,w
 11239  086B  05C5               	andwf	___ftmul@sign,f
 11240  086C  17B7               	bsf	___ftmul@f1+1,7
 11241  086D  17BA               	bsf	___ftmul@f2+1,7
 11242  086E  30FF               	movlw	255
 11243  086F  05B9               	andwf	___ftmul@f2,f
 11244  0870  30FF               	movlw	255
 11245  0871  05BA               	andwf	___ftmul@f2+1,f
 11246  0872  3000               	movlw	0
 11247  0873  05BB               	andwf	___ftmul@f2+2,f
 11248  0874  3000               	movlw	0
 11249  0875  00C1               	movwf	___ftmul@f3_as_product
 11250  0876  3000               	movlw	0
 11251  0877  00C2               	movwf	___ftmul@f3_as_product+1
 11252  0878  3000               	movlw	0
 11253  0879  00C3               	movwf	___ftmul@f3_as_product+2
 11254  087A  3007               	movlw	7
 11255  087B  00BC               	movwf	??___ftmul
 11256  087C  083C               	movf	??___ftmul,w
 11257  087D  00C4               	movwf	___ftmul@cntr
 11258  087E                     l2826:	
 11259  087E  1C36               	btfss	___ftmul@f1,0
 11260  087F  2886               	goto	l2830
 11261  0880  0839               	movf	___ftmul@f2,w
 11262  0881  07C1               	addwf	___ftmul@f3_as_product,f
 11263  0882  083A               	movf	___ftmul@f2+1,w
 11264  0883  3DC2               	addwfc	___ftmul@f3_as_product+1,f
 11265  0884  083B               	movf	___ftmul@f2+2,w
 11266  0885  3DC3               	addwfc	___ftmul@f3_as_product+2,f
 11267  0886                     l2830:	
 11268  0886  3001               	movlw	1
 11269  0887                     u3375:	
 11270  0887  36B8               	lsrf	___ftmul@f1+2,f
 11271  0888  0CB7               	rrf	___ftmul@f1+1,f
 11272  0889  0CB6               	rrf	___ftmul@f1,f
 11273  088A  0B89               	decfsz	9,f
 11274  088B  2887               	goto	u3375
 11275  088C  3001               	movlw	1
 11276  088D                     u3385:	
 11277  088D  35B9               	lslf	___ftmul@f2,f
 11278  088E  0DBA               	rlf	___ftmul@f2+1,f
 11279  088F  0DBB               	rlf	___ftmul@f2+2,f
 11280  0890  0B89               	decfsz	9,f
 11281  0891  288D               	goto	u3385
 11282  0892  3001               	movlw	1
 11283  0893  02C4               	subwf	___ftmul@cntr,f
 11284  0894  1D03               	btfss	3,2
 11285  0895  287E               	goto	l2826
 11286  0896  3009               	movlw	9
 11287  0897  00BC               	movwf	??___ftmul
 11288  0898  083C               	movf	??___ftmul,w
 11289  0899  00C4               	movwf	___ftmul@cntr
 11290  089A                     l2838:	
 11291  089A  1C36               	btfss	___ftmul@f1,0
 11292  089B  28A2               	goto	l2842
 11293  089C  0839               	movf	___ftmul@f2,w
 11294  089D  07C1               	addwf	___ftmul@f3_as_product,f
 11295  089E  083A               	movf	___ftmul@f2+1,w
 11296  089F  3DC2               	addwfc	___ftmul@f3_as_product+1,f
 11297  08A0  083B               	movf	___ftmul@f2+2,w
 11298  08A1  3DC3               	addwfc	___ftmul@f3_as_product+2,f
 11299  08A2                     l2842:	
 11300  08A2  3001               	movlw	1
 11301  08A3                     u3415:	
 11302  08A3  36B8               	lsrf	___ftmul@f1+2,f
 11303  08A4  0CB7               	rrf	___ftmul@f1+1,f
 11304  08A5  0CB6               	rrf	___ftmul@f1,f
 11305  08A6  0B89               	decfsz	9,f
 11306  08A7  28A3               	goto	u3415
 11307  08A8  3001               	movlw	1
 11308  08A9                     u3425:	
 11309  08A9  36C3               	lsrf	___ftmul@f3_as_product+2,f
 11310  08AA  0CC2               	rrf	___ftmul@f3_as_product+1,f
 11311  08AB  0CC1               	rrf	___ftmul@f3_as_product,f
 11312  08AC  0B89               	decfsz	9,f
 11313  08AD  28A9               	goto	u3425
 11314  08AE  3001               	movlw	1
 11315  08AF  02C4               	subwf	___ftmul@cntr,f
 11316  08B0  1D03               	btfss	3,2
 11317  08B1  289A               	goto	l2838
 11318  08B2  0841               	movf	___ftmul@f3_as_product,w
 11319  08B3  00A0               	movwf	___ftpack@arg
 11320  08B4  0842               	movf	___ftmul@f3_as_product+1,w
 11321  08B5  00A1               	movwf	___ftpack@arg+1
 11322  08B6  0843               	movf	___ftmul@f3_as_product+2,w
 11323  08B7  00A2               	movwf	___ftpack@arg+2
 11324  08B8  0840               	movf	___ftmul@exp,w
 11325  08B9  00BC               	movwf	??___ftmul
 11326  08BA  083C               	movf	??___ftmul,w
 11327  08BB  00A3               	movwf	___ftpack@exp
 11328  08BC  0845               	movf	___ftmul@sign,w
 11329  08BD  00BD               	movwf	??___ftmul+1
 11330  08BE  083D               	movf	??___ftmul+1,w
 11331  08BF  00A4               	movwf	___ftpack@sign
 11332  08C0  3194  2483         	fcall	___ftpack
 11333  08C2  0020               	movlb	0	; select bank0
 11334  08C3  0820               	movf	?___ftpack,w
 11335  08C4  00B6               	movwf	?___ftmul
 11336  08C5  0821               	movf	?___ftpack+1,w
 11337  08C6  00B7               	movwf	?___ftmul+1
 11338  08C7  0822               	movf	?___ftpack+2,w
 11339  08C8  00B8               	movwf	?___ftmul+2
 11340  08C9  0008               	return
 11341  08CA                     __end_of___ftmul:	
 11342                           
 11343                           	psect	text26
 11344  1269                     __ptext26:	
 11345 ;; *************** function ___awmod *****************
 11346 ;; Defined at:
 11347 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;  divisor         2    0[BANK0 ] int 
 11350 ;;  dividend        2    2[BANK0 ] int 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  sign            1    6[BANK0 ] unsigned char 
 11353 ;;  counter         1    5[BANK0 ] unsigned char 
 11354 ;; Return value:  Size  Location     Type
 11355 ;;                  2    0[BANK0 ] int 
 11356 ;; Registers used:
 11357 ;;		wreg, status,2, status,0
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;Total ram usage:        7 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; Hardware stack levels required when called:    3
 11370 ;; This function calls:
 11371 ;;		Nothing
 11372 ;; This function is called by:
 11373 ;;		_fround
 11374 ;;		_scale
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           
 11379                           ;psect for function ___awmod
 11380  1269                     ___awmod:	
 11381                           
 11382                           ;incstack = 0
 11383                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11384  1269  0020               	movlb	0	; select bank0
 11385  126A  01A6               	clrf	___awmod@sign
 11386  126B  1FA3               	btfss	___awmod@dividend+1,7
 11387  126C  2A74               	goto	l2702
 11388  126D  09A2               	comf	___awmod@dividend,f
 11389  126E  09A3               	comf	___awmod@dividend+1,f
 11390  126F  0AA2               	incf	___awmod@dividend,f
 11391  1270  1903               	skipnz
 11392  1271  0AA3               	incf	___awmod@dividend+1,f
 11393  1272  01A6               	clrf	___awmod@sign
 11394  1273  0AA6               	incf	___awmod@sign,f
 11395  1274                     l2702:	
 11396  1274  1FA1               	btfss	___awmod@divisor+1,7
 11397  1275  2A7B               	goto	l2706
 11398  1276  09A0               	comf	___awmod@divisor,f
 11399  1277  09A1               	comf	___awmod@divisor+1,f
 11400  1278  0AA0               	incf	___awmod@divisor,f
 11401  1279  1903               	skipnz
 11402  127A  0AA1               	incf	___awmod@divisor+1,f
 11403  127B                     l2706:	
 11404  127B  0820               	movf	___awmod@divisor,w
 11405  127C  0421               	iorwf	___awmod@divisor+1,w
 11406  127D  1903               	btfsc	3,2
 11407  127E  2AA2               	goto	l2724
 11408  127F  01A5               	clrf	___awmod@counter
 11409  1280  0AA5               	incf	___awmod@counter,f
 11410  1281                     l2714:	
 11411  1281  1BA1               	btfsc	___awmod@divisor+1,7
 11412  1282  2A8D               	goto	l2716
 11413  1283  3001               	movlw	1
 11414  1284                     u3035:	
 11415  1284  35A0               	lslf	___awmod@divisor,f
 11416  1285  0DA1               	rlf	___awmod@divisor+1,f
 11417  1286  0B89               	decfsz	9,f
 11418  1287  2A84               	goto	u3035
 11419  1288  3001               	movlw	1
 11420  1289  00A4               	movwf	??___awmod
 11421  128A  0824               	movf	??___awmod,w
 11422  128B  07A5               	addwf	___awmod@counter,f
 11423  128C  2A81               	goto	l2714
 11424  128D                     l2716:	
 11425  128D  0821               	movf	___awmod@divisor+1,w
 11426  128E  0223               	subwf	___awmod@dividend+1,w
 11427  128F  1D03               	skipz
 11428  1290  2A93               	goto	u3055
 11429  1291  0820               	movf	___awmod@divisor,w
 11430  1292  0222               	subwf	___awmod@dividend,w
 11431  1293                     u3055:	
 11432  1293  1C03               	skipc
 11433  1294  2A99               	goto	l2720
 11434  1295  0820               	movf	___awmod@divisor,w
 11435  1296  02A2               	subwf	___awmod@dividend,f
 11436  1297  0821               	movf	___awmod@divisor+1,w
 11437  1298  3BA3               	subwfb	___awmod@dividend+1,f
 11438  1299                     l2720:	
 11439  1299  3001               	movlw	1
 11440  129A                     u3065:	
 11441  129A  36A1               	lsrf	___awmod@divisor+1,f
 11442  129B  0CA0               	rrf	___awmod@divisor,f
 11443  129C  0B89               	decfsz	9,f
 11444  129D  2A9A               	goto	u3065
 11445  129E  3001               	movlw	1
 11446  129F  02A5               	subwf	___awmod@counter,f
 11447  12A0  1D03               	btfss	3,2
 11448  12A1  2A8D               	goto	l2716
 11449  12A2                     l2724:	
 11450  12A2  0826               	movf	___awmod@sign,w
 11451  12A3  1903               	btfsc	3,2
 11452  12A4  2AAA               	goto	l2728
 11453  12A5  09A2               	comf	___awmod@dividend,f
 11454  12A6  09A3               	comf	___awmod@dividend+1,f
 11455  12A7  0AA2               	incf	___awmod@dividend,f
 11456  12A8  1903               	skipnz
 11457  12A9  0AA3               	incf	___awmod@dividend+1,f
 11458  12AA                     l2728:	
 11459  12AA  0823               	movf	___awmod@dividend+1,w
 11460  12AB  00A1               	movwf	?___awmod+1
 11461  12AC  0822               	movf	___awmod@dividend,w
 11462  12AD  00A0               	movwf	?___awmod
 11463  12AE  0008               	return
 11464  12AF                     __end_of___awmod:	
 11465                           
 11466                           	psect	text27
 11467  138B                     __ptext27:	
 11468 ;; *************** function ___awdiv *****************
 11469 ;; Defined at:
 11470 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/common/awdiv.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;  divisor         2    7[BANK0 ] int 
 11473 ;;  dividend        2    9[BANK0 ] int 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  quotient        2   14[BANK0 ] int 
 11476 ;;  sign            1   13[BANK0 ] unsigned char 
 11477 ;;  counter         1   12[BANK0 ] unsigned char 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  2    7[BANK0 ] int 
 11480 ;; Registers used:
 11481 ;;		wreg, status,2, status,0
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;Total ram usage:        9 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    3
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_EMC1001_SetTempHighLimit
 11498 ;;		_EMC1001_SetTempLowLimit
 11499 ;;		_fround
 11500 ;;		_scale
 11501 ;;		_printf
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function ___awdiv
 11507  138B                     ___awdiv:	
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11511  138B  0020               	movlb	0	; select bank0
 11512  138C  01AD               	clrf	___awdiv@sign
 11513  138D  1FA8               	btfss	___awdiv@divisor+1,7
 11514  138E  2B96               	goto	l2658
 11515  138F  09A7               	comf	___awdiv@divisor,f
 11516  1390  09A8               	comf	___awdiv@divisor+1,f
 11517  1391  0AA7               	incf	___awdiv@divisor,f
 11518  1392  1903               	skipnz
 11519  1393  0AA8               	incf	___awdiv@divisor+1,f
 11520  1394  01AD               	clrf	___awdiv@sign
 11521  1395  0AAD               	incf	___awdiv@sign,f
 11522  1396                     l2658:	
 11523  1396  1FAA               	btfss	___awdiv@dividend+1,7
 11524  1397  2BA1               	goto	l2664
 11525  1398  09A9               	comf	___awdiv@dividend,f
 11526  1399  09AA               	comf	___awdiv@dividend+1,f
 11527  139A  0AA9               	incf	___awdiv@dividend,f
 11528  139B  1903               	skipnz
 11529  139C  0AAA               	incf	___awdiv@dividend+1,f
 11530  139D  3001               	movlw	1
 11531  139E  00AB               	movwf	??___awdiv
 11532  139F  082B               	movf	??___awdiv,w
 11533  13A0  06AD               	xorwf	___awdiv@sign,f
 11534  13A1                     l2664:	
 11535  13A1  01AE               	clrf	___awdiv@quotient
 11536  13A2  01AF               	clrf	___awdiv@quotient+1
 11537  13A3  0827               	movf	___awdiv@divisor,w
 11538  13A4  0428               	iorwf	___awdiv@divisor+1,w
 11539  13A5  1903               	btfsc	3,2
 11540  13A6  2BD0               	goto	l2686
 11541  13A7  01AC               	clrf	___awdiv@counter
 11542  13A8  0AAC               	incf	___awdiv@counter,f
 11543  13A9                     l2674:	
 11544  13A9  1BA8               	btfsc	___awdiv@divisor+1,7
 11545  13AA  2BB5               	goto	l2676
 11546  13AB  3001               	movlw	1
 11547  13AC                     u2935:	
 11548  13AC  35A7               	lslf	___awdiv@divisor,f
 11549  13AD  0DA8               	rlf	___awdiv@divisor+1,f
 11550  13AE  0B89               	decfsz	9,f
 11551  13AF  2BAC               	goto	u2935
 11552  13B0  3001               	movlw	1
 11553  13B1  00AB               	movwf	??___awdiv
 11554  13B2  082B               	movf	??___awdiv,w
 11555  13B3  07AC               	addwf	___awdiv@counter,f
 11556  13B4  2BA9               	goto	l2674
 11557  13B5                     l2676:	
 11558  13B5  3001               	movlw	1
 11559  13B6                     u2955:	
 11560  13B6  35AE               	lslf	___awdiv@quotient,f
 11561  13B7  0DAF               	rlf	___awdiv@quotient+1,f
 11562  13B8  0B89               	decfsz	9,f
 11563  13B9  2BB6               	goto	u2955
 11564  13BA  0828               	movf	___awdiv@divisor+1,w
 11565  13BB  022A               	subwf	___awdiv@dividend+1,w
 11566  13BC  1D03               	skipz
 11567  13BD  2BC0               	goto	u2965
 11568  13BE  0827               	movf	___awdiv@divisor,w
 11569  13BF  0229               	subwf	___awdiv@dividend,w
 11570  13C0                     u2965:	
 11571  13C0  1C03               	skipc
 11572  13C1  2BC7               	goto	l2682
 11573  13C2  0827               	movf	___awdiv@divisor,w
 11574  13C3  02A9               	subwf	___awdiv@dividend,f
 11575  13C4  0828               	movf	___awdiv@divisor+1,w
 11576  13C5  3BAA               	subwfb	___awdiv@dividend+1,f
 11577  13C6  142E               	bsf	___awdiv@quotient,0
 11578  13C7                     l2682:	
 11579  13C7  3001               	movlw	1
 11580  13C8                     u2975:	
 11581  13C8  36A8               	lsrf	___awdiv@divisor+1,f
 11582  13C9  0CA7               	rrf	___awdiv@divisor,f
 11583  13CA  0B89               	decfsz	9,f
 11584  13CB  2BC8               	goto	u2975
 11585  13CC  3001               	movlw	1
 11586  13CD  02AC               	subwf	___awdiv@counter,f
 11587  13CE  1D03               	btfss	3,2
 11588  13CF  2BB5               	goto	l2676
 11589  13D0                     l2686:	
 11590  13D0  082D               	movf	___awdiv@sign,w
 11591  13D1  1903               	btfsc	3,2
 11592  13D2  2BD8               	goto	l2690
 11593  13D3  09AE               	comf	___awdiv@quotient,f
 11594  13D4  09AF               	comf	___awdiv@quotient+1,f
 11595  13D5  0AAE               	incf	___awdiv@quotient,f
 11596  13D6  1903               	skipnz
 11597  13D7  0AAF               	incf	___awdiv@quotient+1,f
 11598  13D8                     l2690:	
 11599  13D8  082F               	movf	___awdiv@quotient+1,w
 11600  13D9  00A8               	movwf	?___awdiv+1
 11601  13DA  082E               	movf	___awdiv@quotient,w
 11602  13DB  00A7               	movwf	?___awdiv
 11603  13DC  0008               	return
 11604  13DD                     __end_of___awdiv:	
 11605                           
 11606                           	psect	text28
 11607  0741                     __ptext28:	
 11608 ;; *************** function __tdiv_to_l_ *****************
 11609 ;; Defined at:
 11610 ;;		line 60 in file "/opt/microchip/xc8/v1.42/sources/common/ftdivl.c"
 11611 ;; Parameters:    Size  Location     Type
 11612 ;;  f1              3    0[BANK0 ] float 
 11613 ;;  f2              3    3[BANK0 ] float 
 11614 ;; Auto vars:     Size  Location     Type
 11615 ;;  quot            4   10[BANK0 ] unsigned long 
 11616 ;;  exp1            1   15[BANK0 ] unsigned char 
 11617 ;;  cntr            1   14[BANK0 ] unsigned char 
 11618 ;; Return value:  Size  Location     Type
 11619 ;;                  4    0[BANK0 ] unsigned long 
 11620 ;; Registers used:
 11621 ;;		wreg, status,2, status,0
 11622 ;; Tracked objects:
 11623 ;;		On entry : 0/0
 11624 ;;		On exit  : 0/0
 11625 ;;		Unchanged: 0/0
 11626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11627 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;Total ram usage:       16 bytes
 11632 ;; Hardware stack levels used:    1
 11633 ;; Hardware stack levels required when called:    3
 11634 ;; This function calls:
 11635 ;;		Nothing
 11636 ;; This function is called by:
 11637 ;;		_printf
 11638 ;; This function uses a non-reentrant model
 11639 ;;
 11640                           
 11641                           
 11642                           ;psect for function __tdiv_to_l_
 11643  0741                     __tdiv_to_l_:	
 11644                           
 11645                           ;incstack = 0
 11646                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
 11647  0741  0020               	movlb	0	; select bank0
 11648  0742  0820               	movf	__tdiv_to_l_@f1,w
 11649  0743  00A6               	movwf	??__tdiv_to_l_
 11650  0744  0821               	movf	__tdiv_to_l_@f1+1,w
 11651  0745  00A7               	movwf	??__tdiv_to_l_+1
 11652  0746  0822               	movf	__tdiv_to_l_@f1+2,w
 11653  0747  00A8               	movwf	??__tdiv_to_l_+2
 11654  0748  1003               	clrc
 11655  0749  0D27               	rlf	??__tdiv_to_l_+1,w
 11656  074A  0D28               	rlf	??__tdiv_to_l_+2,w
 11657  074B  00A9               	movwf	??__tdiv_to_l_+3
 11658  074C  0829               	movf	??__tdiv_to_l_+3,w
 11659  074D  00AF               	movwf	__tdiv_to_l_@exp1
 11660  074E  082F               	movf	__tdiv_to_l_@exp1,w
 11661  074F  1D03               	btfss	3,2
 11662  0750  2F5A               	goto	l2960
 11663  0751  3000               	movlw	0
 11664  0752  00A3               	movwf	?__tdiv_to_l_+3
 11665  0753  3000               	movlw	0
 11666  0754  00A2               	movwf	?__tdiv_to_l_+2
 11667  0755  3000               	movlw	0
 11668  0756  00A1               	movwf	?__tdiv_to_l_+1
 11669  0757  3000               	movlw	0
 11670  0758  00A0               	movwf	?__tdiv_to_l_
 11671  0759  0008               	return
 11672  075A                     l2960:	
 11673  075A  0823               	movf	__tdiv_to_l_@f2,w
 11674  075B  00A6               	movwf	??__tdiv_to_l_
 11675  075C  0824               	movf	__tdiv_to_l_@f2+1,w
 11676  075D  00A7               	movwf	??__tdiv_to_l_+1
 11677  075E  0825               	movf	__tdiv_to_l_@f2+2,w
 11678  075F  00A8               	movwf	??__tdiv_to_l_+2
 11679  0760  1003               	clrc
 11680  0761  0D27               	rlf	??__tdiv_to_l_+1,w
 11681  0762  0D28               	rlf	??__tdiv_to_l_+2,w
 11682  0763  00A9               	movwf	??__tdiv_to_l_+3
 11683  0764  0829               	movf	??__tdiv_to_l_+3,w
 11684  0765  00AE               	movwf	__tdiv_to_l_@cntr
 11685  0766  082E               	movf	__tdiv_to_l_@cntr,w
 11686  0767  1D03               	btfss	3,2
 11687  0768  2F72               	goto	l897
 11688  0769  3000               	movlw	0
 11689  076A  00A3               	movwf	?__tdiv_to_l_+3
 11690  076B  3000               	movlw	0
 11691  076C  00A2               	movwf	?__tdiv_to_l_+2
 11692  076D  3000               	movlw	0
 11693  076E  00A1               	movwf	?__tdiv_to_l_+1
 11694  076F  3000               	movlw	0
 11695  0770  00A0               	movwf	?__tdiv_to_l_
 11696  0771  0008               	return
 11697  0772                     l897:	
 11698  0772  17A1               	bsf	__tdiv_to_l_@f1+1,7
 11699  0773  30FF               	movlw	255
 11700  0774  05A0               	andwf	__tdiv_to_l_@f1,f
 11701  0775  30FF               	movlw	255
 11702  0776  05A1               	andwf	__tdiv_to_l_@f1+1,f
 11703  0777  3000               	movlw	0
 11704  0778  05A2               	andwf	__tdiv_to_l_@f1+2,f
 11705  0779  17A4               	bsf	__tdiv_to_l_@f2+1,7
 11706  077A  30FF               	movlw	255
 11707  077B  05A3               	andwf	__tdiv_to_l_@f2,f
 11708  077C  30FF               	movlw	255
 11709  077D  05A4               	andwf	__tdiv_to_l_@f2+1,f
 11710  077E  3000               	movlw	0
 11711  077F  05A5               	andwf	__tdiv_to_l_@f2+2,f
 11712  0780  3000               	movlw	0
 11713  0781  00AD               	movwf	__tdiv_to_l_@quot+3
 11714  0782  3000               	movlw	0
 11715  0783  00AC               	movwf	__tdiv_to_l_@quot+2
 11716  0784  3000               	movlw	0
 11717  0785  00AB               	movwf	__tdiv_to_l_@quot+1
 11718  0786  3000               	movlw	0
 11719  0787  00AA               	movwf	__tdiv_to_l_@quot
 11720  0788  307F               	movlw	127
 11721  0789  02AF               	subwf	__tdiv_to_l_@exp1,f
 11722  078A  3098               	movlw	152
 11723  078B  072E               	addwf	__tdiv_to_l_@cntr,w
 11724  078C  00A6               	movwf	??__tdiv_to_l_
 11725  078D  0826               	movf	??__tdiv_to_l_,w
 11726  078E  02AF               	subwf	__tdiv_to_l_@exp1,f
 11727  078F  3018               	movlw	24
 11728  0790  00A6               	movwf	??__tdiv_to_l_
 11729  0791  0826               	movf	??__tdiv_to_l_,w
 11730  0792  00AE               	movwf	__tdiv_to_l_@cntr
 11731  0793                     l2974:	
 11732  0793  3001               	movlw	1
 11733  0794                     u3605:	
 11734  0794  35AA               	lslf	__tdiv_to_l_@quot,f
 11735  0795  0DAB               	rlf	__tdiv_to_l_@quot+1,f
 11736  0796  0DAC               	rlf	__tdiv_to_l_@quot+2,f
 11737  0797  0DAD               	rlf	__tdiv_to_l_@quot+3,f
 11738  0798  0B89               	decfsz	9,f
 11739  0799  2F94               	goto	u3605
 11740  079A  0825               	movf	__tdiv_to_l_@f2+2,w
 11741  079B  0222               	subwf	__tdiv_to_l_@f1+2,w
 11742  079C  1D03               	skipz
 11743  079D  2FA4               	goto	u3615
 11744  079E  0824               	movf	__tdiv_to_l_@f2+1,w
 11745  079F  0221               	subwf	__tdiv_to_l_@f1+1,w
 11746  07A0  1D03               	skipz
 11747  07A1  2FA4               	goto	u3615
 11748  07A2  0823               	movf	__tdiv_to_l_@f2,w
 11749  07A3  0220               	subwf	__tdiv_to_l_@f1,w
 11750  07A4                     u3615:	
 11751  07A4  1C03               	skipc
 11752  07A5  2FAD               	goto	l2982
 11753  07A6  0823               	movf	__tdiv_to_l_@f2,w
 11754  07A7  02A0               	subwf	__tdiv_to_l_@f1,f
 11755  07A8  0824               	movf	__tdiv_to_l_@f2+1,w
 11756  07A9  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
 11757  07AA  0825               	movf	__tdiv_to_l_@f2+2,w
 11758  07AB  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
 11759  07AC  142A               	bsf	__tdiv_to_l_@quot,0
 11760  07AD                     l2982:	
 11761  07AD  3001               	movlw	1
 11762  07AE                     u3625:	
 11763  07AE  35A0               	lslf	__tdiv_to_l_@f1,f
 11764  07AF  0DA1               	rlf	__tdiv_to_l_@f1+1,f
 11765  07B0  0DA2               	rlf	__tdiv_to_l_@f1+2,f
 11766  07B1  0B89               	decfsz	9,f
 11767  07B2  2FAE               	goto	u3625
 11768  07B3  3001               	movlw	1
 11769  07B4  02AE               	subwf	__tdiv_to_l_@cntr,f
 11770  07B5  1D03               	btfss	3,2
 11771  07B6  2F93               	goto	l2974
 11772  07B7  1FAF               	btfss	__tdiv_to_l_@exp1,7
 11773  07B8  2FD5               	goto	l2994
 11774  07B9  082F               	movf	__tdiv_to_l_@exp1,w
 11775  07BA  3A80               	xorlw	128
 11776  07BB  3E97               	addlw	151
 11777  07BC  1803               	skipnc
 11778  07BD  2FC7               	goto	l2992
 11779  07BE  3000               	movlw	0
 11780  07BF  00A3               	movwf	?__tdiv_to_l_+3
 11781  07C0  3000               	movlw	0
 11782  07C1  00A2               	movwf	?__tdiv_to_l_+2
 11783  07C2  3000               	movlw	0
 11784  07C3  00A1               	movwf	?__tdiv_to_l_+1
 11785  07C4  3000               	movlw	0
 11786  07C5  00A0               	movwf	?__tdiv_to_l_
 11787  07C6  0008               	return
 11788  07C7                     l2992:	
 11789  07C7  3001               	movlw	1
 11790  07C8                     u3665:	
 11791  07C8  36AD               	lsrf	__tdiv_to_l_@quot+3,f
 11792  07C9  0CAC               	rrf	__tdiv_to_l_@quot+2,f
 11793  07CA  0CAB               	rrf	__tdiv_to_l_@quot+1,f
 11794  07CB  0CAA               	rrf	__tdiv_to_l_@quot,f
 11795  07CC  0B89               	decfsz	9,f
 11796  07CD  2FC8               	goto	u3665
 11797  07CE  3001               	movlw	1
 11798  07CF  00A6               	movwf	??__tdiv_to_l_
 11799  07D0  0826               	movf	??__tdiv_to_l_,w
 11800  07D1  07AF               	addwf	__tdiv_to_l_@exp1,f
 11801  07D2  1903               	btfsc	3,2
 11802  07D3  2FEE               	goto	l3002
 11803  07D4  2FC7               	goto	l2992
 11804  07D5                     l2994:	
 11805  07D5  3018               	movlw	24
 11806  07D6  022F               	subwf	__tdiv_to_l_@exp1,w
 11807  07D7  1C03               	skipc
 11808  07D8  2FEB               	goto	l907
 11809  07D9  3000               	movlw	0
 11810  07DA  00A3               	movwf	?__tdiv_to_l_+3
 11811  07DB  3000               	movlw	0
 11812  07DC  00A2               	movwf	?__tdiv_to_l_+2
 11813  07DD  3000               	movlw	0
 11814  07DE  00A1               	movwf	?__tdiv_to_l_+1
 11815  07DF  3000               	movlw	0
 11816  07E0  00A0               	movwf	?__tdiv_to_l_
 11817  07E1  0008               	return
 11818  07E2                     l3000:	
 11819  07E2  3001               	movlw	1
 11820  07E3                     u3695:	
 11821  07E3  35AA               	lslf	__tdiv_to_l_@quot,f
 11822  07E4  0DAB               	rlf	__tdiv_to_l_@quot+1,f
 11823  07E5  0DAC               	rlf	__tdiv_to_l_@quot+2,f
 11824  07E6  0DAD               	rlf	__tdiv_to_l_@quot+3,f
 11825  07E7  0B89               	decfsz	9,f
 11826  07E8  2FE3               	goto	u3695
 11827  07E9  3001               	movlw	1
 11828  07EA  02AF               	subwf	__tdiv_to_l_@exp1,f
 11829  07EB                     l907:	
 11830  07EB  082F               	movf	__tdiv_to_l_@exp1,w
 11831  07EC  1D03               	btfss	3,2
 11832  07ED  2FE2               	goto	l3000
 11833  07EE                     l3002:	
 11834  07EE  082D               	movf	__tdiv_to_l_@quot+3,w
 11835  07EF  00A3               	movwf	?__tdiv_to_l_+3
 11836  07F0  082C               	movf	__tdiv_to_l_@quot+2,w
 11837  07F1  00A2               	movwf	?__tdiv_to_l_+2
 11838  07F2  082B               	movf	__tdiv_to_l_@quot+1,w
 11839  07F3  00A1               	movwf	?__tdiv_to_l_+1
 11840  07F4  082A               	movf	__tdiv_to_l_@quot,w
 11841  07F5  00A0               	movwf	?__tdiv_to_l_
 11842  07F6  0008               	return
 11843  07F7                     __end_of__tdiv_to_l_:	
 11844                           
 11845                           	psect	text29
 11846  16E3                     __ptext29:	
 11847 ;; *************** function __div_to_l_ *****************
 11848 ;; Defined at:
 11849 ;;		line 60 in file "/opt/microchip/xc8/v1.42/sources/common/fldivl.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;  f1              3    0[BANK0 ] unsigned long 
 11852 ;;  f2              3    3[BANK0 ] unsigned long 
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;  quot            4   14[BANK0 ] unsigned long 
 11855 ;;  exp1            1   19[BANK0 ] unsigned char 
 11856 ;;  cntr            1   18[BANK0 ] unsigned char 
 11857 ;; Return value:  Size  Location     Type
 11858 ;;                  4    0[BANK0 ] unsigned long 
 11859 ;; Registers used:
 11860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11861 ;; Tracked objects:
 11862 ;;		On entry : 0/0
 11863 ;;		On exit  : 0/0
 11864 ;;		Unchanged: 0/0
 11865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11866 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;Total ram usage:       20 bytes
 11871 ;; Hardware stack levels used:    1
 11872 ;; Hardware stack levels required when called:    3
 11873 ;; This function calls:
 11874 ;;		Nothing
 11875 ;; This function is called by:
 11876 ;;		_printf
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           
 11881                           ;psect for function __div_to_l_
 11882  16E3                     __div_to_l_:	
 11883                           
 11884                           ;incstack = 0
 11885                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
 11886  16E3  3020               	movlw	low (__div_to_l_@f1| 0)
 11887  16E4  0086               	movwf	6
 11888  16E5  0187               	clrf	7
 11889  16E6  3F40               	moviw [0]fsr1
 11890  16E7  0020               	movlb	0	; select bank0
 11891  16E8  00A6               	movwf	??__div_to_l_
 11892  16E9  3F41               	moviw [1]fsr1
 11893  16EA  00A7               	movwf	??__div_to_l_+1
 11894  16EB  3F42               	moviw [2]fsr1
 11895  16EC  00A8               	movwf	??__div_to_l_+2
 11896  16ED  3F43               	moviw [3]fsr1
 11897  16EE  00A9               	movwf	??__div_to_l_+3
 11898  16EF  1003               	clrc
 11899  16F0  0D28               	rlf	??__div_to_l_+2,w
 11900  16F1  0D29               	rlf	??__div_to_l_+3,w
 11901  16F2  00AA               	movwf	??__div_to_l_+4
 11902  16F3  082A               	movf	??__div_to_l_+4,w
 11903  16F4  00B3               	movwf	__div_to_l_@exp1
 11904  16F5  0833               	movf	__div_to_l_@exp1,w
 11905  16F6  1D03               	btfss	3,2
 11906  16F7  2F01               	goto	l3012
 11907  16F8  3000               	movlw	0
 11908  16F9  00A3               	movwf	?__div_to_l_+3
 11909  16FA  3000               	movlw	0
 11910  16FB  00A2               	movwf	?__div_to_l_+2
 11911  16FC  3000               	movlw	0
 11912  16FD  00A1               	movwf	?__div_to_l_+1
 11913  16FE  3000               	movlw	0
 11914  16FF  00A0               	movwf	?__div_to_l_
 11915  1700  0008               	return
 11916  1701                     l3012:	
 11917  1701  3023               	movlw	low (__div_to_l_@f2| 0)
 11918  1702  0086               	movwf	6
 11919  1703  0187               	clrf	7
 11920  1704  3F40               	moviw [0]fsr1
 11921  1705  00A6               	movwf	??__div_to_l_
 11922  1706  3F41               	moviw [1]fsr1
 11923  1707  00A7               	movwf	??__div_to_l_+1
 11924  1708  3F42               	moviw [2]fsr1
 11925  1709  00A8               	movwf	??__div_to_l_+2
 11926  170A  3F43               	moviw [3]fsr1
 11927  170B  00A9               	movwf	??__div_to_l_+3
 11928  170C  1003               	clrc
 11929  170D  0D28               	rlf	??__div_to_l_+2,w
 11930  170E  0D29               	rlf	??__div_to_l_+3,w
 11931  170F  00AA               	movwf	??__div_to_l_+4
 11932  1710  082A               	movf	??__div_to_l_+4,w
 11933  1711  00B2               	movwf	__div_to_l_@cntr
 11934  1712  0832               	movf	__div_to_l_@cntr,w
 11935  1713  1D03               	btfss	3,2
 11936  1714  2F1E               	goto	l3018
 11937  1715  3000               	movlw	0
 11938  1716  00A3               	movwf	?__div_to_l_+3
 11939  1717  3000               	movlw	0
 11940  1718  00A2               	movwf	?__div_to_l_+2
 11941  1719  3000               	movlw	0
 11942  171A  00A1               	movwf	?__div_to_l_+1
 11943  171B  3000               	movlw	0
 11944  171C  00A0               	movwf	?__div_to_l_
 11945  171D  0008               	return
 11946  171E                     l3018:	
 11947  171E  3020               	movlw	low (__div_to_l_@f1| 0)
 11948  171F  0086               	movwf	6
 11949  1720  0187               	clrf	7
 11950  1721  3000               	movlw	0
 11951  1722  0481               	iorwf	1,f
 11952  1723  3141               	addfsr 1,1
 11953  1724  3000               	movlw	0
 11954  1725  0481               	iorwf	1,f
 11955  1726  3141               	addfsr 1,1
 11956  1727  3080               	movlw	128
 11957  1728  0481               	iorwf	1,f
 11958  1729  3141               	addfsr 1,1
 11959  172A  3000               	movlw	0
 11960  172B  0481               	iorwf	1,f
 11961  172C  3020               	movlw	low (__div_to_l_@f1| 0)
 11962  172D  0086               	movwf	6
 11963  172E  0187               	clrf	7
 11964  172F  30FF               	movlw	255
 11965  1730  0581               	andwf	1,f
 11966  1731  3141               	addfsr 1,1
 11967  1732  30FF               	movlw	255
 11968  1733  0581               	andwf	1,f
 11969  1734  3141               	addfsr 1,1
 11970  1735  30FF               	movlw	255
 11971  1736  0581               	andwf	1,f
 11972  1737  3141               	addfsr 1,1
 11973  1738  3000               	movlw	0
 11974  1739  0581               	andwf	1,f
 11975  173A  3023               	movlw	low (__div_to_l_@f2| 0)
 11976  173B  0086               	movwf	6
 11977  173C  0187               	clrf	7
 11978  173D  3000               	movlw	0
 11979  173E  0481               	iorwf	1,f
 11980  173F  3141               	addfsr 1,1
 11981  1740  3000               	movlw	0
 11982  1741  0481               	iorwf	1,f
 11983  1742  3141               	addfsr 1,1
 11984  1743  3080               	movlw	128
 11985  1744  0481               	iorwf	1,f
 11986  1745  3141               	addfsr 1,1
 11987  1746  3000               	movlw	0
 11988  1747  0481               	iorwf	1,f
 11989  1748  3023               	movlw	low (__div_to_l_@f2| 0)
 11990  1749  0086               	movwf	6
 11991  174A  0187               	clrf	7
 11992  174B  30FF               	movlw	255
 11993  174C  0581               	andwf	1,f
 11994  174D  3141               	addfsr 1,1
 11995  174E  30FF               	movlw	255
 11996  174F  0581               	andwf	1,f
 11997  1750  3141               	addfsr 1,1
 11998  1751  30FF               	movlw	255
 11999  1752  0581               	andwf	1,f
 12000  1753  3141               	addfsr 1,1
 12001  1754  3000               	movlw	0
 12002  1755  0581               	andwf	1,f
 12003  1756  3000               	movlw	0
 12004  1757  00B1               	movwf	__div_to_l_@quot+3
 12005  1758  3000               	movlw	0
 12006  1759  00B0               	movwf	__div_to_l_@quot+2
 12007  175A  3000               	movlw	0
 12008  175B  00AF               	movwf	__div_to_l_@quot+1
 12009  175C  3000               	movlw	0
 12010  175D  00AE               	movwf	__div_to_l_@quot
 12011  175E  307F               	movlw	127
 12012  175F  02B3               	subwf	__div_to_l_@exp1,f
 12013  1760  30A0               	movlw	160
 12014  1761  0732               	addwf	__div_to_l_@cntr,w
 12015  1762  00A6               	movwf	??__div_to_l_
 12016  1763  0826               	movf	??__div_to_l_,w
 12017  1764  02B3               	subwf	__div_to_l_@exp1,f
 12018  1765  3020               	movlw	32
 12019  1766  00A6               	movwf	??__div_to_l_
 12020  1767  0826               	movf	??__div_to_l_,w
 12021  1768  00B2               	movwf	__div_to_l_@cntr
 12022  1769                     l3028:	
 12023  1769  3001               	movlw	1
 12024  176A                     u3735:	
 12025  176A  35AE               	lslf	__div_to_l_@quot,f
 12026  176B  0DAF               	rlf	__div_to_l_@quot+1,f
 12027  176C  0DB0               	rlf	__div_to_l_@quot+2,f
 12028  176D  0DB1               	rlf	__div_to_l_@quot+3,f
 12029  176E  0B89               	decfsz	9,f
 12030  176F  2F6A               	goto	u3735
 12031  1770  3023               	movlw	low (__div_to_l_@f2| 0)
 12032  1771  0086               	movwf	6
 12033  1772  0187               	clrf	7
 12034  1773  3F40               	moviw [0]fsr1
 12035  1774  00A6               	movwf	??__div_to_l_
 12036  1775  3F41               	moviw [1]fsr1
 12037  1776  00A7               	movwf	??__div_to_l_+1
 12038  1777  3F42               	moviw [2]fsr1
 12039  1778  00A8               	movwf	??__div_to_l_+2
 12040  1779  3F43               	moviw [3]fsr1
 12041  177A  00A9               	movwf	??__div_to_l_+3
 12042  177B  3020               	movlw	low (__div_to_l_@f1| 0)
 12043  177C  0086               	movwf	6
 12044  177D  0187               	clrf	7
 12045  177E  3F40               	moviw [0]fsr1
 12046  177F  00AA               	movwf	??__div_to_l_+4
 12047  1780  3F41               	moviw [1]fsr1
 12048  1781  00AB               	movwf	??__div_to_l_+5
 12049  1782  3F42               	moviw [2]fsr1
 12050  1783  00AC               	movwf	??__div_to_l_+6
 12051  1784  3F43               	moviw [3]fsr1
 12052  1785  00AD               	movwf	??__div_to_l_+7
 12053  1786  0829               	movf	??__div_to_l_+3,w
 12054  1787  022D               	subwf	??__div_to_l_+7,w
 12055  1788  1D03               	skipz
 12056  1789  2F94               	goto	u3745
 12057  178A  0828               	movf	??__div_to_l_+2,w
 12058  178B  022C               	subwf	??__div_to_l_+6,w
 12059  178C  1D03               	skipz
 12060  178D  2F94               	goto	u3745
 12061  178E  0827               	movf	??__div_to_l_+1,w
 12062  178F  022B               	subwf	??__div_to_l_+5,w
 12063  1790  1D03               	skipz
 12064  1791  2F94               	goto	u3745
 12065  1792  0826               	movf	??__div_to_l_,w
 12066  1793  022A               	subwf	??__div_to_l_+4,w
 12067  1794                     u3745:	
 12068  1794  1C03               	skipc
 12069  1795  2FB1               	goto	l3036
 12070  1796  3023               	movlw	low (__div_to_l_@f2| 0)
 12071  1797  0086               	movwf	6
 12072  1798  0187               	clrf	7
 12073  1799  3F40               	moviw [0]fsr1
 12074  179A  00A6               	movwf	??__div_to_l_
 12075  179B  3F41               	moviw [1]fsr1
 12076  179C  00A7               	movwf	??__div_to_l_+1
 12077  179D  3F42               	moviw [2]fsr1
 12078  179E  00A8               	movwf	??__div_to_l_+2
 12079  179F  3F43               	moviw [3]fsr1
 12080  17A0  00A9               	movwf	??__div_to_l_+3
 12081  17A1  3020               	movlw	low (__div_to_l_@f1| 0)
 12082  17A2  0086               	movwf	6
 12083  17A3  0187               	clrf	7
 12084  17A4  0826               	movf	??__div_to_l_,w
 12085  17A5  0281               	subwf	1,f
 12086  17A6  3141               	addfsr 1,1
 12087  17A7  0827               	movf	??__div_to_l_+1,w
 12088  17A8  3B81               	subwfb	1,f
 12089  17A9  3141               	addfsr 1,1
 12090  17AA  0828               	movf	??__div_to_l_+2,w
 12091  17AB  3B81               	subwfb	1,f
 12092  17AC  3141               	addfsr 1,1
 12093  17AD  0829               	movf	??__div_to_l_+3,w
 12094  17AE  3B81               	subwfb	1,f
 12095  17AF  317D               	addfsr 1,-3
 12096  17B0  142E               	bsf	__div_to_l_@quot,0
 12097  17B1                     l3036:	
 12098  17B1  3020               	movlw	low (__div_to_l_@f1| 0)
 12099  17B2  0086               	movwf	6
 12100  17B3  0187               	clrf	7
 12101  17B4  3581               	lslf	1,f
 12102  17B5  3141               	addfsr 1,1
 12103  17B6  0D81               	rlf	1,f
 12104  17B7  3141               	addfsr 1,1
 12105  17B8  0D81               	rlf	1,f
 12106  17B9  3141               	addfsr 1,1
 12107  17BA  0D81               	rlf	1,f
 12108  17BB  317D               	addfsr 1,-3
 12109  17BC  3001               	movlw	1
 12110  17BD  02B2               	subwf	__div_to_l_@cntr,f
 12111  17BE  1D03               	btfss	3,2
 12112  17BF  2F69               	goto	l3028
 12113  17C0  1FB3               	btfss	__div_to_l_@exp1,7
 12114  17C1  2FDE               	goto	l3048
 12115  17C2  0833               	movf	__div_to_l_@exp1,w
 12116  17C3  3A80               	xorlw	128
 12117  17C4  3E9F               	addlw	159
 12118  17C5  1803               	skipnc
 12119  17C6  2FD0               	goto	l3046
 12120  17C7  3000               	movlw	0
 12121  17C8  00A3               	movwf	?__div_to_l_+3
 12122  17C9  3000               	movlw	0
 12123  17CA  00A2               	movwf	?__div_to_l_+2
 12124  17CB  3000               	movlw	0
 12125  17CC  00A1               	movwf	?__div_to_l_+1
 12126  17CD  3000               	movlw	0
 12127  17CE  00A0               	movwf	?__div_to_l_
 12128  17CF  0008               	return
 12129  17D0                     l3046:	
 12130  17D0  3001               	movlw	1
 12131  17D1                     u3785:	
 12132  17D1  36B1               	lsrf	__div_to_l_@quot+3,f
 12133  17D2  0CB0               	rrf	__div_to_l_@quot+2,f
 12134  17D3  0CAF               	rrf	__div_to_l_@quot+1,f
 12135  17D4  0CAE               	rrf	__div_to_l_@quot,f
 12136  17D5  0B89               	decfsz	9,f
 12137  17D6  2FD1               	goto	u3785
 12138  17D7  3001               	movlw	1
 12139  17D8  00A6               	movwf	??__div_to_l_
 12140  17D9  0826               	movf	??__div_to_l_,w
 12141  17DA  07B3               	addwf	__div_to_l_@exp1,f
 12142  17DB  1903               	btfsc	3,2
 12143  17DC  2FF7               	goto	l3056
 12144  17DD  2FD0               	goto	l3046
 12145  17DE                     l3048:	
 12146  17DE  3020               	movlw	32
 12147  17DF  0233               	subwf	__div_to_l_@exp1,w
 12148  17E0  1C03               	skipc
 12149  17E1  2FF4               	goto	l828
 12150  17E2  3000               	movlw	0
 12151  17E3  00A3               	movwf	?__div_to_l_+3
 12152  17E4  3000               	movlw	0
 12153  17E5  00A2               	movwf	?__div_to_l_+2
 12154  17E6  3000               	movlw	0
 12155  17E7  00A1               	movwf	?__div_to_l_+1
 12156  17E8  3000               	movlw	0
 12157  17E9  00A0               	movwf	?__div_to_l_
 12158  17EA  0008               	return
 12159  17EB                     l3054:	
 12160  17EB  3001               	movlw	1
 12161  17EC                     u3815:	
 12162  17EC  35AE               	lslf	__div_to_l_@quot,f
 12163  17ED  0DAF               	rlf	__div_to_l_@quot+1,f
 12164  17EE  0DB0               	rlf	__div_to_l_@quot+2,f
 12165  17EF  0DB1               	rlf	__div_to_l_@quot+3,f
 12166  17F0  0B89               	decfsz	9,f
 12167  17F1  2FEC               	goto	u3815
 12168  17F2  3001               	movlw	1
 12169  17F3  02B3               	subwf	__div_to_l_@exp1,f
 12170  17F4                     l828:	
 12171  17F4  0833               	movf	__div_to_l_@exp1,w
 12172  17F5  1D03               	btfss	3,2
 12173  17F6  2FEB               	goto	l3054
 12174  17F7                     l3056:	
 12175  17F7  0831               	movf	__div_to_l_@quot+3,w
 12176  17F8  00A3               	movwf	?__div_to_l_+3
 12177  17F9  0830               	movf	__div_to_l_@quot+2,w
 12178  17FA  00A2               	movwf	?__div_to_l_+2
 12179  17FB  082F               	movf	__div_to_l_@quot+1,w
 12180  17FC  00A1               	movwf	?__div_to_l_+1
 12181  17FD  082E               	movf	__div_to_l_@quot,w
 12182  17FE  00A0               	movwf	?__div_to_l_
 12183  17FF  0008               	return
 12184  1800                     __end_of__div_to_l_:	
 12185                           
 12186                           	psect	text30
 12187  10EE                     __ptext30:	
 12188 ;; *************** function ___lltoft *****************
 12189 ;; Defined at:
 12190 ;;		line 35 in file "/opt/microchip/xc8/v1.42/sources/common/lltoft.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  c               4    8[BANK0 ] unsigned long 
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;  exp             1   13[BANK0 ] unsigned char 
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  3    8[BANK0 ] float 
 12197 ;; Registers used:
 12198 ;;		wreg, status,2, status,0, pclath, cstack
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12204 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;Total ram usage:        6 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; Hardware stack levels required when called:    4
 12211 ;; This function calls:
 12212 ;;		___ftpack
 12213 ;; This function is called by:
 12214 ;;		_printf
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           
 12219                           ;psect for function ___lltoft
 12220  10EE                     ___lltoft:	
 12221                           
 12222                           ;incstack = 0
 12223                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 12224  10EE  308E               	movlw	142
 12225  10EF  0020               	movlb	0	; select bank0
 12226  10F0  00AC               	movwf	??___lltoft
 12227  10F1  082C               	movf	??___lltoft,w
 12228  10F2  00AD               	movwf	___lltoft@exp
 12229  10F3                     l3186:	
 12230  10F3  30FF               	movlw	255
 12231  10F4  052B               	andwf	___lltoft@c+3,w
 12232  10F5  1903               	btfsc	3,2
 12233  10F6  2903               	goto	l3188
 12234  10F7  3001               	movlw	1
 12235  10F8                     u4115:	
 12236  10F8  36AB               	lsrf	___lltoft@c+3,f
 12237  10F9  0CAA               	rrf	___lltoft@c+2,f
 12238  10FA  0CA9               	rrf	___lltoft@c+1,f
 12239  10FB  0CA8               	rrf	___lltoft@c,f
 12240  10FC  0B89               	decfsz	9,f
 12241  10FD  28F8               	goto	u4115
 12242  10FE  3001               	movlw	1
 12243  10FF  00AC               	movwf	??___lltoft
 12244  1100  082C               	movf	??___lltoft,w
 12245  1101  07AD               	addwf	___lltoft@exp,f
 12246  1102  28F3               	goto	l3186
 12247  1103                     l3188:	
 12248  1103  0828               	movf	___lltoft@c,w
 12249  1104  00A0               	movwf	___ftpack@arg
 12250  1105  0829               	movf	___lltoft@c+1,w
 12251  1106  00A1               	movwf	___ftpack@arg+1
 12252  1107  082A               	movf	___lltoft@c+2,w
 12253  1108  00A2               	movwf	___ftpack@arg+2
 12254  1109  082D               	movf	___lltoft@exp,w
 12255  110A  00AC               	movwf	??___lltoft
 12256  110B  082C               	movf	??___lltoft,w
 12257  110C  00A3               	movwf	___ftpack@exp
 12258  110D  01A4               	clrf	___ftpack@sign
 12259  110E  3194  2483         	fcall	___ftpack
 12260  1110  0020               	movlb	0	; select bank0
 12261  1111  0820               	movf	?___ftpack,w
 12262  1112  00A8               	movwf	?___lltoft
 12263  1113  0821               	movf	?___ftpack+1,w
 12264  1114  00A9               	movwf	?___lltoft+1
 12265  1115  0822               	movf	?___ftpack+2,w
 12266  1116  00AA               	movwf	?___lltoft+2
 12267  1117  0008               	return
 12268  1118                     __end_of___lltoft:	
 12269                           
 12270                           	psect	text31
 12271  11E0                     __ptext31:	
 12272 ;; *************** function ___llmod *****************
 12273 ;; Defined at:
 12274 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/common/llmod.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;  divisor         4   14[BANK0 ] unsigned long 
 12277 ;;  dividend        4   18[BANK0 ] unsigned long 
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;  counter         1   23[BANK0 ] unsigned char 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  4   14[BANK0 ] unsigned long 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12289 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;Total ram usage:       10 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    3
 12296 ;; This function calls:
 12297 ;;		Nothing
 12298 ;; This function is called by:
 12299 ;;		_printf
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           
 12304                           ;psect for function ___llmod
 12305  11E0                     ___llmod:	
 12306                           
 12307                           ;incstack = 0
 12308                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 12309  11E0  0020               	movlb	0	; select bank0
 12310  11E1  0831               	movf	___llmod@divisor+3,w
 12311  11E2  0430               	iorwf	___llmod@divisor+2,w
 12312  11E3  042F               	iorwf	___llmod@divisor+1,w
 12313  11E4  042E               	iorwf	___llmod@divisor,w
 12314  11E5  1903               	skipnz
 12315  11E6  2A1A               	goto	l3178
 12316  11E7  01B7               	clrf	___llmod@counter
 12317  11E8  0AB7               	incf	___llmod@counter,f
 12318  11E9                     l3168:	
 12319  11E9  1BB1               	btfsc	___llmod@divisor+3,7
 12320  11EA  29F7               	goto	l3170
 12321  11EB  3001               	movlw	1
 12322  11EC                     u4065:	
 12323  11EC  35AE               	lslf	___llmod@divisor,f
 12324  11ED  0DAF               	rlf	___llmod@divisor+1,f
 12325  11EE  0DB0               	rlf	___llmod@divisor+2,f
 12326  11EF  0DB1               	rlf	___llmod@divisor+3,f
 12327  11F0  0B89               	decfsz	9,f
 12328  11F1  29EC               	goto	u4065
 12329  11F2  3001               	movlw	1
 12330  11F3  00B6               	movwf	??___llmod
 12331  11F4  0836               	movf	??___llmod,w
 12332  11F5  07B7               	addwf	___llmod@counter,f
 12333  11F6  29E9               	goto	l3168
 12334  11F7                     l3170:	
 12335  11F7  0831               	movf	___llmod@divisor+3,w
 12336  11F8  0235               	subwf	___llmod@dividend+3,w
 12337  11F9  1D03               	skipz
 12338  11FA  2A05               	goto	u4085
 12339  11FB  0830               	movf	___llmod@divisor+2,w
 12340  11FC  0234               	subwf	___llmod@dividend+2,w
 12341  11FD  1D03               	skipz
 12342  11FE  2A05               	goto	u4085
 12343  11FF  082F               	movf	___llmod@divisor+1,w
 12344  1200  0233               	subwf	___llmod@dividend+1,w
 12345  1201  1D03               	skipz
 12346  1202  2A05               	goto	u4085
 12347  1203  082E               	movf	___llmod@divisor,w
 12348  1204  0232               	subwf	___llmod@dividend,w
 12349  1205                     u4085:	
 12350  1205  1C03               	skipc
 12351  1206  2A0F               	goto	l3174
 12352  1207  082E               	movf	___llmod@divisor,w
 12353  1208  02B2               	subwf	___llmod@dividend,f
 12354  1209  082F               	movf	___llmod@divisor+1,w
 12355  120A  3BB3               	subwfb	___llmod@dividend+1,f
 12356  120B  0830               	movf	___llmod@divisor+2,w
 12357  120C  3BB4               	subwfb	___llmod@dividend+2,f
 12358  120D  0831               	movf	___llmod@divisor+3,w
 12359  120E  3BB5               	subwfb	___llmod@dividend+3,f
 12360  120F                     l3174:	
 12361  120F  3001               	movlw	1
 12362  1210                     u4095:	
 12363  1210  36B1               	lsrf	___llmod@divisor+3,f
 12364  1211  0CB0               	rrf	___llmod@divisor+2,f
 12365  1212  0CAF               	rrf	___llmod@divisor+1,f
 12366  1213  0CAE               	rrf	___llmod@divisor,f
 12367  1214  0B89               	decfsz	9,f
 12368  1215  2A10               	goto	u4095
 12369  1216  3001               	movlw	1
 12370  1217  02B7               	subwf	___llmod@counter,f
 12371  1218  1D03               	btfss	3,2
 12372  1219  29F7               	goto	l3170
 12373  121A                     l3178:	
 12374  121A  0835               	movf	___llmod@dividend+3,w
 12375  121B  00B1               	movwf	?___llmod+3
 12376  121C  0834               	movf	___llmod@dividend+2,w
 12377  121D  00B0               	movwf	?___llmod+2
 12378  121E  0833               	movf	___llmod@dividend+1,w
 12379  121F  00AF               	movwf	?___llmod+1
 12380  1220  0832               	movf	___llmod@dividend,w
 12381  1221  00AE               	movwf	?___llmod
 12382  1222  0008               	return
 12383  1223                     __end_of___llmod:	
 12384                           
 12385                           	psect	text32
 12386  13DD                     __ptext32:	
 12387 ;; *************** function ___lldiv *****************
 12388 ;; Defined at:
 12389 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/common/lldiv.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  divisor         4    0[BANK0 ] unsigned long 
 12392 ;;  dividend        4    4[BANK0 ] unsigned long 
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  quotient        4    9[BANK0 ] unsigned long 
 12395 ;;  counter         1   13[BANK0 ] unsigned char 
 12396 ;; Return value:  Size  Location     Type
 12397 ;;                  4    0[BANK0 ] unsigned long 
 12398 ;; Registers used:
 12399 ;;		wreg, status,2, status,0
 12400 ;; Tracked objects:
 12401 ;;		On entry : 0/0
 12402 ;;		On exit  : 0/0
 12403 ;;		Unchanged: 0/0
 12404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12405 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;Total ram usage:       14 bytes
 12410 ;; Hardware stack levels used:    1
 12411 ;; Hardware stack levels required when called:    3
 12412 ;; This function calls:
 12413 ;;		Nothing
 12414 ;; This function is called by:
 12415 ;;		_printf
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           
 12420                           ;psect for function ___lldiv
 12421  13DD                     ___lldiv:	
 12422                           
 12423                           ;incstack = 0
 12424                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 12425  13DD  3000               	movlw	0
 12426  13DE  0020               	movlb	0	; select bank0
 12427  13DF  00AC               	movwf	___lldiv@quotient+3
 12428  13E0  3000               	movlw	0
 12429  13E1  00AB               	movwf	___lldiv@quotient+2
 12430  13E2  3000               	movlw	0
 12431  13E3  00AA               	movwf	___lldiv@quotient+1
 12432  13E4  3000               	movlw	0
 12433  13E5  00A9               	movwf	___lldiv@quotient
 12434  13E6  0823               	movf	___lldiv@divisor+3,w
 12435  13E7  0422               	iorwf	___lldiv@divisor+2,w
 12436  13E8  0421               	iorwf	___lldiv@divisor+1,w
 12437  13E9  0420               	iorwf	___lldiv@divisor,w
 12438  13EA  1903               	skipnz
 12439  13EB  2C27               	goto	l3158
 12440  13EC  01AD               	clrf	___lldiv@counter
 12441  13ED  0AAD               	incf	___lldiv@counter,f
 12442  13EE                     l3144:	
 12443  13EE  1BA3               	btfsc	___lldiv@divisor+3,7
 12444  13EF  2BFC               	goto	l3146
 12445  13F0  3001               	movlw	1
 12446  13F1                     u3995:	
 12447  13F1  35A0               	lslf	___lldiv@divisor,f
 12448  13F2  0DA1               	rlf	___lldiv@divisor+1,f
 12449  13F3  0DA2               	rlf	___lldiv@divisor+2,f
 12450  13F4  0DA3               	rlf	___lldiv@divisor+3,f
 12451  13F5  0B89               	decfsz	9,f
 12452  13F6  2BF1               	goto	u3995
 12453  13F7  3001               	movlw	1
 12454  13F8  00A8               	movwf	??___lldiv
 12455  13F9  0828               	movf	??___lldiv,w
 12456  13FA  07AD               	addwf	___lldiv@counter,f
 12457  13FB  2BEE               	goto	l3144
 12458  13FC                     l3146:	
 12459  13FC  3001               	movlw	1
 12460  13FD                     u4015:	
 12461  13FD  35A9               	lslf	___lldiv@quotient,f
 12462  13FE  0DAA               	rlf	___lldiv@quotient+1,f
 12463  13FF  0DAB               	rlf	___lldiv@quotient+2,f
 12464  1400  0DAC               	rlf	___lldiv@quotient+3,f
 12465  1401  0B89               	decfsz	9,f
 12466  1402  2BFD               	goto	u4015
 12467  1403  0823               	movf	___lldiv@divisor+3,w
 12468  1404  0227               	subwf	___lldiv@dividend+3,w
 12469  1405  1D03               	skipz
 12470  1406  2C11               	goto	u4025
 12471  1407  0822               	movf	___lldiv@divisor+2,w
 12472  1408  0226               	subwf	___lldiv@dividend+2,w
 12473  1409  1D03               	skipz
 12474  140A  2C11               	goto	u4025
 12475  140B  0821               	movf	___lldiv@divisor+1,w
 12476  140C  0225               	subwf	___lldiv@dividend+1,w
 12477  140D  1D03               	skipz
 12478  140E  2C11               	goto	u4025
 12479  140F  0820               	movf	___lldiv@divisor,w
 12480  1410  0224               	subwf	___lldiv@dividend,w
 12481  1411                     u4025:	
 12482  1411  1C03               	skipc
 12483  1412  2C1C               	goto	l3154
 12484  1413  0820               	movf	___lldiv@divisor,w
 12485  1414  02A4               	subwf	___lldiv@dividend,f
 12486  1415  0821               	movf	___lldiv@divisor+1,w
 12487  1416  3BA5               	subwfb	___lldiv@dividend+1,f
 12488  1417  0822               	movf	___lldiv@divisor+2,w
 12489  1418  3BA6               	subwfb	___lldiv@dividend+2,f
 12490  1419  0823               	movf	___lldiv@divisor+3,w
 12491  141A  3BA7               	subwfb	___lldiv@dividend+3,f
 12492  141B  1429               	bsf	___lldiv@quotient,0
 12493  141C                     l3154:	
 12494  141C  3001               	movlw	1
 12495  141D                     u4035:	
 12496  141D  36A3               	lsrf	___lldiv@divisor+3,f
 12497  141E  0CA2               	rrf	___lldiv@divisor+2,f
 12498  141F  0CA1               	rrf	___lldiv@divisor+1,f
 12499  1420  0CA0               	rrf	___lldiv@divisor,f
 12500  1421  0B89               	decfsz	9,f
 12501  1422  2C1D               	goto	u4035
 12502  1423  3001               	movlw	1
 12503  1424  02AD               	subwf	___lldiv@counter,f
 12504  1425  1D03               	btfss	3,2
 12505  1426  2BFC               	goto	l3146
 12506  1427                     l3158:	
 12507  1427  082C               	movf	___lldiv@quotient+3,w
 12508  1428  00A3               	movwf	?___lldiv+3
 12509  1429  082B               	movf	___lldiv@quotient+2,w
 12510  142A  00A2               	movwf	?___lldiv+2
 12511  142B  082A               	movf	___lldiv@quotient+1,w
 12512  142C  00A1               	movwf	?___lldiv+1
 12513  142D  0829               	movf	___lldiv@quotient,w
 12514  142E  00A0               	movwf	?___lldiv
 12515  142F  0008               	return
 12516  1430                     __end_of___lldiv:	
 12517                           
 12518                           	psect	text33
 12519  1566                     __ptext33:	
 12520 ;; *************** function ___fttol *****************
 12521 ;; Defined at:
 12522 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  f1              3   47[BANK0 ] float 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;  lval            4   56[BANK0 ] unsigned long 
 12527 ;;  exp1            1   60[BANK0 ] unsigned char 
 12528 ;;  sign1           1   55[BANK0 ] unsigned char 
 12529 ;; Return value:  Size  Location     Type
 12530 ;;                  4   47[BANK0 ] long 
 12531 ;; Registers used:
 12532 ;;		wreg, status,2, status,0
 12533 ;; Tracked objects:
 12534 ;;		On entry : 0/0
 12535 ;;		On exit  : 0/0
 12536 ;;		Unchanged: 0/0
 12537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;Total ram usage:       14 bytes
 12543 ;; Hardware stack levels used:    1
 12544 ;; Hardware stack levels required when called:    3
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		_printf
 12549 ;; This function uses a non-reentrant model
 12550 ;;
 12551                           
 12552                           
 12553                           ;psect for function ___fttol
 12554  1566                     ___fttol:	
 12555                           
 12556                           ;incstack = 0
 12557                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12558  1566  0020               	movlb	0	; select bank0
 12559  1567  084F               	movf	___fttol@f1,w
 12560  1568  00D3               	movwf	??___fttol
 12561  1569  0850               	movf	___fttol@f1+1,w
 12562  156A  00D4               	movwf	??___fttol+1
 12563  156B  0851               	movf	___fttol@f1+2,w
 12564  156C  00D5               	movwf	??___fttol+2
 12565  156D  1003               	clrc
 12566  156E  0D54               	rlf	??___fttol+1,w
 12567  156F  0D55               	rlf	??___fttol+2,w
 12568  1570  00D6               	movwf	??___fttol+3
 12569  1571  0856               	movf	??___fttol+3,w
 12570  1572  00DC               	movwf	___fttol@exp1
 12571  1573  085C               	movf	___fttol@exp1,w
 12572  1574  1D03               	btfss	3,2
 12573  1575  2D7F               	goto	l3102
 12574  1576  3000               	movlw	0
 12575  1577  00D2               	movwf	?___fttol+3
 12576  1578  3000               	movlw	0
 12577  1579  00D1               	movwf	?___fttol+2
 12578  157A  3000               	movlw	0
 12579  157B  00D0               	movwf	?___fttol+1
 12580  157C  3000               	movlw	0
 12581  157D  00CF               	movwf	?___fttol
 12582  157E  0008               	return
 12583  157F                     l3102:	
 12584  157F  084F               	movf	___fttol@f1,w
 12585  1580  00D3               	movwf	??___fttol
 12586  1581  0850               	movf	___fttol@f1+1,w
 12587  1582  00D4               	movwf	??___fttol+1
 12588  1583  0851               	movf	___fttol@f1+2,w
 12589  1584  00D5               	movwf	??___fttol+2
 12590  1585  3017               	movlw	23
 12591  1586                     u3895:	
 12592  1586  36D5               	lsrf	??___fttol+2,f
 12593  1587  0CD4               	rrf	??___fttol+1,f
 12594  1588  0CD3               	rrf	??___fttol,f
 12595  1589  0B89               	decfsz	9,f
 12596  158A  2D86               	goto	u3895
 12597  158B  0853               	movf	??___fttol,w
 12598  158C  00D6               	movwf	??___fttol+3
 12599  158D  0856               	movf	??___fttol+3,w
 12600  158E  00D7               	movwf	___fttol@sign1
 12601  158F  17D0               	bsf	___fttol@f1+1,7
 12602  1590  30FF               	movlw	255
 12603  1591  05CF               	andwf	___fttol@f1,f
 12604  1592  30FF               	movlw	255
 12605  1593  05D0               	andwf	___fttol@f1+1,f
 12606  1594  3000               	movlw	0
 12607  1595  05D1               	andwf	___fttol@f1+2,f
 12608  1596  084F               	movf	___fttol@f1,w
 12609  1597  00D8               	movwf	___fttol@lval
 12610  1598  0850               	movf	___fttol@f1+1,w
 12611  1599  00D9               	movwf	___fttol@lval+1
 12612  159A  0851               	movf	___fttol@f1+2,w
 12613  159B  00DA               	movwf	___fttol@lval+2
 12614  159C  01DB               	clrf	___fttol@lval+3
 12615  159D  308E               	movlw	142
 12616  159E  02DC               	subwf	___fttol@exp1,f
 12617  159F  1FDC               	btfss	___fttol@exp1,7
 12618  15A0  2DBD               	goto	l3122
 12619  15A1  085C               	movf	___fttol@exp1,w
 12620  15A2  3A80               	xorlw	128
 12621  15A3  3E8F               	addlw	143
 12622  15A4  1803               	skipnc
 12623  15A5  2DAF               	goto	l3120
 12624  15A6  3000               	movlw	0
 12625  15A7  00D2               	movwf	?___fttol+3
 12626  15A8  3000               	movlw	0
 12627  15A9  00D1               	movwf	?___fttol+2
 12628  15AA  3000               	movlw	0
 12629  15AB  00D0               	movwf	?___fttol+1
 12630  15AC  3000               	movlw	0
 12631  15AD  00CF               	movwf	?___fttol
 12632  15AE  0008               	return
 12633  15AF                     l3120:	
 12634  15AF  3001               	movlw	1
 12635  15B0                     u3925:	
 12636  15B0  36DB               	lsrf	___fttol@lval+3,f
 12637  15B1  0CDA               	rrf	___fttol@lval+2,f
 12638  15B2  0CD9               	rrf	___fttol@lval+1,f
 12639  15B3  0CD8               	rrf	___fttol@lval,f
 12640  15B4  0B89               	decfsz	9,f
 12641  15B5  2DB0               	goto	u3925
 12642  15B6  3001               	movlw	1
 12643  15B7  00D3               	movwf	??___fttol
 12644  15B8  0853               	movf	??___fttol,w
 12645  15B9  07DC               	addwf	___fttol@exp1,f
 12646  15BA  1903               	btfsc	3,2
 12647  15BB  2DD6               	goto	l3130
 12648  15BC  2DAF               	goto	l3120
 12649  15BD                     l3122:	
 12650  15BD  3018               	movlw	24
 12651  15BE  025C               	subwf	___fttol@exp1,w
 12652  15BF  1C03               	skipc
 12653  15C0  2DD3               	goto	l948
 12654  15C1  3000               	movlw	0
 12655  15C2  00D2               	movwf	?___fttol+3
 12656  15C3  3000               	movlw	0
 12657  15C4  00D1               	movwf	?___fttol+2
 12658  15C5  3000               	movlw	0
 12659  15C6  00D0               	movwf	?___fttol+1
 12660  15C7  3000               	movlw	0
 12661  15C8  00CF               	movwf	?___fttol
 12662  15C9  0008               	return
 12663  15CA                     l3128:	
 12664  15CA  3001               	movlw	1
 12665  15CB                     u3955:	
 12666  15CB  35D8               	lslf	___fttol@lval,f
 12667  15CC  0DD9               	rlf	___fttol@lval+1,f
 12668  15CD  0DDA               	rlf	___fttol@lval+2,f
 12669  15CE  0DDB               	rlf	___fttol@lval+3,f
 12670  15CF  0B89               	decfsz	9,f
 12671  15D0  2DCB               	goto	u3955
 12672  15D1  3001               	movlw	1
 12673  15D2  02DC               	subwf	___fttol@exp1,f
 12674  15D3                     l948:	
 12675  15D3  085C               	movf	___fttol@exp1,w
 12676  15D4  1D03               	btfss	3,2
 12677  15D5  2DCA               	goto	l3128
 12678  15D6                     l3130:	
 12679  15D6  0857               	movf	___fttol@sign1,w
 12680  15D7  1903               	btfsc	3,2
 12681  15D8  2DE4               	goto	l3134
 12682  15D9  09D8               	comf	___fttol@lval,f
 12683  15DA  09D9               	comf	___fttol@lval+1,f
 12684  15DB  09DA               	comf	___fttol@lval+2,f
 12685  15DC  09DB               	comf	___fttol@lval+3,f
 12686  15DD  0AD8               	incf	___fttol@lval,f
 12687  15DE  1903               	skipnz
 12688  15DF  0AD9               	incf	___fttol@lval+1,f
 12689  15E0  1903               	skipnz
 12690  15E1  0ADA               	incf	___fttol@lval+2,f
 12691  15E2  1903               	skipnz
 12692  15E3  0ADB               	incf	___fttol@lval+3,f
 12693  15E4                     l3134:	
 12694  15E4  085B               	movf	___fttol@lval+3,w
 12695  15E5  00D2               	movwf	?___fttol+3
 12696  15E6  085A               	movf	___fttol@lval+2,w
 12697  15E7  00D1               	movwf	?___fttol+2
 12698  15E8  0859               	movf	___fttol@lval+1,w
 12699  15E9  00D0               	movwf	?___fttol+1
 12700  15EA  0858               	movf	___fttol@lval,w
 12701  15EB  00CF               	movwf	?___fttol
 12702  15EC  0008               	return
 12703  15ED                     __end_of___fttol:	
 12704                           
 12705                           	psect	text34
 12706  1028                     __ptext34:	
 12707 ;; *************** function ___ftsub *****************
 12708 ;; Defined at:
 12709 ;;		line 18 in file "/opt/microchip/xc8/v1.42/sources/common/ftsub.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;  f2              3   65[BANK0 ] float 
 12712 ;;  f1              3   68[BANK0 ] float 
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  3   65[BANK0 ] float 
 12717 ;; Registers used:
 12718 ;;		wreg, status,2, status,0, pclath, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12724 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;Total ram usage:        6 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    5
 12731 ;; This function calls:
 12732 ;;		___ftadd
 12733 ;; This function is called by:
 12734 ;;		_printf
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           
 12739                           ;psect for function ___ftsub
 12740  1028                     ___ftsub:	
 12741                           
 12742                           ;incstack = 0
 12743                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12744  1028  0020               	movlb	0	; select bank0
 12745  1029  0863               	movf	___ftsub@f2+2,w
 12746  102A  0462               	iorwf	___ftsub@f2+1,w
 12747  102B  0461               	iorwf	___ftsub@f2,w
 12748  102C  1903               	skipnz
 12749  102D  2830               	goto	l4158
 12750  102E  3080               	movlw	128
 12751  102F  06E3               	xorwf	___ftsub@f2+2,f
 12752  1030                     l4158:	
 12753  1030  0864               	movf	___ftsub@f1,w
 12754  1031  00D4               	movwf	___ftadd@f1
 12755  1032  0865               	movf	___ftsub@f1+1,w
 12756  1033  00D5               	movwf	___ftadd@f1+1
 12757  1034  0866               	movf	___ftsub@f1+2,w
 12758  1035  00D6               	movwf	___ftadd@f1+2
 12759  1036  0861               	movf	___ftsub@f2,w
 12760  1037  00D7               	movwf	___ftadd@f2
 12761  1038  0862               	movf	___ftsub@f2+1,w
 12762  1039  00D8               	movwf	___ftadd@f2+1
 12763  103A  0863               	movf	___ftsub@f2+2,w
 12764  103B  00D9               	movwf	___ftadd@f2+2
 12765  103C  3195  25ED         	fcall	___ftadd
 12766  103E  0020               	movlb	0	; select bank0
 12767  103F  0854               	movf	?___ftadd,w
 12768  1040  00E1               	movwf	?___ftsub
 12769  1041  0855               	movf	?___ftadd+1,w
 12770  1042  00E2               	movwf	?___ftsub+1
 12771  1043  0856               	movf	?___ftadd+2,w
 12772  1044  00E3               	movwf	?___ftsub+2
 12773  1045  0008               	return
 12774  1046                     __end_of___ftsub:	
 12775                           
 12776                           	psect	text35
 12777  15ED                     __ptext35:	
 12778 ;; *************** function ___ftadd *****************
 12779 ;; Defined at:
 12780 ;;		line 86 in file "/opt/microchip/xc8/v1.42/sources/common/ftadd.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;  f1              3   52[BANK0 ] float 
 12783 ;;  f2              3   55[BANK0 ] float 
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;  exp1            1   64[BANK0 ] unsigned char 
 12786 ;;  exp2            1   63[BANK0 ] unsigned char 
 12787 ;;  sign            1   62[BANK0 ] unsigned char 
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  3   52[BANK0 ] float 
 12790 ;; Registers used:
 12791 ;;		wreg, status,2, status,0, pclath, cstack
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12797 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;Total ram usage:       13 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    4
 12804 ;; This function calls:
 12805 ;;		___ftpack
 12806 ;; This function is called by:
 12807 ;;		_printf
 12808 ;;		___ftsub
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812                           
 12813                           ;psect for function ___ftadd
 12814  15ED                     ___ftadd:	
 12815                           
 12816                           ;incstack = 0
 12817                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12818  15ED  0020               	movlb	0	; select bank0
 12819  15EE  0854               	movf	___ftadd@f1,w
 12820  15EF  00DA               	movwf	??___ftadd
 12821  15F0  0855               	movf	___ftadd@f1+1,w
 12822  15F1  00DB               	movwf	??___ftadd+1
 12823  15F2  0856               	movf	___ftadd@f1+2,w
 12824  15F3  00DC               	movwf	??___ftadd+2
 12825  15F4  1003               	clrc
 12826  15F5  0D5B               	rlf	??___ftadd+1,w
 12827  15F6  0D5C               	rlf	??___ftadd+2,w
 12828  15F7  00DD               	movwf	??___ftadd+3
 12829  15F8  085D               	movf	??___ftadd+3,w
 12830  15F9  00E0               	movwf	___ftadd@exp1
 12831  15FA  0857               	movf	___ftadd@f2,w
 12832  15FB  00DA               	movwf	??___ftadd
 12833  15FC  0858               	movf	___ftadd@f2+1,w
 12834  15FD  00DB               	movwf	??___ftadd+1
 12835  15FE  0859               	movf	___ftadd@f2+2,w
 12836  15FF  00DC               	movwf	??___ftadd+2
 12837  1600  1003               	clrc
 12838  1601  0D5B               	rlf	??___ftadd+1,w
 12839  1602  0D5C               	rlf	??___ftadd+2,w
 12840  1603  00DD               	movwf	??___ftadd+3
 12841  1604  085D               	movf	??___ftadd+3,w
 12842  1605  00DF               	movwf	___ftadd@exp2
 12843  1606  0860               	movf	___ftadd@exp1,w
 12844  1607  1903               	btfsc	3,2
 12845  1608  2E15               	goto	l2738
 12846  1609  085F               	movf	___ftadd@exp2,w
 12847  160A  0260               	subwf	___ftadd@exp1,w
 12848  160B  1803               	skipnc
 12849  160C  2E1C               	goto	l2742
 12850  160D  0360               	decf	___ftadd@exp1,w
 12851  160E  3AFF               	xorlw	255
 12852  160F  075F               	addwf	___ftadd@exp2,w
 12853  1610  00DA               	movwf	??___ftadd
 12854  1611  3019               	movlw	25
 12855  1612  025A               	subwf	??___ftadd,w
 12856  1613  1C03               	skipc
 12857  1614  2E1C               	goto	l2742
 12858  1615                     l2738:	
 12859  1615  0857               	movf	___ftadd@f2,w
 12860  1616  00D4               	movwf	?___ftadd
 12861  1617  0858               	movf	___ftadd@f2+1,w
 12862  1618  00D5               	movwf	?___ftadd+1
 12863  1619  0859               	movf	___ftadd@f2+2,w
 12864  161A  00D6               	movwf	?___ftadd+2
 12865  161B  0008               	return
 12866  161C                     l2742:	
 12867  161C  085F               	movf	___ftadd@exp2,w
 12868  161D  1903               	btfsc	3,2
 12869  161E  0008               	return
 12870  161F  0860               	movf	___ftadd@exp1,w
 12871  1620  025F               	subwf	___ftadd@exp2,w
 12872  1621  1803               	skipnc
 12873  1622  2E2B               	goto	l2748
 12874  1623  035F               	decf	___ftadd@exp2,w
 12875  1624  3AFF               	xorlw	255
 12876  1625  0760               	addwf	___ftadd@exp1,w
 12877  1626  00DA               	movwf	??___ftadd
 12878  1627  3019               	movlw	25
 12879  1628  025A               	subwf	??___ftadd,w
 12880  1629  1803               	btfsc	3,0
 12881  162A  0008               	return
 12882  162B                     l2748:	
 12883  162B  3006               	movlw	6
 12884  162C  00DA               	movwf	??___ftadd
 12885  162D  085A               	movf	??___ftadd,w
 12886  162E  00DE               	movwf	___ftadd@sign
 12887  162F  1BD6               	btfsc	___ftadd@f1+2,7
 12888  1630  17DE               	bsf	___ftadd@sign,7
 12889  1631  1BD9               	btfsc	___ftadd@f2+2,7
 12890  1632  175E               	bsf	___ftadd@sign,6
 12891  1633  17D5               	bsf	___ftadd@f1+1,7
 12892  1634  30FF               	movlw	255
 12893  1635  05D4               	andwf	___ftadd@f1,f
 12894  1636  30FF               	movlw	255
 12895  1637  05D5               	andwf	___ftadd@f1+1,f
 12896  1638  3000               	movlw	0
 12897  1639  05D6               	andwf	___ftadd@f1+2,f
 12898  163A  17D8               	bsf	___ftadd@f2+1,7
 12899  163B  30FF               	movlw	255
 12900  163C  05D7               	andwf	___ftadd@f2,f
 12901  163D  30FF               	movlw	255
 12902  163E  05D8               	andwf	___ftadd@f2+1,f
 12903  163F  3000               	movlw	0
 12904  1640  05D9               	andwf	___ftadd@f2+2,f
 12905  1641  085F               	movf	___ftadd@exp2,w
 12906  1642  0260               	subwf	___ftadd@exp1,w
 12907  1643  1803               	skipnc
 12908  1644  2E67               	goto	l2770
 12909  1645                     l2760:	
 12910  1645  3001               	movlw	1
 12911  1646                     u3185:	
 12912  1646  35D7               	lslf	___ftadd@f2,f
 12913  1647  0DD8               	rlf	___ftadd@f2+1,f
 12914  1648  0DD9               	rlf	___ftadd@f2+2,f
 12915  1649  0B89               	decfsz	9,f
 12916  164A  2E46               	goto	u3185
 12917  164B  3001               	movlw	1
 12918  164C  02DF               	subwf	___ftadd@exp2,f
 12919  164D  085F               	movf	___ftadd@exp2,w
 12920  164E  0660               	xorwf	___ftadd@exp1,w
 12921  164F  1903               	skipnz
 12922  1650  2E62               	goto	l2768
 12923  1651  3001               	movlw	1
 12924  1652  02DE               	subwf	___ftadd@sign,f
 12925  1653  085E               	movf	___ftadd@sign,w
 12926  1654  3907               	andlw	7
 12927  1655  1903               	btfsc	3,2
 12928  1656  2E62               	goto	l2768
 12929  1657  2E45               	goto	l2760
 12930  1658                     l2766:	
 12931  1658  3001               	movlw	1
 12932  1659                     u3215:	
 12933  1659  36D6               	lsrf	___ftadd@f1+2,f
 12934  165A  0CD5               	rrf	___ftadd@f1+1,f
 12935  165B  0CD4               	rrf	___ftadd@f1,f
 12936  165C  0B89               	decfsz	9,f
 12937  165D  2E59               	goto	u3215
 12938  165E  3001               	movlw	1
 12939  165F  00DA               	movwf	??___ftadd
 12940  1660  085A               	movf	??___ftadd,w
 12941  1661  07E0               	addwf	___ftadd@exp1,f
 12942  1662                     l2768:	
 12943  1662  0860               	movf	___ftadd@exp1,w
 12944  1663  065F               	xorwf	___ftadd@exp2,w
 12945  1664  1903               	btfsc	3,2
 12946  1665  2E8C               	goto	l871
 12947  1666  2E58               	goto	l2766
 12948  1667                     l2770:	
 12949  1667  0860               	movf	___ftadd@exp1,w
 12950  1668  025F               	subwf	___ftadd@exp2,w
 12951  1669  1803               	skipnc
 12952  166A  2E8C               	goto	l871
 12953  166B                     l2772:	
 12954  166B  3001               	movlw	1
 12955  166C                     u3245:	
 12956  166C  35D4               	lslf	___ftadd@f1,f
 12957  166D  0DD5               	rlf	___ftadd@f1+1,f
 12958  166E  0DD6               	rlf	___ftadd@f1+2,f
 12959  166F  0B89               	decfsz	9,f
 12960  1670  2E6C               	goto	u3245
 12961  1671  3001               	movlw	1
 12962  1672  02E0               	subwf	___ftadd@exp1,f
 12963  1673  085F               	movf	___ftadd@exp2,w
 12964  1674  0660               	xorwf	___ftadd@exp1,w
 12965  1675  1903               	skipnz
 12966  1676  2E88               	goto	l2780
 12967  1677  3001               	movlw	1
 12968  1678  02DE               	subwf	___ftadd@sign,f
 12969  1679  085E               	movf	___ftadd@sign,w
 12970  167A  3907               	andlw	7
 12971  167B  1903               	btfsc	3,2
 12972  167C  2E88               	goto	l2780
 12973  167D  2E6B               	goto	l2772
 12974  167E                     l2778:	
 12975  167E  3001               	movlw	1
 12976  167F                     u3275:	
 12977  167F  36D9               	lsrf	___ftadd@f2+2,f
 12978  1680  0CD8               	rrf	___ftadd@f2+1,f
 12979  1681  0CD7               	rrf	___ftadd@f2,f
 12980  1682  0B89               	decfsz	9,f
 12981  1683  2E7F               	goto	u3275
 12982  1684  3001               	movlw	1
 12983  1685  00DA               	movwf	??___ftadd
 12984  1686  085A               	movf	??___ftadd,w
 12985  1687  07DF               	addwf	___ftadd@exp2,f
 12986  1688                     l2780:	
 12987  1688  0860               	movf	___ftadd@exp1,w
 12988  1689  065F               	xorwf	___ftadd@exp2,w
 12989  168A  1D03               	skipz
 12990  168B  2E7E               	goto	l2778
 12991  168C                     l871:	
 12992  168C  1FDE               	btfss	___ftadd@sign,7
 12993  168D  2E9E               	goto	l2784
 12994  168E  30FF               	movlw	255
 12995  168F  06D4               	xorwf	___ftadd@f1,f
 12996  1690  30FF               	movlw	255
 12997  1691  06D5               	xorwf	___ftadd@f1+1,f
 12998  1692  30FF               	movlw	255
 12999  1693  06D6               	xorwf	___ftadd@f1+2,f
 13000  1694  3001               	movlw	1
 13001  1695  07D4               	addwf	___ftadd@f1,f
 13002  1696  3000               	movlw	0
 13003  1697  1803               	skipnc
 13004  1698  3001               	movlw	1
 13005  1699  07D5               	addwf	___ftadd@f1+1,f
 13006  169A  3000               	movlw	0
 13007  169B  1803               	skipnc
 13008  169C  3001               	movlw	1
 13009  169D  07D6               	addwf	___ftadd@f1+2,f
 13010  169E                     l2784:	
 13011  169E  1F5E               	btfss	___ftadd@sign,6
 13012  169F  2EB0               	goto	l2788
 13013  16A0  30FF               	movlw	255
 13014  16A1  06D7               	xorwf	___ftadd@f2,f
 13015  16A2  30FF               	movlw	255
 13016  16A3  06D8               	xorwf	___ftadd@f2+1,f
 13017  16A4  30FF               	movlw	255
 13018  16A5  06D9               	xorwf	___ftadd@f2+2,f
 13019  16A6  3001               	movlw	1
 13020  16A7  07D7               	addwf	___ftadd@f2,f
 13021  16A8  3000               	movlw	0
 13022  16A9  1803               	skipnc
 13023  16AA  3001               	movlw	1
 13024  16AB  07D8               	addwf	___ftadd@f2+1,f
 13025  16AC  3000               	movlw	0
 13026  16AD  1803               	skipnc
 13027  16AE  3001               	movlw	1
 13028  16AF  07D9               	addwf	___ftadd@f2+2,f
 13029  16B0                     l2788:	
 13030  16B0  01DE               	clrf	___ftadd@sign
 13031  16B1  0854               	movf	___ftadd@f1,w
 13032  16B2  07D7               	addwf	___ftadd@f2,f
 13033  16B3  0855               	movf	___ftadd@f1+1,w
 13034  16B4  3DD8               	addwfc	___ftadd@f2+1,f
 13035  16B5  0856               	movf	___ftadd@f1+2,w
 13036  16B6  3DD9               	addwfc	___ftadd@f2+2,f
 13037  16B7  1FD9               	btfss	___ftadd@f2+2,7
 13038  16B8  2ECB               	goto	l2798
 13039  16B9  30FF               	movlw	255
 13040  16BA  06D7               	xorwf	___ftadd@f2,f
 13041  16BB  30FF               	movlw	255
 13042  16BC  06D8               	xorwf	___ftadd@f2+1,f
 13043  16BD  30FF               	movlw	255
 13044  16BE  06D9               	xorwf	___ftadd@f2+2,f
 13045  16BF  3001               	movlw	1
 13046  16C0  07D7               	addwf	___ftadd@f2,f
 13047  16C1  3000               	movlw	0
 13048  16C2  1803               	skipnc
 13049  16C3  3001               	movlw	1
 13050  16C4  07D8               	addwf	___ftadd@f2+1,f
 13051  16C5  3000               	movlw	0
 13052  16C6  1803               	skipnc
 13053  16C7  3001               	movlw	1
 13054  16C8  07D9               	addwf	___ftadd@f2+2,f
 13055  16C9  01DE               	clrf	___ftadd@sign
 13056  16CA  0ADE               	incf	___ftadd@sign,f
 13057  16CB                     l2798:	
 13058  16CB  0857               	movf	___ftadd@f2,w
 13059  16CC  00A0               	movwf	___ftpack@arg
 13060  16CD  0858               	movf	___ftadd@f2+1,w
 13061  16CE  00A1               	movwf	___ftpack@arg+1
 13062  16CF  0859               	movf	___ftadd@f2+2,w
 13063  16D0  00A2               	movwf	___ftpack@arg+2
 13064  16D1  0860               	movf	___ftadd@exp1,w
 13065  16D2  00DA               	movwf	??___ftadd
 13066  16D3  085A               	movf	??___ftadd,w
 13067  16D4  00A3               	movwf	___ftpack@exp
 13068  16D5  085E               	movf	___ftadd@sign,w
 13069  16D6  00DB               	movwf	??___ftadd+1
 13070  16D7  085B               	movf	??___ftadd+1,w
 13071  16D8  00A4               	movwf	___ftpack@sign
 13072  16D9  3194  2483         	fcall	___ftpack
 13073  16DB  0020               	movlb	0	; select bank0
 13074  16DC  0820               	movf	?___ftpack,w
 13075  16DD  00D4               	movwf	?___ftadd
 13076  16DE  0821               	movf	?___ftpack+1,w
 13077  16DF  00D5               	movwf	?___ftadd+1
 13078  16E0  0822               	movf	?___ftpack+2,w
 13079  16E1  00D6               	movwf	?___ftadd+2
 13080  16E2  0008               	return
 13081  16E3                     __end_of___ftadd:	
 13082                           
 13083                           	psect	text36
 13084  1F4B                     __ptext36:	
 13085 ;; *************** function ___ftneg *****************
 13086 ;; Defined at:
 13087 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/ftneg.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  f1              3    0[BANK0 ] float 
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;		None
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  3    0[BANK0 ] float 
 13094 ;; Registers used:
 13095 ;;		wreg
 13096 ;; Tracked objects:
 13097 ;;		On entry : 0/0
 13098 ;;		On exit  : 0/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13101 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13104 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;Total ram usage:        3 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; Hardware stack levels required when called:    3
 13108 ;; This function calls:
 13109 ;;		Nothing
 13110 ;; This function is called by:
 13111 ;;		_printf
 13112 ;; This function uses a non-reentrant model
 13113 ;;
 13114                           
 13115                           
 13116                           ;psect for function ___ftneg
 13117  1F4B                     ___ftneg:	
 13118                           
 13119                           ;incstack = 0
 13120                           ; Regs used in ___ftneg: [wreg]
 13121  1F4B  0020               	movlb	0	; select bank0
 13122  1F4C  0822               	movf	___ftneg@f1+2,w
 13123  1F4D  0421               	iorwf	___ftneg@f1+1,w
 13124  1F4E  0420               	iorwf	___ftneg@f1,w
 13125  1F4F  1903               	skipnz
 13126  1F50  0008               	return
 13127  1F51  3080               	movlw	128
 13128  1F52  06A2               	xorwf	___ftneg@f1+2,f
 13129  1F53  0008               	return
 13130  1F54                     __end_of___ftneg:	
 13131                           
 13132                           	psect	text37
 13133  11A4                     __ptext37:	
 13134 ;; *************** function ___ftge *****************
 13135 ;; Defined at:
 13136 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/ftge.c"
 13137 ;; Parameters:    Size  Location     Type
 13138 ;;  ff1             3    0[BANK0 ] float 
 13139 ;;  ff2             3    3[BANK0 ] float 
 13140 ;; Auto vars:     Size  Location     Type
 13141 ;;		None
 13142 ;; Return value:  Size  Location     Type
 13143 ;;		None               void
 13144 ;; Registers used:
 13145 ;;		wreg, status,2, status,0
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13151 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;Total ram usage:        9 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    3
 13158 ;; This function calls:
 13159 ;;		Nothing
 13160 ;; This function is called by:
 13161 ;;		_printf
 13162 ;; This function uses a non-reentrant model
 13163 ;;
 13164                           
 13165                           
 13166                           ;psect for function ___ftge
 13167  11A4                     ___ftge:	
 13168                           
 13169                           ;incstack = 0
 13170                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 13171  11A4  0020               	movlb	0	; select bank0
 13172  11A5  1FA2               	btfss	___ftge@ff1+2,7
 13173  11A6  29BB               	goto	l3064
 13174  11A7  0920               	comf	___ftge@ff1,w
 13175  11A8  00A6               	movwf	??___ftge
 13176  11A9  0921               	comf	___ftge@ff1+1,w
 13177  11AA  00A7               	movwf	??___ftge+1
 13178  11AB  0922               	comf	___ftge@ff1+2,w
 13179  11AC  00A8               	movwf	??___ftge+2
 13180  11AD  0AA6               	incf	??___ftge,f
 13181  11AE  1903               	skipnz
 13182  11AF  0AA7               	incf	??___ftge+1,f
 13183  11B0  1903               	skipnz
 13184  11B1  0AA8               	incf	??___ftge+2,f
 13185  11B2  3000               	movlw	0
 13186  11B3  0726               	addwf	??___ftge,w
 13187  11B4  00A0               	movwf	___ftge@ff1
 13188  11B5  3000               	movlw	0
 13189  11B6  3D27               	addwfc	??___ftge+1,w
 13190  11B7  00A1               	movwf	___ftge@ff1+1
 13191  11B8  3080               	movlw	128
 13192  11B9  3D28               	addwfc	??___ftge+2,w
 13193  11BA  00A2               	movwf	___ftge@ff1+2
 13194  11BB                     l3064:	
 13195  11BB  1FA5               	btfss	___ftge@ff2+2,7
 13196  11BC  29D1               	goto	l3068
 13197  11BD  0923               	comf	___ftge@ff2,w
 13198  11BE  00A6               	movwf	??___ftge
 13199  11BF  0924               	comf	___ftge@ff2+1,w
 13200  11C0  00A7               	movwf	??___ftge+1
 13201  11C1  0925               	comf	___ftge@ff2+2,w
 13202  11C2  00A8               	movwf	??___ftge+2
 13203  11C3  0AA6               	incf	??___ftge,f
 13204  11C4  1903               	skipnz
 13205  11C5  0AA7               	incf	??___ftge+1,f
 13206  11C6  1903               	skipnz
 13207  11C7  0AA8               	incf	??___ftge+2,f
 13208  11C8  3000               	movlw	0
 13209  11C9  0726               	addwf	??___ftge,w
 13210  11CA  00A3               	movwf	___ftge@ff2
 13211  11CB  3000               	movlw	0
 13212  11CC  3D27               	addwfc	??___ftge+1,w
 13213  11CD  00A4               	movwf	___ftge@ff2+1
 13214  11CE  3080               	movlw	128
 13215  11CF  3D28               	addwfc	??___ftge+2,w
 13216  11D0  00A5               	movwf	___ftge@ff2+2
 13217  11D1                     l3068:	
 13218  11D1  3080               	movlw	128
 13219  11D2  06A2               	xorwf	___ftge@ff1+2,f
 13220  11D3  3080               	movlw	128
 13221  11D4  06A5               	xorwf	___ftge@ff2+2,f
 13222  11D5  0825               	movf	___ftge@ff2+2,w
 13223  11D6  0222               	subwf	___ftge@ff1+2,w
 13224  11D7  1D03               	skipz
 13225  11D8  0008               	return
 13226  11D9  0824               	movf	___ftge@ff2+1,w
 13227  11DA  0221               	subwf	___ftge@ff1+1,w
 13228  11DB  1D03               	skipz
 13229  11DC  0008               	return
 13230  11DD  0823               	movf	___ftge@ff2,w
 13231  11DE  0220               	subwf	___ftge@ff1,w
 13232  11DF  0008               	return
 13233  11E0                     __end_of___ftge:	
 13234                           
 13235                           	psect	text38
 13236  10A9                     __ptext38:	
 13237 ;; *************** function ___awtoft *****************
 13238 ;; Defined at:
 13239 ;;		line 32 in file "/opt/microchip/xc8/v1.42/sources/common/awtoft.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;  c               2    8[BANK0 ] int 
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;  sign            1   13[BANK0 ] unsigned char 
 13244 ;; Return value:  Size  Location     Type
 13245 ;;                  3    8[BANK0 ] float 
 13246 ;; Registers used:
 13247 ;;		wreg, status,2, status,0, pclath, cstack
 13248 ;; Tracked objects:
 13249 ;;		On entry : 0/0
 13250 ;;		On exit  : 0/0
 13251 ;;		Unchanged: 0/0
 13252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13253 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;Total ram usage:        6 bytes
 13258 ;; Hardware stack levels used:    1
 13259 ;; Hardware stack levels required when called:    4
 13260 ;; This function calls:
 13261 ;;		___ftpack
 13262 ;; This function is called by:
 13263 ;;		_EMC1001_PrintInfo
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function ___awtoft
 13269  10A9                     ___awtoft:	
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13273  10A9  0020               	movlb	0	; select bank0
 13274  10AA  01AD               	clrf	___awtoft@sign
 13275  10AB  1FA9               	btfss	___awtoft@c+1,7
 13276  10AC  28B4               	goto	l3608
 13277  10AD  09A8               	comf	___awtoft@c,f
 13278  10AE  09A9               	comf	___awtoft@c+1,f
 13279  10AF  0AA8               	incf	___awtoft@c,f
 13280  10B0  1903               	skipnz
 13281  10B1  0AA9               	incf	___awtoft@c+1,f
 13282  10B2  01AD               	clrf	___awtoft@sign
 13283  10B3  0AAD               	incf	___awtoft@sign,f
 13284  10B4                     l3608:	
 13285  10B4  0828               	movf	___awtoft@c,w
 13286  10B5  00A0               	movwf	___ftpack@arg
 13287  10B6  0829               	movf	___awtoft@c+1,w
 13288  10B7  00A1               	movwf	___ftpack@arg+1
 13289  10B8  01A2               	clrf	___ftpack@arg+2
 13290  10B9  308E               	movlw	142
 13291  10BA  00AB               	movwf	??___awtoft
 13292  10BB  082B               	movf	??___awtoft,w
 13293  10BC  00A3               	movwf	___ftpack@exp
 13294  10BD  082D               	movf	___awtoft@sign,w
 13295  10BE  00AC               	movwf	??___awtoft+1
 13296  10BF  082C               	movf	??___awtoft+1,w
 13297  10C0  00A4               	movwf	___ftpack@sign
 13298  10C1  3194  2483         	fcall	___ftpack
 13299  10C3  0020               	movlb	0	; select bank0
 13300  10C4  0820               	movf	?___ftpack,w
 13301  10C5  00A8               	movwf	?___awtoft
 13302  10C6  0821               	movf	?___ftpack+1,w
 13303  10C7  00A9               	movwf	?___awtoft+1
 13304  10C8  0822               	movf	?___ftpack+2,w
 13305  10C9  00AA               	movwf	?___awtoft+2
 13306  10CA  0008               	return
 13307  10CB                     __end_of___awtoft:	
 13308                           
 13309                           	psect	text39
 13310  1483                     __ptext39:	
 13311 ;; *************** function ___ftpack *****************
 13312 ;; Defined at:
 13313 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;  arg             3    0[BANK0 ] unsigned um
 13316 ;;  exp             1    3[BANK0 ] unsigned char 
 13317 ;;  sign            1    4[BANK0 ] unsigned char 
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;		None
 13320 ;; Return value:  Size  Location     Type
 13321 ;;                  3    0[BANK0 ] float 
 13322 ;; Registers used:
 13323 ;;		wreg, status,2, status,0
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13329 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;Total ram usage:        8 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; Hardware stack levels required when called:    3
 13336 ;; This function calls:
 13337 ;;		Nothing
 13338 ;; This function is called by:
 13339 ;;		___awtoft
 13340 ;;		___ftadd
 13341 ;;		___ftmul
 13342 ;;		___lltoft
 13343 ;; This function uses a non-reentrant model
 13344 ;;
 13345                           
 13346                           
 13347                           ;psect for function ___ftpack
 13348  1483                     ___ftpack:	
 13349                           
 13350                           ;incstack = 0
 13351                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13352  1483  0020               	movlb	0	; select bank0
 13353  1484  0823               	movf	___ftpack@exp,w
 13354  1485  1903               	btfsc	3,2
 13355  1486  2C8C               	goto	l2604
 13356  1487  0822               	movf	___ftpack@arg+2,w
 13357  1488  0421               	iorwf	___ftpack@arg+1,w
 13358  1489  0420               	iorwf	___ftpack@arg,w
 13359  148A  1D03               	skipz
 13360  148B  2C9D               	goto	l2610
 13361  148C                     l2604:	
 13362  148C  3000               	movlw	0
 13363  148D  00A0               	movwf	?___ftpack
 13364  148E  3000               	movlw	0
 13365  148F  00A1               	movwf	?___ftpack+1
 13366  1490  3000               	movlw	0
 13367  1491  00A2               	movwf	?___ftpack+2
 13368  1492  0008               	return
 13369  1493                     l2608:	
 13370  1493  3001               	movlw	1
 13371  1494  00A5               	movwf	??___ftpack
 13372  1495  0825               	movf	??___ftpack,w
 13373  1496  07A3               	addwf	___ftpack@exp,f
 13374  1497  3001               	movlw	1
 13375  1498                     u2755:	
 13376  1498  36A2               	lsrf	___ftpack@arg+2,f
 13377  1499  0CA1               	rrf	___ftpack@arg+1,f
 13378  149A  0CA0               	rrf	___ftpack@arg,f
 13379  149B  0B89               	decfsz	9,f
 13380  149C  2C98               	goto	u2755
 13381  149D                     l2610:	
 13382  149D  30FE               	movlw	254
 13383  149E  0522               	andwf	___ftpack@arg+2,w
 13384  149F  1903               	btfsc	3,2
 13385  14A0  2CB6               	goto	l840
 13386  14A1  2C93               	goto	l2608
 13387  14A2                     l2612:	
 13388  14A2  3001               	movlw	1
 13389  14A3  00A5               	movwf	??___ftpack
 13390  14A4  0825               	movf	??___ftpack,w
 13391  14A5  07A3               	addwf	___ftpack@exp,f
 13392  14A6  3001               	movlw	1
 13393  14A7  07A0               	addwf	___ftpack@arg,f
 13394  14A8  3000               	movlw	0
 13395  14A9  1803               	skipnc
 13396  14AA  3001               	movlw	1
 13397  14AB  07A1               	addwf	___ftpack@arg+1,f
 13398  14AC  3000               	movlw	0
 13399  14AD  1803               	skipnc
 13400  14AE  3001               	movlw	1
 13401  14AF  07A2               	addwf	___ftpack@arg+2,f
 13402  14B0  3001               	movlw	1
 13403  14B1                     u2775:	
 13404  14B1  36A2               	lsrf	___ftpack@arg+2,f
 13405  14B2  0CA1               	rrf	___ftpack@arg+1,f
 13406  14B3  0CA0               	rrf	___ftpack@arg,f
 13407  14B4  0B89               	decfsz	9,f
 13408  14B5  2CB1               	goto	u2775
 13409  14B6                     l840:	
 13410  14B6  30FF               	movlw	255
 13411  14B7  0522               	andwf	___ftpack@arg+2,w
 13412  14B8  1903               	btfsc	3,2
 13413  14B9  2CC3               	goto	l2620
 13414  14BA  2CA2               	goto	l2612
 13415  14BB                     l2618:	
 13416  14BB  3001               	movlw	1
 13417  14BC  02A3               	subwf	___ftpack@exp,f
 13418  14BD  3001               	movlw	1
 13419  14BE                     u2795:	
 13420  14BE  35A0               	lslf	___ftpack@arg,f
 13421  14BF  0DA1               	rlf	___ftpack@arg+1,f
 13422  14C0  0DA2               	rlf	___ftpack@arg+2,f
 13423  14C1  0B89               	decfsz	9,f
 13424  14C2  2CBE               	goto	u2795
 13425  14C3                     l2620:	
 13426  14C3  1BA1               	btfsc	___ftpack@arg+1,7
 13427  14C4  2CC9               	goto	l847
 13428  14C5  3002               	movlw	2
 13429  14C6  0223               	subwf	___ftpack@exp,w
 13430  14C7  1803               	skipnc
 13431  14C8  2CBB               	goto	l2618
 13432  14C9                     l847:	
 13433  14C9  1823               	btfsc	___ftpack@exp,0
 13434  14CA  2CD1               	goto	l848
 13435  14CB  30FF               	movlw	255
 13436  14CC  05A0               	andwf	___ftpack@arg,f
 13437  14CD  307F               	movlw	127
 13438  14CE  05A1               	andwf	___ftpack@arg+1,f
 13439  14CF  30FF               	movlw	255
 13440  14D0  05A2               	andwf	___ftpack@arg+2,f
 13441  14D1                     l848:	
 13442  14D1  1003               	clrc
 13443  14D2  0CA3               	rrf	___ftpack@exp,f
 13444  14D3  0823               	movf	___ftpack@exp,w
 13445  14D4  00A5               	movwf	??___ftpack
 13446  14D5  01A6               	clrf	??___ftpack+1
 13447  14D6  01A7               	clrf	??___ftpack+2
 13448  14D7  3010               	movlw	16
 13449  14D8                     u2835:	
 13450  14D8  35A5               	lslf	??___ftpack,f
 13451  14D9  0DA6               	rlf	??___ftpack+1,f
 13452  14DA  0DA7               	rlf	??___ftpack+2,f
 13453  14DB  0B89               	decfsz	9,f
 13454  14DC  2CD8               	goto	u2835
 13455  14DD  0825               	movf	??___ftpack,w
 13456  14DE  04A0               	iorwf	___ftpack@arg,f
 13457  14DF  0826               	movf	??___ftpack+1,w
 13458  14E0  04A1               	iorwf	___ftpack@arg+1,f
 13459  14E1  0827               	movf	??___ftpack+2,w
 13460  14E2  04A2               	iorwf	___ftpack@arg+2,f
 13461  14E3  0824               	movf	___ftpack@sign,w
 13462  14E4  1903               	btfsc	3,2
 13463  14E5  0008               	return
 13464  14E6  17A2               	bsf	___ftpack@arg+2,7
 13465  14E7  0008               	return
 13466  14E8                     __end_of___ftpack:	
 13467                           
 13468                           	psect	text40
 13469  1046                     __ptext40:	
 13470 ;; *************** function _EMC1001_MASK1 *****************
 13471 ;; Defined at:
 13472 ;;		line 155 in file "EMC1001.c"
 13473 ;; Parameters:    Size  Location     Type
 13474 ;;  enable          1    wreg     unsigned char 
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;  enable          1   16[BANK0 ] unsigned char 
 13477 ;;  data            1   17[BANK0 ] unsigned char 
 13478 ;; Return value:  Size  Location     Type
 13479 ;;                  1    wreg      unsigned char 
 13480 ;; Registers used:
 13481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13482 ;; Tracked objects:
 13483 ;;		On entry : 0/0
 13484 ;;		On exit  : 0/0
 13485 ;;		Unchanged: 0/0
 13486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;Total ram usage:        3 bytes
 13492 ;; Hardware stack levels used:    1
 13493 ;; Hardware stack levels required when called:    5
 13494 ;; This function calls:
 13495 ;;		_EMC1001_Read
 13496 ;;		_EMC1001_Write
 13497 ;; This function is called by:
 13498 ;;		_main
 13499 ;; This function uses a non-reentrant model
 13500 ;;
 13501                           
 13502                           
 13503                           ;psect for function _EMC1001_MASK1
 13504  1046                     _EMC1001_MASK1:	
 13505                           
 13506                           ;incstack = 0
 13507                           ; Regs used in _EMC1001_MASK1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13508                           ;EMC1001_MASK1@enable stored from wreg
 13509  1046  0020               	movlb	0	; select bank0
 13510  1047  00B0               	movwf	EMC1001_MASK1@enable
 13511                           
 13512                           ;EMC1001.c: 157: uint8_t data;
 13513                           ;EMC1001.c: 158: EMC1001_Read(0x03,&data);
 13514  1048  3031               	movlw	(low (EMC1001_MASK1@data| 0))& (0+255)
 13515  1049  00AF               	movwf	??_EMC1001_MASK1
 13516  104A  082F               	movf	??_EMC1001_MASK1,w
 13517  104B  00A7               	movwf	EMC1001_Read@pData
 13518  104C  3003               	movlw	3
 13519  104D  3193  233E  3190   	fcall	_EMC1001_Read
 13520                           
 13521                           ;EMC1001.c: 160: if (enable)
 13522  1050  0020               	movlb	0	; select bank0
 13523  1051  0830               	movf	EMC1001_MASK1@enable,w
 13524  1052  1903               	btfsc	3,2
 13525  1053  285D               	goto	l3804
 13526                           
 13527                           ;EMC1001.c: 161: return EMC1001_Write(0x03,data|0b10000000);
 13528                           ;	Return value of _EMC1001_MASK1 is never used
 13529  1054  0831               	movf	EMC1001_MASK1@data,w
 13530  1055  3880               	iorlw	128
 13531  1056  00AF               	movwf	??_EMC1001_MASK1
 13532  1057  082F               	movf	??_EMC1001_MASK1,w
 13533  1058  00A7               	movwf	EMC1001_Write@data
 13534  1059  3003               	movlw	3
 13535  105A  3192  22F6         	fcall	_EMC1001_Write
 13536  105C  0008               	return
 13537  105D                     l3804:	
 13538                           
 13539                           ;EMC1001.c: 162: else
 13540                           ;EMC1001.c: 163: return EMC1001_Write(0x03,data&0b01111111);
 13541                           ;	Return value of _EMC1001_MASK1 is never used
 13542  105D  0020               	movlb	0	; select bank0
 13543  105E  0831               	movf	EMC1001_MASK1@data,w
 13544  105F  397F               	andlw	127
 13545  1060  00AF               	movwf	??_EMC1001_MASK1
 13546  1061  082F               	movf	??_EMC1001_MASK1,w
 13547  1062  00A7               	movwf	EMC1001_Write@data
 13548  1063  3003               	movlw	3
 13549  1064  3192  22F6         	fcall	_EMC1001_Write
 13550  1066  0008               	return
 13551  1067                     __end_of_EMC1001_MASK1:	
 13552                           
 13553                           	psect	text41
 13554  12F6                     __ptext41:	
 13555 ;; *************** function _EMC1001_Write *****************
 13556 ;; Defined at:
 13557 ;;		line 46 in file "EMC1001.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  reg             1    wreg     unsigned char 
 13560 ;;  data            1    7[BANK0 ] unsigned char 
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  reg             1   10[BANK0 ] unsigned char 
 13563 ;;  buffer          2   12[BANK0 ] unsigned char [2]
 13564 ;;  status          1   14[BANK0 ] enum E14261
 13565 ;;  timeOut         1   11[BANK0 ] unsigned char 
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      unsigned char 
 13568 ;; Registers used:
 13569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;Total ram usage:        8 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    4
 13582 ;; This function calls:
 13583 ;;		_I2C2_MasterTRBInsert
 13584 ;;		_I2C2_MasterWriteTRBBuild
 13585 ;; This function is called by:
 13586 ;;		_EMC1001_SetConversionRate
 13587 ;;		_EMC1001_SetTempHighLimit
 13588 ;;		_EMC1001_SetTempLowLimit
 13589 ;;		_EMC1001_SetThermLimit
 13590 ;;		_EMC1001_SetThermHysteresis
 13591 ;;		_EMC1001_SMBusTimeout
 13592 ;;		_EMC1001_MASK1
 13593 ;;		_EMC1001_StandbyMode
 13594 ;;		_EMC1001_THERM2
 13595 ;;		_EMC1001_OneShot
 13596 ;; This function uses a non-reentrant model
 13597 ;;
 13598                           
 13599                           
 13600                           ;psect for function _EMC1001_Write
 13601  12F6                     _EMC1001_Write:	
 13602                           
 13603                           ;incstack = 0
 13604                           ; Regs used in _EMC1001_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13605                           ;EMC1001_Write@reg stored from wreg
 13606  12F6  0020               	movlb	0	; select bank0
 13607  12F7  00AA               	movwf	EMC1001_Write@reg
 13608                           
 13609                           ;EMC1001.c: 48: static I2C2_TRANSACTION_REQUEST_BLOCK trb;
 13610                           ;EMC1001.c: 49: I2C2_MESSAGE_STATUS status = I2C2_MESSAGE_PENDING;
 13611  12F8  3002               	movlw	2
 13612  12F9  00A8               	movwf	??_EMC1001_Write
 13613  12FA  0828               	movf	??_EMC1001_Write,w
 13614  12FB  00AE               	movwf	EMC1001_Write@status
 13615                           
 13616                           ;EMC1001.c: 50: uint8_t timeOut=0;
 13617  12FC  01AB               	clrf	EMC1001_Write@timeOut
 13618                           
 13619                           ;EMC1001.c: 51: uint8_t buffer[2];
 13620                           ;EMC1001.c: 52: buffer[0] = reg; buffer[1] = data;
 13621  12FD  082A               	movf	EMC1001_Write@reg,w
 13622  12FE  00A8               	movwf	??_EMC1001_Write
 13623  12FF  0828               	movf	??_EMC1001_Write,w
 13624  1300  00AC               	movwf	EMC1001_Write@buffer
 13625  1301  0827               	movf	EMC1001_Write@data,w
 13626  1302  00A8               	movwf	??_EMC1001_Write
 13627  1303  0828               	movf	??_EMC1001_Write,w
 13628  1304  00AD               	movwf	EMC1001_Write@buffer+1
 13629                           
 13630                           ;EMC1001.c: 54: I2C2_MasterWriteTRBBuild(&trb, buffer, 2, 0x38);
 13631  1305  302C               	movlw	(low (EMC1001_Write@buffer| 0))& (0+255)
 13632  1306  00A8               	movwf	??_EMC1001_Write
 13633  1307  0828               	movf	??_EMC1001_Write,w
 13634  1308  00A0               	movwf	I2C2_MasterWriteTRBBuild@pdata
 13635  1309  3002               	movlw	2
 13636  130A  00A9               	movwf	??_EMC1001_Write+1
 13637  130B  0829               	movf	??_EMC1001_Write+1,w
 13638  130C  00A1               	movwf	I2C2_MasterWriteTRBBuild@length
 13639  130D  3038               	movlw	56
 13640  130E  00A2               	movwf	I2C2_MasterWriteTRBBuild@address
 13641  130F  3000               	movlw	0
 13642  1310  00A3               	movwf	I2C2_MasterWriteTRBBuild@address+1
 13643  1311  3028               	movlw	(low (EMC1001_Write@trb| (0+256)))& (0+255)
 13644  1312  3190  20CB  3192   	fcall	_I2C2_MasterWriteTRBBuild
 13645  1315                     l367:	
 13646                           ;EMC1001.c: 56: while(status != I2C2_MESSAGE_FAIL)
 13647                           
 13648  1315  0020               	movlb	0	; select bank0
 13649  1316  032E               	decf	EMC1001_Write@status,w
 13650  1317  1903               	btfsc	3,2
 13651  1318  2B37               	goto	l3596
 13652                           
 13653                           ;EMC1001.c: 57: {
 13654                           ;EMC1001.c: 58: I2C2_MasterTRBInsert(1, &trb, &status);
 13655  1319  3028               	movlw	(low (EMC1001_Write@trb| (0+256)))& (0+255)
 13656  131A  0020               	movlb	0	; select bank0
 13657  131B  00A8               	movwf	??_EMC1001_Write
 13658  131C  0828               	movf	??_EMC1001_Write,w
 13659  131D  00A0               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13660  131E  302E               	movlw	(low (EMC1001_Write@status| 0))& (0+255)
 13661  131F  00A9               	movwf	??_EMC1001_Write+1
 13662  1320  0829               	movf	??_EMC1001_Write+1,w
 13663  1321  00A1               	movwf	I2C2_MasterTRBInsert@pflag
 13664  1322  3001               	movlw	1
 13665  1323  3192  2223  3192   	fcall	_I2C2_MasterTRBInsert
 13666  1326                     l3582:	
 13667                           ;EMC1001.c: 59: while(status == I2C2_MESSAGE_PENDING);
 13668                           
 13669  1326  3002               	movlw	2
 13670  1327  0020               	movlb	0	; select bank0
 13671  1328  062E               	xorwf	EMC1001_Write@status,w
 13672  1329  1903               	btfsc	3,2
 13673  132A  2B26               	goto	l3582
 13674                           
 13675                           ;EMC1001.c: 61: if (status == I2C2_MESSAGE_COMPLETE) break;
 13676  132B  082E               	movf	EMC1001_Write@status,w
 13677  132C  1903               	btfsc	3,2
 13678  132D  2B37               	goto	l3596
 13679                           
 13680                           ;EMC1001.c: 66: if (timeOut == 100)
 13681  132E  3064               	movlw	100
 13682  132F  062B               	xorwf	EMC1001_Write@timeOut,w
 13683  1330  1903               	btfsc	3,2
 13684  1331  2B37               	goto	l3596
 13685                           
 13686                           ;EMC1001.c: 68: else
 13687                           ;EMC1001.c: 69: timeOut++;
 13688                           
 13689                           ;EMC1001.c: 67: break;
 13690  1332  3001               	movlw	1
 13691  1333  00A8               	movwf	??_EMC1001_Write
 13692  1334  0828               	movf	??_EMC1001_Write,w
 13693  1335  07AB               	addwf	EMC1001_Write@timeOut,f
 13694  1336  2B15               	goto	l367
 13695  1337                     l3596:	
 13696                           
 13697                           ;EMC1001.c: 70: }
 13698                           ;EMC1001.c: 72: return (status == I2C2_MESSAGE_COMPLETE);
 13699  1337  082E               	movf	EMC1001_Write@status,w
 13700  1338  1D03               	btfss	3,2
 13701  1339  2B3C               	goto	u4750
 13702  133A  3001               	movlw	1
 13703  133B  0008               	return
 13704  133C                     u4750:	
 13705  133C  3000               	movlw	0
 13706  133D  0008               	return
 13707  133E                     __end_of_EMC1001_Write:	
 13708                           
 13709                           	psect	text42
 13710  133E                     __ptext42:	
 13711 ;; *************** function _EMC1001_Read *****************
 13712 ;; Defined at:
 13713 ;;		line 13 in file "EMC1001.c"
 13714 ;; Parameters:    Size  Location     Type
 13715 ;;  reg             1    wreg     unsigned char 
 13716 ;;  pData           1    7[BANK0 ] PTR unsigned char 
 13717 ;;		 -> EMC1001_PrintTemp@templo(1), EMC1001_PrintTemp@temp(1), EMC1001_PrintInfo@templo(1), EMC1001_PrintInfo@temp(1), 
 13718 ;;		 -> EMC1001_PrintInfo@data(1), EMC1001_THERM2@data(1), EMC1001_StandbyMode@data(1), EMC1001_MASK1@data(1), 
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;  reg             1   11[BANK0 ] unsigned char 
 13721 ;;  status          1   12[BANK0 ] enum E14261
 13722 ;;  timeOut         1   10[BANK0 ] unsigned char 
 13723 ;; Return value:  Size  Location     Type
 13724 ;;                  1    wreg      unsigned char 
 13725 ;; Registers used:
 13726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        6 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    4
 13739 ;; This function calls:
 13740 ;;		_I2C2_MasterReadTRBBuild
 13741 ;;		_I2C2_MasterTRBInsert
 13742 ;;		_I2C2_MasterWriteTRBBuild
 13743 ;; This function is called by:
 13744 ;;		_EMC1001_MASK1
 13745 ;;		_EMC1001_StandbyMode
 13746 ;;		_EMC1001_THERM2
 13747 ;;		_EMC1001_PrintInfo
 13748 ;;		_EMC1001_PrintTemp
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           
 13753                           ;psect for function _EMC1001_Read
 13754  133E                     _EMC1001_Read:	
 13755                           
 13756                           ;incstack = 0
 13757                           ; Regs used in _EMC1001_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13758                           ;EMC1001_Read@reg stored from wreg
 13759  133E  0020               	movlb	0	; select bank0
 13760  133F  00AB               	movwf	EMC1001_Read@reg
 13761                           
 13762                           ;EMC1001.c: 15: uint8_t timeOut=0;
 13763  1340  01AA               	clrf	EMC1001_Read@timeOut
 13764                           
 13765                           ;EMC1001.c: 17: I2C2_MESSAGE_STATUS status = I2C2_MESSAGE_PENDING;
 13766  1341  3002               	movlw	2
 13767  1342  00A8               	movwf	??_EMC1001_Read
 13768  1343  0828               	movf	??_EMC1001_Read,w
 13769  1344  00AC               	movwf	EMC1001_Read@status
 13770                           
 13771                           ;EMC1001.c: 18: static I2C2_TRANSACTION_REQUEST_BLOCK trb[2];
 13772                           ;EMC1001.c: 20: I2C2_MasterWriteTRBBuild(&trb[0], &reg, 1, 0x38);
 13773  1345  302B               	movlw	(low (EMC1001_Read@reg| 0))& (0+255)
 13774  1346  00A8               	movwf	??_EMC1001_Read
 13775  1347  0828               	movf	??_EMC1001_Read,w
 13776  1348  00A0               	movwf	I2C2_MasterWriteTRBBuild@pdata
 13777  1349  01A1               	clrf	I2C2_MasterWriteTRBBuild@length
 13778  134A  0AA1               	incf	I2C2_MasterWriteTRBBuild@length,f
 13779  134B  3038               	movlw	56
 13780  134C  00A2               	movwf	I2C2_MasterWriteTRBBuild@address
 13781  134D  3000               	movlw	0
 13782  134E  00A3               	movwf	I2C2_MasterWriteTRBBuild@address+1
 13783  134F  3020               	movlw	(low (EMC1001_Read@trb| (0+256)))& (0+255)
 13784  1350  3190  20CB  3193   	fcall	_I2C2_MasterWriteTRBBuild
 13785                           
 13786                           ;EMC1001.c: 21: I2C2_MasterReadTRBBuild(&trb[1], pData, 1, 0x38);
 13787  1353  0020               	movlb	0	; select bank0
 13788  1354  0827               	movf	EMC1001_Read@pData,w
 13789  1355  00A8               	movwf	??_EMC1001_Read
 13790  1356  0828               	movf	??_EMC1001_Read,w
 13791  1357  00A0               	movwf	I2C2_MasterReadTRBBuild@pdata
 13792  1358  01A1               	clrf	I2C2_MasterReadTRBBuild@length
 13793  1359  0AA1               	incf	I2C2_MasterReadTRBBuild@length,f
 13794  135A  3038               	movlw	56
 13795  135B  00A2               	movwf	I2C2_MasterReadTRBBuild@address
 13796  135C  3000               	movlw	0
 13797  135D  00A3               	movwf	I2C2_MasterReadTRBBuild@address+1
 13798  135E  3024               	movlw	(low ((EMC1001_Read@trb| (0+256)+4)))& (0+255)
 13799  135F  3191  2118  3193   	fcall	_I2C2_MasterReadTRBBuild
 13800  1362                     l353:	
 13801                           ;EMC1001.c: 23: while(status != I2C2_MESSAGE_FAIL)
 13802                           
 13803  1362  0020               	movlb	0	; select bank0
 13804  1363  032C               	decf	EMC1001_Read@status,w
 13805  1364  1903               	btfsc	3,2
 13806  1365  2B84               	goto	l3566
 13807                           
 13808                           ;EMC1001.c: 24: {
 13809                           ;EMC1001.c: 25: I2C2_MasterTRBInsert(2, &trb[0], &status);
 13810  1366  3020               	movlw	(low (EMC1001_Read@trb| (0+256)))& (0+255)
 13811  1367  0020               	movlb	0	; select bank0
 13812  1368  00A8               	movwf	??_EMC1001_Read
 13813  1369  0828               	movf	??_EMC1001_Read,w
 13814  136A  00A0               	movwf	I2C2_MasterTRBInsert@ptrb_list
 13815  136B  302C               	movlw	(low (EMC1001_Read@status| 0))& (0+255)
 13816  136C  00A9               	movwf	??_EMC1001_Read+1
 13817  136D  0829               	movf	??_EMC1001_Read+1,w
 13818  136E  00A1               	movwf	I2C2_MasterTRBInsert@pflag
 13819  136F  3002               	movlw	2
 13820  1370  3192  2223  3193   	fcall	_I2C2_MasterTRBInsert
 13821  1373                     l3552:	
 13822                           ;EMC1001.c: 27: while(status == I2C2_MESSAGE_PENDING);
 13823                           
 13824  1373  3002               	movlw	2
 13825  1374  0020               	movlb	0	; select bank0
 13826  1375  062C               	xorwf	EMC1001_Read@status,w
 13827  1376  1903               	btfsc	3,2
 13828  1377  2B73               	goto	l3552
 13829                           
 13830                           ;EMC1001.c: 29: if (status == I2C2_MESSAGE_COMPLETE) break;
 13831  1378  082C               	movf	EMC1001_Read@status,w
 13832  1379  1903               	btfsc	3,2
 13833  137A  2B84               	goto	l3566
 13834                           
 13835                           ;EMC1001.c: 34: if (timeOut == 100)
 13836  137B  3064               	movlw	100
 13837  137C  062A               	xorwf	EMC1001_Read@timeOut,w
 13838  137D  1903               	btfsc	3,2
 13839  137E  2B84               	goto	l3566
 13840                           
 13841                           ;EMC1001.c: 36: else
 13842                           ;EMC1001.c: 37: timeOut++;
 13843                           
 13844                           ;EMC1001.c: 35: break;
 13845  137F  3001               	movlw	1
 13846  1380  00A8               	movwf	??_EMC1001_Read
 13847  1381  0828               	movf	??_EMC1001_Read,w
 13848  1382  07AA               	addwf	EMC1001_Read@timeOut,f
 13849  1383  2B62               	goto	l353
 13850  1384                     l3566:	
 13851                           
 13852                           ;EMC1001.c: 39: }
 13853                           ;EMC1001.c: 40: return (status == I2C2_MESSAGE_COMPLETE);
 13854  1384  082C               	movf	EMC1001_Read@status,w
 13855  1385  1D03               	btfss	3,2
 13856  1386  2B89               	goto	u4690
 13857  1387  3001               	movlw	1
 13858  1388  0008               	return
 13859  1389                     u4690:	
 13860  1389  3000               	movlw	0
 13861  138A  0008               	return
 13862  138B                     __end_of_EMC1001_Read:	
 13863                           
 13864                           	psect	text43
 13865  10CB                     __ptext43:	
 13866 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
 13867 ;; Defined at:
 13868 ;;		line 707 in file "mcc_generated_files/i2c2.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  ptrb            1    wreg     PTR struct .
 13871 ;;		 -> EMC1001_Write@trb(4), EMC1001_Read@trb(8), I2C2_MasterWrite@trBlock(4), 
 13872 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
 13873 ;;		 -> EMC1001_Write@buffer(2), EMC1001_Read@reg(1), 
 13874 ;;  length          1    1[BANK0 ] unsigned char 
 13875 ;;  address         2    2[BANK0 ] unsigned int 
 13876 ;; Auto vars:     Size  Location     Type
 13877 ;;  ptrb            1    6[BANK0 ] PTR struct .
 13878 ;;		 -> EMC1001_Write@trb(4), EMC1001_Read@trb(8), I2C2_MasterWrite@trBlock(4), 
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1    wreg      void 
 13881 ;; Registers used:
 13882 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13883 ;; Tracked objects:
 13884 ;;		On entry : 0/0
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;Total ram usage:        7 bytes
 13893 ;; Hardware stack levels used:    1
 13894 ;; Hardware stack levels required when called:    3
 13895 ;; This function calls:
 13896 ;;		Nothing
 13897 ;; This function is called by:
 13898 ;;		_EMC1001_Read
 13899 ;;		_EMC1001_Write
 13900 ;;		_I2C2_MasterWrite
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           
 13905                           ;psect for function _I2C2_MasterWriteTRBBuild
 13906  10CB                     _I2C2_MasterWriteTRBBuild:	
 13907                           
 13908                           ;incstack = 0
 13909                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 13910                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
 13911  10CB  0020               	movlb	0	; select bank0
 13912  10CC  00A6               	movwf	I2C2_MasterWriteTRBBuild@ptrb
 13913                           
 13914                           ;i2c2.c: 713: ptrb->address = address << 1;
 13915  10CD  0823               	movf	I2C2_MasterWriteTRBBuild@address+1,w
 13916  10CE  00A5               	movwf	??_I2C2_MasterWriteTRBBuild+1
 13917  10CF  0822               	movf	I2C2_MasterWriteTRBBuild@address,w
 13918  10D0  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
 13919  10D1  35A4               	lslf	??_I2C2_MasterWriteTRBBuild,f
 13920  10D2  0DA5               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
 13921  10D3  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13922  10D4  0086               	movwf	6
 13923  10D5  3001               	movlw	1	; select bank2/3
 13924  10D6  0087               	movwf	7
 13925  10D7  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
 13926  10D8  3FC0               	movwi [0]fsr1
 13927  10D9  0825               	movf	??_I2C2_MasterWriteTRBBuild+1,w
 13928  10DA  3FC1               	movwi [1]fsr1
 13929                           
 13930                           ;i2c2.c: 714: ptrb->length = length;
 13931  10DB  0821               	movf	I2C2_MasterWriteTRBBuild@length,w
 13932  10DC  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
 13933  10DD  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13934  10DE  3E02               	addlw	2
 13935  10DF  0086               	movwf	6
 13936  10E0  3001               	movlw	1	; select bank2/3
 13937  10E1  0087               	movwf	7
 13938  10E2  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
 13939  10E3  0081               	movwf	1
 13940                           
 13941                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
 13942  10E4  0820               	movf	I2C2_MasterWriteTRBBuild@pdata,w
 13943  10E5  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
 13944  10E6  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
 13945  10E7  3E03               	addlw	3
 13946  10E8  0086               	movwf	6
 13947  10E9  3001               	movlw	1	; select bank2/3
 13948  10EA  0087               	movwf	7
 13949  10EB  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
 13950  10EC  0081               	movwf	1
 13951  10ED  0008               	return
 13952  10EE                     __end_of_I2C2_MasterWriteTRBBuild:	
 13953                           
 13954                           	psect	text44
 13955  1223                     __ptext44:	
 13956 ;; *************** function _I2C2_MasterTRBInsert *****************
 13957 ;; Defined at:
 13958 ;;		line 641 in file "mcc_generated_files/i2c2.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;  count           1    wreg     unsigned char 
 13961 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
 13962 ;;		 -> EMC1001_Write@trb(4), EMC1001_Read@trb(8), I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
 13963 ;;  pflag           1    1[BANK0 ] PTR enum E14254
 13964 ;;		 -> EMC1001_Write@status(1), EMC1001_Read@status(1), 
 13965 ;; Auto vars:     Size  Location     Type
 13966 ;;  count           1    3[BANK0 ] unsigned char 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;                  1    wreg      void 
 13969 ;; Registers used:
 13970 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;Total ram usage:        4 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; Hardware stack levels required when called:    3
 13983 ;; This function calls:
 13984 ;;		Nothing
 13985 ;; This function is called by:
 13986 ;;		_EMC1001_Read
 13987 ;;		_EMC1001_Write
 13988 ;;		_I2C2_MasterWrite
 13989 ;;		_I2C2_MasterRead
 13990 ;; This function uses a non-reentrant model
 13991 ;;
 13992                           
 13993                           
 13994                           ;psect for function _I2C2_MasterTRBInsert
 13995  1223                     _I2C2_MasterTRBInsert:	
 13996                           
 13997                           ;incstack = 0
 13998                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 13999                           ;I2C2_MasterTRBInsert@count stored from wreg
 14000  1223  0020               	movlb	0	; select bank0
 14001  1224  00A3               	movwf	I2C2_MasterTRBInsert@count
 14002                           
 14003                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
 14004  1225  1872               	btfsc	_i2c2_object+2,0
 14005  1226  2A57               	goto	l2870
 14006                           
 14007                           ;i2c2.c: 649: {
 14008                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
 14009  1227  3002               	movlw	2
 14010  1228  00A2               	movwf	??_I2C2_MasterTRBInsert
 14011  1229  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 14012  122A  0086               	movwf	6
 14013  122B  0187               	clrf	7
 14014  122C  0822               	movf	??_I2C2_MasterTRBInsert,w
 14015  122D  0081               	movwf	1
 14016                           
 14017                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
 14018  122E  0820               	movf	I2C2_MasterTRBInsert@ptrb_list,w
 14019  122F  00A2               	movwf	??_I2C2_MasterTRBInsert
 14020  1230  0A70               	incf	_i2c2_object,w
 14021  1231  0086               	movwf	6
 14022  1232  0187               	clrf	7
 14023  1233  0822               	movf	??_I2C2_MasterTRBInsert,w
 14024  1234  0081               	movwf	1
 14025                           
 14026                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
 14027  1235  0823               	movf	I2C2_MasterTRBInsert@count,w
 14028  1236  00A2               	movwf	??_I2C2_MasterTRBInsert
 14029  1237  0870               	movf	_i2c2_object,w
 14030  1238  0086               	movwf	6
 14031  1239  0187               	clrf	7
 14032  123A  0822               	movf	??_I2C2_MasterTRBInsert,w
 14033  123B  0081               	movwf	1
 14034                           
 14035                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
 14036  123C  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 14037  123D  00A2               	movwf	??_I2C2_MasterTRBInsert
 14038  123E  0870               	movf	_i2c2_object,w
 14039  123F  3E02               	addlw	2
 14040  1240  0086               	movwf	6
 14041  1241  0187               	clrf	7
 14042  1242  0822               	movf	??_I2C2_MasterTRBInsert,w
 14043  1243  0081               	movwf	1
 14044                           
 14045                           ;i2c2.c: 655: i2c2_object.pTrTail++;
 14046  1244  3003               	movlw	3
 14047  1245  00A2               	movwf	??_I2C2_MasterTRBInsert
 14048  1246  0822               	movf	??_I2C2_MasterTRBInsert,w
 14049  1247  07F0               	addwf	_i2c2_object,f
 14050                           
 14051                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
 14052  1248  0870               	movf	_i2c2_object,w
 14053  1249  3AEB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
 14054  124A  1D03               	skipz
 14055  124B  2A50               	goto	l2866
 14056                           
 14057                           ;i2c2.c: 659: {
 14058                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
 14059  124C  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
 14060  124D  00A2               	movwf	??_I2C2_MasterTRBInsert
 14061  124E  0822               	movf	??_I2C2_MasterTRBInsert,w
 14062  124F  00F0               	movwf	_i2c2_object
 14063  1250                     l2866:	
 14064                           
 14065                           ;i2c2.c: 662: }
 14066                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
 14067  1250  10F2               	bcf	_i2c2_object+2,1
 14068                           
 14069                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
 14070  1251  0871               	movf	_i2c2_object+1,w
 14071  1252  0670               	xorwf	_i2c2_object,w
 14072  1253  1D03               	skipz
 14073  1254  2A5C               	goto	l2872
 14074                           
 14075                           ;i2c2.c: 670: {
 14076                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
 14077  1255  1472               	bsf	_i2c2_object+2,0
 14078                           
 14079                           ;i2c2.c: 673: }
 14080                           ;i2c2.c: 675: }
 14081  1256  2A5C               	goto	l2872
 14082  1257                     l2870:	
 14083                           
 14084                           ;i2c2.c: 676: else
 14085                           ;i2c2.c: 677: {
 14086                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
 14087  1257  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 14088  1258  0086               	movwf	6
 14089  1259  0187               	clrf	7
 14090  125A  0181               	clrf	1
 14091  125B  0A81               	incf	1,f
 14092  125C                     l2872:	
 14093                           
 14094                           ;i2c2.c: 679: }
 14095                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
 14096  125C  0821               	movf	I2C2_MasterTRBInsert@pflag,w
 14097  125D  0086               	movwf	6
 14098  125E  0187               	clrf	7
 14099  125F  3002               	movlw	2
 14100  1260  0601               	xorwf	1,w
 14101  1261  1D03               	btfss	3,2
 14102  1262  0008               	return
 14103  1263                     l2876:	
 14104                           ;i2c2.c: 683: {
 14105                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
 14106                           
 14107  1263  086F               	movf	_i2c2_state,w
 14108  1264  1D03               	btfss	3,2
 14109  1265  2A63               	goto	l2876
 14110                           
 14111                           ;i2c2.c: 685: {
 14112                           ;i2c2.c: 688: PIR3bits.SSP2IF = 1;
 14113  1266  002E               	movlb	14	; select bank14
 14114  1267  150F               	bsf	15,2	;volatile
 14115  1268  0008               	return
 14116  1269                     __end_of_I2C2_MasterTRBInsert:	
 14117                           
 14118                           	psect	text45
 14119  1118                     __ptext45:	
 14120 ;; *************** function _I2C2_MasterReadTRBBuild *****************
 14121 ;; Defined at:
 14122 ;;		line 694 in file "mcc_generated_files/i2c2.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;  ptrb            1    wreg     PTR struct .
 14125 ;;		 -> EMC1001_Read@trb(8), I2C2_MasterRead@trBlock(4), 
 14126 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
 14127 ;;		 -> EMC1001_PrintTemp@templo(1), EMC1001_PrintTemp@temp(1), EMC1001_PrintInfo@templo(1), EMC1001_PrintInfo@temp(1), 
 14128 ;;		 -> EMC1001_PrintInfo@data(1), EMC1001_THERM2@data(1), EMC1001_StandbyMode@data(1), EMC1001_MASK1@data(1), 
 14129 ;;  length          1    1[BANK0 ] unsigned char 
 14130 ;;  address         2    2[BANK0 ] unsigned int 
 14131 ;; Auto vars:     Size  Location     Type
 14132 ;;  ptrb            1    6[BANK0 ] PTR struct .
 14133 ;;		 -> EMC1001_Read@trb(8), I2C2_MasterRead@trBlock(4), 
 14134 ;; Return value:  Size  Location     Type
 14135 ;;                  1    wreg      void 
 14136 ;; Registers used:
 14137 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14138 ;; Tracked objects:
 14139 ;;		On entry : 0/0
 14140 ;;		On exit  : 0/0
 14141 ;;		Unchanged: 0/0
 14142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;Total ram usage:        7 bytes
 14148 ;; Hardware stack levels used:    1
 14149 ;; Hardware stack levels required when called:    3
 14150 ;; This function calls:
 14151 ;;		Nothing
 14152 ;; This function is called by:
 14153 ;;		_EMC1001_Read
 14154 ;;		_I2C2_MasterRead
 14155 ;; This function uses a non-reentrant model
 14156 ;;
 14157                           
 14158                           
 14159                           ;psect for function _I2C2_MasterReadTRBBuild
 14160  1118                     _I2C2_MasterReadTRBBuild:	
 14161                           
 14162                           ;incstack = 0
 14163                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 14164                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
 14165  1118  0020               	movlb	0	; select bank0
 14166  1119  00A6               	movwf	I2C2_MasterReadTRBBuild@ptrb
 14167                           
 14168                           ;i2c2.c: 700: ptrb->address = address << 1;
 14169  111A  0823               	movf	I2C2_MasterReadTRBBuild@address+1,w
 14170  111B  00A5               	movwf	??_I2C2_MasterReadTRBBuild+1
 14171  111C  0822               	movf	I2C2_MasterReadTRBBuild@address,w
 14172  111D  00A4               	movwf	??_I2C2_MasterReadTRBBuild
 14173  111E  35A4               	lslf	??_I2C2_MasterReadTRBBuild,f
 14174  111F  0DA5               	rlf	??_I2C2_MasterReadTRBBuild+1,f
 14175  1120  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14176  1121  0086               	movwf	6
 14177  1122  3001               	movlw	1	; select bank2/3
 14178  1123  0087               	movwf	7
 14179  1124  0824               	movf	??_I2C2_MasterReadTRBBuild,w
 14180  1125  3FC0               	movwi [0]fsr1
 14181  1126  0825               	movf	??_I2C2_MasterReadTRBBuild+1,w
 14182  1127  3FC1               	movwi [1]fsr1
 14183                           
 14184                           ;i2c2.c: 702: ptrb->address |= 0x01;
 14185  1128  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14186  1129  0086               	movwf	6
 14187  112A  3001               	movlw	1	; select bank2/3
 14188  112B  0087               	movwf	7
 14189  112C  3001               	movlw	1
 14190  112D  0481               	iorwf	1,f
 14191  112E  3141               	addfsr 1,1
 14192  112F  3000               	movlw	0
 14193  1130  0481               	iorwf	1,f
 14194                           
 14195                           ;i2c2.c: 703: ptrb->length = length;
 14196  1131  0821               	movf	I2C2_MasterReadTRBBuild@length,w
 14197  1132  00A4               	movwf	??_I2C2_MasterReadTRBBuild
 14198  1133  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14199  1134  3E02               	addlw	2
 14200  1135  0086               	movwf	6
 14201  1136  3001               	movlw	1	; select bank2/3
 14202  1137  0087               	movwf	7
 14203  1138  0824               	movf	??_I2C2_MasterReadTRBBuild,w
 14204  1139  0081               	movwf	1
 14205                           
 14206                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
 14207  113A  0820               	movf	I2C2_MasterReadTRBBuild@pdata,w
 14208  113B  00A4               	movwf	??_I2C2_MasterReadTRBBuild
 14209  113C  0826               	movf	I2C2_MasterReadTRBBuild@ptrb,w
 14210  113D  3E03               	addlw	3
 14211  113E  0086               	movwf	6
 14212  113F  3001               	movlw	1	; select bank2/3
 14213  1140  0087               	movwf	7
 14214  1141  0824               	movf	??_I2C2_MasterReadTRBBuild,w
 14215  1142  0081               	movwf	1
 14216  1143  0008               	return
 14217  1144                     __end_of_I2C2_MasterReadTRBBuild:	
 14218                           
 14219                           	psect	intentry
 14220  0004                     __pintentry:	
 14221 ;; *************** function _INTERRUPT_InterruptManager *****************
 14222 ;; Defined at:
 14223 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 14224 ;; Parameters:    Size  Location     Type
 14225 ;;		None
 14226 ;; Auto vars:     Size  Location     Type
 14227 ;;		None
 14228 ;; Return value:  Size  Location     Type
 14229 ;;                  1    wreg      void 
 14230 ;; Registers used:
 14231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14232 ;; Tracked objects:
 14233 ;;		On entry : 0/0
 14234 ;;		On exit  : 0/0
 14235 ;;		Unchanged: 0/0
 14236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;Total ram usage:        1 bytes
 14242 ;; Hardware stack levels used:    1
 14243 ;; Hardware stack levels required when called:    2
 14244 ;; This function calls:
 14245 ;;		_I2C2_BusCollisionISR
 14246 ;;		_I2C2_ISR
 14247 ;; This function is called by:
 14248 ;;		Interrupt level 1
 14249 ;; This function uses a non-reentrant model
 14250 ;;
 14251                           
 14252  0004                     _INTERRUPT_InterruptManager:	
 14253                           
 14254                           ;incstack = 0
 14255  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14256                           
 14257                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14258  0005  3180               	pagesel	$
 14259  0006  0020               	movlb	0	; select bank0
 14260  0007  087F               	movf	127,w
 14261  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 14262                           
 14263                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE3bits.BCL2IE == 1 && PIR3bits.BC
      +                          L2IF == 1)
 14264  0009  1F0B               	btfss	11,6	;volatile
 14265  000A  2813               	goto	i1l202
 14266  000B  002E               	movlb	14	; select bank14
 14267  000C  1999               	btfsc	25,3	;volatile
 14268  000D  1D8F               	btfss	15,3	;volatile
 14269  000E  2813               	goto	i1l202
 14270                           
 14271                           ;interrupt_manager.c: 55: {
 14272                           ;interrupt_manager.c: 56: I2C2_BusCollisionISR();
 14273  000F  3180  2003  3180   	fcall	_I2C2_BusCollisionISR
 14274                           
 14275                           ;interrupt_manager.c: 57: }
 14276  0012  281B               	goto	i1l206
 14277  0013                     i1l202:	
 14278                           
 14279                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP2IE == 1 && PIR3bi
      +                          ts.SSP2IF == 1)
 14280  0013  1F0B               	btfss	11,6	;volatile
 14281  0014  281B               	goto	i1l206
 14282  0015  002E               	movlb	14	; select bank14
 14283  0016  1919               	btfsc	25,2	;volatile
 14284  0017  1D0F               	btfss	15,2	;volatile
 14285  0018  281B               	goto	i1l206
 14286                           
 14287                           ;interrupt_manager.c: 59: {
 14288                           ;interrupt_manager.c: 60: I2C2_ISR();
 14289  0019  3188  20CA         	fcall	_I2C2_ISR
 14290  001B                     i1l206:	
 14291                           ;interrupt_manager.c: 62: else
 14292                           ;interrupt_manager.c: 63: {
 14293                           
 14294                           ;interrupt_manager.c: 61: }
 14295                           
 14296  001B  087D               	movf	??_INTERRUPT_InterruptManager,w
 14297  001C  0020               	movlb	0	; select bank0
 14298  001D  00FF               	movwf	127
 14299  001E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14300  001F  0009               	retfie
 14301  0020                     __end_of_INTERRUPT_InterruptManager:	
 14302                           
 14303                           	psect	text47
 14304  08CA                     __ptext47:	
 14305 ;; *************** function _I2C2_ISR *****************
 14306 ;; Defined at:
 14307 ;;		line 233 in file "mcc_generated_files/i2c2.c"
 14308 ;; Parameters:    Size  Location     Type
 14309 ;;		None
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;		None
 14312 ;; Return value:  Size  Location     Type
 14313 ;;                  1    wreg      void 
 14314 ;; Registers used:
 14315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14316 ;; Tracked objects:
 14317 ;;		On entry : 0/0
 14318 ;;		On exit  : 0/0
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14323 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14324 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;Total ram usage:        4 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; Hardware stack levels required when called:    1
 14328 ;; This function calls:
 14329 ;;		_I2C2_FunctionComplete
 14330 ;;		_I2C2_Stop
 14331 ;; This function is called by:
 14332 ;;		_INTERRUPT_InterruptManager
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336                           
 14337                           ;psect for function _I2C2_ISR
 14338  08CA                     _I2C2_ISR:	
 14339                           
 14340                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
 14341                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
 14342                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
 14343                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 14344                           ;i2c2.c: 241: PIR3bits.SSP2IF = 0;
 14345                           
 14346                           ;incstack = 0
 14347                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14348  08CA  002E               	movlb	14	; select bank14
 14349  08CB  110F               	bcf	15,2	;volatile
 14350                           
 14351                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
 14352  08CC  0023               	movlb	3	; select bank3
 14353  08CD  1F9A               	btfss	26,7	;volatile
 14354  08CE  2A04               	goto	i1l3756
 14355                           
 14356                           ;i2c2.c: 246: {
 14357                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
 14358  08CF  139A               	bcf	26,7	;volatile
 14359                           
 14360                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
 14361  08D0  0020               	movlb	0	; select bank0
 14362  08D1  01EF               	clrf	_i2c2_state
 14363                           
 14364                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
 14365  08D2  0875               	movf	_p_i2c2_current,w
 14366  08D3  3E02               	addlw	2
 14367  08D4  0086               	movwf	6
 14368  08D5  0187               	clrf	7
 14369  08D6  0801               	movf	1,w
 14370  08D7  0086               	movwf	6
 14371  08D8  0187               	clrf	7
 14372  08D9  0181               	clrf	1
 14373  08DA  0A81               	incf	1,f
 14374                           
 14375                           ;i2c2.c: 253: p_i2c2_current = (0);
 14376  08DB  01F5               	clrf	_p_i2c2_current
 14377                           
 14378                           ;i2c2.c: 255: return;
 14379  08DC  0008               	return
 14380  08DD                     i1l100:	
 14381                           ;i2c2.c: 260: {
 14382                           ;i2c2.c: 261: case S_MASTER_IDLE:
 14383                           
 14384                           ;i2c2.c: 256: }
 14385                           ;i2c2.c: 259: switch(i2c2_state)
 14386                           
 14387                           
 14388                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
 14389  08DD  18F2               	btfsc	_i2c2_object+2,1
 14390  08DE  0008               	return
 14391                           
 14392                           ;i2c2.c: 264: {
 14393                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
 14394  08DF  0871               	movf	_i2c2_object+1,w
 14395  08E0  00F9               	movwf	??_I2C2_ISR
 14396  08E1  0879               	movf	??_I2C2_ISR,w
 14397  08E2  00F5               	movwf	_p_i2c2_current
 14398                           
 14399                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
 14400  08E3  0871               	movf	_i2c2_object+1,w
 14401  08E4  0086               	movwf	6
 14402  08E5  0187               	clrf	7
 14403  08E6  0801               	movf	1,w
 14404  08E7  00F9               	movwf	??_I2C2_ISR
 14405  08E8  0879               	movf	??_I2C2_ISR,w
 14406  08E9  0021               	movlb	1	; select bank1
 14407  08EA  00E7               	movwf	_i2c2_trb_count^(0+128)
 14408                           
 14409                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
 14410  08EB  0871               	movf	_i2c2_object+1,w
 14411  08EC  0086               	movwf	6
 14412  08ED  0187               	clrf	7
 14413  08EE  3F41               	moviw [1]fsr1
 14414  08EF  00F6               	movwf	_p_i2c2_trb_current
 14415                           
 14416                           ;i2c2.c: 270: i2c2_object.pTrHead++;
 14417  08F0  3003               	movlw	3
 14418  08F1  00F9               	movwf	??_I2C2_ISR
 14419  08F2  0879               	movf	??_I2C2_ISR,w
 14420  08F3  07F1               	addwf	_i2c2_object+1,f
 14421                           
 14422                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
 14423  08F4  0871               	movf	_i2c2_object+1,w
 14424  08F5  3AEB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
 14425  08F6  1D03               	skipz
 14426  08F7  28FC               	goto	i1l3644
 14427                           
 14428                           ;i2c2.c: 274: {
 14429                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
 14430  08F8  30E8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
 14431  08F9  00F9               	movwf	??_I2C2_ISR
 14432  08FA  0879               	movf	??_I2C2_ISR,w
 14433  08FB  00F1               	movwf	_i2c2_object+1
 14434  08FC                     i1l3644:	
 14435                           
 14436                           ;i2c2.c: 277: }
 14437                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
 14438  08FC  1072               	bcf	_i2c2_object+2,0
 14439                           
 14440                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
 14441  08FD  0871               	movf	_i2c2_object+1,w
 14442  08FE  0670               	xorwf	_i2c2_object,w
 14443  08FF  1903               	btfsc	3,2
 14444                           
 14445                           ;i2c2.c: 285: {
 14446                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
 14447  0900  14F2               	bsf	_i2c2_object+2,1
 14448                           
 14449                           ;i2c2.c: 288: }
 14450                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
 14451  0901  0023               	movlb	3	; select bank3
 14452  0902  141B               	bsf	27,0	;volatile
 14453                           
 14454                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
 14455  0903  3002               	movlw	2
 14456  0904  00F9               	movwf	??_I2C2_ISR
 14457  0905  0879               	movf	??_I2C2_ISR,w
 14458  0906  0020               	movlb	0	; select bank0
 14459  0907  00EF               	movwf	_i2c2_state
 14460                           
 14461                           ;i2c2.c: 295: }
 14462                           ;i2c2.c: 297: break;
 14463  0908  0008               	return
 14464  0909                     i1l105:	
 14465                           ;i2c2.c: 299: case S_MASTER_RESTART:
 14466                           
 14467                           
 14468                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
 14469  0909  0023               	movlb	3	; select bank3
 14470  090A  149B               	bsf	27,1	;volatile
 14471                           
 14472                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
 14473  090B  3002               	movlw	2
 14474  090C  00F9               	movwf	??_I2C2_ISR
 14475  090D  0879               	movf	??_I2C2_ISR,w
 14476  090E  0020               	movlb	0	; select bank0
 14477  090F  00EF               	movwf	_i2c2_state
 14478                           
 14479                           ;i2c2.c: 309: break;
 14480  0910  0008               	return
 14481  0911                     i1l106:	
 14482                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 14483                           
 14484                           
 14485                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
 14486  0911  0023               	movlb	3	; select bank3
 14487  0912  1F1B               	btfss	27,6	;volatile
 14488  0913  291C               	goto	i1l3656
 14489                           
 14490                           ;i2c2.c: 314: {
 14491                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
 14492  0914  3001               	movlw	1
 14493  0915  00F9               	movwf	??_I2C2_ISR
 14494  0916  0879               	movf	??_I2C2_ISR,w
 14495  0917  07F4               	addwf	_i2c2_object+4,f
 14496                           
 14497                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14498  0918  3004               	movlw	4
 14499  0919  319F  27D0         	fcall	_I2C2_Stop
 14500                           
 14501                           ;i2c2.c: 317: }
 14502  091B  0008               	return
 14503  091C                     i1l3656:	
 14504                           
 14505                           ;i2c2.c: 318: else
 14506                           ;i2c2.c: 319: {
 14507                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
 14508  091C  0021               	movlb	1	; select bank1
 14509  091D  086C               	movf	(I2C2_ISR@i2c_address+1)^(0+128),w
 14510  091E  00FA               	movwf	??_I2C2_ISR+1
 14511  091F  086B               	movf	I2C2_ISR@i2c_address^(0+128),w
 14512  0920  00F9               	movwf	??_I2C2_ISR
 14513  0921  36FA               	lsrf	??_I2C2_ISR+1,f
 14514  0922  0CF9               	rrf	??_I2C2_ISR,f
 14515  0923  0879               	movf	??_I2C2_ISR,w
 14516  0924  0023               	movlb	3	; select bank3
 14517  0925  0096               	movwf	22	;volatile
 14518                           
 14519                           ;i2c2.c: 324: if(i2c_address & 0x01)
 14520  0926  0021               	movlb	1	; select bank1
 14521  0927  1C6B               	btfss	I2C2_ISR@i2c_address^(0+128),0
 14522  0928  292F               	goto	i1l3662
 14523                           
 14524                           ;i2c2.c: 325: {
 14525                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
 14526  0929  300B               	movlw	11
 14527  092A  00F9               	movwf	??_I2C2_ISR
 14528  092B  0879               	movf	??_I2C2_ISR,w
 14529  092C  0020               	movlb	0	; select bank0
 14530  092D  00EF               	movwf	_i2c2_state
 14531                           
 14532                           ;i2c2.c: 329: }
 14533  092E  0008               	return
 14534  092F                     i1l3662:	
 14535                           
 14536                           ;i2c2.c: 330: else
 14537                           ;i2c2.c: 331: {
 14538                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
 14539  092F  3003               	movlw	3
 14540  0930  00F9               	movwf	??_I2C2_ISR
 14541  0931  0879               	movf	??_I2C2_ISR,w
 14542  0932  0020               	movlb	0	; select bank0
 14543  0933  00EF               	movwf	_i2c2_state
 14544                           
 14545                           ;i2c2.c: 334: }
 14546                           ;i2c2.c: 335: }
 14547                           ;i2c2.c: 337: break;
 14548  0934  0008               	return
 14549  0935                     i1l111:	
 14550                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
 14551                           
 14552                           
 14553                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
 14554  0935  0023               	movlb	3	; select bank3
 14555  0936  1F1B               	btfss	27,6	;volatile
 14556  0937  2940               	goto	i1l112
 14557                           
 14558                           ;i2c2.c: 342: {
 14559                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
 14560  0938  3001               	movlw	1
 14561  0939  00F9               	movwf	??_I2C2_ISR
 14562  093A  0879               	movf	??_I2C2_ISR,w
 14563  093B  07F4               	addwf	_i2c2_object+4,f
 14564                           
 14565                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14566  093C  3004               	movlw	4
 14567  093D  319F  27D0         	fcall	_I2C2_Stop
 14568                           
 14569                           ;i2c2.c: 345: }
 14570  093F  0008               	return
 14571  0940                     i1l112:	
 14572                           
 14573                           ;i2c2.c: 346: else
 14574                           ;i2c2.c: 347: {
 14575                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
 14576  0940  149B               	bsf	27,1	;volatile
 14577                           
 14578                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 14579  0941  0021               	movlb	1	; select bank1
 14580  0942  086C               	movf	(I2C2_ISR@i2c_address+1)^(0+128),w
 14581  0943  00FA               	movwf	??_I2C2_ISR+1
 14582  0944  086B               	movf	I2C2_ISR@i2c_address^(0+128),w
 14583  0945  00F9               	movwf	??_I2C2_ISR
 14584  0946  087A               	movf	??_I2C2_ISR+1,w
 14585  0947  00F9               	movwf	??_I2C2_ISR
 14586  0948  01FA               	clrf	??_I2C2_ISR+1
 14587  0949  3006               	movlw	6
 14588  094A  0579               	andwf	??_I2C2_ISR,w
 14589  094B  00FB               	movwf	??_I2C2_ISR+2
 14590  094C  3000               	movlw	0
 14591  094D  057A               	andwf	??_I2C2_ISR+1,w
 14592  094E  00FC               	movwf	??_I2C2_ISR+3
 14593  094F  30F0               	movlw	240
 14594  0950  047B               	iorwf	??_I2C2_ISR+2,w
 14595  0951  00EB               	movwf	I2C2_ISR@i2c_address^(0+128)
 14596  0952  3000               	movlw	0
 14597  0953  047C               	iorwf	??_I2C2_ISR+3,w
 14598  0954  00EC               	movwf	(I2C2_ISR@i2c_address+1)^(0+128)
 14599                           
 14600                           ;i2c2.c: 357: i2c_address |= 0x0001;
 14601  0955  146B               	bsf	I2C2_ISR@i2c_address^(0+128),0
 14602                           
 14603                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
 14604  0956  01E4               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
 14605  0957  0AE4               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
 14606                           
 14607                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
 14608  0958  3002               	movlw	2
 14609  0959  00F9               	movwf	??_I2C2_ISR
 14610  095A  0879               	movf	??_I2C2_ISR,w
 14611  095B  0020               	movlb	0	; select bank0
 14612  095C  00EF               	movwf	_i2c2_state
 14613                           
 14614                           ;i2c2.c: 364: }
 14615                           ;i2c2.c: 366: break;
 14616  095D  0008               	return
 14617  095E                     i1l3676:	
 14618                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
 14619                           
 14620                           
 14621                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
 14622  095E  0021               	movlb	1	; select bank1
 14623  095F  0364               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
 14624  0960  1903               	btfsc	3,2
 14625  0961  2978               	goto	i1l3696
 14626                           
 14627                           ;i2c2.c: 382: {
 14628                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
 14629  0962  0876               	movf	_p_i2c2_trb_current,w
 14630  0963  0086               	movwf	6
 14631  0964  3001               	movlw	1	; select bank2/3
 14632  0965  0087               	movwf	7
 14633  0966  3F40               	moviw [0]fsr1
 14634  0967  00EB               	movwf	I2C2_ISR@i2c_address^(0+128)
 14635  0968  3F41               	moviw [1]fsr1
 14636  0969  00EC               	movwf	(I2C2_ISR@i2c_address+1)^(0+128)
 14637                           
 14638                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
 14639  096A  0876               	movf	_p_i2c2_trb_current,w
 14640  096B  0086               	movwf	6
 14641  096C  3001               	movlw	1	; select bank2/3
 14642  096D  0087               	movwf	7
 14643  096E  3001               	movlw	1	; select bank2/3
 14644  096F  3F43               	moviw [3]fsr1
 14645  0970  00E6               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
 14646                           
 14647                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
 14648  0971  0876               	movf	_p_i2c2_trb_current,w
 14649  0972  0086               	movwf	6
 14650  0973  3001               	movlw	1	; select bank2/3
 14651  0974  0087               	movwf	7
 14652  0975  3001               	movlw	1	; select bank2/3
 14653  0976  3F42               	moviw [2]fsr1
 14654  0977  00E5               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
 14655  0978                     i1l3696:	
 14656                           ;i2c2.c: 407: }
 14657                           ;i2c2.c: 408: }
 14658                           
 14659                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
 14660                           
 14661                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
 14662                           
 14663                           ;i2c2.c: 400: else
 14664                           ;i2c2.c: 401: {
 14665                           ;i2c2.c: 403: SSP2BUF = i2c_address;
 14666                           
 14667                           ;i2c2.c: 399: }
 14668                           
 14669                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 14670                           
 14671                           ;i2c2.c: 393: {
 14672                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 14673                           
 14674                           ;i2c2.c: 391: {
 14675                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
 14676                           
 14677                           ;i2c2.c: 387: }
 14678                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
 14679                           
 14680                           
 14681                           ;i2c2.c: 409: else
 14682                           ;i2c2.c: 410: {
 14683                           ;i2c2.c: 412: SSP2BUF = i2c_address;
 14684  0978  086B               	movf	I2C2_ISR@i2c_address^(0+128),w
 14685  0979  0023               	movlb	3	; select bank3
 14686  097A  0096               	movwf	22	;volatile
 14687                           
 14688                           ;i2c2.c: 413: if(i2c_address & 0x01)
 14689  097B  0021               	movlb	1	; select bank1
 14690  097C  1C6B               	btfss	I2C2_ISR@i2c_address^(0+128),0
 14691  097D  2984               	goto	i1l3702
 14692                           
 14693                           ;i2c2.c: 414: {
 14694                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
 14695  097E  3005               	movlw	5
 14696  097F  00F9               	movwf	??_I2C2_ISR
 14697  0980  0879               	movf	??_I2C2_ISR,w
 14698  0981  0020               	movlb	0	; select bank0
 14699  0982  00EF               	movwf	_i2c2_state
 14700                           
 14701                           ;i2c2.c: 417: }
 14702  0983  0008               	return
 14703  0984                     i1l3702:	
 14704                           
 14705                           ;i2c2.c: 418: else
 14706                           ;i2c2.c: 419: {
 14707                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
 14708  0984  3003               	movlw	3
 14709  0985  00F9               	movwf	??_I2C2_ISR
 14710  0986  0879               	movf	??_I2C2_ISR,w
 14711  0987  0020               	movlb	0	; select bank0
 14712  0988  00EF               	movwf	_i2c2_state
 14713                           
 14714                           ;i2c2.c: 422: }
 14715                           ;i2c2.c: 423: }
 14716                           ;i2c2.c: 424: break;
 14717  0989  0008               	return
 14718  098A                     i1l122:	
 14719                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
 14720                           
 14721                           
 14722                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
 14723  098A  0023               	movlb	3	; select bank3
 14724  098B  1F1B               	btfss	27,6	;volatile
 14725  098C  2996               	goto	i1l3710
 14726                           
 14727                           ;i2c2.c: 430: {
 14728                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
 14729  098D  3001               	movlw	1
 14730  098E  00F9               	movwf	??_I2C2_ISR
 14731  098F  0879               	movf	??_I2C2_ISR,w
 14732  0990  07F4               	addwf	_i2c2_object+4,f
 14733                           
 14734                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
 14735  0991  131B               	bcf	27,6	;volatile
 14736                           
 14737                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
 14738  0992  3005               	movlw	5
 14739  0993  319F  27D0         	fcall	_I2C2_Stop
 14740                           
 14741                           ;i2c2.c: 440: }
 14742  0995  0008               	return
 14743  0996                     i1l3710:	
 14744                           
 14745                           ;i2c2.c: 441: else
 14746                           ;i2c2.c: 442: {
 14747                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
 14748  0996  3001               	movlw	1
 14749  0997  0021               	movlb	1	; select bank1
 14750  0998  02E5               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 14751  0999  0A65               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
 14752  099A  1D03               	btfss	3,2
 14753  099B  29B0               	goto	i1l3718
 14754                           
 14755                           ;i2c2.c: 445: {
 14756                           ;i2c2.c: 449: p_i2c2_trb_current++;
 14757  099C  3004               	movlw	4
 14758  099D  00F9               	movwf	??_I2C2_ISR
 14759  099E  0879               	movf	??_I2C2_ISR,w
 14760  099F  07F6               	addwf	_p_i2c2_trb_current,f
 14761                           
 14762                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
 14763  09A0  3001               	movlw	1
 14764  09A1  02E7               	subwf	_i2c2_trb_count^(0+128),f
 14765  09A2  1D03               	btfss	3,2
 14766  09A3  29A8               	goto	i1l126
 14767                           
 14768                           ;i2c2.c: 453: {
 14769                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 14770  09A4  3000               	movlw	0
 14771  09A5  319F  27D0         	fcall	_I2C2_Stop
 14772                           
 14773                           ;i2c2.c: 455: }
 14774  09A7  0008               	return
 14775  09A8                     i1l126:	
 14776                           
 14777                           ;i2c2.c: 456: else
 14778                           ;i2c2.c: 457: {
 14779                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
 14780  09A8  0023               	movlb	3	; select bank3
 14781  09A9  149B               	bsf	27,1	;volatile
 14782                           
 14783                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
 14784  09AA  3002               	movlw	2
 14785  09AB  00F9               	movwf	??_I2C2_ISR
 14786  09AC  0879               	movf	??_I2C2_ISR,w
 14787  09AD  0020               	movlb	0	; select bank0
 14788  09AE  00EF               	movwf	_i2c2_state
 14789                           
 14790                           ;i2c2.c: 469: }
 14791                           ;i2c2.c: 470: }
 14792  09AF  0008               	return
 14793  09B0                     i1l3718:	
 14794                           
 14795                           ;i2c2.c: 471: else
 14796                           ;i2c2.c: 472: {
 14797                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
 14798  09B0  0021               	movlb	1	; select bank1
 14799  09B1  0866               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 14800  09B2  0086               	movwf	6
 14801  09B3  0187               	clrf	7
 14802  09B4  0801               	movf	1,w
 14803  09B5  0023               	movlb	3	; select bank3
 14804  09B6  0096               	movwf	22	;volatile
 14805  09B7  3001               	movlw	1
 14806  09B8  00F9               	movwf	??_I2C2_ISR
 14807  09B9  0879               	movf	??_I2C2_ISR,w
 14808  09BA  0021               	movlb	1	; select bank1
 14809  09BB  07E6               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 14810                           
 14811                           ;i2c2.c: 475: }
 14812                           ;i2c2.c: 476: }
 14813                           ;i2c2.c: 477: break;
 14814  09BC  0008               	return
 14815  09BD                     i1l129:	
 14816                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
 14817                           
 14818                           
 14819                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
 14820  09BD  0023               	movlb	3	; select bank3
 14821  09BE  1F1B               	btfss	27,6	;volatile
 14822  09BF  29CA               	goto	i1l130
 14823                           
 14824                           ;i2c2.c: 483: {
 14825                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
 14826  09C0  3001               	movlw	1
 14827  09C1  00F9               	movwf	??_I2C2_ISR
 14828  09C2  0879               	movf	??_I2C2_ISR,w
 14829  09C3  07F4               	addwf	_i2c2_object+4,f
 14830                           
 14831                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
 14832  09C4  3004               	movlw	4
 14833  09C5  319F  27D0         	fcall	_I2C2_Stop
 14834                           
 14835                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
 14836  09C7  0023               	movlb	3	; select bank3
 14837  09C8  131B               	bcf	27,6	;volatile
 14838                           
 14839                           ;i2c2.c: 493: }
 14840  09C9  0008               	return
 14841  09CA                     i1l130:	
 14842                           
 14843                           ;i2c2.c: 494: else
 14844                           ;i2c2.c: 495: {
 14845                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
 14846  09CA  159B               	bsf	27,3	;volatile
 14847                           
 14848                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
 14849  09CB  3008               	movlw	8
 14850  09CC  00F9               	movwf	??_I2C2_ISR
 14851  09CD  0879               	movf	??_I2C2_ISR,w
 14852  09CE  0020               	movlb	0	; select bank0
 14853  09CF  00EF               	movwf	_i2c2_state
 14854                           
 14855                           ;i2c2.c: 498: }
 14856                           ;i2c2.c: 499: break;
 14857  09D0  0008               	return
 14858  09D1                     i1l3730:	
 14859                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
 14860                           
 14861                           
 14862                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
 14863  09D1  3008               	movlw	8
 14864  09D2  00F9               	movwf	??_I2C2_ISR
 14865  09D3  0879               	movf	??_I2C2_ISR,w
 14866  09D4  00EF               	movwf	_i2c2_state
 14867                           
 14868                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
 14869  09D5  0023               	movlb	3	; select bank3
 14870  09D6  159B               	bsf	27,3	;volatile
 14871                           
 14872                           ;i2c2.c: 511: break;
 14873  09D7  0008               	return
 14874  09D8                     i1l3734:	
 14875                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
 14876                           
 14877                           
 14878                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
 14879  09D8  0023               	movlb	3	; select bank3
 14880  09D9  0816               	movf	22,w	;volatile
 14881  09DA  00F9               	movwf	??_I2C2_ISR
 14882  09DB  0021               	movlb	1	; select bank1
 14883  09DC  0866               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
 14884  09DD  0086               	movwf	6
 14885  09DE  0187               	clrf	7
 14886  09DF  0879               	movf	??_I2C2_ISR,w
 14887  09E0  0081               	movwf	1
 14888  09E1  3001               	movlw	1
 14889  09E2  00F9               	movwf	??_I2C2_ISR
 14890  09E3  0879               	movf	??_I2C2_ISR,w
 14891  09E4  07E6               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
 14892                           
 14893                           ;i2c2.c: 519: if(--i2c_bytes_left)
 14894  09E5  3001               	movlw	1
 14895  09E6  02E5               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
 14896  09E7  1903               	btfsc	3,2
 14897  09E8  29F1               	goto	i1l134
 14898                           
 14899                           ;i2c2.c: 520: {
 14900                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
 14901  09E9  0023               	movlb	3	; select bank3
 14902  09EA  129B               	bcf	27,5	;volatile
 14903                           
 14904                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
 14905  09EB  3006               	movlw	6
 14906  09EC  00F9               	movwf	??_I2C2_ISR
 14907  09ED  0879               	movf	??_I2C2_ISR,w
 14908  09EE  0020               	movlb	0	; select bank0
 14909  09EF  00EF               	movwf	_i2c2_state
 14910                           
 14911                           ;i2c2.c: 530: }
 14912  09F0  29F5               	goto	i1l3746
 14913  09F1                     i1l134:	
 14914                           
 14915                           ;i2c2.c: 531: else
 14916                           ;i2c2.c: 532: {
 14917                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
 14918  09F1  0023               	movlb	3	; select bank3
 14919  09F2  169B               	bsf	27,5	;volatile
 14920                           
 14921                           ;i2c2.c: 538: I2C2_FunctionComplete();
 14922  09F3  319F  27A6         	fcall	_I2C2_FunctionComplete
 14923  09F5                     i1l3746:	
 14924                           
 14925                           ;i2c2.c: 539: }
 14926                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
 14927  09F5  0023               	movlb	3	; select bank3
 14928  09F6  161B               	bsf	27,4	;volatile
 14929                           
 14930                           ;i2c2.c: 543: break;
 14931  09F7  0008               	return
 14932  09F8                     i1l3748:	
 14933                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
 14934                           
 14935                           
 14936                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
 14937                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
 14938  09F8  3000               	movlw	0
 14939  09F9  319F  27D0         	fcall	_I2C2_Stop
 14940                           
 14941                           ;i2c2.c: 550: break;
 14942  09FB  0008               	return
 14943  09FC                     i1l3750:	
 14944                           ;i2c2.c: 552: default:
 14945                           
 14946                           
 14947                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
 14948  09FC  3001               	movlw	1
 14949  09FD  00F9               	movwf	??_I2C2_ISR
 14950  09FE  0879               	movf	??_I2C2_ISR,w
 14951  09FF  07F4               	addwf	_i2c2_object+4,f
 14952                           
 14953                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
 14954  0A00  3006               	movlw	6
 14955  0A01  319F  27D0         	fcall	_I2C2_Stop
 14956                           
 14957                           ;i2c2.c: 560: }
 14958                           
 14959                           ;i2c2.c: 558: break;
 14960  0A03  0008               	return
 14961  0A04                     i1l3756:	
 14962  0A04  0020               	movlb	0	; select bank0
 14963  0A05  086F               	movf	_i2c2_state,w
 14964                           
 14965                           ; Switch size 1, requested type "space"
 14966                           ; Number of cases is 11, Range of values is 0 to 11
 14967                           ; switch strategies available:
 14968                           ; Name         Instructions Cycles
 14969                           ; direct_byte           30     6 (fixed)
 14970                           ; simple_byte           34    18 (average)
 14971                           ; jumptable            260     6 (fixed)
 14972                           ;	Chosen strategy is direct_byte
 14973  0A06  0084               	movwf	4
 14974  0A07  300C               	movlw	12
 14975  0A08  0204               	subwf	4,w
 14976  0A09  1803               	skipnc
 14977  0A0A  29FC               	goto	i1l3750
 14978  0A0B  319A               	movlp	high i1S4674
 14979  0A0C  3504               	lslf	4,w
 14980  0A0D  3E4A               	addlw	low i1S4674
 14981  0A0E  0082               	movwf	2
 14982  0A0F  0008               	return
 14983  0A10                     __end_of_I2C2_ISR:	
 14984                           
 14985                           	psect	swtext1
 14986  1A4A                     __pswtext1:	
 14987  1A4A                     i1S4674:	
 14988  1A4A  3188  28DD         	ljmp	i1l100
 14989  1A4C  3189  2909         	ljmp	i1l105
 14990  1A4E  3189  295E         	ljmp	i1l3676
 14991  1A50  3189  298A         	ljmp	i1l122
 14992  1A52  3189  29F8         	ljmp	i1l3748
 14993  1A54  3189  29BD         	ljmp	i1l129
 14994  1A56  3189  29D1         	ljmp	i1l3730
 14995  1A58  3189  29F8         	ljmp	i1l3748
 14996  1A5A  3189  29D8         	ljmp	i1l3734
 14997  1A5C  3189  29FC         	ljmp	i1l3750
 14998  1A5E  3189  2911         	ljmp	i1l106
 14999  1A60  3189  2935         	ljmp	i1l111
 15000                           
 15001                           	psect	text48
 15002  1FD0                     __ptext48:	
 15003 ;; *************** function _I2C2_Stop *****************
 15004 ;; Defined at:
 15005 ;;		line 581 in file "mcc_generated_files/i2c2.c"
 15006 ;; Parameters:    Size  Location     Type
 15007 ;;  completion_c    1    wreg     enum E14254
 15008 ;; Auto vars:     Size  Location     Type
 15009 ;;  completion_c    1    1[COMMON] enum E14254
 15010 ;; Return value:  Size  Location     Type
 15011 ;;                  1    wreg      void 
 15012 ;; Registers used:
 15013 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15014 ;; Tracked objects:
 15015 ;;		On entry : 0/0
 15016 ;;		On exit  : 0/0
 15017 ;;		Unchanged: 0/0
 15018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;Total ram usage:        2 bytes
 15024 ;; Hardware stack levels used:    1
 15025 ;; This function calls:
 15026 ;;		Nothing
 15027 ;; This function is called by:
 15028 ;;		_I2C2_ISR
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           
 15033                           ;psect for function _I2C2_Stop
 15034  1FD0                     _I2C2_Stop:	
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 15038                           ;I2C2_Stop@completion_code stored from wreg
 15039  1FD0  00F8               	movwf	I2C2_Stop@completion_code
 15040                           
 15041                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
 15042  1FD1  0023               	movlb	3	; select bank3
 15043  1FD2  151B               	bsf	27,2	;volatile
 15044                           
 15045                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
 15046  1FD3  0875               	movf	_p_i2c2_current,w
 15047  1FD4  3E02               	addlw	2
 15048  1FD5  0086               	movwf	6
 15049  1FD6  0187               	clrf	7
 15050  1FD7  0801               	movf	1,w
 15051  1FD8  1903               	btfsc	3,2
 15052  1FD9  2FE5               	goto	i1l3216
 15053                           
 15054                           ;i2c2.c: 588: {
 15055                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
 15056  1FDA  0878               	movf	I2C2_Stop@completion_code,w
 15057  1FDB  00F7               	movwf	??_I2C2_Stop
 15058  1FDC  0875               	movf	_p_i2c2_current,w
 15059  1FDD  3E02               	addlw	2
 15060  1FDE  0086               	movwf	6
 15061  1FDF  0187               	clrf	7
 15062  1FE0  0801               	movf	1,w
 15063  1FE1  0086               	movwf	6
 15064  1FE2  0187               	clrf	7
 15065  1FE3  0877               	movf	??_I2C2_Stop,w
 15066  1FE4  0081               	movwf	1
 15067  1FE5                     i1l3216:	
 15068                           
 15069                           ;i2c2.c: 591: }
 15070                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
 15071  1FE5  0020               	movlb	0	; select bank0
 15072  1FE6  01EF               	clrf	_i2c2_state
 15073  1FE7  0008               	return
 15074  1FE8                     __end_of_I2C2_Stop:	
 15075                           
 15076                           	psect	text49
 15077  1FA6                     __ptext49:	
 15078 ;; *************** function _I2C2_FunctionComplete *****************
 15079 ;; Defined at:
 15080 ;;		line 563 in file "mcc_generated_files/i2c2.c"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;		None
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;		None
 15085 ;; Return value:  Size  Location     Type
 15086 ;;                  1    wreg      void 
 15087 ;; Registers used:
 15088 ;;		wreg, status,2, status,0
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;Total ram usage:        1 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; This function calls:
 15101 ;;		Nothing
 15102 ;; This function is called by:
 15103 ;;		_I2C2_ISR
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           
 15108                           ;psect for function _I2C2_FunctionComplete
 15109  1FA6                     _I2C2_FunctionComplete:	
 15110                           
 15111                           ;i2c2.c: 567: p_i2c2_trb_current++;
 15112                           
 15113                           ;incstack = 0
 15114                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
 15115  1FA6  3004               	movlw	4
 15116  1FA7  00F7               	movwf	??_I2C2_FunctionComplete
 15117  1FA8  0877               	movf	??_I2C2_FunctionComplete,w
 15118  1FA9  07F6               	addwf	_p_i2c2_trb_current,f
 15119                           
 15120                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
 15121  1FAA  3001               	movlw	1
 15122  1FAB  0021               	movlb	1	; select bank1
 15123  1FAC  02E7               	subwf	_i2c2_trb_count^(0+128),f
 15124  1FAD  1D03               	btfss	3,2
 15125  1FAE  2FB5               	goto	i1l141
 15126                           
 15127                           ;i2c2.c: 571: {
 15128                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 15129  1FAF  3004               	movlw	4
 15130  1FB0  00F7               	movwf	??_I2C2_FunctionComplete
 15131  1FB1  0877               	movf	??_I2C2_FunctionComplete,w
 15132  1FB2  0020               	movlb	0	; select bank0
 15133  1FB3  00EF               	movwf	_i2c2_state
 15134                           
 15135                           ;i2c2.c: 573: }
 15136  1FB4  0008               	return
 15137  1FB5                     i1l141:	
 15138                           
 15139                           ;i2c2.c: 574: else
 15140                           ;i2c2.c: 575: {
 15141                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 15142  1FB5  0020               	movlb	0	; select bank0
 15143  1FB6  01EF               	clrf	_i2c2_state
 15144  1FB7  0AEF               	incf	_i2c2_state,f
 15145  1FB8  0008               	return
 15146  1FB9                     __end_of_I2C2_FunctionComplete:	
 15147                           
 15148                           	psect	text50
 15149  0003                     __ptext50:	
 15150 ;; *************** function _I2C2_BusCollisionISR *****************
 15151 ;; Defined at:
 15152 ;;		line 728 in file "mcc_generated_files/i2c2.c"
 15153 ;; Parameters:    Size  Location     Type
 15154 ;;		None
 15155 ;; Auto vars:     Size  Location     Type
 15156 ;;		None
 15157 ;; Return value:  Size  Location     Type
 15158 ;;                  1    wreg      void 
 15159 ;; Registers used:
 15160 ;;		None
 15161 ;; Tracked objects:
 15162 ;;		On entry : 0/0
 15163 ;;		On exit  : 0/0
 15164 ;;		Unchanged: 0/0
 15165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;Total ram usage:        0 bytes
 15171 ;; Hardware stack levels used:    1
 15172 ;; This function calls:
 15173 ;;		Nothing
 15174 ;; This function is called by:
 15175 ;;		_INTERRUPT_InterruptManager
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           
 15180                           ;psect for function _I2C2_BusCollisionISR
 15181  0003                     _I2C2_BusCollisionISR:	
 15182                           
 15183                           ;incstack = 0
 15184                           ; Regs used in _I2C2_BusCollisionISR: []
 15185  0003  0008               	return
 15186  0004                     __end_of_I2C2_BusCollisionISR:	
 15187  007E                     btemp	set	126	;btemp
 15188  007E                     int$flags	set	126
 15189  007E                     wtemp0	set	126


Data Sizes:
    Strings     580
    Constant    150
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     79      80
    BANK1            80     68      77
    BANK2            80      0      20
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    EMC1001_Read@trb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_tr_queue.pTrFlag	PTR enum E14254 size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    cputs@s	PTR const unsigned char  size(2) Largest target is 75
		 -> STR_3(CODE[75]), STR_2(CODE[42]), 

    puts@s	PTR const unsigned char  size(2) Largest target is 75
		 -> STR_3(CODE[75]), STR_2(CODE[42]), 

    printf$861	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_20(CODE[7]), STR_14(CODE[9]), STR_13(CODE[8]), STR_6(CODE[1]), 
		 -> STR_5(CODE[3]), EMC1001_PrintInfo@data(BANK1[1]), I2C2_ISR@i2c_address(BANK1[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 65
		 -> STR_19(CODE[30]), STR_18(CODE[27]), STR_17(CODE[22]), STR_16(CODE[32]), 
		 -> STR_15(CODE[33]), STR_12(CODE[20]), STR_11(CODE[53]), STR_10(CODE[65]), 
		 -> STR_9(CODE[55]), STR_8(CODE[16]), STR_7(CODE[23]), STR_4(CODE[24]), 
		 -> STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    EMC1001_PrintInfo$788	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_14(CODE[9]), STR_13(CODE[8]), 

    EMC1001_PrintInfo$778	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[1]), STR_5(CODE[3]), 

    F14419.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    EMC1001_Read@pData	PTR unsigned char  size(1) Largest target is 1
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Read@reg(BANK0[1]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 1
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E14254 size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E14254 size(1) Largest target is 1
		 -> EMC1001_Write@status(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    F14366.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    F14361.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 
		 -> NULL(NULL[0]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 
		 -> NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E14254 size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    S87$pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    p_i2c2_current.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    S99$pTrFlag	PTR enum E14254 size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E14254 size(1) Largest target is 2
		 -> EMC1001_PrintTemp@templo(BANK1[1]), EMC1001_PrintTemp@temp(BANK1[1]), EMC1001_PrintInfo@templo(BANK1[1]), EMC1001_PrintInfo@temp(BANK1[1]), 
		 -> EMC1001_PrintInfo@data(BANK1[1]), EMC1001_THERM2@data(BANK0[1]), EMC1001_StandbyMode@data(BANK0[1]), EMC1001_MASK1@data(BANK0[1]), 
		 -> EMC1001_Write@buffer(BANK0[2]), EMC1001_Write@status(BANK0[1]), EMC1001_Read@reg(BANK0[1]), EMC1001_Read@status(BANK0[1]), 

    S99$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> EMC1001_Write@trb(BANK2[4]), EMC1001_Read@trb(BANK2[8]), I2C2_MasterRead@trBlock(BANK2[4]), I2C2_MasterWrite@trBlock(BANK2[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S110$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S110$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C2_ISR
    _I2C2_ISR->_I2C2_Stop

Critical Paths under _main in BANK0

    _main->_EMC1001_PrintTemp
    _puts->_cputs
    _cputs->_putch
    _SYSTEM_Initialize->_I2C2_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _EMC1001_THERM2->_EMC1001_Write
    _EMC1001_StandbyMode->_EMC1001_Write
    _EMC1001_SetThermLimit->_EMC1001_Write
    _EMC1001_SetThermHysteresis->_EMC1001_Write
    _EMC1001_SetTempLowLimit->___awdiv
    _EMC1001_SetTempHighLimit->___awdiv
    _EMC1001_SetConversionRate->_EMC1001_Write
    _EMC1001_SMBusTimeout->_EMC1001_Write
    _EMC1001_PrintTemp->_printf
    _EMC1001_PrintInfo->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_EUSART_Write
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _EMC1001_MASK1->_EMC1001_Write
    _EMC1001_Write->_I2C2_MasterWriteTRBBuild
    _EMC1001_Read->_I2C2_MasterReadTRBBuild
    _EMC1001_Read->_I2C2_MasterWriteTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_EMC1001_PrintInfo
    _EMC1001_PrintTemp->_printf
    _EMC1001_PrintInfo->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  213723
                                             66 BANK1      2     2      0
                      _EMC1001_MASK1
                  _EMC1001_PrintInfo
                  _EMC1001_PrintTemp
               _EMC1001_SMBusTimeout
          _EMC1001_SetConversionRate
           _EMC1001_SetTempHighLimit
            _EMC1001_SetTempLowLimit
         _EMC1001_SetThermHysteresis
              _EMC1001_SetThermLimit
                _EMC1001_StandbyMode
                     _EMC1001_THERM2
                  _SYSTEM_Initialize
                             _printf
                               _puts
 ---------------------------------------------------------------------------------
 (1) _puts                                                 2     0      2     451
                                              5 BANK0      2     0      2
                              _cputs
                              _putch
 ---------------------------------------------------------------------------------
 (2) _cputs                                                3     1      2     204
                                              2 BANK0      3     1      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                  _EUSART_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EMC1001_THERM2                                       3     3      0    6196
                                             15 BANK0      3     3      0
                       _EMC1001_Read
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_StandbyMode                                  3     3      0    6196
                                             15 BANK0      3     3      0
                       _EMC1001_Read
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetThermLimit                                2     2      0    2733
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetThermHysteresis                           2     2      0    2733
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetTempLowLimit                              6     5      1    4700
                                             16 BANK0      6     5      1
                      _EMC1001_Write
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetTempHighLimit                             6     5      1    4700
                                             16 BANK0      6     5      1
                      _EMC1001_Write
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SetConversionRate                            2     2      0    2755
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_SMBusTimeout                                 2     2      0    2733
                                             15 BANK0      2     2      0
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (1) _EMC1001_PrintTemp                                    6     6      0   57984
                                             77 BANK0      2     2      0
                                             41 BANK1      4     4      0
                       _EMC1001_Read
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _EMC1001_PrintInfo                                   27    27      0   65695
                                             41 BANK1     25    25      0
                       _EMC1001_Read
                           ___awtoft
                            ___ftmul
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              50    38     12   50617
                                             71 BANK0      6     6      0
                                              0 BANK1     41    29     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3   11975
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3   11696
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3678
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4316
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1836
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     431
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2203
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     671
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     674
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     444
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3416
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3166
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2225
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _EMC1001_MASK1                                        3     3      0    6196
                                             15 BANK0      3     3      0
                       _EMC1001_Read
                      _EMC1001_Write
 ---------------------------------------------------------------------------------
 (2) _EMC1001_Write                                        8     7      1    2711
                                              7 BANK0      8     7      1
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (2) _EMC1001_Read                                         6     5      1    3390
                                              7 BANK0      6     5      1
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWriteTRBBuild                             7     3      4     798
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterTRBInsert                                 4     2      2     644
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterReadTRBBuild                              7     3      4     598
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              6 COMMON     1     1      0
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (7) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EMC1001_MASK1
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_PrintInfo
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___awtoft
       ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _EMC1001_PrintTemp
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _EUSART_Write
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _EMC1001_SMBusTimeout
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_SetConversionRate
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_SetTempHighLimit
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___awdiv
       ___awmod (ARG)
   _EMC1001_SetTempLowLimit
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     ___awdiv
       ___awmod (ARG)
   _EMC1001_SetThermHysteresis
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_SetThermLimit
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_StandbyMode
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _EMC1001_THERM2
     _EMC1001_Read
       _I2C2_MasterReadTRBBuild
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
     _EMC1001_Write
       _I2C2_MasterTRBInsert
       _I2C2_MasterWriteTRBBuild
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _EUSART_Write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _puts
     _cputs
       _putch
         _EUSART_Write
     _putch
       _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      4D       7       96.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      14       9       25.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BF      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BF      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jun 27 09:20:50 2017

                                  pc 0002                          __CFG_CP$OFF 0000  
              ?_I2C2_MasterTRBInsert 0020                                   l31 1F56  
                       ___awdiv@sign 002D    __size_of_EMC1001_SetTempHighLimit 0030  
                ___wmul@multiplicand 0032            ?_EMC1001_SetTempHighLimit 0030  
       ??_EMC1001_SetThermHysteresis 002F       I2C2_MasterReadTRBBuild@address 0022  
                       ___ftadd@exp1 0060                         ___ftadd@exp2 005F  
                        __CFG_LVP$ON 0000                          __CFG_ZCD$ON 0000  
                       ___ftadd@sign 005E                                  l500 00B6  
                                l501 00B7                                  l512 0579  
                                l353 1362                                  l515 0259  
                                l367 1315                                  l560 0608  
                                l555 05CE                                  l580 0740  
                                l565 0685                                  l662 1015  
                                l840 14B6                                  l496 00B4  
                                l907 07EB                                  l828 17F4  
                                l847 14C9                                  l871 168C  
                                l848 14D1                                  l948 15D3  
                                l897 0772                                  _GIE 005F  
                       __CFG_CPD$OFF 0000                    EMC1001_Read@pData 0027  
              __size_of_EMC1001_Read 004D          __end_of_EMC1001_StandbyMode 1088  
                EMC1001_MASK1@enable 0030     __size_of_EMC1001_SetTempLowLimit 0030  
                       ___awmod@sign 0026                         __CFG_BORV$LO 0000  
                                wreg 0009               __size_of_EMC1001_MASK1 0021  
                   __end_of_I2C2_ISR 0A10                                 l3000 07E2  
                               l3002 07EE                                 l3012 1701  
                               l3102 157F                                 l3120 15AF  
                               l3130 15D6                                 l3122 15BD  
                               l3018 171E                                 l3036 17B1  
                               l3028 1769                                 l3134 15E4  
                               l3054 17EB                                 l3046 17D0  
                               l3064 11BB                                 l3128 15CA  
                               l3144 13EE                                 l3056 17F7  
                               l3048 17DE                                 l4112 0EC3  
                               l2610 149D                                 l3154 141C  
                               l3146 13FC                                 l3170 11F7  
                               l4130 0FE3                                 l4106 0E64  
                               l2620 14C3                                 l2612 14A2  
                               l2604 148C                                 l3068 11D1  
                               l4124 0F84                                 l4116 0EE0  
                               l3158 1427                                 l3174 120F  
                               l2702 1274                                 l4142 1FA4  
                               l2608 1493                                 l3168 11E9  
                               l2720 1299                                 l4400 047A  
                               l4320 01EB                                 l4304 0187  
                               l2618 14BB                                 l3178 121A  
                               l3186 10F3                                 l2714 1281  
                               l2706 127B                                 l4058 100F  
                               l4090 0B49                                 l4082 0AD1  
                               l3188 1103                                 l2716 128D  
                               l2724 12A2                                 l4412 056B  
                               l4252 0078                                 l4500 1FB9  
                               l2742 161C                                 l4158 1030  
                               l2830 0886                                 l2814 0843  
                               l4342 02C5                                 l4334 028E  
                               l4270 00D0                                 l4254 00AF  
                               l4238 0066                                 l3552 1373  
                               l3608 10B4                                 l2760 1645  
                               l2664 13A1                                 l2728 12AA  
                               l2808 082D                                 l4432 05BF  
                               l4416 0574                                 l4360 0379  
                               l4328 023D                                 l4272 00DE  
                               l4520 0BA0                                 l2770 1667  
                               l2738 1615                                 l2690 13D8  
                               l2682 13C7                                 l2674 13A9  
                               l2658 1396                                 l2842 08A2  
                               l2826 087E                                 l4346 02DE  
                               l4282 00EE                                 l4266 00CE  
                               l4258 00B9                                 l3804 105D  
                               l2780 1688                                 l2772 166B  
                               l2748 162B                                 l2676 13B5  
                               l4460 0642                                 l4428 05A8  
                               l4372 03B6                                 l4356 0324  
                               l4532 0C25                                 l4524 0BBC  
                               l4516 0B91                                 l2870 1257  
                               l3566 1384                                 l3582 1326  
                               l2766 1658                                 l2686 13D0  
                               l2838 089A                                 l4462 064B  
                               l4382 03C7                                 l4366 037F  
                               l4294 0143                                 l4286 0105  
                               l4550 0CDD                                 l4542 0CAE  
                               l2872 125C                                 l2784 169E  
                               l2768 1662                                 l2960 075A  
                               l4480 070E                                 l4472 0695  
                               l4384 0439                                 l4288 012F  
                               l4544 0CC2                                 l4536 0C6A  
                               l4528 0BD8                                 l3832 109F  
                               l4640 154E                                 l2866 1250  
                               l2778 167E                                 l4474 06D9  
                               l4490 072B                                 l4466 0669  
                               l4394 045F                                 l4554 0CEC  
                               l3842 116C                                 l3818 107E  
                               l4642 1558                                 l2876 1263  
                               l3596 1337                                 l2788 16B0  
                               l4388 0442                                 l4492 0044  
                               l4564 0D37                                 l3852 119C  
                               l4628 1522                                 l2798 16CB  
                               l2982 07AD                                 l2974 0793  
                               l4574 0D82                                 l3790 0810  
                               l2992 07C7                                 l4488 0727  
                               l4592 145C                                 l2994 07D5  
                               l4578 0D9E                                 STR_1 1AF0  
                               STR_2 1918                                 STR_3 1820  
                               STR_4 1A32                                 STR_5 1AED  
                               STR_6 1A31                                 STR_7 1A62  
                               STR_8 1AC5                                 STR_9 18AC  
                               _LATA 0016                                 _LATB 0017  
                               _LATC 0018                                 u3035 1284  
                               u3215 1659                                 u4015 13FD  
                               u3055 1293                                 u4025 1411  
                               u3065 129A                                 u4035 141D  
                               u4115 10F8                                 u3245 166C  
                               u3415 08A3                                 u5015 1164  
                               u3185 1646                                 u4065 11EC  
                               u3425 08A9                                 u3345 084F  
                               u3275 167F                                 u3355 085F  
                               u5035 1194                         printf@tmpval 00BB  
                               u4085 1205                                 u3605 0794  
                               u4095 1210                                 u3615 07A4  
                               u3375 0887                                 u6015 0639  
                               u3625 07AE                                 u3385 088D  
                               u2835 14D8                                 u2755 1498  
                               u6035 065F                                 u6045 067D  
                               u6205 0C4E                                 u2775 14B1  
                               u3815 17EC                                 u3735 176A  
                               u2935 13AC                                 u6215 0C5C  
                               u3745 1794                                 u3665 07C8  
                               u2795 14BE                                 u2955 13B6  
                               u6315 0D52                                 u6155 0BF4  
                               u6244 0C8C                                 u3925 15B0  
                               u2965 13C0                                 u6245 0C8A  
                               u6165 0C01                                 u4750 133C  
                               u3695 07E3                                 u2975 13C8  
                               u5455 1016                                 u6175 0C0F  
                               u3785 17D1                                 u5465 101B  
                               u6265 0CD3                                 u6417 155E  
                               u4690 1389                                 u6370 154C  
                               u3955 15CB                                 u6195 0C41  
                               u6355 144A                                 u5590 12F4  
                               u6390 1556                                 u3895 1586  
                               u5815 02C3                                 u5735 019C  
                               u6295 0D07                                 u3995 13F1  
                               u5675 00E8                                 u5845 03AA  
                               u5775 0265                                 u5785 029A  
                               u5885 044D                                 u5895 045B  
                               u5985 05FF                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 14E8  
             __size_of_EMC1001_Write 0048                         ___ftpack@arg 0020  
                       ___ftpack@exp 0023                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               _puts 1000          I2C2_MasterReadTRBBuild@ptrb 0026  
                      __CFG_BOREN$ON 0000                                 start 0020  
                 EMC1001_Read@status 002C                _EMC1001_SetThermLimit 1F68  
__size_of_EMC1001_SetThermHysteresis 000A                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0044  
                       ___ftmul@sign 0045                         _EMC1001_Read 133E  
                       ___fttol@exp1 005C                         ___fttol@lval 0058  
                         _i2c2_state 006F                        ?_EUSART_Write 0077  
     __size_of_OSCILLATOR_Initialize 0009        __end_of_OSCILLATOR_Initialize 0800  
            _I2C2_MasterReadTRBBuild 1118              __size_of_EMC1001_THERM2 0021  
                              ?_main 0077                      __end_of___awdiv 13DD  
                    __end_of___ftadd 16E3                                STR_10 186B  
                              STR_11 18E3                                STR_20 1AE6  
                              STR_12 1A8F                                STR_13 1ADE  
                              STR_21 1AA3                                STR_14 1AD5  
                              STR_22 1AB4                                STR_15 19B8  
                              STR_16 19D9                                STR_17 1A79  
                      __CFG_WDTE$OFF 0000                                STR_18 1A17  
                              STR_19 19F9                      __end_of___awmod 12AF  
                  __end_of_I2C2_Stop 1FE8                      __end_of___ftneg 1F54  
                              ?_puts 0025                      __end_of___lldiv 1430  
                    __end_of___ftmul 08CA                      ___awdiv@divisor 0027  
                    __end_of___llmod 1223                      __end_of___ftsub 1046  
                    __end_of___fttol 15ED                                i1l100 08DD  
                              i1l111 0935                                i1l112 0940  
                              i1l105 0909                                i1l130 09CA  
                              i1l122 098A                                i1l106 0911  
                              i1l202 0013                                i1l141 1FB5  
     __size_of_I2C2_FunctionComplete 0013                                i1l134 09F1  
                              i1l126 09A8                                i1l206 001B  
                              i1l129 09BD                      ___awdiv@counter 002C  
      __end_of_I2C2_FunctionComplete 1FB9                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013              EMC1001_StandbyMode@data 0031  
                       ___lltoft@exp 002D                        ___awtoft@sign 002D  
                    __end_of_dpowers 196A                                _cputs 1FB9  
                              _scale 0DBA                      __end_of_isdigit 1FA6  
                      ___ftpack@sign 0024                                _putch 1F3F  
       I2C2_MasterReadTRBBuild@pdata 0020       EMC1001_SetThermHysteresis@data 0030  
                EMC1001_Read@timeOut 002A                                puts@s 0025  
                              status 0003                                wtemp0 007E  
            EMC1001_PrintInfo@templo 00E0                    ??_I2C2_Initialize 0020  
                    __initialization 0022          ??_EMC1001_SetConversionRate 002F  
                       __end_of_main 1566               ??_I2C2_MasterTRBInsert 0022  
                      _EMC1001_MASK1 1046                         __end_of_puts 100C  
                     ??_EUSART_Write 0020          ?_INTERRUPT_InterruptManager 0077  
                      _EMC1001_Write 12F6     __end_of_I2C2_MasterWriteTRBBuild 10EE  
                             ??_main 00E2                        ___fttol@sign1 0057  
                        _i2c2_object 0070                               ??_puts 0027  
               __size_of__tdiv_to_l_ 00B6                    EMC1001_Write@data 0027  
                             ?_cputs 0022                     ___llmod@dividend 0032  
                             ?_scale 0046                               i1S4674 1A4A  
       __end_of_EMC1001_SMBusTimeout 0816                     ___awdiv@dividend 0029  
                   __end_of___awtoft 10CB                               _ANSELA 0F38  
                             ?_putch 0077                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 14E8  
                 __CFG_RSTOSC$HFINT1 0000                               _RC1REG 0119  
                             _RC0PPS 0F20                               _RC1STA 011D  
                   __end_of___lltoft 1118                               _RC3PPS 0F23  
                             _RC4PPS 0F24         __end_of_I2C2_BusCollisionISR 0004  
                             _ODCONA 0F3A                               _ODCONB 0F45  
                             _ODCONC 0F50                               i1l3216 1FE5  
                             i1l3710 0996                               i1l3702 0984  
                             i1l3730 09D1                               i1l3644 08FC  
                             i1l3750 09FC                               i1l3734 09D8  
                             i1l3718 09B0                               i1l3662 092F  
                             i1l3656 091C                       __CFG_WDTCCS$SC 0000  
                             i1l3746 09F5                               i1l3748 09F8  
                             i1l3676 095E                               i1l3756 0A04  
                             i1l3696 0978                               _OSCFRQ 0893  
                             _TX1REG 011A                               _TX1STA 011E  
             ?_EMC1001_SetThermLimit 0077                       __CFG_PWRTE$OFF 0000  
                   __end_of__powers_ 1991                       ?_EMC1001_MASK1 0077  
                             ___ftge 11A4                               ___wmul 100C  
                          ??___awdiv 002B                            ??___ftadd 005A  
                     _p_i2c2_current 0075                       __CFG_STVREN$ON 0000  
                          ??___awmod 0024            ??_I2C2_MasterReadTRBBuild 0024  
                          ??___ftneg 0023                            ??___lldiv 0028  
                          ??___ftmul 003C                            ??___llmod 0036  
                          ??___ftsub 0067                            ??___fttol 0053  
 __end_of_EMC1001_SetThermHysteresis 1F68           _EMC1001_SetThermHysteresis 1F5E  
                             _fround 0A10                            ?_I2C2_ISR 0077  
                     ?_EMC1001_Write 0027                     ___awdiv@quotient 002E  
                    ___awmod@divisor 0020             I2C2_Stop@completion_code 0078  
                    ___awmod@counter 0025                               _printf 003E  
      I2C2_MasterReadTRBBuild@length 0021              _EMC1001_SetTempLowLimit 1174  
              ___ftmul@f3_as_product 0041                               cputs@s 0022  
                          ??_isdigit 0020            _EMC1001_SetConversionRate 1F89  
                  _SYSTEM_Initialize 1F7D              __end_of__initialization 003A  
                         ___ftadd@f1 0054                           ___ftadd@f2 0057  
                         ___ftge@ff1 0020                           ___ftge@ff2 0023  
   __end_of_EMC1001_SetTempHighLimit 1174                   ?_SYSTEM_Initialize 0077  
                    EMC1001_Read@reg 002B                      EMC1001_Read@trb 0120  
                         ___ftneg@f1 0020                           ___awtoft@c 0028  
                         ___ftmul@f1 0036                           ___ftmul@f2 0039  
                         ___ftsub@f1 0064                           ___ftsub@f2 0061  
            EMC1001_PrintTemp@templo 00CC                           ___fttol@f1 004F  
                     __pcstackCOMMON 0077                  ??_SYSTEM_Initialize 0021  
                         ___lltoft@c 0028                        __end_of_cputs 1FD0  
                      __end_of_scale 1000                       _i2c2_trb_count 00E7  
                      __end_of_putch 1F45                           ??_I2C2_ISR 0079  
                     _EMC1001_THERM2 1088                           __div_to_l_ 16E3  
           _I2C2_MasterWriteTRBBuild 10CB         I2C2_MasterWriteTRBBuild@ptrb 0026  
                    __div_to_l_@exp1 0033                      __div_to_l_@cntr 0032  
                            ??_cputs 0024                              ??_scale 0049  
          __end_of_SYSTEM_Initialize 1F89                      __div_to_l_@quot 002E  
                            ??_putch 0021                _EMC1001_PrintInfo$778 00D9  
              _EMC1001_PrintInfo$788 00DB                           __pbssBANK0 006F  
                         __pbssBANK1 00E4                           __pbssBANK2 0120  
               __end_of_EUSART_Write 1F5E                        __div_to_l_@f1 0020  
                      __div_to_l_@f2 0023                      ??_EMC1001_MASK1 002F  
                         __pmaintext 14E8                              ?___ftge 0020  
                            ?___wmul 0030                      __CFG_PPS1WAY$ON 0000  
             __end_of_EMC1001_THERM2 10A9                      ??_EMC1001_Write 0028  
                         __pintentry 0004                 EMC1001_Write@timeOut 002B  
          ??_EMC1001_SetTempLowLimit 0031                 _EMC1001_SMBusTimeout 0803  
                            ?_fround 0046                       _SSP2DATPPSbits 0EC9  
                          ?___awtoft 0028                            ?___ftpack 0020  
               _I2C2_BusCollisionISR 0003                              ?_printf 00A0  
                          ?___lltoft 0028                              _SP1BRGH 011C  
                            _SP1BRGL 011B    I2C2_ISR@i2c_10bit_address_restart 00E4  
                            _OSCCON1 088D                              _OSCCON3 088F  
                          _I2C2_Stop 1FD0                       _SSP2CLKPPSbits 0EC8  
                            _OSCTUNE 0892                              _SSP2ADD 0197  
                            _PPSLOCK 0E8F                              _SSP2BUF 0196  
       __size_of_EMC1001_StandbyMode 0021                      _I2C2_Initialize 1FE8  
             I2C2_MasterRead@trBlock 012C                    _EMC1001_PrintInfo 0B76  
                  __end_of__npowers_ 19B8                    _EMC1001_PrintTemp 1430  
                         _scale$1382 004B             _EMC1001_SetTempHighLimit 1144  
                 ?_EMC1001_PrintInfo 0077                   ?_EMC1001_PrintTemp 0077  
               __CFG_SCANE$available 0000                      __size_of___ftge 003C  
                            ___awdiv 138B                              ___ftadd 15ED  
                            ___awmod 1269                      ?_EMC1001_THERM2 0077  
                            ___ftneg 1F4B                              ___lldiv 13DD  
                    __size_of___wmul 001C                              ___ftmul 0816  
                            ___llmod 11E0                              ___ftsub 1028  
                            ___fttol 1566                ?_EMC1001_SMBusTimeout 0077  
              ?_I2C2_BusCollisionISR 0077                           ??___awtoft 002B  
                         ??___ftpack 0025                      __size_of_fround 0166  
          I2C2_MasterTRBInsert@count 0023                           ??___lltoft 002C  
                            __ptext1 1000                              __ptext2 1FB9  
                            __ptext3 1F7D                              __ptext4 12AF  
                            __ptext5 07F7                              __ptext6 1FE8  
                            __ptext7 1F72                              __ptext8 1088  
                            __ptext9 1067                  ??_EMC1001_PrintInfo 00C9  
          I2C2_MasterTRBInsert@pflag 0021                  ??_EMC1001_PrintTemp 006D  
                    __size_of_printf 0703                    __end_of_hexpowers 1820  
                        ?__div_to_l_ 0020                              _dpowers 1942  
              _OSCILLATOR_Initialize 07F7                              _isdigit 1F97  
                   ___awmod@dividend 0022             ??_PIN_MANAGER_Initialize 0020  
                         ?_I2C2_Stop 0077                _I2C2_FunctionComplete 1FA6  
         __size_of_SYSTEM_Initialize 000C                              clrloop0 1F46  
               end_of_initialization 003A                  EMC1001_PrintInfo@cr 00D6  
            ??_EMC1001_SetThermLimit 002F            __end_of_EMC1001_PrintInfo 0DBA  
          __end_of_EMC1001_PrintTemp 1483                    _EUSART_Initialize 1F72  
                    ___lldiv@divisor 0020                      ___lldiv@counter 002D  
                 ?_EUSART_Initialize 0077                   _p_i2c2_trb_current 0076  
                            printf@c 00C8                              printf@f 00A0  
             I2C2_ISR@i2c_bytes_left 00E5                       __tdiv_to_l_@f1 0020  
                     __tdiv_to_l_@f2 0023                           _printf$861 00B0  
      __size_of_I2C2_MasterTRBInsert 0046                __CFG_WDTCPS$WDTCPS_31 0000  
        ?_EMC1001_SetThermHysteresis 0077                        ??__tdiv_to_l_ 0026  
                ??_EUSART_Initialize 0020                            _PORTAbits 000C  
                  __size_of_I2C2_ISR 0146              __end_of_I2C2_Initialize 2000  
              __size_of_EUSART_Write 000A                     __CFG_FEXTOSC$OFF 0000  
          __end_of_EUSART_Initialize 1F7D                  __size_of__div_to_l_ 011D  
                        ___ftmul@exp 0040               ??_EMC1001_SMBusTimeout 002F  
             ??_I2C2_BusCollisionISR 0077                       __end_of___ftge 11E0  
         ??_I2C2_MasterWriteTRBBuild 0024                       __end_of___wmul 1028  
                       _EUSART_Write 1F54               ?_OSCILLATOR_Initialize 0077  
                     __end_of_fround 0B76                       __end_of_printf 0741  
             ?_I2C2_FunctionComplete 0077                  start_initialization 0022  
                        ??_I2C2_Stop 0077      __size_of_PIN_MANAGER_Initialize 0047  
                __end_of__tdiv_to_l_ 07F7                          putch@txData 0021  
                   EMC1001_Write@reg 002A                     EMC1001_Write@trb 0128  
      EMC1001_SetConversionRate@data 0030           __size_of_EMC1001_PrintInfo 0244  
         __size_of_EMC1001_PrintTemp 0053                      ___llmod@divisor 002E  
                    ___llmod@counter 0037      I2C2_MasterWriteTRBBuild@address 0022  
           ?_I2C2_MasterReadTRBBuild 0020                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0026                        ?_EMC1001_Read 0027  
                           ??___wmul 0034        I2C2_MasterWriteTRBBuild@pdata 0020  
               I2C2_ISR@pi2c_buf_ptr 00E6            EMC1001_SetTempLowLimit@HB 0035  
          EMC1001_SetTempLowLimit@LB 0030                  _EMC1001_StandbyMode 1067  
                           ??_fround 0049                             ??_printf 0067  
             _EMC1001_PrintInfo$1378 00DD                           fround@prec 0053  
                  __size_of___awtoft 0022                    __size_of___ftpack 0065  
                  __size_of___lltoft 002A                          __pbssCOMMON 0070  
                   ?_I2C2_Initialize 0077                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
               EMC1001_THERM2@enable 0030                         _isdigit$1116 0020  
               ?_EMC1001_StandbyMode 0077                        _i2c2_tr_queue 00E8  
         ??_EMC1001_SetTempHighLimit 0031           __size_of_EUSART_Initialize 000B  
             _EMC1001_PrintTemp$1379 00C9                   EMC1001_THERM2@data 0031  
                   ??_EMC1001_THERM2 002F               _PIN_MANAGER_Initialize 12AF  
                EMC1001_Write@buffer 002C                __end_of_EMC1001_MASK1 1067  
                     ??_EMC1001_Read 0028                             ?___awdiv 0027  
                           ?___ftadd 0054                             ?___awmod 0020  
                EMC1001_Write@status 002E                             ?___ftneg 0020  
                           ?___lldiv 0020                             ?___ftmul 0036  
                           ?___llmod 002E                             ?___ftsub 0061  
                          __npowers_ 1991                             ?___fttol 004F  
              __end_of_EMC1001_Write 133E                             _I2C2_ISR 08CA  
       ??_INTERRUPT_InterruptManager 007D                          __tdiv_to_l_ 0741  
                          __pswtext1 1A4A                         ??__div_to_l_ 0026  
                           _BAUD1CON 011F                             ?_isdigit 0077  
                          _hexpowers 1800                ??_EMC1001_StandbyMode 002F  
                     __size_of_cputs 0017                       __size_of_scale 0246  
                     __size_of_putch 0006      __end_of_I2C2_MasterReadTRBBuild 1144  
     __size_of_EMC1001_SetThermLimit 000A        __end_of_EMC1001_SetThermLimit 1F72  
                     ___wmul@product 0034                             _LATAbits 0016  
                          clear_ram0 1F45                             _PIE3bits 0719  
__size_of_INTERRUPT_InterruptManager 001C                   __end_of__div_to_l_ 1800  
           ?_EMC1001_SetTempLowLimit 0030                             _PIR3bits 070F  
                           _SSP2CON1 019A                             _SSP2CON3 019C  
                           _SSP2STAT 0199        I2C2_MasterTRBInsert@ptrb_list 0020  
                  ___wmul@multiplier 0030                    EMC1001_MASK1@data 0031  
                         printf@flag 00B7                           printf@fval 00C3  
                         printf@prec 00C6         __end_of_I2C2_MasterTRBInsert 1269  
              EMC1001_PrintInfo@data 00E1                EMC1001_PrintInfo@temp 00DF  
     I2C2_MasterWriteTRBBuild@length 0021            EMC1001_SetThermLimit@data 0030  
            ??_OSCILLATOR_Initialize 0020                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0046  
                   __size_of___ftneg 0009                     __size_of___lldiv 0053  
                   __size_of___ftmul 00B4                     __size_of___llmod 0043  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                           ___awtoft 10A9                             ___ftpack 1483  
              EMC1001_PrintTemp@temp 00CB              ??_I2C2_FunctionComplete 0077  
                        _fround$1380 0050                          _fround$1381 004D  
                           ___lltoft 10EE                     __size_of_isdigit 000F  
                           __ptext10 1F68                             __ptext11 1F5E  
                           __ptext20 1F3F                             __ptext12 1174  
                           __ptext21 1F54                             __ptext13 1144  
                           __ptext30 10EE                             __ptext22 1F97  
                           __ptext14 1F89                             __ptext31 11E0  
                           __ptext23 0A10                             __ptext15 0803  
                           __ptext40 1046                             __ptext32 13DD  
                           __ptext24 100C                             __ptext16 1430  
                           __ptext41 12F6                             __ptext33 1566  
                           __ptext25 0816                             __ptext17 0B76  
                           __ptext50 0003                             __ptext42 133E  
                           __ptext34 1028                             __ptext26 1269  
                           __ptext18 003E                             __ptext43 10CB  
                           __ptext35 15ED                             __ptext27 138B  
                           __ptext19 0DBA                             __ptext44 1223  
                           __ptext36 1F4B                             __ptext28 0741  
                           __ptext45 1118                             __ptext37 11A4  
                           __ptext29 16E3                             __ptext38 10A9  
                           __ptext47 08CA                             __ptext39 1483  
                           __ptext48 1FD0                             __ptext49 1FA6  
               __end_of_EMC1001_Read 138B                             __powers_ 196A  
                       _SSP2CON1bits 019A                         _SSP2CON2bits 019B  
    __end_of_EMC1001_SetTempLowLimit 11A4                        __size_of_main 007E  
                      __size_of_puts 000C                 __CFG_WDTCWS$WDTCWS_7 0000  
 __size_of_EMC1001_SetConversionRate 000E                           _RC1STAbits 011D  
         ?_EMC1001_SetConversionRate 0077                             int$flags 007E  
 __end_of_INTERRUPT_InterruptManager 0020           _INTERRUPT_InterruptManager 0004  
      __size_of_EMC1001_SMBusTimeout 0013                            printf@idx 00AF  
                          printf@len 00B2                            printf@exp 00B9  
                          printf@val 00BF              I2C2_MasterWrite@trBlock 0130  
      __size_of_I2C2_BusCollisionISR 0001          PIN_MANAGER_Initialize@state 0020  
         EMC1001_SMBusTimeout@enable 0030     __size_of_I2C2_MasterReadTRBBuild 002C  
                         _INTCONbits 000B                       __pstringtext10 19D9  
                     __pstringtext11 19F9                       __pstringtext20 1AD5  
                     __pstringtext12 1A17                       __pstringtext21 1ADE  
                     __pstringtext13 1A32                       __pstringtext22 1AE6  
                     __pstringtext14 1A62                       __pstringtext23 1AED  
                     __pstringtext15 1A79                       __pstringtext24 1AF0  
                     __pstringtext16 1A8F                       __pstringtext25 0000  
                     __pstringtext17 1AA3                       __pstringtext18 1AB4  
         EMC1001_SetTempHighLimit@HB 0035                       __pstringtext19 1AC5  
         EMC1001_SetTempHighLimit@LB 0030                             isdigit@c 0021  
                           scale@scl 004E    __size_of_I2C2_MasterWriteTRBBuild 0023  
          ?_I2C2_MasterWriteTRBBuild 0020                             intlevel1 0000  
                   __tdiv_to_l_@exp1 002F                     __tdiv_to_l_@cntr 002E  
                   __tdiv_to_l_@quot 002A                  I2C2_ISR@i2c_address 00EB  
                   ___lldiv@dividend 0024              ?_PIN_MANAGER_Initialize 0077  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
  __end_of_EMC1001_SetConversionRate 1F97                             printf@ap 00B6  
                           printf@cp 00B4                 _I2C2_MasterTRBInsert 1223  
                       ?__tdiv_to_l_ 0020                        __pstringtext1 1942  
                      __pstringtext2 196A                        __pstringtext3 1991  
                      __pstringtext4 1800                        __pstringtext5 186B  
                      __pstringtext6 18AC                        __pstringtext7 18E3  
                      __pstringtext8 1918                        __pstringtext9 19B8  
                        _printf$1383 00AC                     ___lldiv@quotient 0029  
          EMC1001_StandbyMode@enable 0030                   EUSART_Write@txData 0020  
     __end_of_PIN_MANAGER_Initialize 12F6             __size_of_I2C2_Initialize 0018  
                 __size_of_I2C2_Stop 0018  
